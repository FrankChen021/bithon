/*
 * This file is generated by jOOQ.
 */
package org.bithon.component.db.jooq.tables;


import org.bithon.component.db.jooq.DefaultSchema;
import org.bithon.component.db.jooq.Indexes;
import org.bithon.component.db.jooq.Keys;
import org.bithon.component.db.jooq.tables.records.BithonApplicationTopoRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * TOPO
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BithonApplicationTopo extends TableImpl<BithonApplicationTopoRecord> {

    private static final long serialVersionUID = 1643131964;

    /**
     * The reference instance of <code>bithon_application_topo</code>
     */
    public static final BithonApplicationTopo BITHON_APPLICATION_TOPO = new BithonApplicationTopo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BithonApplicationTopoRecord> getRecordType() {
        return BithonApplicationTopoRecord.class;
    }

    /**
     * The column <code>bithon_application_topo.id</code>.
     */
    public final TableField<BithonApplicationTopoRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>bithon_application_topo.src_endpoint</code>.
     */
    public final TableField<BithonApplicationTopoRecord, String> SRC_ENDPOINT = createField(DSL.name("src_endpoint"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>bithon_application_topo.src_endpoint_type</code>. 0:Application; 1:MySQL; 2:REDIS; 3:Mongo;...
     */
    public final TableField<BithonApplicationTopoRecord, String> SRC_ENDPOINT_TYPE = createField(DSL.name("src_endpoint_type"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "0:Application; 1:MySQL; 2:REDIS; 3:Mongo;...");

    /**
     * The column <code>bithon_application_topo.dst_endpoint</code>.
     */
    public final TableField<BithonApplicationTopoRecord, String> DST_ENDPOINT = createField(DSL.name("dst_endpoint"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>bithon_application_topo.dst_endpoint_type</code>. 0:Application; 1:MySQL 2:REDIS; 3:Mongo;...
     */
    public final TableField<BithonApplicationTopoRecord, String> DST_ENDPOINT_TYPE = createField(DSL.name("dst_endpoint_type"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "0:Application; 1:MySQL 2:REDIS; 3:Mongo;...");

    /**
     * The column <code>bithon_application_topo.created_at</code>.
     */
    public final TableField<BithonApplicationTopoRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>bithon_application_topo.updated_at</code>.
     */
    public final TableField<BithonApplicationTopoRecord, Timestamp> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>bithon_application_topo</code> table reference
     */
    public BithonApplicationTopo() {
        this(DSL.name("bithon_application_topo"), null);
    }

    /**
     * Create an aliased <code>bithon_application_topo</code> table reference
     */
    public BithonApplicationTopo(String alias) {
        this(DSL.name(alias), BITHON_APPLICATION_TOPO);
    }

    /**
     * Create an aliased <code>bithon_application_topo</code> table reference
     */
    public BithonApplicationTopo(Name alias) {
        this(alias, BITHON_APPLICATION_TOPO);
    }

    private BithonApplicationTopo(Name alias, Table<BithonApplicationTopoRecord> aliased) {
        this(alias, aliased, null);
    }

    private BithonApplicationTopo(Name alias, Table<BithonApplicationTopoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("TOPO"));
    }

    public <O extends Record> BithonApplicationTopo(Table<O> child, ForeignKey<O, BithonApplicationTopoRecord> key) {
        super(child, key, BITHON_APPLICATION_TOPO);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BITHON_APPLICATION_TOPO_IDX_CREATED_AT, Indexes.BITHON_APPLICATION_TOPO_IDX_TOPO, Indexes.BITHON_APPLICATION_TOPO_IDX_UPDATED_AT, Indexes.BITHON_APPLICATION_TOPO_PRIMARY);
    }

    @Override
    public Identity<BithonApplicationTopoRecord, Long> getIdentity() {
        return Keys.IDENTITY_BITHON_APPLICATION_TOPO;
    }

    @Override
    public UniqueKey<BithonApplicationTopoRecord> getPrimaryKey() {
        return Keys.KEY_BITHON_APPLICATION_TOPO_PRIMARY;
    }

    @Override
    public List<UniqueKey<BithonApplicationTopoRecord>> getKeys() {
        return Arrays.<UniqueKey<BithonApplicationTopoRecord>>asList(Keys.KEY_BITHON_APPLICATION_TOPO_PRIMARY, Keys.KEY_BITHON_APPLICATION_TOPO_IDX_TOPO);
    }

    @Override
    public BithonApplicationTopo as(String alias) {
        return new BithonApplicationTopo(DSL.name(alias), this);
    }

    @Override
    public BithonApplicationTopo as(Name alias) {
        return new BithonApplicationTopo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonApplicationTopo rename(String name) {
        return new BithonApplicationTopo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonApplicationTopo rename(Name name) {
        return new BithonApplicationTopo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, String, Timestamp, Timestamp> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
