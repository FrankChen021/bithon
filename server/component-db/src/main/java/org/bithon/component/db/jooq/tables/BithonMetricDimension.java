/*
 * This file is generated by jOOQ.
 */
package org.bithon.component.db.jooq.tables;


import org.bithon.component.db.jooq.DefaultSchema;
import org.bithon.component.db.jooq.Indexes;
import org.bithon.component.db.jooq.Keys;
import org.bithon.component.db.jooq.tables.records.BithonMetricDimensionRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Metric Dimension
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BithonMetricDimension extends TableImpl<BithonMetricDimensionRecord> {

    private static final long serialVersionUID = -1706558904;

    /**
     * The reference instance of <code>bithon_metric_dimension</code>
     */
    public static final BithonMetricDimension BITHON_METRIC_DIMENSION = new BithonMetricDimension();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BithonMetricDimensionRecord> getRecordType() {
        return BithonMetricDimensionRecord.class;
    }

    /**
     * The column <code>bithon_metric_dimension.id</code>.
     */
    public final TableField<BithonMetricDimensionRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>bithon_metric_dimension.data_source</code>.
     */
    public final TableField<BithonMetricDimensionRecord, String> DATA_SOURCE = createField(DSL.name("data_source"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>bithon_metric_dimension.dimension_name</code>.
     */
    public final TableField<BithonMetricDimensionRecord, String> DIMENSION_NAME = createField(DSL.name("dimension_name"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>bithon_metric_dimension.dimension_value</code>.
     */
    public final TableField<BithonMetricDimensionRecord, String> DIMENSION_VALUE = createField(DSL.name("dimension_value"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>bithon_metric_dimension.created_at</code>.
     */
    public final TableField<BithonMetricDimensionRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>bithon_metric_dimension.updated_at</code>.
     */
    public final TableField<BithonMetricDimensionRecord, Timestamp> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>bithon_metric_dimension</code> table reference
     */
    public BithonMetricDimension() {
        this(DSL.name("bithon_metric_dimension"), null);
    }

    /**
     * Create an aliased <code>bithon_metric_dimension</code> table reference
     */
    public BithonMetricDimension(String alias) {
        this(DSL.name(alias), BITHON_METRIC_DIMENSION);
    }

    /**
     * Create an aliased <code>bithon_metric_dimension</code> table reference
     */
    public BithonMetricDimension(Name alias) {
        this(alias, BITHON_METRIC_DIMENSION);
    }

    private BithonMetricDimension(Name alias, Table<BithonMetricDimensionRecord> aliased) {
        this(alias, aliased, null);
    }

    private BithonMetricDimension(Name alias, Table<BithonMetricDimensionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Metric Dimension"));
    }

    public <O extends Record> BithonMetricDimension(Table<O> child, ForeignKey<O, BithonMetricDimensionRecord> key) {
        super(child, key, BITHON_METRIC_DIMENSION);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BITHON_METRIC_DIMENSION_IDX_CREATED_AT, Indexes.BITHON_METRIC_DIMENSION_IDX_DIMENSION, Indexes.BITHON_METRIC_DIMENSION_IDX_UPDATED_AT, Indexes.BITHON_METRIC_DIMENSION_PRIMARY);
    }

    @Override
    public Identity<BithonMetricDimensionRecord, Long> getIdentity() {
        return Keys.IDENTITY_BITHON_METRIC_DIMENSION;
    }

    @Override
    public UniqueKey<BithonMetricDimensionRecord> getPrimaryKey() {
        return Keys.KEY_BITHON_METRIC_DIMENSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<BithonMetricDimensionRecord>> getKeys() {
        return Arrays.<UniqueKey<BithonMetricDimensionRecord>>asList(Keys.KEY_BITHON_METRIC_DIMENSION_PRIMARY, Keys.KEY_BITHON_METRIC_DIMENSION_IDX_DIMENSION);
    }

    @Override
    public BithonMetricDimension as(String alias) {
        return new BithonMetricDimension(DSL.name(alias), this);
    }

    @Override
    public BithonMetricDimension as(Name alias) {
        return new BithonMetricDimension(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonMetricDimension rename(String name) {
        return new BithonMetricDimension(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonMetricDimension rename(Name name) {
        return new BithonMetricDimension(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, Timestamp, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
