/*
 * This file is generated by jOOQ.
 */
package org.bithon.server.storage.jdbc.common.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.bithon.server.storage.jdbc.common.jooq.DefaultSchema;
import org.bithon.server.storage.jdbc.common.jooq.Keys;
import org.bithon.server.storage.jdbc.common.jooq.tables.records.BithonAlertStateRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Alerting State
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BithonAlertState extends TableImpl<BithonAlertStateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bithon_alert_state</code>
     */
    public static final BithonAlertState BITHON_ALERT_STATE = new BithonAlertState();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BithonAlertStateRecord> getRecordType() {
        return BithonAlertStateRecord.class;
    }

    /**
     * The column <code>bithon_alert_state.alert_id</code>.
     */
    public final TableField<BithonAlertStateRecord, String> ALERT_ID = createField(DSL.name("alert_id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>bithon_alert_state.alert_status</code>. See the
     * AlertStatus enum
     */
    public final TableField<BithonAlertStateRecord, Integer> ALERT_STATUS = createField(DSL.name("alert_status"), SQLDataType.INTEGER.nullable(false), this, "See the AlertStatus enum");

    /**
     * The column <code>bithon_alert_state.last_alert_at</code>.
     */
    public final TableField<BithonAlertStateRecord, LocalDateTime> LAST_ALERT_AT = createField(DSL.name("last_alert_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>bithon_alert_state.last_record_id</code>. The PK ID in
     * bithon_alert_record table
     */
    public final TableField<BithonAlertStateRecord, String> LAST_RECORD_ID = createField(DSL.name("last_record_id"), SQLDataType.VARCHAR(32), this, "The PK ID in bithon_alert_record table");

    /**
     * The column <code>bithon_alert_state.last_evaluated_at</code>. The last
     * time the alert is evaluated
     */
    public final TableField<BithonAlertStateRecord, LocalDateTime> LAST_EVALUATED_AT = createField(DSL.name("last_evaluated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "The last time the alert is evaluated");

    /**
     * The column <code>bithon_alert_state.update_at</code>. when the record is
     * updated
     */
    public final TableField<BithonAlertStateRecord, LocalDateTime> UPDATE_AT = createField(DSL.name("update_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "when the record is updated");

    /**
     * The column <code>bithon_alert_state.payload</code>. JSON formatted
     * runtime info. See AlertStateObject$Payload to know more
     */
    public final TableField<BithonAlertStateRecord, String> PAYLOAD = createField(DSL.name("payload"), SQLDataType.CLOB, this, "JSON formatted runtime info. See AlertStateObject$Payload to know more");

    private BithonAlertState(Name alias, Table<BithonAlertStateRecord> aliased) {
        this(alias, aliased, null);
    }

    private BithonAlertState(Name alias, Table<BithonAlertStateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Alerting State"), TableOptions.table());
    }

    /**
     * Create an aliased <code>bithon_alert_state</code> table reference
     */
    public BithonAlertState(String alias) {
        this(DSL.name(alias), BITHON_ALERT_STATE);
    }

    /**
     * Create an aliased <code>bithon_alert_state</code> table reference
     */
    public BithonAlertState(Name alias) {
        this(alias, BITHON_ALERT_STATE);
    }

    /**
     * Create a <code>bithon_alert_state</code> table reference
     */
    public BithonAlertState() {
        this(DSL.name("bithon_alert_state"), null);
    }

    public <O extends Record> BithonAlertState(Table<O> child, ForeignKey<O, BithonAlertStateRecord> key) {
        super(child, key, BITHON_ALERT_STATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<UniqueKey<BithonAlertStateRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_BITHON_ALERT_STATE_UQ_ALERT_ID);
    }

    @Override
    public BithonAlertState as(String alias) {
        return new BithonAlertState(DSL.name(alias), this);
    }

    @Override
    public BithonAlertState as(Name alias) {
        return new BithonAlertState(alias, this);
    }

    @Override
    public BithonAlertState as(Table<?> alias) {
        return new BithonAlertState(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonAlertState rename(String name) {
        return new BithonAlertState(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonAlertState rename(Name name) {
        return new BithonAlertState(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonAlertState rename(Table<?> name) {
        return new BithonAlertState(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, Integer, LocalDateTime, String, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super String, ? super Integer, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super String, ? super Integer, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
