/*
 * This file is generated by jOOQ.
 */
package org.bithon.server.storage.jdbc.common.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.bithon.server.storage.jdbc.common.jooq.DefaultSchema;
import org.bithon.server.storage.jdbc.common.jooq.Indexes;
import org.bithon.server.storage.jdbc.common.jooq.tables.records.BithonAlertChangeLogRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Change logs of alert
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BithonAlertChangeLog extends TableImpl<BithonAlertChangeLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bithon_alert_change_log</code>
     */
    public static final BithonAlertChangeLog BITHON_ALERT_CHANGE_LOG = new BithonAlertChangeLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BithonAlertChangeLogRecord> getRecordType() {
        return BithonAlertChangeLogRecord.class;
    }

    /**
     * The column <code>bithon_alert_change_log.alert_id</code>. ID of Alert
     * Object
     */
    public final TableField<BithonAlertChangeLogRecord, String> ALERT_ID = createField(DSL.name("alert_id"), SQLDataType.VARCHAR(32).nullable(false), this, "ID of Alert Object");

    /**
     * The column <code>bithon_alert_change_log.action</code>.
     */
    public final TableField<BithonAlertChangeLogRecord, String> ACTION = createField(DSL.name("action"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>bithon_alert_change_log.payload_before</code>. JSON
     * formatted
     */
    public final TableField<BithonAlertChangeLogRecord, String> PAYLOAD_BEFORE = createField(DSL.name("payload_before"), SQLDataType.CLOB, this, "JSON formatted");

    /**
     * The column <code>bithon_alert_change_log.payload_after</code>. JSON
     * formatted
     */
    public final TableField<BithonAlertChangeLogRecord, String> PAYLOAD_AFTER = createField(DSL.name("payload_after"), SQLDataType.CLOB, this, "JSON formatted");

    /**
     * The column <code>bithon_alert_change_log.editor</code>.
     */
    public final TableField<BithonAlertChangeLogRecord, String> EDITOR = createField(DSL.name("editor"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>bithon_alert_change_log.created_at</code>. Create
     * timestamp
     */
    public final TableField<BithonAlertChangeLogRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "Create timestamp");

    private BithonAlertChangeLog(Name alias, Table<BithonAlertChangeLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private BithonAlertChangeLog(Name alias, Table<BithonAlertChangeLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Change logs of alert"), TableOptions.table());
    }

    /**
     * Create an aliased <code>bithon_alert_change_log</code> table reference
     */
    public BithonAlertChangeLog(String alias) {
        this(DSL.name(alias), BITHON_ALERT_CHANGE_LOG);
    }

    /**
     * Create an aliased <code>bithon_alert_change_log</code> table reference
     */
    public BithonAlertChangeLog(Name alias) {
        this(alias, BITHON_ALERT_CHANGE_LOG);
    }

    /**
     * Create a <code>bithon_alert_change_log</code> table reference
     */
    public BithonAlertChangeLog() {
        this(DSL.name("bithon_alert_change_log"), null);
    }

    public <O extends Record> BithonAlertChangeLog(Table<O> child, ForeignKey<O, BithonAlertChangeLogRecord> key) {
        super(child, key, BITHON_ALERT_CHANGE_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BITHON_ALERT_CHANGE_LOG_IDX_ALERT_CHANGE_LOG_ALERT_ID, Indexes.BITHON_ALERT_CHANGE_LOG_IDX_ALERT_CHANGE_LOG_CREATED_AT);
    }

    @Override
    public BithonAlertChangeLog as(String alias) {
        return new BithonAlertChangeLog(DSL.name(alias), this);
    }

    @Override
    public BithonAlertChangeLog as(Name alias) {
        return new BithonAlertChangeLog(alias, this);
    }

    @Override
    public BithonAlertChangeLog as(Table<?> alias) {
        return new BithonAlertChangeLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonAlertChangeLog rename(String name) {
        return new BithonAlertChangeLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonAlertChangeLog rename(Name name) {
        return new BithonAlertChangeLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonAlertChangeLog rename(Table<?> name) {
        return new BithonAlertChangeLog(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
