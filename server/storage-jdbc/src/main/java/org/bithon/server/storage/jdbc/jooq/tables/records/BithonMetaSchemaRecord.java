/*
 * This file is generated by jOOQ.
 */
package org.bithon.server.storage.jdbc.jooq.tables.records;


import java.sql.Timestamp;

import org.bithon.server.storage.jdbc.jooq.tables.BithonMetaSchema;
import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BithonMetaSchemaRecord extends TableRecordImpl<BithonMetaSchemaRecord> implements Record3<Timestamp, String, String> {

    private static final long serialVersionUID = 1308901449;

    /**
     * Setter for <code>bithon_meta_schema.timestamp</code>. Created Timestamp
     */
    public void setTimestamp(Timestamp value) {
        set(0, value);
    }

    /**
     * Getter for <code>bithon_meta_schema.timestamp</code>. Created Timestamp
     */
    public Timestamp getTimestamp() {
        return (Timestamp) get(0);
    }

    /**
     * Setter for <code>bithon_meta_schema.name</code>. Schema Name
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>bithon_meta_schema.name</code>. Schema Name
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>bithon_meta_schema.schema</code>. Schema in JSON
     */
    public void setSchema(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>bithon_meta_schema.schema</code>. Schema in JSON
     */
    public String getSchema() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Timestamp, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Timestamp, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Timestamp> field1() {
        return BithonMetaSchema.BITHON_META_SCHEMA.TIMESTAMP;
    }

    @Override
    public Field<String> field2() {
        return BithonMetaSchema.BITHON_META_SCHEMA.NAME;
    }

    @Override
    public Field<String> field3() {
        return BithonMetaSchema.BITHON_META_SCHEMA.SCHEMA;
    }

    @Override
    public Timestamp component1() {
        return getTimestamp();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getSchema();
    }

    @Override
    public Timestamp value1() {
        return getTimestamp();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getSchema();
    }

    @Override
    public BithonMetaSchemaRecord value1(Timestamp value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public BithonMetaSchemaRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public BithonMetaSchemaRecord value3(String value) {
        setSchema(value);
        return this;
    }

    @Override
    public BithonMetaSchemaRecord values(Timestamp value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BithonMetaSchemaRecord
     */
    public BithonMetaSchemaRecord() {
        super(BithonMetaSchema.BITHON_META_SCHEMA);
    }

    /**
     * Create a detached, initialised BithonMetaSchemaRecord
     */
    public BithonMetaSchemaRecord(Timestamp timestamp, String name, String schema) {
        super(BithonMetaSchema.BITHON_META_SCHEMA);

        set(0, timestamp);
        set(1, name);
        set(2, schema);
    }
}
