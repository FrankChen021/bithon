/*
 * This file is generated by jOOQ.
 */
package org.bithon.server.storage.jdbc.jooq.tables.records;


import java.sql.Timestamp;

import org.bithon.server.storage.jdbc.jooq.tables.BithonMetaApplicationMetricMap;
import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BithonMetaApplicationMetricMapRecord extends TableRecordImpl<BithonMetaApplicationMetricMapRecord> implements Record3<Timestamp, String, String> {

    private static final long serialVersionUID = 1793663594;

    /**
     * Setter for <code>bithon_meta_application_metric_map.timestamp</code>. update time
     */
    public void setTimestamp(Timestamp value) {
        set(0, value);
    }

    /**
     * Getter for <code>bithon_meta_application_metric_map.timestamp</code>. update time
     */
    public Timestamp getTimestamp() {
        return (Timestamp) get(0);
    }

    /**
     * Setter for <code>bithon_meta_application_metric_map.application</code>.
     */
    public void setApplication(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>bithon_meta_application_metric_map.application</code>.
     */
    public String getApplication() {
        return (String) get(1);
    }

    /**
     * Setter for <code>bithon_meta_application_metric_map.schema</code>. name in bithon_metric_schema
     */
    public void setSchema(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>bithon_meta_application_metric_map.schema</code>. name in bithon_metric_schema
     */
    public String getSchema() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Timestamp, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Timestamp, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Timestamp> field1() {
        return BithonMetaApplicationMetricMap.BITHON_META_APPLICATION_METRIC_MAP.TIMESTAMP;
    }

    @Override
    public Field<String> field2() {
        return BithonMetaApplicationMetricMap.BITHON_META_APPLICATION_METRIC_MAP.APPLICATION;
    }

    @Override
    public Field<String> field3() {
        return BithonMetaApplicationMetricMap.BITHON_META_APPLICATION_METRIC_MAP.SCHEMA;
    }

    @Override
    public Timestamp component1() {
        return getTimestamp();
    }

    @Override
    public String component2() {
        return getApplication();
    }

    @Override
    public String component3() {
        return getSchema();
    }

    @Override
    public Timestamp value1() {
        return getTimestamp();
    }

    @Override
    public String value2() {
        return getApplication();
    }

    @Override
    public String value3() {
        return getSchema();
    }

    @Override
    public BithonMetaApplicationMetricMapRecord value1(Timestamp value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public BithonMetaApplicationMetricMapRecord value2(String value) {
        setApplication(value);
        return this;
    }

    @Override
    public BithonMetaApplicationMetricMapRecord value3(String value) {
        setSchema(value);
        return this;
    }

    @Override
    public BithonMetaApplicationMetricMapRecord values(Timestamp value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BithonMetaApplicationMetricMapRecord
     */
    public BithonMetaApplicationMetricMapRecord() {
        super(BithonMetaApplicationMetricMap.BITHON_META_APPLICATION_METRIC_MAP);
    }

    /**
     * Create a detached, initialised BithonMetaApplicationMetricMapRecord
     */
    public BithonMetaApplicationMetricMapRecord(Timestamp timestamp, String application, String schema) {
        super(BithonMetaApplicationMetricMap.BITHON_META_APPLICATION_METRIC_MAP);

        set(0, timestamp);
        set(1, application);
        set(2, schema);
    }
}
