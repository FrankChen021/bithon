/*
 * This file is generated by jOOQ.
 */
package org.bithon.server.storage.jdbc.common.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.bithon.server.storage.jdbc.common.jooq.DefaultSchema;
import org.bithon.server.storage.jdbc.common.jooq.Indexes;
import org.bithon.server.storage.jdbc.common.jooq.Keys;
import org.bithon.server.storage.jdbc.common.jooq.tables.records.BithonAlertObjectRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Alert Rules
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BithonAlertObject extends TableImpl<BithonAlertObjectRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bithon_alert_object</code>
     */
    public static final BithonAlertObject BITHON_ALERT_OBJECT = new BithonAlertObject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BithonAlertObjectRecord> getRecordType() {
        return BithonAlertObjectRecord.class;
    }

    /**
     * The column <code>bithon_alert_object.alert_id</code>. UUID
     */
    public final TableField<BithonAlertObjectRecord, String> ALERT_ID = createField(DSL.name("alert_id"), SQLDataType.VARCHAR(32).nullable(false), this, "UUID");

    /**
     * The column <code>bithon_alert_object.alert_name</code>. Rule name
     */
    public final TableField<BithonAlertObjectRecord, String> ALERT_NAME = createField(DSL.name("alert_name"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "Rule name");

    /**
     * The column <code>bithon_alert_object.app_name</code>.
     */
    public final TableField<BithonAlertObjectRecord, String> APP_NAME = createField(DSL.name("app_name"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>bithon_alert_object.namespace</code>. namespace of
     * application
     */
    public final TableField<BithonAlertObjectRecord, String> NAMESPACE = createField(DSL.name("namespace"), SQLDataType.VARCHAR(64).nullable(false), this, "namespace of application");

    /**
     * The column <code>bithon_alert_object.disabled</code>.
     */
    public final TableField<BithonAlertObjectRecord, Integer> DISABLED = createField(DSL.name("disabled"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bithon_alert_object.deleted</code>.
     */
    public final TableField<BithonAlertObjectRecord, Integer> DELETED = createField(DSL.name("deleted"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bithon_alert_object.payload</code>. JSON formatted alert
     */
    public final TableField<BithonAlertObjectRecord, String> PAYLOAD = createField(DSL.name("payload"), SQLDataType.CLOB, this, "JSON formatted alert");

    /**
     * The column <code>bithon_alert_object.created_at</code>.
     */
    public final TableField<BithonAlertObjectRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>bithon_alert_object.updated_at</code>.
     */
    public final TableField<BithonAlertObjectRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>bithon_alert_object.last_operator</code>.
     */
    public final TableField<BithonAlertObjectRecord, String> LAST_OPERATOR = createField(DSL.name("last_operator"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    private BithonAlertObject(Name alias, Table<BithonAlertObjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private BithonAlertObject(Name alias, Table<BithonAlertObjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Alert Rules"), TableOptions.table());
    }

    /**
     * Create an aliased <code>bithon_alert_object</code> table reference
     */
    public BithonAlertObject(String alias) {
        this(DSL.name(alias), BITHON_ALERT_OBJECT);
    }

    /**
     * Create an aliased <code>bithon_alert_object</code> table reference
     */
    public BithonAlertObject(Name alias) {
        this(alias, BITHON_ALERT_OBJECT);
    }

    /**
     * Create a <code>bithon_alert_object</code> table reference
     */
    public BithonAlertObject() {
        this(DSL.name("bithon_alert_object"), null);
    }

    public <O extends Record> BithonAlertObject(Table<O> child, ForeignKey<O, BithonAlertObjectRecord> key) {
        super(child, key, BITHON_ALERT_OBJECT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BITHON_ALERT_OBJECT_IDX_ALERT_OBJECT_APP_NAME, Indexes.BITHON_ALERT_OBJECT_IDX_ALERT_OBJECT_UPDATED_AT);
    }

    @Override
    public List<UniqueKey<BithonAlertObjectRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_BITHON_ALERT_OBJECT_UQ_ALERT_OBJECT_ID);
    }

    @Override
    public BithonAlertObject as(String alias) {
        return new BithonAlertObject(DSL.name(alias), this);
    }

    @Override
    public BithonAlertObject as(Name alias) {
        return new BithonAlertObject(alias, this);
    }

    @Override
    public BithonAlertObject as(Table<?> alias) {
        return new BithonAlertObject(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonAlertObject rename(String name) {
        return new BithonAlertObject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonAlertObject rename(Name name) {
        return new BithonAlertObject(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonAlertObject rename(Table<?> name) {
        return new BithonAlertObject(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, String, Integer, Integer, String, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
