/*
 * This file is generated by jOOQ.
 */
package org.bithon.server.storage.jdbc.common.jooq.tables;


import org.bithon.server.storage.jdbc.common.jooq.DefaultSchema;
import org.bithon.server.storage.jdbc.common.jooq.Indexes;
import org.bithon.server.storage.jdbc.common.jooq.Keys;
import org.bithon.server.storage.jdbc.common.jooq.tables.records.BithonMetaSchemaRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BithonMetaSchema extends TableImpl<BithonMetaSchemaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bithon_meta_schema</code>
     */
    public static final BithonMetaSchema BITHON_META_SCHEMA = new BithonMetaSchema();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BithonMetaSchemaRecord> getRecordType() {
        return BithonMetaSchemaRecord.class;
    }

    /**
     * The column <code>bithon_meta_schema.timestamp</code>. Created Timestamp
     */
    public final TableField<BithonMetaSchemaRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "Created Timestamp");

    /**
     * The column <code>bithon_meta_schema.name</code>. Schema Name
     */
    public final TableField<BithonMetaSchemaRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(64).nullable(false), this, "Schema Name");

    /**
     * The column <code>bithon_meta_schema.schema</code>. Schema in JSON
     */
    public final TableField<BithonMetaSchemaRecord, String> SCHEMA = createField(DSL.name("schema"), SQLDataType.CLOB.nullable(false), this, "Schema in JSON");

    /**
     * The column <code>bithon_meta_schema.signature</code>. Signature of schema
     * field, currently SHA256 is applied
     */
    public final TableField<BithonMetaSchemaRecord, String> SIGNATURE = createField(DSL.name("signature"), SQLDataType.VARCHAR(250).nullable(false), this, "Signature of schema field, currently SHA256 is applied");

    private BithonMetaSchema(Name alias, Table<BithonMetaSchemaRecord> aliased) {
        this(alias, aliased, null);
    }

    private BithonMetaSchema(Name alias, Table<BithonMetaSchemaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>bithon_meta_schema</code> table reference
     */
    public BithonMetaSchema(String alias) {
        this(DSL.name(alias), BITHON_META_SCHEMA);
    }

    /**
     * Create an aliased <code>bithon_meta_schema</code> table reference
     */
    public BithonMetaSchema(Name alias) {
        this(alias, BITHON_META_SCHEMA);
    }

    /**
     * Create a <code>bithon_meta_schema</code> table reference
     */
    public BithonMetaSchema() {
        this(DSL.name("bithon_meta_schema"), null);
    }

    public <O extends Record> BithonMetaSchema(Table<O> child, ForeignKey<O, BithonMetaSchemaRecord> key) {
        super(child, key, BITHON_META_SCHEMA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BITHON_META_SCHEMA_IDX_META_SCHEMA_TIMESTAMP);
    }

    @Override
    public List<UniqueKey<BithonMetaSchemaRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_BITHON_META_SCHEMA_IDX_META_SCHEMA_NAME);
    }

    @Override
    public BithonMetaSchema as(String alias) {
        return new BithonMetaSchema(DSL.name(alias), this);
    }

    @Override
    public BithonMetaSchema as(Name alias) {
        return new BithonMetaSchema(alias, this);
    }

    @Override
    public BithonMetaSchema as(Table<?> alias) {
        return new BithonMetaSchema(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonMetaSchema rename(String name) {
        return new BithonMetaSchema(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonMetaSchema rename(Name name) {
        return new BithonMetaSchema(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonMetaSchema rename(Table<?> name) {
        return new BithonMetaSchema(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<LocalDateTime, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super LocalDateTime, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super LocalDateTime, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
