/*
 * This file is generated by jOOQ.
 */
package org.bithon.server.storage.jdbc.common.jooq.tables.records;


import java.time.LocalDateTime;

import org.bithon.server.storage.jdbc.common.jooq.tables.BithonMetricsBaseline;
import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This table keeps the date when the metrics will be kept for ever
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BithonMetricsBaselineRecord extends TableRecordImpl<BithonMetricsBaselineRecord> implements Record3<String, Integer, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>bithon_metrics_baseline.date</code>. On which day the
     * metrics will be kept.In the format of yyyy-MM-dd
     */
    public void setDate(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>bithon_metrics_baseline.date</code>. On which day the
     * metrics will be kept.In the format of yyyy-MM-dd
     */
    public String getDate() {
        return (String) get(0);
    }

    /**
     * Setter for <code>bithon_metrics_baseline.keep_days</code>. How many days
     * the metrics will be kept. If 0, the metrics will be kept forever 
     */
    public void setKeepDays(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>bithon_metrics_baseline.keep_days</code>. How many days
     * the metrics will be kept. If 0, the metrics will be kept forever 
     */
    public Integer getKeepDays() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>bithon_metrics_baseline.create_time</code>. Created
     * Timestamp
     */
    public void setCreateTime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>bithon_metrics_baseline.create_time</code>. Created
     * Timestamp
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, Integer, LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return BithonMetricsBaseline.BITHON_METRICS_BASELINE.DATE;
    }

    @Override
    public Field<Integer> field2() {
        return BithonMetricsBaseline.BITHON_METRICS_BASELINE.KEEP_DAYS;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return BithonMetricsBaseline.BITHON_METRICS_BASELINE.CREATE_TIME;
    }

    @Override
    public String component1() {
        return getDate();
    }

    @Override
    public Integer component2() {
        return getKeepDays();
    }

    @Override
    public LocalDateTime component3() {
        return getCreateTime();
    }

    @Override
    public String value1() {
        return getDate();
    }

    @Override
    public Integer value2() {
        return getKeepDays();
    }

    @Override
    public LocalDateTime value3() {
        return getCreateTime();
    }

    @Override
    public BithonMetricsBaselineRecord value1(String value) {
        setDate(value);
        return this;
    }

    @Override
    public BithonMetricsBaselineRecord value2(Integer value) {
        setKeepDays(value);
        return this;
    }

    @Override
    public BithonMetricsBaselineRecord value3(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public BithonMetricsBaselineRecord values(String value1, Integer value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BithonMetricsBaselineRecord
     */
    public BithonMetricsBaselineRecord() {
        super(BithonMetricsBaseline.BITHON_METRICS_BASELINE);
    }

    /**
     * Create a detached, initialised BithonMetricsBaselineRecord
     */
    public BithonMetricsBaselineRecord(String date, Integer keepDays, LocalDateTime createTime) {
        super(BithonMetricsBaseline.BITHON_METRICS_BASELINE);

        setDate(date);
        setKeepDays(keepDays);
        setCreateTime(createTime);
    }
}
