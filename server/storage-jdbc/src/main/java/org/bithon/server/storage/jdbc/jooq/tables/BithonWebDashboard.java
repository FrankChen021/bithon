/*
 * This file is generated by jOOQ.
 */
package org.bithon.server.storage.jdbc.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.bithon.server.storage.jdbc.jooq.DefaultSchema;
import org.bithon.server.storage.jdbc.jooq.Indexes;
import org.bithon.server.storage.jdbc.jooq.Keys;
import org.bithon.server.storage.jdbc.jooq.tables.records.BithonWebDashboardRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BithonWebDashboard extends TableImpl<BithonWebDashboardRecord> {

    private static final long serialVersionUID = -1407809882;

    /**
     * The reference instance of <code>bithon_web_dashboard</code>
     */
    public static final BithonWebDashboard BITHON_WEB_DASHBOARD = new BithonWebDashboard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BithonWebDashboardRecord> getRecordType() {
        return BithonWebDashboardRecord.class;
    }

    /**
     * The column <code>bithon_web_dashboard.timestamp</code>. Created Timestamp
     */
    public final TableField<BithonWebDashboardRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "Created Timestamp");

    /**
     * The column <code>bithon_web_dashboard.name</code>. Name
     */
    public final TableField<BithonWebDashboardRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "Name");

    /**
     * The column <code>bithon_web_dashboard.payload</code>. Schema in JSON
     */
    public final TableField<BithonWebDashboardRecord, String> PAYLOAD = createField(DSL.name("payload"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "Schema in JSON");

    /**
     * The column <code>bithon_web_dashboard.signature</code>. Signature of payload field, currently SHA256 is applied
     */
    public final TableField<BithonWebDashboardRecord, String> SIGNATURE = createField(DSL.name("signature"), org.jooq.impl.SQLDataType.VARCHAR(250).nullable(false), this, "Signature of payload field, currently SHA256 is applied");

    /**
     * The column <code>bithon_web_dashboard.deleted</code>.
     */
    public final TableField<BithonWebDashboardRecord, Integer> DELETED = createField(DSL.name("deleted"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>bithon_web_dashboard</code> table reference
     */
    public BithonWebDashboard() {
        this(DSL.name("bithon_web_dashboard"), null);
    }

    /**
     * Create an aliased <code>bithon_web_dashboard</code> table reference
     */
    public BithonWebDashboard(String alias) {
        this(DSL.name(alias), BITHON_WEB_DASHBOARD);
    }

    /**
     * Create an aliased <code>bithon_web_dashboard</code> table reference
     */
    public BithonWebDashboard(Name alias) {
        this(alias, BITHON_WEB_DASHBOARD);
    }

    private BithonWebDashboard(Name alias, Table<BithonWebDashboardRecord> aliased) {
        this(alias, aliased, null);
    }

    private BithonWebDashboard(Name alias, Table<BithonWebDashboardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BithonWebDashboard(Table<O> child, ForeignKey<O, BithonWebDashboardRecord> key) {
        super(child, key, BITHON_WEB_DASHBOARD);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BITHON_WEB_DASHBOARD_IDX_WEB_DASHBOARD_NAME, Indexes.BITHON_WEB_DASHBOARD_IDX_WEB_DASHBOARD_TIMESTAMP);
    }

    @Override
    public List<UniqueKey<BithonWebDashboardRecord>> getKeys() {
        return Arrays.<UniqueKey<BithonWebDashboardRecord>>asList(Keys.KEY_BITHON_WEB_DASHBOARD_IDX_WEB_DASHBOARD_NAME);
    }

    @Override
    public BithonWebDashboard as(String alias) {
        return new BithonWebDashboard(DSL.name(alias), this);
    }

    @Override
    public BithonWebDashboard as(Name alias) {
        return new BithonWebDashboard(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonWebDashboard rename(String name) {
        return new BithonWebDashboard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonWebDashboard rename(Name name) {
        return new BithonWebDashboard(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<LocalDateTime, String, String, String, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
