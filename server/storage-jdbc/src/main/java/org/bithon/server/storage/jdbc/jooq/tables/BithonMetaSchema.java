/*
 * This file is generated by jOOQ.
 */
package org.bithon.server.storage.jdbc.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.bithon.server.storage.jdbc.jooq.DefaultSchema;
import org.bithon.server.storage.jdbc.jooq.Indexes;
import org.bithon.server.storage.jdbc.jooq.Keys;
import org.bithon.server.storage.jdbc.jooq.tables.records.BithonMetaSchemaRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BithonMetaSchema extends TableImpl<BithonMetaSchemaRecord> {

    private static final long serialVersionUID = 1823452172;

    /**
     * The reference instance of <code>bithon_meta_schema</code>
     */
    public static final BithonMetaSchema BITHON_META_SCHEMA = new BithonMetaSchema();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BithonMetaSchemaRecord> getRecordType() {
        return BithonMetaSchemaRecord.class;
    }

    /**
     * The column <code>bithon_meta_schema.timestamp</code>. Created Timestamp
     */
    public final TableField<BithonMetaSchemaRecord, Timestamp> TIMESTAMP = createField(DSL.name("timestamp"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "Created Timestamp");

    /**
     * The column <code>bithon_meta_schema.name</code>. Schema Name
     */
    public final TableField<BithonMetaSchemaRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "Schema Name");

    /**
     * The column <code>bithon_meta_schema.schema</code>. Schema in JSON
     */
    public final TableField<BithonMetaSchemaRecord, String> SCHEMA = createField(DSL.name("schema"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "Schema in JSON");

    /**
     * Create a <code>bithon_meta_schema</code> table reference
     */
    public BithonMetaSchema() {
        this(DSL.name("bithon_meta_schema"), null);
    }

    /**
     * Create an aliased <code>bithon_meta_schema</code> table reference
     */
    public BithonMetaSchema(String alias) {
        this(DSL.name(alias), BITHON_META_SCHEMA);
    }

    /**
     * Create an aliased <code>bithon_meta_schema</code> table reference
     */
    public BithonMetaSchema(Name alias) {
        this(alias, BITHON_META_SCHEMA);
    }

    private BithonMetaSchema(Name alias, Table<BithonMetaSchemaRecord> aliased) {
        this(alias, aliased, null);
    }

    private BithonMetaSchema(Name alias, Table<BithonMetaSchemaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BithonMetaSchema(Table<O> child, ForeignKey<O, BithonMetaSchemaRecord> key) {
        super(child, key, BITHON_META_SCHEMA);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BITHON_META_SCHEMA_IDX_META_SCHEMA_NAME, Indexes.BITHON_META_SCHEMA_IDX_META_SCHEMA_TIMESTAMP);
    }

    @Override
    public List<UniqueKey<BithonMetaSchemaRecord>> getKeys() {
        return Arrays.<UniqueKey<BithonMetaSchemaRecord>>asList(Keys.KEY_BITHON_META_SCHEMA_IDX_META_SCHEMA_NAME);
    }

    @Override
    public BithonMetaSchema as(String alias) {
        return new BithonMetaSchema(DSL.name(alias), this);
    }

    @Override
    public BithonMetaSchema as(Name alias) {
        return new BithonMetaSchema(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonMetaSchema rename(String name) {
        return new BithonMetaSchema(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonMetaSchema rename(Name name) {
        return new BithonMetaSchema(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Timestamp, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
