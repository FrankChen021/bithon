/*
 * This file is generated by jOOQ.
 */
package org.bithon.server.storage.jdbc.common.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.bithon.server.storage.jdbc.common.jooq.DefaultSchema;
import org.bithon.server.storage.jdbc.common.jooq.Indexes;
import org.bithon.server.storage.jdbc.common.jooq.Keys;
import org.bithon.server.storage.jdbc.common.jooq.tables.records.BithonMetricsBaselineRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This table keeps the date when the metrics will be kept for ever
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BithonMetricsBaseline extends TableImpl<BithonMetricsBaselineRecord> {

    private static final long serialVersionUID = -1769059058;

    /**
     * The reference instance of <code>bithon_metrics_baseline</code>
     */
    public static final BithonMetricsBaseline BITHON_METRICS_BASELINE = new BithonMetricsBaseline();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BithonMetricsBaselineRecord> getRecordType() {
        return BithonMetricsBaselineRecord.class;
    }

    /**
     * The column <code>bithon_metrics_baseline.date</code>. On which day the metrics will be kept.In the format of yyyy-MM-dd
     */
    public final TableField<BithonMetricsBaselineRecord, String> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "On which day the metrics will be kept.In the format of yyyy-MM-dd");

    /**
     * The column <code>bithon_metrics_baseline.keep_days</code>. How many days the metrics will be kept. If 0, the metrics will be kept forever 
     */
    public final TableField<BithonMetricsBaselineRecord, Integer> KEEP_DAYS = createField(DSL.name("keep_days"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "How many days the metrics will be kept. If 0, the metrics will be kept forever ");

    /**
     * The column <code>bithon_metrics_baseline.create_time</code>. Created Timestamp
     */
    public final TableField<BithonMetricsBaselineRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "Created Timestamp");

    /**
     * Create a <code>bithon_metrics_baseline</code> table reference
     */
    public BithonMetricsBaseline() {
        this(DSL.name("bithon_metrics_baseline"), null);
    }

    /**
     * Create an aliased <code>bithon_metrics_baseline</code> table reference
     */
    public BithonMetricsBaseline(String alias) {
        this(DSL.name(alias), BITHON_METRICS_BASELINE);
    }

    /**
     * Create an aliased <code>bithon_metrics_baseline</code> table reference
     */
    public BithonMetricsBaseline(Name alias) {
        this(alias, BITHON_METRICS_BASELINE);
    }

    private BithonMetricsBaseline(Name alias, Table<BithonMetricsBaselineRecord> aliased) {
        this(alias, aliased, null);
    }

    private BithonMetricsBaseline(Name alias, Table<BithonMetricsBaselineRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("This table keeps the date when the metrics will be kept for ever"));
    }

    public <O extends Record> BithonMetricsBaseline(Table<O> child, ForeignKey<O, BithonMetricsBaselineRecord> key) {
        super(child, key, BITHON_METRICS_BASELINE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BITHON_METRICS_BASELINE_BITHON_METRICS_BASELINE_DATE);
    }

    @Override
    public List<UniqueKey<BithonMetricsBaselineRecord>> getKeys() {
        return Arrays.<UniqueKey<BithonMetricsBaselineRecord>>asList(Keys.KEY_BITHON_METRICS_BASELINE_BITHON_METRICS_BASELINE_DATE);
    }

    @Override
    public BithonMetricsBaseline as(String alias) {
        return new BithonMetricsBaseline(DSL.name(alias), this);
    }

    @Override
    public BithonMetricsBaseline as(Name alias) {
        return new BithonMetricsBaseline(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonMetricsBaseline rename(String name) {
        return new BithonMetricsBaseline(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonMetricsBaseline rename(Name name) {
        return new BithonMetricsBaseline(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
