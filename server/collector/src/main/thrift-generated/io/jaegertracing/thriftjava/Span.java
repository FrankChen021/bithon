/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.jaegertracing.thriftjava;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2025-05-28")
public class Span implements org.apache.thrift.TBase<Span, Span._Fields>, java.io.Serializable, Cloneable, Comparable<Span> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Span");

  private static final org.apache.thrift.protocol.TField TRACE_ID_LOW_FIELD_DESC = new org.apache.thrift.protocol.TField("traceIdLow", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TRACE_ID_HIGH_FIELD_DESC = new org.apache.thrift.protocol.TField("traceIdHigh", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spanId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PARENT_SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentSpanId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField OPERATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("operationName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REFERENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("references", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField LOGS_FIELD_DESC = new org.apache.thrift.protocol.TField("logs", org.apache.thrift.protocol.TType.LIST, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SpanStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SpanTupleSchemeFactory();

  private long traceIdLow; // required
  private long traceIdHigh; // required
  private long spanId; // required
  private long parentSpanId; // required
  private @org.apache.thrift.annotation.Nullable String operationName; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<SpanRef> references; // optional
  private int flags; // required
  private long startTime; // required
  private long duration; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<Tag> tags; // optional
  private @org.apache.thrift.annotation.Nullable java.util.List<Log> logs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRACE_ID_LOW((short)1, "traceIdLow"),
    TRACE_ID_HIGH((short)2, "traceIdHigh"),
    SPAN_ID((short)3, "spanId"),
    PARENT_SPAN_ID((short)4, "parentSpanId"),
    OPERATION_NAME((short)5, "operationName"),
    REFERENCES((short)6, "references"),
    FLAGS((short)7, "flags"),
    START_TIME((short)8, "startTime"),
    DURATION((short)9, "duration"),
    TAGS((short)10, "tags"),
    LOGS((short)11, "logs");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRACE_ID_LOW
          return TRACE_ID_LOW;
        case 2: // TRACE_ID_HIGH
          return TRACE_ID_HIGH;
        case 3: // SPAN_ID
          return SPAN_ID;
        case 4: // PARENT_SPAN_ID
          return PARENT_SPAN_ID;
        case 5: // OPERATION_NAME
          return OPERATION_NAME;
        case 6: // REFERENCES
          return REFERENCES;
        case 7: // FLAGS
          return FLAGS;
        case 8: // START_TIME
          return START_TIME;
        case 9: // DURATION
          return DURATION;
        case 10: // TAGS
          return TAGS;
        case 11: // LOGS
          return LOGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRACEIDLOW_ISSET_ID = 0;
  private static final int __TRACEIDHIGH_ISSET_ID = 1;
  private static final int __SPANID_ISSET_ID = 2;
  private static final int __PARENTSPANID_ISSET_ID = 3;
  private static final int __FLAGS_ISSET_ID = 4;
  private static final int __STARTTIME_ISSET_ID = 5;
  private static final int __DURATION_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REFERENCES,_Fields.TAGS,_Fields.LOGS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRACE_ID_LOW, new org.apache.thrift.meta_data.FieldMetaData("traceIdLow", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRACE_ID_HIGH, new org.apache.thrift.meta_data.FieldMetaData("traceIdHigh", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("spanId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARENT_SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("parentSpanId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPERATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("operationName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFERENCES, new org.apache.thrift.meta_data.FieldMetaData("references", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpanRef.class))));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tag.class))));
    tmpMap.put(_Fields.LOGS, new org.apache.thrift.meta_data.FieldMetaData("logs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Log.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Span.class, metaDataMap);
  }

  public Span() {
  }

  public Span(
    long traceIdLow,
    long traceIdHigh,
    long spanId,
    long parentSpanId,
    String operationName,
    int flags,
    long startTime,
    long duration)
  {
    this();
    this.traceIdLow = traceIdLow;
    setTraceIdLowIsSet(true);
    this.traceIdHigh = traceIdHigh;
    setTraceIdHighIsSet(true);
    this.spanId = spanId;
    setSpanIdIsSet(true);
    this.parentSpanId = parentSpanId;
    setParentSpanIdIsSet(true);
    this.operationName = operationName;
    this.flags = flags;
    setFlagsIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.duration = duration;
    setDurationIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Span(Span other) {
    __isset_bitfield = other.__isset_bitfield;
    this.traceIdLow = other.traceIdLow;
    this.traceIdHigh = other.traceIdHigh;
    this.spanId = other.spanId;
    this.parentSpanId = other.parentSpanId;
    if (other.isSetOperationName()) {
      this.operationName = other.operationName;
    }
    if (other.isSetReferences()) {
      java.util.List<SpanRef> __this__references = new java.util.ArrayList<SpanRef>(other.references.size());
      for (SpanRef other_element : other.references) {
        __this__references.add(new SpanRef(other_element));
      }
      this.references = __this__references;
    }
    this.flags = other.flags;
    this.startTime = other.startTime;
    this.duration = other.duration;
    if (other.isSetTags()) {
      java.util.List<Tag> __this__tags = new java.util.ArrayList<Tag>(other.tags.size());
      for (Tag other_element : other.tags) {
        __this__tags.add(new Tag(other_element));
      }
      this.tags = __this__tags;
    }
    if (other.isSetLogs()) {
      java.util.List<Log> __this__logs = new java.util.ArrayList<Log>(other.logs.size());
      for (Log other_element : other.logs) {
        __this__logs.add(new Log(other_element));
      }
      this.logs = __this__logs;
    }
  }

  @Override
  public Span deepCopy() {
    return new Span(this);
  }

  @Override
  public void clear() {
    setTraceIdLowIsSet(false);
    this.traceIdLow = 0;
    setTraceIdHighIsSet(false);
    this.traceIdHigh = 0;
    setSpanIdIsSet(false);
    this.spanId = 0;
    setParentSpanIdIsSet(false);
    this.parentSpanId = 0;
    this.operationName = null;
    this.references = null;
    setFlagsIsSet(false);
    this.flags = 0;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setDurationIsSet(false);
    this.duration = 0;
    this.tags = null;
    this.logs = null;
  }

  public long getTraceIdLow() {
    return this.traceIdLow;
  }

  public Span setTraceIdLow(long traceIdLow) {
    this.traceIdLow = traceIdLow;
    setTraceIdLowIsSet(true);
    return this;
  }

  public void unsetTraceIdLow() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRACEIDLOW_ISSET_ID);
  }

  /** Returns true if field traceIdLow is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceIdLow() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRACEIDLOW_ISSET_ID);
  }

  public void setTraceIdLowIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRACEIDLOW_ISSET_ID, value);
  }

  public long getTraceIdHigh() {
    return this.traceIdHigh;
  }

  public Span setTraceIdHigh(long traceIdHigh) {
    this.traceIdHigh = traceIdHigh;
    setTraceIdHighIsSet(true);
    return this;
  }

  public void unsetTraceIdHigh() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRACEIDHIGH_ISSET_ID);
  }

  /** Returns true if field traceIdHigh is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceIdHigh() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRACEIDHIGH_ISSET_ID);
  }

  public void setTraceIdHighIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRACEIDHIGH_ISSET_ID, value);
  }

  public long getSpanId() {
    return this.spanId;
  }

  public Span setSpanId(long spanId) {
    this.spanId = spanId;
    setSpanIdIsSet(true);
    return this;
  }

  public void unsetSpanId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPANID_ISSET_ID);
  }

  /** Returns true if field spanId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPANID_ISSET_ID);
  }

  public void setSpanIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPANID_ISSET_ID, value);
  }

  public long getParentSpanId() {
    return this.parentSpanId;
  }

  public Span setParentSpanId(long parentSpanId) {
    this.parentSpanId = parentSpanId;
    setParentSpanIdIsSet(true);
    return this;
  }

  public void unsetParentSpanId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENTSPANID_ISSET_ID);
  }

  /** Returns true if field parentSpanId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentSpanId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENTSPANID_ISSET_ID);
  }

  public void setParentSpanIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENTSPANID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getOperationName() {
    return this.operationName;
  }

  public Span setOperationName(@org.apache.thrift.annotation.Nullable String operationName) {
    this.operationName = operationName;
    return this;
  }

  public void unsetOperationName() {
    this.operationName = null;
  }

  /** Returns true if field operationName is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationName() {
    return this.operationName != null;
  }

  public void setOperationNameIsSet(boolean value) {
    if (!value) {
      this.operationName = null;
    }
  }

  public int getReferencesSize() {
    return (this.references == null) ? 0 : this.references.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SpanRef> getReferencesIterator() {
    return (this.references == null) ? null : this.references.iterator();
  }

  public void addToReferences(SpanRef elem) {
    if (this.references == null) {
      this.references = new java.util.ArrayList<SpanRef>();
    }
    this.references.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<SpanRef> getReferences() {
    return this.references;
  }

  public Span setReferences(@org.apache.thrift.annotation.Nullable java.util.List<SpanRef> references) {
    this.references = references;
    return this;
  }

  public void unsetReferences() {
    this.references = null;
  }

  /** Returns true if field references is set (has been assigned a value) and false otherwise */
  public boolean isSetReferences() {
    return this.references != null;
  }

  public void setReferencesIsSet(boolean value) {
    if (!value) {
      this.references = null;
    }
  }

  public int getFlags() {
    return this.flags;
  }

  public Span setFlags(int flags) {
    this.flags = flags;
    setFlagsIsSet(true);
    return this;
  }

  public void unsetFlags() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAGS_ISSET_ID);
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAGS_ISSET_ID);
  }

  public void setFlagsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAGS_ISSET_ID, value);
  }

  public long getStartTime() {
    return this.startTime;
  }

  public Span setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getDuration() {
    return this.duration;
  }

  public Span setDuration(long duration) {
    this.duration = duration;
    setDurationIsSet(true);
    return this;
  }

  public void unsetDuration() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Tag> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(Tag elem) {
    if (this.tags == null) {
      this.tags = new java.util.ArrayList<Tag>();
    }
    this.tags.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Tag> getTags() {
    return this.tags;
  }

  public Span setTags(@org.apache.thrift.annotation.Nullable java.util.List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public int getLogsSize() {
    return (this.logs == null) ? 0 : this.logs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Log> getLogsIterator() {
    return (this.logs == null) ? null : this.logs.iterator();
  }

  public void addToLogs(Log elem) {
    if (this.logs == null) {
      this.logs = new java.util.ArrayList<Log>();
    }
    this.logs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Log> getLogs() {
    return this.logs;
  }

  public Span setLogs(@org.apache.thrift.annotation.Nullable java.util.List<Log> logs) {
    this.logs = logs;
    return this;
  }

  public void unsetLogs() {
    this.logs = null;
  }

  /** Returns true if field logs is set (has been assigned a value) and false otherwise */
  public boolean isSetLogs() {
    return this.logs != null;
  }

  public void setLogsIsSet(boolean value) {
    if (!value) {
      this.logs = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case TRACE_ID_LOW:
      if (value == null) {
        unsetTraceIdLow();
      } else {
        setTraceIdLow((Long)value);
      }
      break;

    case TRACE_ID_HIGH:
      if (value == null) {
        unsetTraceIdHigh();
      } else {
        setTraceIdHigh((Long)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpanId();
      } else {
        setSpanId((Long)value);
      }
      break;

    case PARENT_SPAN_ID:
      if (value == null) {
        unsetParentSpanId();
      } else {
        setParentSpanId((Long)value);
      }
      break;

    case OPERATION_NAME:
      if (value == null) {
        unsetOperationName();
      } else {
        setOperationName((String)value);
      }
      break;

    case REFERENCES:
      if (value == null) {
        unsetReferences();
      } else {
        setReferences((java.util.List<SpanRef>)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((Long)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((java.util.List<Tag>)value);
      }
      break;

    case LOGS:
      if (value == null) {
        unsetLogs();
      } else {
        setLogs((java.util.List<Log>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE_ID_LOW:
      return getTraceIdLow();

    case TRACE_ID_HIGH:
      return getTraceIdHigh();

    case SPAN_ID:
      return getSpanId();

    case PARENT_SPAN_ID:
      return getParentSpanId();

    case OPERATION_NAME:
      return getOperationName();

    case REFERENCES:
      return getReferences();

    case FLAGS:
      return getFlags();

    case START_TIME:
      return getStartTime();

    case DURATION:
      return getDuration();

    case TAGS:
      return getTags();

    case LOGS:
      return getLogs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRACE_ID_LOW:
      return isSetTraceIdLow();
    case TRACE_ID_HIGH:
      return isSetTraceIdHigh();
    case SPAN_ID:
      return isSetSpanId();
    case PARENT_SPAN_ID:
      return isSetParentSpanId();
    case OPERATION_NAME:
      return isSetOperationName();
    case REFERENCES:
      return isSetReferences();
    case FLAGS:
      return isSetFlags();
    case START_TIME:
      return isSetStartTime();
    case DURATION:
      return isSetDuration();
    case TAGS:
      return isSetTags();
    case LOGS:
      return isSetLogs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof Span)
      return this.equals((Span)that);
    return false;
  }

  public boolean equals(Span that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_traceIdLow = true;
    boolean that_present_traceIdLow = true;
    if (this_present_traceIdLow || that_present_traceIdLow) {
      if (!(this_present_traceIdLow && that_present_traceIdLow))
        return false;
      if (this.traceIdLow != that.traceIdLow)
        return false;
    }

    boolean this_present_traceIdHigh = true;
    boolean that_present_traceIdHigh = true;
    if (this_present_traceIdHigh || that_present_traceIdHigh) {
      if (!(this_present_traceIdHigh && that_present_traceIdHigh))
        return false;
      if (this.traceIdHigh != that.traceIdHigh)
        return false;
    }

    boolean this_present_spanId = true;
    boolean that_present_spanId = true;
    if (this_present_spanId || that_present_spanId) {
      if (!(this_present_spanId && that_present_spanId))
        return false;
      if (this.spanId != that.spanId)
        return false;
    }

    boolean this_present_parentSpanId = true;
    boolean that_present_parentSpanId = true;
    if (this_present_parentSpanId || that_present_parentSpanId) {
      if (!(this_present_parentSpanId && that_present_parentSpanId))
        return false;
      if (this.parentSpanId != that.parentSpanId)
        return false;
    }

    boolean this_present_operationName = true && this.isSetOperationName();
    boolean that_present_operationName = true && that.isSetOperationName();
    if (this_present_operationName || that_present_operationName) {
      if (!(this_present_operationName && that_present_operationName))
        return false;
      if (!this.operationName.equals(that.operationName))
        return false;
    }

    boolean this_present_references = true && this.isSetReferences();
    boolean that_present_references = true && that.isSetReferences();
    if (this_present_references || that_present_references) {
      if (!(this_present_references && that_present_references))
        return false;
      if (!this.references.equals(that.references))
        return false;
    }

    boolean this_present_flags = true;
    boolean that_present_flags = true;
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (this.flags != that.flags)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_duration = true;
    boolean that_present_duration = true;
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_logs = true && this.isSetLogs();
    boolean that_present_logs = true && that.isSetLogs();
    if (this_present_logs || that_present_logs) {
      if (!(this_present_logs && that_present_logs))
        return false;
      if (!this.logs.equals(that.logs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(traceIdLow);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(traceIdHigh);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spanId);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(parentSpanId);

    hashCode = hashCode * 8191 + ((isSetOperationName()) ? 131071 : 524287);
    if (isSetOperationName())
      hashCode = hashCode * 8191 + operationName.hashCode();

    hashCode = hashCode * 8191 + ((isSetReferences()) ? 131071 : 524287);
    if (isSetReferences())
      hashCode = hashCode * 8191 + references.hashCode();

    hashCode = hashCode * 8191 + flags;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(duration);

    hashCode = hashCode * 8191 + ((isSetTags()) ? 131071 : 524287);
    if (isSetTags())
      hashCode = hashCode * 8191 + tags.hashCode();

    hashCode = hashCode * 8191 + ((isSetLogs()) ? 131071 : 524287);
    if (isSetLogs())
      hashCode = hashCode * 8191 + logs.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Span other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetTraceIdLow(), other.isSetTraceIdLow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceIdLow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceIdLow, other.traceIdLow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTraceIdHigh(), other.isSetTraceIdHigh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceIdHigh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceIdHigh, other.traceIdHigh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetSpanId(), other.isSetSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanId, other.spanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetParentSpanId(), other.isSetParentSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentSpanId, other.parentSpanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetOperationName(), other.isSetOperationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationName, other.operationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetReferences(), other.isSetReferences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReferences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.references, other.references);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetFlags(), other.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetStartTime(), other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetDuration(), other.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, other.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTags(), other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetLogs(), other.isSetLogs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logs, other.logs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Span(");
    boolean first = true;

    sb.append("traceIdLow:");
    sb.append(this.traceIdLow);
    first = false;
    if (!first) sb.append(", ");
    sb.append("traceIdHigh:");
    sb.append(this.traceIdHigh);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanId:");
    sb.append(this.spanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentSpanId:");
    sb.append(this.parentSpanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operationName:");
    if (this.operationName == null) {
      sb.append("null");
    } else {
      sb.append(this.operationName);
    }
    first = false;
    if (isSetReferences()) {
      if (!first) sb.append(", ");
      sb.append("references:");
      if (this.references == null) {
        sb.append("null");
      } else {
        sb.append(this.references);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("flags:");
    sb.append(this.flags);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("duration:");
    sb.append(this.duration);
    first = false;
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetLogs()) {
      if (!first) sb.append(", ");
      sb.append("logs:");
      if (this.logs == null) {
        sb.append("null");
      } else {
        sb.append(this.logs);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'traceIdLow' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'traceIdHigh' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'spanId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'parentSpanId' because it's a primitive and you chose the non-beans generator.
    if (operationName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'operationName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'flags' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'startTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'duration' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpanStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SpanStandardScheme getScheme() {
      return new SpanStandardScheme();
    }
  }

  private static class SpanStandardScheme extends org.apache.thrift.scheme.StandardScheme<Span> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Span struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRACE_ID_LOW
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.traceIdLow = iprot.readI64();
              struct.setTraceIdLowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRACE_ID_HIGH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.traceIdHigh = iprot.readI64();
              struct.setTraceIdHighIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.spanId = iprot.readI64();
              struct.setSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARENT_SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentSpanId = iprot.readI64();
              struct.setParentSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPERATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operationName = iprot.readString();
              struct.setOperationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REFERENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.references = new java.util.ArrayList<SpanRef>(_list8.size);
                @org.apache.thrift.annotation.Nullable SpanRef _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new SpanRef();
                  _elem9.read(iprot);
                  struct.references.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setReferencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flags = iprot.readI32();
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.duration = iprot.readI64();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.tags = new java.util.ArrayList<Tag>(_list11.size);
                @org.apache.thrift.annotation.Nullable Tag _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new Tag();
                  _elem12.read(iprot);
                  struct.tags.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.logs = new java.util.ArrayList<Log>(_list14.size);
                @org.apache.thrift.annotation.Nullable Log _elem15;
                for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                {
                  _elem15 = new Log();
                  _elem15.read(iprot);
                  struct.logs.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setLogsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTraceIdLow()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'traceIdLow' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTraceIdHigh()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'traceIdHigh' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSpanId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'spanId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetParentSpanId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'parentSpanId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFlags()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'flags' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStartTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDuration()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'duration' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Span struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TRACE_ID_LOW_FIELD_DESC);
      oprot.writeI64(struct.traceIdLow);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRACE_ID_HIGH_FIELD_DESC);
      oprot.writeI64(struct.traceIdHigh);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
      oprot.writeI64(struct.spanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_SPAN_ID_FIELD_DESC);
      oprot.writeI64(struct.parentSpanId);
      oprot.writeFieldEnd();
      if (struct.operationName != null) {
        oprot.writeFieldBegin(OPERATION_NAME_FIELD_DESC);
        oprot.writeString(struct.operationName);
        oprot.writeFieldEnd();
      }
      if (struct.references != null) {
        if (struct.isSetReferences()) {
          oprot.writeFieldBegin(REFERENCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.references.size()));
            for (SpanRef _iter17 : struct.references)
            {
              _iter17.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(FLAGS_FIELD_DESC);
      oprot.writeI32(struct.flags);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DURATION_FIELD_DESC);
      oprot.writeI64(struct.duration);
      oprot.writeFieldEnd();
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tags.size()));
            for (Tag _iter18 : struct.tags)
            {
              _iter18.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.logs != null) {
        if (struct.isSetLogs()) {
          oprot.writeFieldBegin(LOGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.logs.size()));
            for (Log _iter19 : struct.logs)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpanTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SpanTupleScheme getScheme() {
      return new SpanTupleScheme();
    }
  }

  private static class SpanTupleScheme extends org.apache.thrift.scheme.TupleScheme<Span> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Span struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.traceIdLow);
      oprot.writeI64(struct.traceIdHigh);
      oprot.writeI64(struct.spanId);
      oprot.writeI64(struct.parentSpanId);
      oprot.writeString(struct.operationName);
      oprot.writeI32(struct.flags);
      oprot.writeI64(struct.startTime);
      oprot.writeI64(struct.duration);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReferences()) {
        optionals.set(0);
      }
      if (struct.isSetTags()) {
        optionals.set(1);
      }
      if (struct.isSetLogs()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetReferences()) {
        {
          oprot.writeI32(struct.references.size());
          for (SpanRef _iter20 : struct.references)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (Tag _iter21 : struct.tags)
          {
            _iter21.write(oprot);
          }
        }
      }
      if (struct.isSetLogs()) {
        {
          oprot.writeI32(struct.logs.size());
          for (Log _iter22 : struct.logs)
          {
            _iter22.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Span struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.traceIdLow = iprot.readI64();
      struct.setTraceIdLowIsSet(true);
      struct.traceIdHigh = iprot.readI64();
      struct.setTraceIdHighIsSet(true);
      struct.spanId = iprot.readI64();
      struct.setSpanIdIsSet(true);
      struct.parentSpanId = iprot.readI64();
      struct.setParentSpanIdIsSet(true);
      struct.operationName = iprot.readString();
      struct.setOperationNameIsSet(true);
      struct.flags = iprot.readI32();
      struct.setFlagsIsSet(true);
      struct.startTime = iprot.readI64();
      struct.setStartTimeIsSet(true);
      struct.duration = iprot.readI64();
      struct.setDurationIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list23 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.references = new java.util.ArrayList<SpanRef>(_list23.size);
          @org.apache.thrift.annotation.Nullable SpanRef _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = new SpanRef();
            _elem24.read(iprot);
            struct.references.add(_elem24);
          }
        }
        struct.setReferencesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list26 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.tags = new java.util.ArrayList<Tag>(_list26.size);
          @org.apache.thrift.annotation.Nullable Tag _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = new Tag();
            _elem27.read(iprot);
            struct.tags.add(_elem27);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.logs = new java.util.ArrayList<Log>(_list29.size);
          @org.apache.thrift.annotation.Nullable Log _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new Log();
            _elem30.read(iprot);
            struct.logs.add(_elem30);
          }
        }
        struct.setLogsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

