/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.jaegertracing.thriftjava;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2025-05-28")
public class ClientStats implements org.apache.thrift.TBase<ClientStats, ClientStats._Fields>, java.io.Serializable, Cloneable, Comparable<ClientStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClientStats");

  private static final org.apache.thrift.protocol.TField FULL_QUEUE_DROPPED_SPANS_FIELD_DESC = new org.apache.thrift.protocol.TField("fullQueueDroppedSpans", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TOO_LARGE_DROPPED_SPANS_FIELD_DESC = new org.apache.thrift.protocol.TField("tooLargeDroppedSpans", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField FAILED_TO_EMIT_SPANS_FIELD_DESC = new org.apache.thrift.protocol.TField("failedToEmitSpans", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ClientStatsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ClientStatsTupleSchemeFactory();

  private long fullQueueDroppedSpans; // required
  private long tooLargeDroppedSpans; // required
  private long failedToEmitSpans; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FULL_QUEUE_DROPPED_SPANS((short)1, "fullQueueDroppedSpans"),
    TOO_LARGE_DROPPED_SPANS((short)2, "tooLargeDroppedSpans"),
    FAILED_TO_EMIT_SPANS((short)3, "failedToEmitSpans");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FULL_QUEUE_DROPPED_SPANS
          return FULL_QUEUE_DROPPED_SPANS;
        case 2: // TOO_LARGE_DROPPED_SPANS
          return TOO_LARGE_DROPPED_SPANS;
        case 3: // FAILED_TO_EMIT_SPANS
          return FAILED_TO_EMIT_SPANS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FULLQUEUEDROPPEDSPANS_ISSET_ID = 0;
  private static final int __TOOLARGEDROPPEDSPANS_ISSET_ID = 1;
  private static final int __FAILEDTOEMITSPANS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FULL_QUEUE_DROPPED_SPANS, new org.apache.thrift.meta_data.FieldMetaData("fullQueueDroppedSpans", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOO_LARGE_DROPPED_SPANS, new org.apache.thrift.meta_data.FieldMetaData("tooLargeDroppedSpans", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FAILED_TO_EMIT_SPANS, new org.apache.thrift.meta_data.FieldMetaData("failedToEmitSpans", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClientStats.class, metaDataMap);
  }

  public ClientStats() {
  }

  public ClientStats(
    long fullQueueDroppedSpans,
    long tooLargeDroppedSpans,
    long failedToEmitSpans)
  {
    this();
    this.fullQueueDroppedSpans = fullQueueDroppedSpans;
    setFullQueueDroppedSpansIsSet(true);
    this.tooLargeDroppedSpans = tooLargeDroppedSpans;
    setTooLargeDroppedSpansIsSet(true);
    this.failedToEmitSpans = failedToEmitSpans;
    setFailedToEmitSpansIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClientStats(ClientStats other) {
    __isset_bitfield = other.__isset_bitfield;
    this.fullQueueDroppedSpans = other.fullQueueDroppedSpans;
    this.tooLargeDroppedSpans = other.tooLargeDroppedSpans;
    this.failedToEmitSpans = other.failedToEmitSpans;
  }

  @Override
  public ClientStats deepCopy() {
    return new ClientStats(this);
  }

  @Override
  public void clear() {
    setFullQueueDroppedSpansIsSet(false);
    this.fullQueueDroppedSpans = 0;
    setTooLargeDroppedSpansIsSet(false);
    this.tooLargeDroppedSpans = 0;
    setFailedToEmitSpansIsSet(false);
    this.failedToEmitSpans = 0;
  }

  public long getFullQueueDroppedSpans() {
    return this.fullQueueDroppedSpans;
  }

  public ClientStats setFullQueueDroppedSpans(long fullQueueDroppedSpans) {
    this.fullQueueDroppedSpans = fullQueueDroppedSpans;
    setFullQueueDroppedSpansIsSet(true);
    return this;
  }

  public void unsetFullQueueDroppedSpans() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FULLQUEUEDROPPEDSPANS_ISSET_ID);
  }

  /** Returns true if field fullQueueDroppedSpans is set (has been assigned a value) and false otherwise */
  public boolean isSetFullQueueDroppedSpans() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FULLQUEUEDROPPEDSPANS_ISSET_ID);
  }

  public void setFullQueueDroppedSpansIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FULLQUEUEDROPPEDSPANS_ISSET_ID, value);
  }

  public long getTooLargeDroppedSpans() {
    return this.tooLargeDroppedSpans;
  }

  public ClientStats setTooLargeDroppedSpans(long tooLargeDroppedSpans) {
    this.tooLargeDroppedSpans = tooLargeDroppedSpans;
    setTooLargeDroppedSpansIsSet(true);
    return this;
  }

  public void unsetTooLargeDroppedSpans() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOOLARGEDROPPEDSPANS_ISSET_ID);
  }

  /** Returns true if field tooLargeDroppedSpans is set (has been assigned a value) and false otherwise */
  public boolean isSetTooLargeDroppedSpans() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOOLARGEDROPPEDSPANS_ISSET_ID);
  }

  public void setTooLargeDroppedSpansIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOOLARGEDROPPEDSPANS_ISSET_ID, value);
  }

  public long getFailedToEmitSpans() {
    return this.failedToEmitSpans;
  }

  public ClientStats setFailedToEmitSpans(long failedToEmitSpans) {
    this.failedToEmitSpans = failedToEmitSpans;
    setFailedToEmitSpansIsSet(true);
    return this;
  }

  public void unsetFailedToEmitSpans() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FAILEDTOEMITSPANS_ISSET_ID);
  }

  /** Returns true if field failedToEmitSpans is set (has been assigned a value) and false otherwise */
  public boolean isSetFailedToEmitSpans() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FAILEDTOEMITSPANS_ISSET_ID);
  }

  public void setFailedToEmitSpansIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FAILEDTOEMITSPANS_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case FULL_QUEUE_DROPPED_SPANS:
      if (value == null) {
        unsetFullQueueDroppedSpans();
      } else {
        setFullQueueDroppedSpans((Long)value);
      }
      break;

    case TOO_LARGE_DROPPED_SPANS:
      if (value == null) {
        unsetTooLargeDroppedSpans();
      } else {
        setTooLargeDroppedSpans((Long)value);
      }
      break;

    case FAILED_TO_EMIT_SPANS:
      if (value == null) {
        unsetFailedToEmitSpans();
      } else {
        setFailedToEmitSpans((Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FULL_QUEUE_DROPPED_SPANS:
      return getFullQueueDroppedSpans();

    case TOO_LARGE_DROPPED_SPANS:
      return getTooLargeDroppedSpans();

    case FAILED_TO_EMIT_SPANS:
      return getFailedToEmitSpans();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FULL_QUEUE_DROPPED_SPANS:
      return isSetFullQueueDroppedSpans();
    case TOO_LARGE_DROPPED_SPANS:
      return isSetTooLargeDroppedSpans();
    case FAILED_TO_EMIT_SPANS:
      return isSetFailedToEmitSpans();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof ClientStats)
      return this.equals((ClientStats)that);
    return false;
  }

  public boolean equals(ClientStats that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fullQueueDroppedSpans = true;
    boolean that_present_fullQueueDroppedSpans = true;
    if (this_present_fullQueueDroppedSpans || that_present_fullQueueDroppedSpans) {
      if (!(this_present_fullQueueDroppedSpans && that_present_fullQueueDroppedSpans))
        return false;
      if (this.fullQueueDroppedSpans != that.fullQueueDroppedSpans)
        return false;
    }

    boolean this_present_tooLargeDroppedSpans = true;
    boolean that_present_tooLargeDroppedSpans = true;
    if (this_present_tooLargeDroppedSpans || that_present_tooLargeDroppedSpans) {
      if (!(this_present_tooLargeDroppedSpans && that_present_tooLargeDroppedSpans))
        return false;
      if (this.tooLargeDroppedSpans != that.tooLargeDroppedSpans)
        return false;
    }

    boolean this_present_failedToEmitSpans = true;
    boolean that_present_failedToEmitSpans = true;
    if (this_present_failedToEmitSpans || that_present_failedToEmitSpans) {
      if (!(this_present_failedToEmitSpans && that_present_failedToEmitSpans))
        return false;
      if (this.failedToEmitSpans != that.failedToEmitSpans)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fullQueueDroppedSpans);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tooLargeDroppedSpans);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(failedToEmitSpans);

    return hashCode;
  }

  @Override
  public int compareTo(ClientStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetFullQueueDroppedSpans(), other.isSetFullQueueDroppedSpans());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullQueueDroppedSpans()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullQueueDroppedSpans, other.fullQueueDroppedSpans);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTooLargeDroppedSpans(), other.isSetTooLargeDroppedSpans());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTooLargeDroppedSpans()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tooLargeDroppedSpans, other.tooLargeDroppedSpans);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetFailedToEmitSpans(), other.isSetFailedToEmitSpans());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailedToEmitSpans()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failedToEmitSpans, other.failedToEmitSpans);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClientStats(");
    boolean first = true;

    sb.append("fullQueueDroppedSpans:");
    sb.append(this.fullQueueDroppedSpans);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tooLargeDroppedSpans:");
    sb.append(this.tooLargeDroppedSpans);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failedToEmitSpans:");
    sb.append(this.failedToEmitSpans);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'fullQueueDroppedSpans' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'tooLargeDroppedSpans' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'failedToEmitSpans' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClientStatsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ClientStatsStandardScheme getScheme() {
      return new ClientStatsStandardScheme();
    }
  }

  private static class ClientStatsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ClientStats> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, ClientStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FULL_QUEUE_DROPPED_SPANS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fullQueueDroppedSpans = iprot.readI64();
              struct.setFullQueueDroppedSpansIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOO_LARGE_DROPPED_SPANS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tooLargeDroppedSpans = iprot.readI64();
              struct.setTooLargeDroppedSpansIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FAILED_TO_EMIT_SPANS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.failedToEmitSpans = iprot.readI64();
              struct.setFailedToEmitSpansIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetFullQueueDroppedSpans()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fullQueueDroppedSpans' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTooLargeDroppedSpans()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tooLargeDroppedSpans' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFailedToEmitSpans()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'failedToEmitSpans' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, ClientStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FULL_QUEUE_DROPPED_SPANS_FIELD_DESC);
      oprot.writeI64(struct.fullQueueDroppedSpans);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOO_LARGE_DROPPED_SPANS_FIELD_DESC);
      oprot.writeI64(struct.tooLargeDroppedSpans);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAILED_TO_EMIT_SPANS_FIELD_DESC);
      oprot.writeI64(struct.failedToEmitSpans);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClientStatsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ClientStatsTupleScheme getScheme() {
      return new ClientStatsTupleScheme();
    }
  }

  private static class ClientStatsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ClientStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClientStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.fullQueueDroppedSpans);
      oprot.writeI64(struct.tooLargeDroppedSpans);
      oprot.writeI64(struct.failedToEmitSpans);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClientStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.fullQueueDroppedSpans = iprot.readI64();
      struct.setFullQueueDroppedSpansIsSet(true);
      struct.tooLargeDroppedSpans = iprot.readI64();
      struct.setTooLargeDroppedSpansIsSet(true);
      struct.failedToEmitSpans = iprot.readI64();
      struct.setFailedToEmitSpansIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

