/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * ***************************  Zookeeepr指标  ****************************
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class ZookeeperEntity implements org.apache.thrift.TBase<ZookeeperEntity, ZookeeperEntity._Fields>, java.io.Serializable, Cloneable, Comparable<ZookeeperEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ZookeeperEntity");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_ALIVE_CONNECTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numAliveConnections", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PACKETS_SENT_FIELD_DESC = new org.apache.thrift.protocol.TField("packetsSent", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField PACKETS_RECEIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("packetsReceived", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField OUTSTANDING_REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("outstandingRequests", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField MAX_REQUEST_LATENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("maxRequestLatency", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField MIN_REQUEST_LATENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("minRequestLatency", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField AVG_REQUEST_LATENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("avgRequestLatency", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField GRANULARITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("GranularityType", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ZookeeperEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ZookeeperEntityTupleSchemeFactory();

  public String name; // required
  public int interval; // required
  public long timestamp; // required
  public String category; // required
  public int numAliveConnections; // required
  public long packetsSent; // required
  public long packetsReceived; // required
  public long outstandingRequests; // required
  public long maxRequestLatency; // required
  public long minRequestLatency; // required
  public long avgRequestLatency; // required
  public int GranularityType; // optional
  public String host; // optional
  public int port; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    INTERVAL((short)2, "interval"),
    TIMESTAMP((short)3, "timestamp"),
    CATEGORY((short)4, "category"),
    NUM_ALIVE_CONNECTIONS((short)5, "numAliveConnections"),
    PACKETS_SENT((short)6, "packetsSent"),
    PACKETS_RECEIVED((short)7, "packetsReceived"),
    OUTSTANDING_REQUESTS((short)8, "outstandingRequests"),
    MAX_REQUEST_LATENCY((short)9, "maxRequestLatency"),
    MIN_REQUEST_LATENCY((short)10, "minRequestLatency"),
    AVG_REQUEST_LATENCY((short)11, "avgRequestLatency"),
    GRANULARITY_TYPE((short)12, "GranularityType"),
    HOST((short)13, "host"),
    PORT((short)14, "port");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // INTERVAL
          return INTERVAL;
        case 3: // TIMESTAMP
          return TIMESTAMP;
        case 4: // CATEGORY
          return CATEGORY;
        case 5: // NUM_ALIVE_CONNECTIONS
          return NUM_ALIVE_CONNECTIONS;
        case 6: // PACKETS_SENT
          return PACKETS_SENT;
        case 7: // PACKETS_RECEIVED
          return PACKETS_RECEIVED;
        case 8: // OUTSTANDING_REQUESTS
          return OUTSTANDING_REQUESTS;
        case 9: // MAX_REQUEST_LATENCY
          return MAX_REQUEST_LATENCY;
        case 10: // MIN_REQUEST_LATENCY
          return MIN_REQUEST_LATENCY;
        case 11: // AVG_REQUEST_LATENCY
          return AVG_REQUEST_LATENCY;
        case 12: // GRANULARITY_TYPE
          return GRANULARITY_TYPE;
        case 13: // HOST
          return HOST;
        case 14: // PORT
          return PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTERVAL_ISSET_ID = 0;
  private static final int __TIMESTAMP_ISSET_ID = 1;
  private static final int __NUMALIVECONNECTIONS_ISSET_ID = 2;
  private static final int __PACKETSSENT_ISSET_ID = 3;
  private static final int __PACKETSRECEIVED_ISSET_ID = 4;
  private static final int __OUTSTANDINGREQUESTS_ISSET_ID = 5;
  private static final int __MAXREQUESTLATENCY_ISSET_ID = 6;
  private static final int __MINREQUESTLATENCY_ISSET_ID = 7;
  private static final int __AVGREQUESTLATENCY_ISSET_ID = 8;
  private static final int __GRANULARITYTYPE_ISSET_ID = 9;
  private static final int __PORT_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GRANULARITY_TYPE,_Fields.HOST,_Fields.PORT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_ALIVE_CONNECTIONS, new org.apache.thrift.meta_data.FieldMetaData("numAliveConnections", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PACKETS_SENT, new org.apache.thrift.meta_data.FieldMetaData("packetsSent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PACKETS_RECEIVED, new org.apache.thrift.meta_data.FieldMetaData("packetsReceived", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUTSTANDING_REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("outstandingRequests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_REQUEST_LATENCY, new org.apache.thrift.meta_data.FieldMetaData("maxRequestLatency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_REQUEST_LATENCY, new org.apache.thrift.meta_data.FieldMetaData("minRequestLatency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AVG_REQUEST_LATENCY, new org.apache.thrift.meta_data.FieldMetaData("avgRequestLatency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GRANULARITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("GranularityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ZookeeperEntity.class, metaDataMap);
  }

  public ZookeeperEntity() {
  }

  public ZookeeperEntity(
    String name,
    int interval,
    long timestamp,
    String category,
    int numAliveConnections,
    long packetsSent,
    long packetsReceived,
    long outstandingRequests,
    long maxRequestLatency,
    long minRequestLatency,
    long avgRequestLatency)
  {
    this();
    this.name = name;
    this.interval = interval;
    setIntervalIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.category = category;
    this.numAliveConnections = numAliveConnections;
    setNumAliveConnectionsIsSet(true);
    this.packetsSent = packetsSent;
    setPacketsSentIsSet(true);
    this.packetsReceived = packetsReceived;
    setPacketsReceivedIsSet(true);
    this.outstandingRequests = outstandingRequests;
    setOutstandingRequestsIsSet(true);
    this.maxRequestLatency = maxRequestLatency;
    setMaxRequestLatencyIsSet(true);
    this.minRequestLatency = minRequestLatency;
    setMinRequestLatencyIsSet(true);
    this.avgRequestLatency = avgRequestLatency;
    setAvgRequestLatencyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ZookeeperEntity(ZookeeperEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.interval = other.interval;
    this.timestamp = other.timestamp;
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    this.numAliveConnections = other.numAliveConnections;
    this.packetsSent = other.packetsSent;
    this.packetsReceived = other.packetsReceived;
    this.outstandingRequests = other.outstandingRequests;
    this.maxRequestLatency = other.maxRequestLatency;
    this.minRequestLatency = other.minRequestLatency;
    this.avgRequestLatency = other.avgRequestLatency;
    this.GranularityType = other.GranularityType;
    if (other.isSetHost()) {
      this.host = other.host;
    }
    this.port = other.port;
  }

  public ZookeeperEntity deepCopy() {
    return new ZookeeperEntity(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setIntervalIsSet(false);
    this.interval = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.category = null;
    setNumAliveConnectionsIsSet(false);
    this.numAliveConnections = 0;
    setPacketsSentIsSet(false);
    this.packetsSent = 0;
    setPacketsReceivedIsSet(false);
    this.packetsReceived = 0;
    setOutstandingRequestsIsSet(false);
    this.outstandingRequests = 0;
    setMaxRequestLatencyIsSet(false);
    this.maxRequestLatency = 0;
    setMinRequestLatencyIsSet(false);
    this.minRequestLatency = 0;
    setAvgRequestLatencyIsSet(false);
    this.avgRequestLatency = 0;
    setGranularityTypeIsSet(false);
    this.GranularityType = 0;
    this.host = null;
    setPortIsSet(false);
    this.port = 0;
  }

  public String getName() {
    return this.name;
  }

  public ZookeeperEntity setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getInterval() {
    return this.interval;
  }

  public ZookeeperEntity setInterval(int interval) {
    this.interval = interval;
    setIntervalIsSet(true);
    return this;
  }

  public void unsetInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  /** Returns true if field interval is set (has been assigned a value) and false otherwise */
  public boolean isSetInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  public void setIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public ZookeeperEntity setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public String getCategory() {
    return this.category;
  }

  public ZookeeperEntity setCategory(String category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public int getNumAliveConnections() {
    return this.numAliveConnections;
  }

  public ZookeeperEntity setNumAliveConnections(int numAliveConnections) {
    this.numAliveConnections = numAliveConnections;
    setNumAliveConnectionsIsSet(true);
    return this;
  }

  public void unsetNumAliveConnections() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMALIVECONNECTIONS_ISSET_ID);
  }

  /** Returns true if field numAliveConnections is set (has been assigned a value) and false otherwise */
  public boolean isSetNumAliveConnections() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMALIVECONNECTIONS_ISSET_ID);
  }

  public void setNumAliveConnectionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMALIVECONNECTIONS_ISSET_ID, value);
  }

  public long getPacketsSent() {
    return this.packetsSent;
  }

  public ZookeeperEntity setPacketsSent(long packetsSent) {
    this.packetsSent = packetsSent;
    setPacketsSentIsSet(true);
    return this;
  }

  public void unsetPacketsSent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PACKETSSENT_ISSET_ID);
  }

  /** Returns true if field packetsSent is set (has been assigned a value) and false otherwise */
  public boolean isSetPacketsSent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PACKETSSENT_ISSET_ID);
  }

  public void setPacketsSentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PACKETSSENT_ISSET_ID, value);
  }

  public long getPacketsReceived() {
    return this.packetsReceived;
  }

  public ZookeeperEntity setPacketsReceived(long packetsReceived) {
    this.packetsReceived = packetsReceived;
    setPacketsReceivedIsSet(true);
    return this;
  }

  public void unsetPacketsReceived() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PACKETSRECEIVED_ISSET_ID);
  }

  /** Returns true if field packetsReceived is set (has been assigned a value) and false otherwise */
  public boolean isSetPacketsReceived() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PACKETSRECEIVED_ISSET_ID);
  }

  public void setPacketsReceivedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PACKETSRECEIVED_ISSET_ID, value);
  }

  public long getOutstandingRequests() {
    return this.outstandingRequests;
  }

  public ZookeeperEntity setOutstandingRequests(long outstandingRequests) {
    this.outstandingRequests = outstandingRequests;
    setOutstandingRequestsIsSet(true);
    return this;
  }

  public void unsetOutstandingRequests() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTSTANDINGREQUESTS_ISSET_ID);
  }

  /** Returns true if field outstandingRequests is set (has been assigned a value) and false otherwise */
  public boolean isSetOutstandingRequests() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTSTANDINGREQUESTS_ISSET_ID);
  }

  public void setOutstandingRequestsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTSTANDINGREQUESTS_ISSET_ID, value);
  }

  public long getMaxRequestLatency() {
    return this.maxRequestLatency;
  }

  public ZookeeperEntity setMaxRequestLatency(long maxRequestLatency) {
    this.maxRequestLatency = maxRequestLatency;
    setMaxRequestLatencyIsSet(true);
    return this;
  }

  public void unsetMaxRequestLatency() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXREQUESTLATENCY_ISSET_ID);
  }

  /** Returns true if field maxRequestLatency is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxRequestLatency() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXREQUESTLATENCY_ISSET_ID);
  }

  public void setMaxRequestLatencyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXREQUESTLATENCY_ISSET_ID, value);
  }

  public long getMinRequestLatency() {
    return this.minRequestLatency;
  }

  public ZookeeperEntity setMinRequestLatency(long minRequestLatency) {
    this.minRequestLatency = minRequestLatency;
    setMinRequestLatencyIsSet(true);
    return this;
  }

  public void unsetMinRequestLatency() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINREQUESTLATENCY_ISSET_ID);
  }

  /** Returns true if field minRequestLatency is set (has been assigned a value) and false otherwise */
  public boolean isSetMinRequestLatency() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINREQUESTLATENCY_ISSET_ID);
  }

  public void setMinRequestLatencyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINREQUESTLATENCY_ISSET_ID, value);
  }

  public long getAvgRequestLatency() {
    return this.avgRequestLatency;
  }

  public ZookeeperEntity setAvgRequestLatency(long avgRequestLatency) {
    this.avgRequestLatency = avgRequestLatency;
    setAvgRequestLatencyIsSet(true);
    return this;
  }

  public void unsetAvgRequestLatency() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AVGREQUESTLATENCY_ISSET_ID);
  }

  /** Returns true if field avgRequestLatency is set (has been assigned a value) and false otherwise */
  public boolean isSetAvgRequestLatency() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AVGREQUESTLATENCY_ISSET_ID);
  }

  public void setAvgRequestLatencyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AVGREQUESTLATENCY_ISSET_ID, value);
  }

  public int getGranularityType() {
    return this.GranularityType;
  }

  public ZookeeperEntity setGranularityType(int GranularityType) {
    this.GranularityType = GranularityType;
    setGranularityTypeIsSet(true);
    return this;
  }

  public void unsetGranularityType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID);
  }

  /** Returns true if field GranularityType is set (has been assigned a value) and false otherwise */
  public boolean isSetGranularityType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID);
  }

  public void setGranularityTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID, value);
  }

  public String getHost() {
    return this.host;
  }

  public ZookeeperEntity setHost(String host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public ZookeeperEntity setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((Integer)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((String)value);
      }
      break;

    case NUM_ALIVE_CONNECTIONS:
      if (value == null) {
        unsetNumAliveConnections();
      } else {
        setNumAliveConnections((Integer)value);
      }
      break;

    case PACKETS_SENT:
      if (value == null) {
        unsetPacketsSent();
      } else {
        setPacketsSent((Long)value);
      }
      break;

    case PACKETS_RECEIVED:
      if (value == null) {
        unsetPacketsReceived();
      } else {
        setPacketsReceived((Long)value);
      }
      break;

    case OUTSTANDING_REQUESTS:
      if (value == null) {
        unsetOutstandingRequests();
      } else {
        setOutstandingRequests((Long)value);
      }
      break;

    case MAX_REQUEST_LATENCY:
      if (value == null) {
        unsetMaxRequestLatency();
      } else {
        setMaxRequestLatency((Long)value);
      }
      break;

    case MIN_REQUEST_LATENCY:
      if (value == null) {
        unsetMinRequestLatency();
      } else {
        setMinRequestLatency((Long)value);
      }
      break;

    case AVG_REQUEST_LATENCY:
      if (value == null) {
        unsetAvgRequestLatency();
      } else {
        setAvgRequestLatency((Long)value);
      }
      break;

    case GRANULARITY_TYPE:
      if (value == null) {
        unsetGranularityType();
      } else {
        setGranularityType((Integer)value);
      }
      break;

    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case INTERVAL:
      return getInterval();

    case TIMESTAMP:
      return getTimestamp();

    case CATEGORY:
      return getCategory();

    case NUM_ALIVE_CONNECTIONS:
      return getNumAliveConnections();

    case PACKETS_SENT:
      return getPacketsSent();

    case PACKETS_RECEIVED:
      return getPacketsReceived();

    case OUTSTANDING_REQUESTS:
      return getOutstandingRequests();

    case MAX_REQUEST_LATENCY:
      return getMaxRequestLatency();

    case MIN_REQUEST_LATENCY:
      return getMinRequestLatency();

    case AVG_REQUEST_LATENCY:
      return getAvgRequestLatency();

    case GRANULARITY_TYPE:
      return getGranularityType();

    case HOST:
      return getHost();

    case PORT:
      return getPort();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case INTERVAL:
      return isSetInterval();
    case TIMESTAMP:
      return isSetTimestamp();
    case CATEGORY:
      return isSetCategory();
    case NUM_ALIVE_CONNECTIONS:
      return isSetNumAliveConnections();
    case PACKETS_SENT:
      return isSetPacketsSent();
    case PACKETS_RECEIVED:
      return isSetPacketsReceived();
    case OUTSTANDING_REQUESTS:
      return isSetOutstandingRequests();
    case MAX_REQUEST_LATENCY:
      return isSetMaxRequestLatency();
    case MIN_REQUEST_LATENCY:
      return isSetMinRequestLatency();
    case AVG_REQUEST_LATENCY:
      return isSetAvgRequestLatency();
    case GRANULARITY_TYPE:
      return isSetGranularityType();
    case HOST:
      return isSetHost();
    case PORT:
      return isSetPort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ZookeeperEntity)
      return this.equals((ZookeeperEntity)that);
    return false;
  }

  public boolean equals(ZookeeperEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_interval = true;
    boolean that_present_interval = true;
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (this.interval != that.interval)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_numAliveConnections = true;
    boolean that_present_numAliveConnections = true;
    if (this_present_numAliveConnections || that_present_numAliveConnections) {
      if (!(this_present_numAliveConnections && that_present_numAliveConnections))
        return false;
      if (this.numAliveConnections != that.numAliveConnections)
        return false;
    }

    boolean this_present_packetsSent = true;
    boolean that_present_packetsSent = true;
    if (this_present_packetsSent || that_present_packetsSent) {
      if (!(this_present_packetsSent && that_present_packetsSent))
        return false;
      if (this.packetsSent != that.packetsSent)
        return false;
    }

    boolean this_present_packetsReceived = true;
    boolean that_present_packetsReceived = true;
    if (this_present_packetsReceived || that_present_packetsReceived) {
      if (!(this_present_packetsReceived && that_present_packetsReceived))
        return false;
      if (this.packetsReceived != that.packetsReceived)
        return false;
    }

    boolean this_present_outstandingRequests = true;
    boolean that_present_outstandingRequests = true;
    if (this_present_outstandingRequests || that_present_outstandingRequests) {
      if (!(this_present_outstandingRequests && that_present_outstandingRequests))
        return false;
      if (this.outstandingRequests != that.outstandingRequests)
        return false;
    }

    boolean this_present_maxRequestLatency = true;
    boolean that_present_maxRequestLatency = true;
    if (this_present_maxRequestLatency || that_present_maxRequestLatency) {
      if (!(this_present_maxRequestLatency && that_present_maxRequestLatency))
        return false;
      if (this.maxRequestLatency != that.maxRequestLatency)
        return false;
    }

    boolean this_present_minRequestLatency = true;
    boolean that_present_minRequestLatency = true;
    if (this_present_minRequestLatency || that_present_minRequestLatency) {
      if (!(this_present_minRequestLatency && that_present_minRequestLatency))
        return false;
      if (this.minRequestLatency != that.minRequestLatency)
        return false;
    }

    boolean this_present_avgRequestLatency = true;
    boolean that_present_avgRequestLatency = true;
    if (this_present_avgRequestLatency || that_present_avgRequestLatency) {
      if (!(this_present_avgRequestLatency && that_present_avgRequestLatency))
        return false;
      if (this.avgRequestLatency != that.avgRequestLatency)
        return false;
    }

    boolean this_present_GranularityType = true && this.isSetGranularityType();
    boolean that_present_GranularityType = true && that.isSetGranularityType();
    if (this_present_GranularityType || that_present_GranularityType) {
      if (!(this_present_GranularityType && that_present_GranularityType))
        return false;
      if (this.GranularityType != that.GranularityType)
        return false;
    }

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_port = true && this.isSetPort();
    boolean that_present_port = true && that.isSetPort();
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + interval;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
    if (isSetCategory())
      hashCode = hashCode * 8191 + category.hashCode();

    hashCode = hashCode * 8191 + numAliveConnections;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(packetsSent);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(packetsReceived);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outstandingRequests);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxRequestLatency);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(minRequestLatency);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(avgRequestLatency);

    hashCode = hashCode * 8191 + ((isSetGranularityType()) ? 131071 : 524287);
    if (isSetGranularityType())
      hashCode = hashCode * 8191 + GranularityType;

    hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
    if (isSetHost())
      hashCode = hashCode * 8191 + host.hashCode();

    hashCode = hashCode * 8191 + ((isSetPort()) ? 131071 : 524287);
    if (isSetPort())
      hashCode = hashCode * 8191 + port;

    return hashCode;
  }

  @Override
  public int compareTo(ZookeeperEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumAliveConnections()).compareTo(other.isSetNumAliveConnections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumAliveConnections()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numAliveConnections, other.numAliveConnections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPacketsSent()).compareTo(other.isSetPacketsSent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPacketsSent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packetsSent, other.packetsSent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPacketsReceived()).compareTo(other.isSetPacketsReceived());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPacketsReceived()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packetsReceived, other.packetsReceived);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutstandingRequests()).compareTo(other.isSetOutstandingRequests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutstandingRequests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outstandingRequests, other.outstandingRequests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxRequestLatency()).compareTo(other.isSetMaxRequestLatency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxRequestLatency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxRequestLatency, other.maxRequestLatency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinRequestLatency()).compareTo(other.isSetMinRequestLatency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinRequestLatency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minRequestLatency, other.minRequestLatency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvgRequestLatency()).compareTo(other.isSetAvgRequestLatency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgRequestLatency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgRequestLatency, other.avgRequestLatency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGranularityType()).compareTo(other.isSetGranularityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGranularityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GranularityType, other.GranularityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ZookeeperEntity(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interval:");
    sb.append(this.interval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numAliveConnections:");
    sb.append(this.numAliveConnections);
    first = false;
    if (!first) sb.append(", ");
    sb.append("packetsSent:");
    sb.append(this.packetsSent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("packetsReceived:");
    sb.append(this.packetsReceived);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outstandingRequests:");
    sb.append(this.outstandingRequests);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxRequestLatency:");
    sb.append(this.maxRequestLatency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minRequestLatency:");
    sb.append(this.minRequestLatency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("avgRequestLatency:");
    sb.append(this.avgRequestLatency);
    first = false;
    if (isSetGranularityType()) {
      if (!first) sb.append(", ");
      sb.append("GranularityType:");
      sb.append(this.GranularityType);
      first = false;
    }
    if (isSetHost()) {
      if (!first) sb.append(", ");
      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
    }
    if (isSetPort()) {
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ZookeeperEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ZookeeperEntityStandardScheme getScheme() {
      return new ZookeeperEntityStandardScheme();
    }
  }

  private static class ZookeeperEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<ZookeeperEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ZookeeperEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interval = iprot.readI32();
              struct.setIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.category = iprot.readString();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM_ALIVE_CONNECTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numAliveConnections = iprot.readI32();
              struct.setNumAliveConnectionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PACKETS_SENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.packetsSent = iprot.readI64();
              struct.setPacketsSentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PACKETS_RECEIVED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.packetsReceived = iprot.readI64();
              struct.setPacketsReceivedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OUTSTANDING_REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.outstandingRequests = iprot.readI64();
              struct.setOutstandingRequestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAX_REQUEST_LATENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxRequestLatency = iprot.readI64();
              struct.setMaxRequestLatencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MIN_REQUEST_LATENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minRequestLatency = iprot.readI64();
              struct.setMinRequestLatencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AVG_REQUEST_LATENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.avgRequestLatency = iprot.readI64();
              struct.setAvgRequestLatencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // GRANULARITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.GranularityType = iprot.readI32();
              struct.setGranularityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host = iprot.readString();
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ZookeeperEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.interval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(struct.category);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_ALIVE_CONNECTIONS_FIELD_DESC);
      oprot.writeI32(struct.numAliveConnections);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PACKETS_SENT_FIELD_DESC);
      oprot.writeI64(struct.packetsSent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PACKETS_RECEIVED_FIELD_DESC);
      oprot.writeI64(struct.packetsReceived);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUTSTANDING_REQUESTS_FIELD_DESC);
      oprot.writeI64(struct.outstandingRequests);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_REQUEST_LATENCY_FIELD_DESC);
      oprot.writeI64(struct.maxRequestLatency);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_REQUEST_LATENCY_FIELD_DESC);
      oprot.writeI64(struct.minRequestLatency);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVG_REQUEST_LATENCY_FIELD_DESC);
      oprot.writeI64(struct.avgRequestLatency);
      oprot.writeFieldEnd();
      if (struct.isSetGranularityType()) {
        oprot.writeFieldBegin(GRANULARITY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.GranularityType);
        oprot.writeFieldEnd();
      }
      if (struct.host != null) {
        if (struct.isSetHost()) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          oprot.writeString(struct.host);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPort()) {
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ZookeeperEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ZookeeperEntityTupleScheme getScheme() {
      return new ZookeeperEntityTupleScheme();
    }
  }

  private static class ZookeeperEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<ZookeeperEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ZookeeperEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetInterval()) {
        optionals.set(1);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetCategory()) {
        optionals.set(3);
      }
      if (struct.isSetNumAliveConnections()) {
        optionals.set(4);
      }
      if (struct.isSetPacketsSent()) {
        optionals.set(5);
      }
      if (struct.isSetPacketsReceived()) {
        optionals.set(6);
      }
      if (struct.isSetOutstandingRequests()) {
        optionals.set(7);
      }
      if (struct.isSetMaxRequestLatency()) {
        optionals.set(8);
      }
      if (struct.isSetMinRequestLatency()) {
        optionals.set(9);
      }
      if (struct.isSetAvgRequestLatency()) {
        optionals.set(10);
      }
      if (struct.isSetGranularityType()) {
        optionals.set(11);
      }
      if (struct.isSetHost()) {
        optionals.set(12);
      }
      if (struct.isSetPort()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetInterval()) {
        oprot.writeI32(struct.interval);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetCategory()) {
        oprot.writeString(struct.category);
      }
      if (struct.isSetNumAliveConnections()) {
        oprot.writeI32(struct.numAliveConnections);
      }
      if (struct.isSetPacketsSent()) {
        oprot.writeI64(struct.packetsSent);
      }
      if (struct.isSetPacketsReceived()) {
        oprot.writeI64(struct.packetsReceived);
      }
      if (struct.isSetOutstandingRequests()) {
        oprot.writeI64(struct.outstandingRequests);
      }
      if (struct.isSetMaxRequestLatency()) {
        oprot.writeI64(struct.maxRequestLatency);
      }
      if (struct.isSetMinRequestLatency()) {
        oprot.writeI64(struct.minRequestLatency);
      }
      if (struct.isSetAvgRequestLatency()) {
        oprot.writeI64(struct.avgRequestLatency);
      }
      if (struct.isSetGranularityType()) {
        oprot.writeI32(struct.GranularityType);
      }
      if (struct.isSetHost()) {
        oprot.writeString(struct.host);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ZookeeperEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.interval = iprot.readI32();
        struct.setIntervalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.category = iprot.readString();
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.numAliveConnections = iprot.readI32();
        struct.setNumAliveConnectionsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.packetsSent = iprot.readI64();
        struct.setPacketsSentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.packetsReceived = iprot.readI64();
        struct.setPacketsReceivedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.outstandingRequests = iprot.readI64();
        struct.setOutstandingRequestsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.maxRequestLatency = iprot.readI64();
        struct.setMaxRequestLatencyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.minRequestLatency = iprot.readI64();
        struct.setMinRequestLatencyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.avgRequestLatency = iprot.readI64();
        struct.setAvgRequestLatencyIsSet(true);
      }
      if (incoming.get(11)) {
        struct.GranularityType = iprot.readI32();
        struct.setGranularityTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.host = iprot.readString();
        struct.setHostIsSet(true);
      }
      if (incoming.get(13)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

