/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class AgentService {

  public interface Iface {

    /**
     * 写入JVM采集指标
     * 
     * 返回数据格式：{"code": 200, "message": "success"}
     * 
     * 
     * @param InstanceInfoEntity
     */
    public String writeJvmInfo(com.keruyun.commons.agent.collector.entity.InstanceInfoEntity InstanceInfoEntity) throws org.apache.thrift.TException;

    /**
     * 写入容器采集指标
     * 
     * 返回数据格式：{"code": 200, "message": "success"}
     * 
     * 
     * @param serverInfoEntity
     */
    public String writeServerInfo(com.keruyun.commons.agent.collector.entity.ServerInfoEntity serverInfoEntity) throws org.apache.thrift.TException;

    /**
     * 写入请求采集指标
     * 
     * 返回数据格式：{"code": 200, "message": "success"}
     * 
     * 
     * @param requestEntity
     */
    public String writeRequest(com.keruyun.commons.agent.collector.entity.RequestInfoEntity requestEntity) throws org.apache.thrift.TException;

    /**
     * 写入数据库连接采集指标
     * 
     * 返回数据格式：{"code": 200, "message": "success"}
     * 
     * 
     * @param jdbcEntity
     */
    public String writeJdbcConnection(com.keruyun.commons.agent.collector.entity.JdbcConnectionEntity jdbcEntity) throws org.apache.thrift.TException;

    /**
     * 吸入SQL采集指标
     * 
     * 返回数据格式：{"code": 200, "message": "success"}
     * 
     * 
     * @param sqlEntity
     */
    public String writeSql(com.keruyun.commons.agent.collector.entity.SqlInfoEntity sqlEntity) throws org.apache.thrift.TException;

    /**
     * 写入Quartz定时任务采集指标
     * 
     * 返回数据格式：{"code": 200, "message": "success"}
     * 
     * 
     * @param quartzEntity
     */
    public String writeQuartz(com.keruyun.commons.agent.collector.entity.QuartzEntity quartzEntity) throws org.apache.thrift.TException;

    /**
     * 写入扩展采集指标
     * 
     * 返回数据格式：{"code": 200, "message": "success"}
     * 
     * 
     * @param extendEntity
     */
    public String writeExtends(com.keruyun.commons.agent.collector.entity.ExtendEntity extendEntity) throws org.apache.thrift.TException;

    /**
     * 写入服务调用Redis、MongoDB、Mysql采集指标
     * 
     * 返回数据格式：{"code": 200, "message": "success"}
     * 
     * 
     * @param middlewareEntity
     */
    public String writeMiddlewareInfo(com.keruyun.commons.agent.collector.entity.MiddlewareEntity middlewareEntity) throws org.apache.thrift.TException;

    /**
     * 写入Redis、MongoDB、Mysql集群采集指标
     * 
     * 返回数据格式：{"code": 200, "message": "success"}
     * 
     * 
     * @param clusterEntity
     */
    public String writeClusterInfo(com.keruyun.commons.agent.collector.entity.ClusterEntity clusterEntity) throws org.apache.thrift.TException;

    /**
     * 写入Http采集指标
     * 
     * 返回数据格式：{"code": 200, "message": "success"}
     * 
     * 
     * @param httpEntity
     */
    public String writeHttpInfo(com.keruyun.commons.agent.collector.entity.HttpEntity httpEntity) throws org.apache.thrift.TException;

    /**
     * 写入Kafka采集指标
     * 
     * 返回数据格式：{"code": 200, "message": "success"}
     * 
     * 
     * @param kafkaEntity
     */
    public String writeKafkaInfo(com.keruyun.commons.agent.collector.entity.KafkaEntity kafkaEntity) throws org.apache.thrift.TException;

    /**
     * 写入Quartz Job&Trigger列表和执行日志
     * 
     * 返回数据格式：{"code": 200, "message": "success"}
     * 
     * 
     * @param quartzInfoEntity
     */
    public String writeQuartzInfo(com.keruyun.commons.agent.collector.entity.QuartzInfoEntity quartzInfoEntity) throws org.apache.thrift.TException;

    /**
     * 写入JVM明细和系统明细
     * 
     * 返回数据格式：{"code": 200, "message": "success"}
     * 
     * 
     * @param detailEntity
     */
    public String writeDetail(com.keruyun.commons.agent.collector.entity.DetailEntity detailEntity) throws org.apache.thrift.TException;

    /**
     * 写入应用调用Kafka信息
     * 
     * 返回数据格式：{"code": 200, "message": "success"}
     * 
     * 
     * @param appKafkaEntity
     */
    public String writeAppKafka(com.keruyun.commons.agent.collector.entity.AppKafkaEntity appKafkaEntity) throws org.apache.thrift.TException;

    /**
     * 写入Zookeeper信息
     * 
     * 返回数据格式：{"code": 200, "message": "success"}
     * 
     * 
     * @param zookeeperEntity
     */
    public String writeZookeeperInfo(com.keruyun.commons.agent.collector.entity.ZookeeperEntity zookeeperEntity) throws org.apache.thrift.TException;

    /**
     * 写入错误信息
     * 
     * 
     * @param failureMessageEntity
     */
    public String writeFailureMessage(com.keruyun.commons.agent.collector.entity.FailureMessageEntity failureMessageEntity) throws org.apache.thrift.TException;

    /**
     * 写入spring restful风格uri pattern
     * 
     * 
     * @param springRestfulUriPatternEntity
     */
    public String writeSpringRestfulUriPattern(com.keruyun.commons.agent.collector.entity.SpringRestfulUriPatternEntity springRestfulUriPatternEntity) throws org.apache.thrift.TException;

    /**
     * 写入Channel指标
     * 
     * 
     * @param channelEntity
     */
    public String writeChannel(com.keruyun.commons.agent.collector.entity.ChannelEntity channelEntity) throws org.apache.thrift.TException;

    /**
     * 服务器健康状况检查
     * 
     */
    public com.keruyun.commons.agent.collector.entity.ResponseResultEntity ping() throws org.apache.thrift.TException;

    /**
     * 写入Trace全链路数据
     * 
     * 
     * @param traces
     */
    public com.keruyun.commons.agent.collector.entity.ResponseResultEntity writeTrace(java.util.List<String> traces) throws org.apache.thrift.TException;

    /**
     * 写入Netty数据
     * 
     * 
     * @param nettyEntity
     */
    public String writeNetty(com.keruyun.commons.agent.collector.entity.NettyEntity nettyEntity) throws org.apache.thrift.TException;

    /**
     * 获取agent配置
     * 
     * 
     * @param appName
     */
    public String getAgentConfig(String appName) throws org.apache.thrift.TException;

    /**
     * 写入业务自定义指标数据
     * 
     * @param kMetricsEntity
     */
    public String writeKMetrics(com.keruyun.commons.agent.collector.entity.KMetricsEntity kMetricsEntity) throws org.apache.thrift.TException;

    /**
     * 写入Kafka Client指标数据
     * 
     * @param kafkaClientEntity
     */
    public String writeKafkaClientMetrics(com.keruyun.commons.agent.collector.entity.KafkaClientEntity kafkaClientEntity) throws org.apache.thrift.TException;

    /**
     * 写入Kafka Properties配置
     * 
     * @param clientPropertiesEntity
     */
    public String writeClientProperties(com.keruyun.commons.agent.collector.entity.ClientPropertiesEntity clientPropertiesEntity) throws org.apache.thrift.TException;

    public String writeTraceLogs(com.keruyun.commons.agent.collector.entity.TraceLogEntities traces) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void writeJvmInfo(com.keruyun.commons.agent.collector.entity.InstanceInfoEntity InstanceInfoEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeServerInfo(com.keruyun.commons.agent.collector.entity.ServerInfoEntity serverInfoEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeRequest(com.keruyun.commons.agent.collector.entity.RequestInfoEntity requestEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeJdbcConnection(com.keruyun.commons.agent.collector.entity.JdbcConnectionEntity jdbcEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeSql(com.keruyun.commons.agent.collector.entity.SqlInfoEntity sqlEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeQuartz(com.keruyun.commons.agent.collector.entity.QuartzEntity quartzEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeExtends(com.keruyun.commons.agent.collector.entity.ExtendEntity extendEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeMiddlewareInfo(com.keruyun.commons.agent.collector.entity.MiddlewareEntity middlewareEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeClusterInfo(com.keruyun.commons.agent.collector.entity.ClusterEntity clusterEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeHttpInfo(com.keruyun.commons.agent.collector.entity.HttpEntity httpEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeKafkaInfo(com.keruyun.commons.agent.collector.entity.KafkaEntity kafkaEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeQuartzInfo(com.keruyun.commons.agent.collector.entity.QuartzInfoEntity quartzInfoEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeDetail(com.keruyun.commons.agent.collector.entity.DetailEntity detailEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeAppKafka(com.keruyun.commons.agent.collector.entity.AppKafkaEntity appKafkaEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeZookeeperInfo(com.keruyun.commons.agent.collector.entity.ZookeeperEntity zookeeperEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeFailureMessage(com.keruyun.commons.agent.collector.entity.FailureMessageEntity failureMessageEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeSpringRestfulUriPattern(com.keruyun.commons.agent.collector.entity.SpringRestfulUriPatternEntity springRestfulUriPatternEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeChannel(com.keruyun.commons.agent.collector.entity.ChannelEntity channelEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void ping(org.apache.thrift.async.AsyncMethodCallback<com.keruyun.commons.agent.collector.entity.ResponseResultEntity> resultHandler) throws org.apache.thrift.TException;

    public void writeTrace(java.util.List<String> traces, org.apache.thrift.async.AsyncMethodCallback<com.keruyun.commons.agent.collector.entity.ResponseResultEntity> resultHandler) throws org.apache.thrift.TException;

    public void writeNetty(com.keruyun.commons.agent.collector.entity.NettyEntity nettyEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void getAgentConfig(String appName, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeKMetrics(com.keruyun.commons.agent.collector.entity.KMetricsEntity kMetricsEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeKafkaClientMetrics(com.keruyun.commons.agent.collector.entity.KafkaClientEntity kafkaClientEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeClientProperties(com.keruyun.commons.agent.collector.entity.ClientPropertiesEntity clientPropertiesEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void writeTraceLogs(com.keruyun.commons.agent.collector.entity.TraceLogEntities traces, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String writeJvmInfo(com.keruyun.commons.agent.collector.entity.InstanceInfoEntity InstanceInfoEntity) throws org.apache.thrift.TException
    {
      send_writeJvmInfo(InstanceInfoEntity);
      return recv_writeJvmInfo();
    }

    public void send_writeJvmInfo(com.keruyun.commons.agent.collector.entity.InstanceInfoEntity InstanceInfoEntity) throws org.apache.thrift.TException
    {
      writeJvmInfo_args args = new writeJvmInfo_args();
      args.setInstanceInfoEntity(InstanceInfoEntity);
      sendBase("writeJvmInfo", args);
    }

    public String recv_writeJvmInfo() throws org.apache.thrift.TException
    {
      writeJvmInfo_result result = new writeJvmInfo_result();
      receiveBase(result, "writeJvmInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeJvmInfo failed: unknown result");
    }

    public String writeServerInfo(com.keruyun.commons.agent.collector.entity.ServerInfoEntity serverInfoEntity) throws org.apache.thrift.TException
    {
      send_writeServerInfo(serverInfoEntity);
      return recv_writeServerInfo();
    }

    public void send_writeServerInfo(com.keruyun.commons.agent.collector.entity.ServerInfoEntity serverInfoEntity) throws org.apache.thrift.TException
    {
      writeServerInfo_args args = new writeServerInfo_args();
      args.setServerInfoEntity(serverInfoEntity);
      sendBase("writeServerInfo", args);
    }

    public String recv_writeServerInfo() throws org.apache.thrift.TException
    {
      writeServerInfo_result result = new writeServerInfo_result();
      receiveBase(result, "writeServerInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeServerInfo failed: unknown result");
    }

    public String writeRequest(com.keruyun.commons.agent.collector.entity.RequestInfoEntity requestEntity) throws org.apache.thrift.TException
    {
      send_writeRequest(requestEntity);
      return recv_writeRequest();
    }

    public void send_writeRequest(com.keruyun.commons.agent.collector.entity.RequestInfoEntity requestEntity) throws org.apache.thrift.TException
    {
      writeRequest_args args = new writeRequest_args();
      args.setRequestEntity(requestEntity);
      sendBase("writeRequest", args);
    }

    public String recv_writeRequest() throws org.apache.thrift.TException
    {
      writeRequest_result result = new writeRequest_result();
      receiveBase(result, "writeRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeRequest failed: unknown result");
    }

    public String writeJdbcConnection(com.keruyun.commons.agent.collector.entity.JdbcConnectionEntity jdbcEntity) throws org.apache.thrift.TException
    {
      send_writeJdbcConnection(jdbcEntity);
      return recv_writeJdbcConnection();
    }

    public void send_writeJdbcConnection(com.keruyun.commons.agent.collector.entity.JdbcConnectionEntity jdbcEntity) throws org.apache.thrift.TException
    {
      writeJdbcConnection_args args = new writeJdbcConnection_args();
      args.setJdbcEntity(jdbcEntity);
      sendBase("writeJdbcConnection", args);
    }

    public String recv_writeJdbcConnection() throws org.apache.thrift.TException
    {
      writeJdbcConnection_result result = new writeJdbcConnection_result();
      receiveBase(result, "writeJdbcConnection");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeJdbcConnection failed: unknown result");
    }

    public String writeSql(com.keruyun.commons.agent.collector.entity.SqlInfoEntity sqlEntity) throws org.apache.thrift.TException
    {
      send_writeSql(sqlEntity);
      return recv_writeSql();
    }

    public void send_writeSql(com.keruyun.commons.agent.collector.entity.SqlInfoEntity sqlEntity) throws org.apache.thrift.TException
    {
      writeSql_args args = new writeSql_args();
      args.setSqlEntity(sqlEntity);
      sendBase("writeSql", args);
    }

    public String recv_writeSql() throws org.apache.thrift.TException
    {
      writeSql_result result = new writeSql_result();
      receiveBase(result, "writeSql");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeSql failed: unknown result");
    }

    public String writeQuartz(com.keruyun.commons.agent.collector.entity.QuartzEntity quartzEntity) throws org.apache.thrift.TException
    {
      send_writeQuartz(quartzEntity);
      return recv_writeQuartz();
    }

    public void send_writeQuartz(com.keruyun.commons.agent.collector.entity.QuartzEntity quartzEntity) throws org.apache.thrift.TException
    {
      writeQuartz_args args = new writeQuartz_args();
      args.setQuartzEntity(quartzEntity);
      sendBase("writeQuartz", args);
    }

    public String recv_writeQuartz() throws org.apache.thrift.TException
    {
      writeQuartz_result result = new writeQuartz_result();
      receiveBase(result, "writeQuartz");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeQuartz failed: unknown result");
    }

    public String writeExtends(com.keruyun.commons.agent.collector.entity.ExtendEntity extendEntity) throws org.apache.thrift.TException
    {
      send_writeExtends(extendEntity);
      return recv_writeExtends();
    }

    public void send_writeExtends(com.keruyun.commons.agent.collector.entity.ExtendEntity extendEntity) throws org.apache.thrift.TException
    {
      writeExtends_args args = new writeExtends_args();
      args.setExtendEntity(extendEntity);
      sendBase("writeExtends", args);
    }

    public String recv_writeExtends() throws org.apache.thrift.TException
    {
      writeExtends_result result = new writeExtends_result();
      receiveBase(result, "writeExtends");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeExtends failed: unknown result");
    }

    public String writeMiddlewareInfo(com.keruyun.commons.agent.collector.entity.MiddlewareEntity middlewareEntity) throws org.apache.thrift.TException
    {
      send_writeMiddlewareInfo(middlewareEntity);
      return recv_writeMiddlewareInfo();
    }

    public void send_writeMiddlewareInfo(com.keruyun.commons.agent.collector.entity.MiddlewareEntity middlewareEntity) throws org.apache.thrift.TException
    {
      writeMiddlewareInfo_args args = new writeMiddlewareInfo_args();
      args.setMiddlewareEntity(middlewareEntity);
      sendBase("writeMiddlewareInfo", args);
    }

    public String recv_writeMiddlewareInfo() throws org.apache.thrift.TException
    {
      writeMiddlewareInfo_result result = new writeMiddlewareInfo_result();
      receiveBase(result, "writeMiddlewareInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeMiddlewareInfo failed: unknown result");
    }

    public String writeClusterInfo(com.keruyun.commons.agent.collector.entity.ClusterEntity clusterEntity) throws org.apache.thrift.TException
    {
      send_writeClusterInfo(clusterEntity);
      return recv_writeClusterInfo();
    }

    public void send_writeClusterInfo(com.keruyun.commons.agent.collector.entity.ClusterEntity clusterEntity) throws org.apache.thrift.TException
    {
      writeClusterInfo_args args = new writeClusterInfo_args();
      args.setClusterEntity(clusterEntity);
      sendBase("writeClusterInfo", args);
    }

    public String recv_writeClusterInfo() throws org.apache.thrift.TException
    {
      writeClusterInfo_result result = new writeClusterInfo_result();
      receiveBase(result, "writeClusterInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeClusterInfo failed: unknown result");
    }

    public String writeHttpInfo(com.keruyun.commons.agent.collector.entity.HttpEntity httpEntity) throws org.apache.thrift.TException
    {
      send_writeHttpInfo(httpEntity);
      return recv_writeHttpInfo();
    }

    public void send_writeHttpInfo(com.keruyun.commons.agent.collector.entity.HttpEntity httpEntity) throws org.apache.thrift.TException
    {
      writeHttpInfo_args args = new writeHttpInfo_args();
      args.setHttpEntity(httpEntity);
      sendBase("writeHttpInfo", args);
    }

    public String recv_writeHttpInfo() throws org.apache.thrift.TException
    {
      writeHttpInfo_result result = new writeHttpInfo_result();
      receiveBase(result, "writeHttpInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeHttpInfo failed: unknown result");
    }

    public String writeKafkaInfo(com.keruyun.commons.agent.collector.entity.KafkaEntity kafkaEntity) throws org.apache.thrift.TException
    {
      send_writeKafkaInfo(kafkaEntity);
      return recv_writeKafkaInfo();
    }

    public void send_writeKafkaInfo(com.keruyun.commons.agent.collector.entity.KafkaEntity kafkaEntity) throws org.apache.thrift.TException
    {
      writeKafkaInfo_args args = new writeKafkaInfo_args();
      args.setKafkaEntity(kafkaEntity);
      sendBase("writeKafkaInfo", args);
    }

    public String recv_writeKafkaInfo() throws org.apache.thrift.TException
    {
      writeKafkaInfo_result result = new writeKafkaInfo_result();
      receiveBase(result, "writeKafkaInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeKafkaInfo failed: unknown result");
    }

    public String writeQuartzInfo(com.keruyun.commons.agent.collector.entity.QuartzInfoEntity quartzInfoEntity) throws org.apache.thrift.TException
    {
      send_writeQuartzInfo(quartzInfoEntity);
      return recv_writeQuartzInfo();
    }

    public void send_writeQuartzInfo(com.keruyun.commons.agent.collector.entity.QuartzInfoEntity quartzInfoEntity) throws org.apache.thrift.TException
    {
      writeQuartzInfo_args args = new writeQuartzInfo_args();
      args.setQuartzInfoEntity(quartzInfoEntity);
      sendBase("writeQuartzInfo", args);
    }

    public String recv_writeQuartzInfo() throws org.apache.thrift.TException
    {
      writeQuartzInfo_result result = new writeQuartzInfo_result();
      receiveBase(result, "writeQuartzInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeQuartzInfo failed: unknown result");
    }

    public String writeDetail(com.keruyun.commons.agent.collector.entity.DetailEntity detailEntity) throws org.apache.thrift.TException
    {
      send_writeDetail(detailEntity);
      return recv_writeDetail();
    }

    public void send_writeDetail(com.keruyun.commons.agent.collector.entity.DetailEntity detailEntity) throws org.apache.thrift.TException
    {
      writeDetail_args args = new writeDetail_args();
      args.setDetailEntity(detailEntity);
      sendBase("writeDetail", args);
    }

    public String recv_writeDetail() throws org.apache.thrift.TException
    {
      writeDetail_result result = new writeDetail_result();
      receiveBase(result, "writeDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeDetail failed: unknown result");
    }

    public String writeAppKafka(com.keruyun.commons.agent.collector.entity.AppKafkaEntity appKafkaEntity) throws org.apache.thrift.TException
    {
      send_writeAppKafka(appKafkaEntity);
      return recv_writeAppKafka();
    }

    public void send_writeAppKafka(com.keruyun.commons.agent.collector.entity.AppKafkaEntity appKafkaEntity) throws org.apache.thrift.TException
    {
      writeAppKafka_args args = new writeAppKafka_args();
      args.setAppKafkaEntity(appKafkaEntity);
      sendBase("writeAppKafka", args);
    }

    public String recv_writeAppKafka() throws org.apache.thrift.TException
    {
      writeAppKafka_result result = new writeAppKafka_result();
      receiveBase(result, "writeAppKafka");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeAppKafka failed: unknown result");
    }

    public String writeZookeeperInfo(com.keruyun.commons.agent.collector.entity.ZookeeperEntity zookeeperEntity) throws org.apache.thrift.TException
    {
      send_writeZookeeperInfo(zookeeperEntity);
      return recv_writeZookeeperInfo();
    }

    public void send_writeZookeeperInfo(com.keruyun.commons.agent.collector.entity.ZookeeperEntity zookeeperEntity) throws org.apache.thrift.TException
    {
      writeZookeeperInfo_args args = new writeZookeeperInfo_args();
      args.setZookeeperEntity(zookeeperEntity);
      sendBase("writeZookeeperInfo", args);
    }

    public String recv_writeZookeeperInfo() throws org.apache.thrift.TException
    {
      writeZookeeperInfo_result result = new writeZookeeperInfo_result();
      receiveBase(result, "writeZookeeperInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeZookeeperInfo failed: unknown result");
    }

    public String writeFailureMessage(com.keruyun.commons.agent.collector.entity.FailureMessageEntity failureMessageEntity) throws org.apache.thrift.TException
    {
      send_writeFailureMessage(failureMessageEntity);
      return recv_writeFailureMessage();
    }

    public void send_writeFailureMessage(com.keruyun.commons.agent.collector.entity.FailureMessageEntity failureMessageEntity) throws org.apache.thrift.TException
    {
      writeFailureMessage_args args = new writeFailureMessage_args();
      args.setFailureMessageEntity(failureMessageEntity);
      sendBase("writeFailureMessage", args);
    }

    public String recv_writeFailureMessage() throws org.apache.thrift.TException
    {
      writeFailureMessage_result result = new writeFailureMessage_result();
      receiveBase(result, "writeFailureMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeFailureMessage failed: unknown result");
    }

    public String writeSpringRestfulUriPattern(com.keruyun.commons.agent.collector.entity.SpringRestfulUriPatternEntity springRestfulUriPatternEntity) throws org.apache.thrift.TException
    {
      send_writeSpringRestfulUriPattern(springRestfulUriPatternEntity);
      return recv_writeSpringRestfulUriPattern();
    }

    public void send_writeSpringRestfulUriPattern(com.keruyun.commons.agent.collector.entity.SpringRestfulUriPatternEntity springRestfulUriPatternEntity) throws org.apache.thrift.TException
    {
      writeSpringRestfulUriPattern_args args = new writeSpringRestfulUriPattern_args();
      args.setSpringRestfulUriPatternEntity(springRestfulUriPatternEntity);
      sendBase("writeSpringRestfulUriPattern", args);
    }

    public String recv_writeSpringRestfulUriPattern() throws org.apache.thrift.TException
    {
      writeSpringRestfulUriPattern_result result = new writeSpringRestfulUriPattern_result();
      receiveBase(result, "writeSpringRestfulUriPattern");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeSpringRestfulUriPattern failed: unknown result");
    }

    public String writeChannel(com.keruyun.commons.agent.collector.entity.ChannelEntity channelEntity) throws org.apache.thrift.TException
    {
      send_writeChannel(channelEntity);
      return recv_writeChannel();
    }

    public void send_writeChannel(com.keruyun.commons.agent.collector.entity.ChannelEntity channelEntity) throws org.apache.thrift.TException
    {
      writeChannel_args args = new writeChannel_args();
      args.setChannelEntity(channelEntity);
      sendBase("writeChannel", args);
    }

    public String recv_writeChannel() throws org.apache.thrift.TException
    {
      writeChannel_result result = new writeChannel_result();
      receiveBase(result, "writeChannel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeChannel failed: unknown result");
    }

    public com.keruyun.commons.agent.collector.entity.ResponseResultEntity ping() throws org.apache.thrift.TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public com.keruyun.commons.agent.collector.entity.ResponseResultEntity recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public com.keruyun.commons.agent.collector.entity.ResponseResultEntity writeTrace(java.util.List<String> traces) throws org.apache.thrift.TException
    {
      send_writeTrace(traces);
      return recv_writeTrace();
    }

    public void send_writeTrace(java.util.List<String> traces) throws org.apache.thrift.TException
    {
      writeTrace_args args = new writeTrace_args();
      args.setTraces(traces);
      sendBase("writeTrace", args);
    }

    public com.keruyun.commons.agent.collector.entity.ResponseResultEntity recv_writeTrace() throws org.apache.thrift.TException
    {
      writeTrace_result result = new writeTrace_result();
      receiveBase(result, "writeTrace");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeTrace failed: unknown result");
    }

    public String writeNetty(com.keruyun.commons.agent.collector.entity.NettyEntity nettyEntity) throws org.apache.thrift.TException
    {
      send_writeNetty(nettyEntity);
      return recv_writeNetty();
    }

    public void send_writeNetty(com.keruyun.commons.agent.collector.entity.NettyEntity nettyEntity) throws org.apache.thrift.TException
    {
      writeNetty_args args = new writeNetty_args();
      args.setNettyEntity(nettyEntity);
      sendBase("writeNetty", args);
    }

    public String recv_writeNetty() throws org.apache.thrift.TException
    {
      writeNetty_result result = new writeNetty_result();
      receiveBase(result, "writeNetty");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeNetty failed: unknown result");
    }

    public String getAgentConfig(String appName) throws org.apache.thrift.TException
    {
      send_getAgentConfig(appName);
      return recv_getAgentConfig();
    }

    public void send_getAgentConfig(String appName) throws org.apache.thrift.TException
    {
      getAgentConfig_args args = new getAgentConfig_args();
      args.setAppName(appName);
      sendBase("getAgentConfig", args);
    }

    public String recv_getAgentConfig() throws org.apache.thrift.TException
    {
      getAgentConfig_result result = new getAgentConfig_result();
      receiveBase(result, "getAgentConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAgentConfig failed: unknown result");
    }

    public String writeKMetrics(com.keruyun.commons.agent.collector.entity.KMetricsEntity kMetricsEntity) throws org.apache.thrift.TException
    {
      send_writeKMetrics(kMetricsEntity);
      return recv_writeKMetrics();
    }

    public void send_writeKMetrics(com.keruyun.commons.agent.collector.entity.KMetricsEntity kMetricsEntity) throws org.apache.thrift.TException
    {
      writeKMetrics_args args = new writeKMetrics_args();
      args.setKMetricsEntity(kMetricsEntity);
      sendBase("writeKMetrics", args);
    }

    public String recv_writeKMetrics() throws org.apache.thrift.TException
    {
      writeKMetrics_result result = new writeKMetrics_result();
      receiveBase(result, "writeKMetrics");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeKMetrics failed: unknown result");
    }

    public String writeKafkaClientMetrics(com.keruyun.commons.agent.collector.entity.KafkaClientEntity kafkaClientEntity) throws org.apache.thrift.TException
    {
      send_writeKafkaClientMetrics(kafkaClientEntity);
      return recv_writeKafkaClientMetrics();
    }

    public void send_writeKafkaClientMetrics(com.keruyun.commons.agent.collector.entity.KafkaClientEntity kafkaClientEntity) throws org.apache.thrift.TException
    {
      writeKafkaClientMetrics_args args = new writeKafkaClientMetrics_args();
      args.setKafkaClientEntity(kafkaClientEntity);
      sendBase("writeKafkaClientMetrics", args);
    }

    public String recv_writeKafkaClientMetrics() throws org.apache.thrift.TException
    {
      writeKafkaClientMetrics_result result = new writeKafkaClientMetrics_result();
      receiveBase(result, "writeKafkaClientMetrics");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeKafkaClientMetrics failed: unknown result");
    }

    public String writeClientProperties(com.keruyun.commons.agent.collector.entity.ClientPropertiesEntity clientPropertiesEntity) throws org.apache.thrift.TException
    {
      send_writeClientProperties(clientPropertiesEntity);
      return recv_writeClientProperties();
    }

    public void send_writeClientProperties(com.keruyun.commons.agent.collector.entity.ClientPropertiesEntity clientPropertiesEntity) throws org.apache.thrift.TException
    {
      writeClientProperties_args args = new writeClientProperties_args();
      args.setClientPropertiesEntity(clientPropertiesEntity);
      sendBase("writeClientProperties", args);
    }

    public String recv_writeClientProperties() throws org.apache.thrift.TException
    {
      writeClientProperties_result result = new writeClientProperties_result();
      receiveBase(result, "writeClientProperties");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeClientProperties failed: unknown result");
    }

    public String writeTraceLogs(com.keruyun.commons.agent.collector.entity.TraceLogEntities traces) throws org.apache.thrift.TException
    {
      send_writeTraceLogs(traces);
      return recv_writeTraceLogs();
    }

    public void send_writeTraceLogs(com.keruyun.commons.agent.collector.entity.TraceLogEntities traces) throws org.apache.thrift.TException
    {
      writeTraceLogs_args args = new writeTraceLogs_args();
      args.setTraces(traces);
      sendBase("writeTraceLogs", args);
    }

    public String recv_writeTraceLogs() throws org.apache.thrift.TException
    {
      writeTraceLogs_result result = new writeTraceLogs_result();
      receiveBase(result, "writeTraceLogs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeTraceLogs failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void writeJvmInfo(com.keruyun.commons.agent.collector.entity.InstanceInfoEntity InstanceInfoEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeJvmInfo_call method_call = new writeJvmInfo_call(InstanceInfoEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeJvmInfo_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.InstanceInfoEntity InstanceInfoEntity;
      public writeJvmInfo_call(com.keruyun.commons.agent.collector.entity.InstanceInfoEntity InstanceInfoEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.InstanceInfoEntity = InstanceInfoEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeJvmInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeJvmInfo_args args = new writeJvmInfo_args();
        args.setInstanceInfoEntity(InstanceInfoEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeJvmInfo();
      }
    }

    public void writeServerInfo(com.keruyun.commons.agent.collector.entity.ServerInfoEntity serverInfoEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeServerInfo_call method_call = new writeServerInfo_call(serverInfoEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeServerInfo_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.ServerInfoEntity serverInfoEntity;
      public writeServerInfo_call(com.keruyun.commons.agent.collector.entity.ServerInfoEntity serverInfoEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverInfoEntity = serverInfoEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeServerInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeServerInfo_args args = new writeServerInfo_args();
        args.setServerInfoEntity(serverInfoEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeServerInfo();
      }
    }

    public void writeRequest(com.keruyun.commons.agent.collector.entity.RequestInfoEntity requestEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeRequest_call method_call = new writeRequest_call(requestEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeRequest_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.RequestInfoEntity requestEntity;
      public writeRequest_call(com.keruyun.commons.agent.collector.entity.RequestInfoEntity requestEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestEntity = requestEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeRequest_args args = new writeRequest_args();
        args.setRequestEntity(requestEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeRequest();
      }
    }

    public void writeJdbcConnection(com.keruyun.commons.agent.collector.entity.JdbcConnectionEntity jdbcEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeJdbcConnection_call method_call = new writeJdbcConnection_call(jdbcEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeJdbcConnection_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.JdbcConnectionEntity jdbcEntity;
      public writeJdbcConnection_call(com.keruyun.commons.agent.collector.entity.JdbcConnectionEntity jdbcEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jdbcEntity = jdbcEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeJdbcConnection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeJdbcConnection_args args = new writeJdbcConnection_args();
        args.setJdbcEntity(jdbcEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeJdbcConnection();
      }
    }

    public void writeSql(com.keruyun.commons.agent.collector.entity.SqlInfoEntity sqlEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeSql_call method_call = new writeSql_call(sqlEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeSql_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.SqlInfoEntity sqlEntity;
      public writeSql_call(com.keruyun.commons.agent.collector.entity.SqlInfoEntity sqlEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sqlEntity = sqlEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeSql", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeSql_args args = new writeSql_args();
        args.setSqlEntity(sqlEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeSql();
      }
    }

    public void writeQuartz(com.keruyun.commons.agent.collector.entity.QuartzEntity quartzEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeQuartz_call method_call = new writeQuartz_call(quartzEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeQuartz_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.QuartzEntity quartzEntity;
      public writeQuartz_call(com.keruyun.commons.agent.collector.entity.QuartzEntity quartzEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.quartzEntity = quartzEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeQuartz", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeQuartz_args args = new writeQuartz_args();
        args.setQuartzEntity(quartzEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeQuartz();
      }
    }

    public void writeExtends(com.keruyun.commons.agent.collector.entity.ExtendEntity extendEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeExtends_call method_call = new writeExtends_call(extendEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeExtends_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.ExtendEntity extendEntity;
      public writeExtends_call(com.keruyun.commons.agent.collector.entity.ExtendEntity extendEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.extendEntity = extendEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeExtends", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeExtends_args args = new writeExtends_args();
        args.setExtendEntity(extendEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeExtends();
      }
    }

    public void writeMiddlewareInfo(com.keruyun.commons.agent.collector.entity.MiddlewareEntity middlewareEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeMiddlewareInfo_call method_call = new writeMiddlewareInfo_call(middlewareEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeMiddlewareInfo_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.MiddlewareEntity middlewareEntity;
      public writeMiddlewareInfo_call(com.keruyun.commons.agent.collector.entity.MiddlewareEntity middlewareEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.middlewareEntity = middlewareEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeMiddlewareInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeMiddlewareInfo_args args = new writeMiddlewareInfo_args();
        args.setMiddlewareEntity(middlewareEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeMiddlewareInfo();
      }
    }

    public void writeClusterInfo(com.keruyun.commons.agent.collector.entity.ClusterEntity clusterEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeClusterInfo_call method_call = new writeClusterInfo_call(clusterEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeClusterInfo_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.ClusterEntity clusterEntity;
      public writeClusterInfo_call(com.keruyun.commons.agent.collector.entity.ClusterEntity clusterEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clusterEntity = clusterEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeClusterInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeClusterInfo_args args = new writeClusterInfo_args();
        args.setClusterEntity(clusterEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeClusterInfo();
      }
    }

    public void writeHttpInfo(com.keruyun.commons.agent.collector.entity.HttpEntity httpEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeHttpInfo_call method_call = new writeHttpInfo_call(httpEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeHttpInfo_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.HttpEntity httpEntity;
      public writeHttpInfo_call(com.keruyun.commons.agent.collector.entity.HttpEntity httpEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.httpEntity = httpEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeHttpInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeHttpInfo_args args = new writeHttpInfo_args();
        args.setHttpEntity(httpEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeHttpInfo();
      }
    }

    public void writeKafkaInfo(com.keruyun.commons.agent.collector.entity.KafkaEntity kafkaEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeKafkaInfo_call method_call = new writeKafkaInfo_call(kafkaEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeKafkaInfo_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.KafkaEntity kafkaEntity;
      public writeKafkaInfo_call(com.keruyun.commons.agent.collector.entity.KafkaEntity kafkaEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.kafkaEntity = kafkaEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeKafkaInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeKafkaInfo_args args = new writeKafkaInfo_args();
        args.setKafkaEntity(kafkaEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeKafkaInfo();
      }
    }

    public void writeQuartzInfo(com.keruyun.commons.agent.collector.entity.QuartzInfoEntity quartzInfoEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeQuartzInfo_call method_call = new writeQuartzInfo_call(quartzInfoEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeQuartzInfo_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.QuartzInfoEntity quartzInfoEntity;
      public writeQuartzInfo_call(com.keruyun.commons.agent.collector.entity.QuartzInfoEntity quartzInfoEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.quartzInfoEntity = quartzInfoEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeQuartzInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeQuartzInfo_args args = new writeQuartzInfo_args();
        args.setQuartzInfoEntity(quartzInfoEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeQuartzInfo();
      }
    }

    public void writeDetail(com.keruyun.commons.agent.collector.entity.DetailEntity detailEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeDetail_call method_call = new writeDetail_call(detailEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeDetail_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.DetailEntity detailEntity;
      public writeDetail_call(com.keruyun.commons.agent.collector.entity.DetailEntity detailEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.detailEntity = detailEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeDetail_args args = new writeDetail_args();
        args.setDetailEntity(detailEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeDetail();
      }
    }

    public void writeAppKafka(com.keruyun.commons.agent.collector.entity.AppKafkaEntity appKafkaEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeAppKafka_call method_call = new writeAppKafka_call(appKafkaEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeAppKafka_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.AppKafkaEntity appKafkaEntity;
      public writeAppKafka_call(com.keruyun.commons.agent.collector.entity.AppKafkaEntity appKafkaEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appKafkaEntity = appKafkaEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeAppKafka", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeAppKafka_args args = new writeAppKafka_args();
        args.setAppKafkaEntity(appKafkaEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeAppKafka();
      }
    }

    public void writeZookeeperInfo(com.keruyun.commons.agent.collector.entity.ZookeeperEntity zookeeperEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeZookeeperInfo_call method_call = new writeZookeeperInfo_call(zookeeperEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeZookeeperInfo_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.ZookeeperEntity zookeeperEntity;
      public writeZookeeperInfo_call(com.keruyun.commons.agent.collector.entity.ZookeeperEntity zookeeperEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.zookeeperEntity = zookeeperEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeZookeeperInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeZookeeperInfo_args args = new writeZookeeperInfo_args();
        args.setZookeeperEntity(zookeeperEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeZookeeperInfo();
      }
    }

    public void writeFailureMessage(com.keruyun.commons.agent.collector.entity.FailureMessageEntity failureMessageEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeFailureMessage_call method_call = new writeFailureMessage_call(failureMessageEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeFailureMessage_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.FailureMessageEntity failureMessageEntity;
      public writeFailureMessage_call(com.keruyun.commons.agent.collector.entity.FailureMessageEntity failureMessageEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.failureMessageEntity = failureMessageEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeFailureMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeFailureMessage_args args = new writeFailureMessage_args();
        args.setFailureMessageEntity(failureMessageEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeFailureMessage();
      }
    }

    public void writeSpringRestfulUriPattern(com.keruyun.commons.agent.collector.entity.SpringRestfulUriPatternEntity springRestfulUriPatternEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeSpringRestfulUriPattern_call method_call = new writeSpringRestfulUriPattern_call(springRestfulUriPatternEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeSpringRestfulUriPattern_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.SpringRestfulUriPatternEntity springRestfulUriPatternEntity;
      public writeSpringRestfulUriPattern_call(com.keruyun.commons.agent.collector.entity.SpringRestfulUriPatternEntity springRestfulUriPatternEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.springRestfulUriPatternEntity = springRestfulUriPatternEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeSpringRestfulUriPattern", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeSpringRestfulUriPattern_args args = new writeSpringRestfulUriPattern_args();
        args.setSpringRestfulUriPatternEntity(springRestfulUriPatternEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeSpringRestfulUriPattern();
      }
    }

    public void writeChannel(com.keruyun.commons.agent.collector.entity.ChannelEntity channelEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeChannel_call method_call = new writeChannel_call(channelEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeChannel_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.ChannelEntity channelEntity;
      public writeChannel_call(com.keruyun.commons.agent.collector.entity.ChannelEntity channelEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelEntity = channelEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeChannel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeChannel_args args = new writeChannel_args();
        args.setChannelEntity(channelEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeChannel();
      }
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<com.keruyun.commons.agent.collector.entity.ResponseResultEntity> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<com.keruyun.commons.agent.collector.entity.ResponseResultEntity> {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<com.keruyun.commons.agent.collector.entity.ResponseResultEntity> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.keruyun.commons.agent.collector.entity.ResponseResultEntity getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void writeTrace(java.util.List<String> traces, org.apache.thrift.async.AsyncMethodCallback<com.keruyun.commons.agent.collector.entity.ResponseResultEntity> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeTrace_call method_call = new writeTrace_call(traces, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeTrace_call extends org.apache.thrift.async.TAsyncMethodCall<com.keruyun.commons.agent.collector.entity.ResponseResultEntity> {
      private java.util.List<String> traces;
      public writeTrace_call(java.util.List<String> traces, org.apache.thrift.async.AsyncMethodCallback<com.keruyun.commons.agent.collector.entity.ResponseResultEntity> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.traces = traces;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeTrace", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeTrace_args args = new writeTrace_args();
        args.setTraces(traces);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.keruyun.commons.agent.collector.entity.ResponseResultEntity getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeTrace();
      }
    }

    public void writeNetty(com.keruyun.commons.agent.collector.entity.NettyEntity nettyEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeNetty_call method_call = new writeNetty_call(nettyEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeNetty_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.NettyEntity nettyEntity;
      public writeNetty_call(com.keruyun.commons.agent.collector.entity.NettyEntity nettyEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nettyEntity = nettyEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeNetty", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeNetty_args args = new writeNetty_args();
        args.setNettyEntity(nettyEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeNetty();
      }
    }

    public void getAgentConfig(String appName, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAgentConfig_call method_call = new getAgentConfig_call(appName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAgentConfig_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String appName;
      public getAgentConfig_call(String appName, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appName = appName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAgentConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAgentConfig_args args = new getAgentConfig_args();
        args.setAppName(appName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAgentConfig();
      }
    }

    public void writeKMetrics(com.keruyun.commons.agent.collector.entity.KMetricsEntity kMetricsEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeKMetrics_call method_call = new writeKMetrics_call(kMetricsEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeKMetrics_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.KMetricsEntity kMetricsEntity;
      public writeKMetrics_call(com.keruyun.commons.agent.collector.entity.KMetricsEntity kMetricsEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.kMetricsEntity = kMetricsEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeKMetrics", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeKMetrics_args args = new writeKMetrics_args();
        args.setKMetricsEntity(kMetricsEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeKMetrics();
      }
    }

    public void writeKafkaClientMetrics(com.keruyun.commons.agent.collector.entity.KafkaClientEntity kafkaClientEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeKafkaClientMetrics_call method_call = new writeKafkaClientMetrics_call(kafkaClientEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeKafkaClientMetrics_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.KafkaClientEntity kafkaClientEntity;
      public writeKafkaClientMetrics_call(com.keruyun.commons.agent.collector.entity.KafkaClientEntity kafkaClientEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.kafkaClientEntity = kafkaClientEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeKafkaClientMetrics", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeKafkaClientMetrics_args args = new writeKafkaClientMetrics_args();
        args.setKafkaClientEntity(kafkaClientEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeKafkaClientMetrics();
      }
    }

    public void writeClientProperties(com.keruyun.commons.agent.collector.entity.ClientPropertiesEntity clientPropertiesEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeClientProperties_call method_call = new writeClientProperties_call(clientPropertiesEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeClientProperties_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.ClientPropertiesEntity clientPropertiesEntity;
      public writeClientProperties_call(com.keruyun.commons.agent.collector.entity.ClientPropertiesEntity clientPropertiesEntity, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientPropertiesEntity = clientPropertiesEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeClientProperties", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeClientProperties_args args = new writeClientProperties_args();
        args.setClientPropertiesEntity(clientPropertiesEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeClientProperties();
      }
    }

    public void writeTraceLogs(com.keruyun.commons.agent.collector.entity.TraceLogEntities traces, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeTraceLogs_call method_call = new writeTraceLogs_call(traces, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeTraceLogs_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.keruyun.commons.agent.collector.entity.TraceLogEntities traces;
      public writeTraceLogs_call(com.keruyun.commons.agent.collector.entity.TraceLogEntities traces, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.traces = traces;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeTraceLogs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeTraceLogs_args args = new writeTraceLogs_args();
        args.setTraces(traces);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeTraceLogs();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("writeJvmInfo", new writeJvmInfo());
      processMap.put("writeServerInfo", new writeServerInfo());
      processMap.put("writeRequest", new writeRequest());
      processMap.put("writeJdbcConnection", new writeJdbcConnection());
      processMap.put("writeSql", new writeSql());
      processMap.put("writeQuartz", new writeQuartz());
      processMap.put("writeExtends", new writeExtends());
      processMap.put("writeMiddlewareInfo", new writeMiddlewareInfo());
      processMap.put("writeClusterInfo", new writeClusterInfo());
      processMap.put("writeHttpInfo", new writeHttpInfo());
      processMap.put("writeKafkaInfo", new writeKafkaInfo());
      processMap.put("writeQuartzInfo", new writeQuartzInfo());
      processMap.put("writeDetail", new writeDetail());
      processMap.put("writeAppKafka", new writeAppKafka());
      processMap.put("writeZookeeperInfo", new writeZookeeperInfo());
      processMap.put("writeFailureMessage", new writeFailureMessage());
      processMap.put("writeSpringRestfulUriPattern", new writeSpringRestfulUriPattern());
      processMap.put("writeChannel", new writeChannel());
      processMap.put("ping", new ping());
      processMap.put("writeTrace", new writeTrace());
      processMap.put("writeNetty", new writeNetty());
      processMap.put("getAgentConfig", new getAgentConfig());
      processMap.put("writeKMetrics", new writeKMetrics());
      processMap.put("writeKafkaClientMetrics", new writeKafkaClientMetrics());
      processMap.put("writeClientProperties", new writeClientProperties());
      processMap.put("writeTraceLogs", new writeTraceLogs());
      return processMap;
    }

    public static class writeJvmInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeJvmInfo_args> {
      public writeJvmInfo() {
        super("writeJvmInfo");
      }

      public writeJvmInfo_args getEmptyArgsInstance() {
        return new writeJvmInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeJvmInfo_result getResult(I iface, writeJvmInfo_args args) throws org.apache.thrift.TException {
        writeJvmInfo_result result = new writeJvmInfo_result();
        result.success = iface.writeJvmInfo(args.InstanceInfoEntity);
        return result;
      }
    }

    public static class writeServerInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeServerInfo_args> {
      public writeServerInfo() {
        super("writeServerInfo");
      }

      public writeServerInfo_args getEmptyArgsInstance() {
        return new writeServerInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeServerInfo_result getResult(I iface, writeServerInfo_args args) throws org.apache.thrift.TException {
        writeServerInfo_result result = new writeServerInfo_result();
        result.success = iface.writeServerInfo(args.serverInfoEntity);
        return result;
      }
    }

    public static class writeRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeRequest_args> {
      public writeRequest() {
        super("writeRequest");
      }

      public writeRequest_args getEmptyArgsInstance() {
        return new writeRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeRequest_result getResult(I iface, writeRequest_args args) throws org.apache.thrift.TException {
        writeRequest_result result = new writeRequest_result();
        result.success = iface.writeRequest(args.requestEntity);
        return result;
      }
    }

    public static class writeJdbcConnection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeJdbcConnection_args> {
      public writeJdbcConnection() {
        super("writeJdbcConnection");
      }

      public writeJdbcConnection_args getEmptyArgsInstance() {
        return new writeJdbcConnection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeJdbcConnection_result getResult(I iface, writeJdbcConnection_args args) throws org.apache.thrift.TException {
        writeJdbcConnection_result result = new writeJdbcConnection_result();
        result.success = iface.writeJdbcConnection(args.jdbcEntity);
        return result;
      }
    }

    public static class writeSql<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeSql_args> {
      public writeSql() {
        super("writeSql");
      }

      public writeSql_args getEmptyArgsInstance() {
        return new writeSql_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeSql_result getResult(I iface, writeSql_args args) throws org.apache.thrift.TException {
        writeSql_result result = new writeSql_result();
        result.success = iface.writeSql(args.sqlEntity);
        return result;
      }
    }

    public static class writeQuartz<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeQuartz_args> {
      public writeQuartz() {
        super("writeQuartz");
      }

      public writeQuartz_args getEmptyArgsInstance() {
        return new writeQuartz_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeQuartz_result getResult(I iface, writeQuartz_args args) throws org.apache.thrift.TException {
        writeQuartz_result result = new writeQuartz_result();
        result.success = iface.writeQuartz(args.quartzEntity);
        return result;
      }
    }

    public static class writeExtends<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeExtends_args> {
      public writeExtends() {
        super("writeExtends");
      }

      public writeExtends_args getEmptyArgsInstance() {
        return new writeExtends_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeExtends_result getResult(I iface, writeExtends_args args) throws org.apache.thrift.TException {
        writeExtends_result result = new writeExtends_result();
        result.success = iface.writeExtends(args.extendEntity);
        return result;
      }
    }

    public static class writeMiddlewareInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeMiddlewareInfo_args> {
      public writeMiddlewareInfo() {
        super("writeMiddlewareInfo");
      }

      public writeMiddlewareInfo_args getEmptyArgsInstance() {
        return new writeMiddlewareInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeMiddlewareInfo_result getResult(I iface, writeMiddlewareInfo_args args) throws org.apache.thrift.TException {
        writeMiddlewareInfo_result result = new writeMiddlewareInfo_result();
        result.success = iface.writeMiddlewareInfo(args.middlewareEntity);
        return result;
      }
    }

    public static class writeClusterInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeClusterInfo_args> {
      public writeClusterInfo() {
        super("writeClusterInfo");
      }

      public writeClusterInfo_args getEmptyArgsInstance() {
        return new writeClusterInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeClusterInfo_result getResult(I iface, writeClusterInfo_args args) throws org.apache.thrift.TException {
        writeClusterInfo_result result = new writeClusterInfo_result();
        result.success = iface.writeClusterInfo(args.clusterEntity);
        return result;
      }
    }

    public static class writeHttpInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeHttpInfo_args> {
      public writeHttpInfo() {
        super("writeHttpInfo");
      }

      public writeHttpInfo_args getEmptyArgsInstance() {
        return new writeHttpInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeHttpInfo_result getResult(I iface, writeHttpInfo_args args) throws org.apache.thrift.TException {
        writeHttpInfo_result result = new writeHttpInfo_result();
        result.success = iface.writeHttpInfo(args.httpEntity);
        return result;
      }
    }

    public static class writeKafkaInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeKafkaInfo_args> {
      public writeKafkaInfo() {
        super("writeKafkaInfo");
      }

      public writeKafkaInfo_args getEmptyArgsInstance() {
        return new writeKafkaInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeKafkaInfo_result getResult(I iface, writeKafkaInfo_args args) throws org.apache.thrift.TException {
        writeKafkaInfo_result result = new writeKafkaInfo_result();
        result.success = iface.writeKafkaInfo(args.kafkaEntity);
        return result;
      }
    }

    public static class writeQuartzInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeQuartzInfo_args> {
      public writeQuartzInfo() {
        super("writeQuartzInfo");
      }

      public writeQuartzInfo_args getEmptyArgsInstance() {
        return new writeQuartzInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeQuartzInfo_result getResult(I iface, writeQuartzInfo_args args) throws org.apache.thrift.TException {
        writeQuartzInfo_result result = new writeQuartzInfo_result();
        result.success = iface.writeQuartzInfo(args.quartzInfoEntity);
        return result;
      }
    }

    public static class writeDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeDetail_args> {
      public writeDetail() {
        super("writeDetail");
      }

      public writeDetail_args getEmptyArgsInstance() {
        return new writeDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeDetail_result getResult(I iface, writeDetail_args args) throws org.apache.thrift.TException {
        writeDetail_result result = new writeDetail_result();
        result.success = iface.writeDetail(args.detailEntity);
        return result;
      }
    }

    public static class writeAppKafka<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeAppKafka_args> {
      public writeAppKafka() {
        super("writeAppKafka");
      }

      public writeAppKafka_args getEmptyArgsInstance() {
        return new writeAppKafka_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeAppKafka_result getResult(I iface, writeAppKafka_args args) throws org.apache.thrift.TException {
        writeAppKafka_result result = new writeAppKafka_result();
        result.success = iface.writeAppKafka(args.appKafkaEntity);
        return result;
      }
    }

    public static class writeZookeeperInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeZookeeperInfo_args> {
      public writeZookeeperInfo() {
        super("writeZookeeperInfo");
      }

      public writeZookeeperInfo_args getEmptyArgsInstance() {
        return new writeZookeeperInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeZookeeperInfo_result getResult(I iface, writeZookeeperInfo_args args) throws org.apache.thrift.TException {
        writeZookeeperInfo_result result = new writeZookeeperInfo_result();
        result.success = iface.writeZookeeperInfo(args.zookeeperEntity);
        return result;
      }
    }

    public static class writeFailureMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeFailureMessage_args> {
      public writeFailureMessage() {
        super("writeFailureMessage");
      }

      public writeFailureMessage_args getEmptyArgsInstance() {
        return new writeFailureMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeFailureMessage_result getResult(I iface, writeFailureMessage_args args) throws org.apache.thrift.TException {
        writeFailureMessage_result result = new writeFailureMessage_result();
        result.success = iface.writeFailureMessage(args.failureMessageEntity);
        return result;
      }
    }

    public static class writeSpringRestfulUriPattern<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeSpringRestfulUriPattern_args> {
      public writeSpringRestfulUriPattern() {
        super("writeSpringRestfulUriPattern");
      }

      public writeSpringRestfulUriPattern_args getEmptyArgsInstance() {
        return new writeSpringRestfulUriPattern_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeSpringRestfulUriPattern_result getResult(I iface, writeSpringRestfulUriPattern_args args) throws org.apache.thrift.TException {
        writeSpringRestfulUriPattern_result result = new writeSpringRestfulUriPattern_result();
        result.success = iface.writeSpringRestfulUriPattern(args.springRestfulUriPatternEntity);
        return result;
      }
    }

    public static class writeChannel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeChannel_args> {
      public writeChannel() {
        super("writeChannel");
      }

      public writeChannel_args getEmptyArgsInstance() {
        return new writeChannel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeChannel_result getResult(I iface, writeChannel_args args) throws org.apache.thrift.TException {
        writeChannel_result result = new writeChannel_result();
        result.success = iface.writeChannel(args.channelEntity);
        return result;
      }
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping();
        return result;
      }
    }

    public static class writeTrace<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeTrace_args> {
      public writeTrace() {
        super("writeTrace");
      }

      public writeTrace_args getEmptyArgsInstance() {
        return new writeTrace_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeTrace_result getResult(I iface, writeTrace_args args) throws org.apache.thrift.TException {
        writeTrace_result result = new writeTrace_result();
        result.success = iface.writeTrace(args.traces);
        return result;
      }
    }

    public static class writeNetty<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeNetty_args> {
      public writeNetty() {
        super("writeNetty");
      }

      public writeNetty_args getEmptyArgsInstance() {
        return new writeNetty_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeNetty_result getResult(I iface, writeNetty_args args) throws org.apache.thrift.TException {
        writeNetty_result result = new writeNetty_result();
        result.success = iface.writeNetty(args.nettyEntity);
        return result;
      }
    }

    public static class getAgentConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAgentConfig_args> {
      public getAgentConfig() {
        super("getAgentConfig");
      }

      public getAgentConfig_args getEmptyArgsInstance() {
        return new getAgentConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getAgentConfig_result getResult(I iface, getAgentConfig_args args) throws org.apache.thrift.TException {
        getAgentConfig_result result = new getAgentConfig_result();
        result.success = iface.getAgentConfig(args.appName);
        return result;
      }
    }

    public static class writeKMetrics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeKMetrics_args> {
      public writeKMetrics() {
        super("writeKMetrics");
      }

      public writeKMetrics_args getEmptyArgsInstance() {
        return new writeKMetrics_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeKMetrics_result getResult(I iface, writeKMetrics_args args) throws org.apache.thrift.TException {
        writeKMetrics_result result = new writeKMetrics_result();
        result.success = iface.writeKMetrics(args.kMetricsEntity);
        return result;
      }
    }

    public static class writeKafkaClientMetrics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeKafkaClientMetrics_args> {
      public writeKafkaClientMetrics() {
        super("writeKafkaClientMetrics");
      }

      public writeKafkaClientMetrics_args getEmptyArgsInstance() {
        return new writeKafkaClientMetrics_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeKafkaClientMetrics_result getResult(I iface, writeKafkaClientMetrics_args args) throws org.apache.thrift.TException {
        writeKafkaClientMetrics_result result = new writeKafkaClientMetrics_result();
        result.success = iface.writeKafkaClientMetrics(args.kafkaClientEntity);
        return result;
      }
    }

    public static class writeClientProperties<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeClientProperties_args> {
      public writeClientProperties() {
        super("writeClientProperties");
      }

      public writeClientProperties_args getEmptyArgsInstance() {
        return new writeClientProperties_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeClientProperties_result getResult(I iface, writeClientProperties_args args) throws org.apache.thrift.TException {
        writeClientProperties_result result = new writeClientProperties_result();
        result.success = iface.writeClientProperties(args.clientPropertiesEntity);
        return result;
      }
    }

    public static class writeTraceLogs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeTraceLogs_args> {
      public writeTraceLogs() {
        super("writeTraceLogs");
      }

      public writeTraceLogs_args getEmptyArgsInstance() {
        return new writeTraceLogs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeTraceLogs_result getResult(I iface, writeTraceLogs_args args) throws org.apache.thrift.TException {
        writeTraceLogs_result result = new writeTraceLogs_result();
        result.success = iface.writeTraceLogs(args.traces);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("writeJvmInfo", new writeJvmInfo());
      processMap.put("writeServerInfo", new writeServerInfo());
      processMap.put("writeRequest", new writeRequest());
      processMap.put("writeJdbcConnection", new writeJdbcConnection());
      processMap.put("writeSql", new writeSql());
      processMap.put("writeQuartz", new writeQuartz());
      processMap.put("writeExtends", new writeExtends());
      processMap.put("writeMiddlewareInfo", new writeMiddlewareInfo());
      processMap.put("writeClusterInfo", new writeClusterInfo());
      processMap.put("writeHttpInfo", new writeHttpInfo());
      processMap.put("writeKafkaInfo", new writeKafkaInfo());
      processMap.put("writeQuartzInfo", new writeQuartzInfo());
      processMap.put("writeDetail", new writeDetail());
      processMap.put("writeAppKafka", new writeAppKafka());
      processMap.put("writeZookeeperInfo", new writeZookeeperInfo());
      processMap.put("writeFailureMessage", new writeFailureMessage());
      processMap.put("writeSpringRestfulUriPattern", new writeSpringRestfulUriPattern());
      processMap.put("writeChannel", new writeChannel());
      processMap.put("ping", new ping());
      processMap.put("writeTrace", new writeTrace());
      processMap.put("writeNetty", new writeNetty());
      processMap.put("getAgentConfig", new getAgentConfig());
      processMap.put("writeKMetrics", new writeKMetrics());
      processMap.put("writeKafkaClientMetrics", new writeKafkaClientMetrics());
      processMap.put("writeClientProperties", new writeClientProperties());
      processMap.put("writeTraceLogs", new writeTraceLogs());
      return processMap;
    }

    public static class writeJvmInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeJvmInfo_args, String> {
      public writeJvmInfo() {
        super("writeJvmInfo");
      }

      public writeJvmInfo_args getEmptyArgsInstance() {
        return new writeJvmInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeJvmInfo_result result = new writeJvmInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeJvmInfo_result result = new writeJvmInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeJvmInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeJvmInfo(args.InstanceInfoEntity,resultHandler);
      }
    }

    public static class writeServerInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeServerInfo_args, String> {
      public writeServerInfo() {
        super("writeServerInfo");
      }

      public writeServerInfo_args getEmptyArgsInstance() {
        return new writeServerInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeServerInfo_result result = new writeServerInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeServerInfo_result result = new writeServerInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeServerInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeServerInfo(args.serverInfoEntity,resultHandler);
      }
    }

    public static class writeRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeRequest_args, String> {
      public writeRequest() {
        super("writeRequest");
      }

      public writeRequest_args getEmptyArgsInstance() {
        return new writeRequest_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeRequest_result result = new writeRequest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeRequest_result result = new writeRequest_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeRequest_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeRequest(args.requestEntity,resultHandler);
      }
    }

    public static class writeJdbcConnection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeJdbcConnection_args, String> {
      public writeJdbcConnection() {
        super("writeJdbcConnection");
      }

      public writeJdbcConnection_args getEmptyArgsInstance() {
        return new writeJdbcConnection_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeJdbcConnection_result result = new writeJdbcConnection_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeJdbcConnection_result result = new writeJdbcConnection_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeJdbcConnection_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeJdbcConnection(args.jdbcEntity,resultHandler);
      }
    }

    public static class writeSql<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeSql_args, String> {
      public writeSql() {
        super("writeSql");
      }

      public writeSql_args getEmptyArgsInstance() {
        return new writeSql_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeSql_result result = new writeSql_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeSql_result result = new writeSql_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeSql_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeSql(args.sqlEntity,resultHandler);
      }
    }

    public static class writeQuartz<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeQuartz_args, String> {
      public writeQuartz() {
        super("writeQuartz");
      }

      public writeQuartz_args getEmptyArgsInstance() {
        return new writeQuartz_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeQuartz_result result = new writeQuartz_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeQuartz_result result = new writeQuartz_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeQuartz_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeQuartz(args.quartzEntity,resultHandler);
      }
    }

    public static class writeExtends<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeExtends_args, String> {
      public writeExtends() {
        super("writeExtends");
      }

      public writeExtends_args getEmptyArgsInstance() {
        return new writeExtends_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeExtends_result result = new writeExtends_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeExtends_result result = new writeExtends_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeExtends_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeExtends(args.extendEntity,resultHandler);
      }
    }

    public static class writeMiddlewareInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeMiddlewareInfo_args, String> {
      public writeMiddlewareInfo() {
        super("writeMiddlewareInfo");
      }

      public writeMiddlewareInfo_args getEmptyArgsInstance() {
        return new writeMiddlewareInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeMiddlewareInfo_result result = new writeMiddlewareInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeMiddlewareInfo_result result = new writeMiddlewareInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeMiddlewareInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeMiddlewareInfo(args.middlewareEntity,resultHandler);
      }
    }

    public static class writeClusterInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeClusterInfo_args, String> {
      public writeClusterInfo() {
        super("writeClusterInfo");
      }

      public writeClusterInfo_args getEmptyArgsInstance() {
        return new writeClusterInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeClusterInfo_result result = new writeClusterInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeClusterInfo_result result = new writeClusterInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeClusterInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeClusterInfo(args.clusterEntity,resultHandler);
      }
    }

    public static class writeHttpInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeHttpInfo_args, String> {
      public writeHttpInfo() {
        super("writeHttpInfo");
      }

      public writeHttpInfo_args getEmptyArgsInstance() {
        return new writeHttpInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeHttpInfo_result result = new writeHttpInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeHttpInfo_result result = new writeHttpInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeHttpInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeHttpInfo(args.httpEntity,resultHandler);
      }
    }

    public static class writeKafkaInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeKafkaInfo_args, String> {
      public writeKafkaInfo() {
        super("writeKafkaInfo");
      }

      public writeKafkaInfo_args getEmptyArgsInstance() {
        return new writeKafkaInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeKafkaInfo_result result = new writeKafkaInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeKafkaInfo_result result = new writeKafkaInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeKafkaInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeKafkaInfo(args.kafkaEntity,resultHandler);
      }
    }

    public static class writeQuartzInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeQuartzInfo_args, String> {
      public writeQuartzInfo() {
        super("writeQuartzInfo");
      }

      public writeQuartzInfo_args getEmptyArgsInstance() {
        return new writeQuartzInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeQuartzInfo_result result = new writeQuartzInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeQuartzInfo_result result = new writeQuartzInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeQuartzInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeQuartzInfo(args.quartzInfoEntity,resultHandler);
      }
    }

    public static class writeDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeDetail_args, String> {
      public writeDetail() {
        super("writeDetail");
      }

      public writeDetail_args getEmptyArgsInstance() {
        return new writeDetail_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeDetail_result result = new writeDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeDetail_result result = new writeDetail_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeDetail_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeDetail(args.detailEntity,resultHandler);
      }
    }

    public static class writeAppKafka<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeAppKafka_args, String> {
      public writeAppKafka() {
        super("writeAppKafka");
      }

      public writeAppKafka_args getEmptyArgsInstance() {
        return new writeAppKafka_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeAppKafka_result result = new writeAppKafka_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeAppKafka_result result = new writeAppKafka_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeAppKafka_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeAppKafka(args.appKafkaEntity,resultHandler);
      }
    }

    public static class writeZookeeperInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeZookeeperInfo_args, String> {
      public writeZookeeperInfo() {
        super("writeZookeeperInfo");
      }

      public writeZookeeperInfo_args getEmptyArgsInstance() {
        return new writeZookeeperInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeZookeeperInfo_result result = new writeZookeeperInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeZookeeperInfo_result result = new writeZookeeperInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeZookeeperInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeZookeeperInfo(args.zookeeperEntity,resultHandler);
      }
    }

    public static class writeFailureMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeFailureMessage_args, String> {
      public writeFailureMessage() {
        super("writeFailureMessage");
      }

      public writeFailureMessage_args getEmptyArgsInstance() {
        return new writeFailureMessage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeFailureMessage_result result = new writeFailureMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeFailureMessage_result result = new writeFailureMessage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeFailureMessage_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeFailureMessage(args.failureMessageEntity,resultHandler);
      }
    }

    public static class writeSpringRestfulUriPattern<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeSpringRestfulUriPattern_args, String> {
      public writeSpringRestfulUriPattern() {
        super("writeSpringRestfulUriPattern");
      }

      public writeSpringRestfulUriPattern_args getEmptyArgsInstance() {
        return new writeSpringRestfulUriPattern_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeSpringRestfulUriPattern_result result = new writeSpringRestfulUriPattern_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeSpringRestfulUriPattern_result result = new writeSpringRestfulUriPattern_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeSpringRestfulUriPattern_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeSpringRestfulUriPattern(args.springRestfulUriPatternEntity,resultHandler);
      }
    }

    public static class writeChannel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeChannel_args, String> {
      public writeChannel() {
        super("writeChannel");
      }

      public writeChannel_args getEmptyArgsInstance() {
        return new writeChannel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeChannel_result result = new writeChannel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeChannel_result result = new writeChannel_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeChannel_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeChannel(args.channelEntity,resultHandler);
      }
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, com.keruyun.commons.agent.collector.entity.ResponseResultEntity> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.keruyun.commons.agent.collector.entity.ResponseResultEntity> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.keruyun.commons.agent.collector.entity.ResponseResultEntity>() { 
          public void onComplete(com.keruyun.commons.agent.collector.entity.ResponseResultEntity o) {
            ping_result result = new ping_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ping_result result = new ping_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<com.keruyun.commons.agent.collector.entity.ResponseResultEntity> resultHandler) throws org.apache.thrift.TException {
        iface.ping(resultHandler);
      }
    }

    public static class writeTrace<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeTrace_args, com.keruyun.commons.agent.collector.entity.ResponseResultEntity> {
      public writeTrace() {
        super("writeTrace");
      }

      public writeTrace_args getEmptyArgsInstance() {
        return new writeTrace_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.keruyun.commons.agent.collector.entity.ResponseResultEntity> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.keruyun.commons.agent.collector.entity.ResponseResultEntity>() { 
          public void onComplete(com.keruyun.commons.agent.collector.entity.ResponseResultEntity o) {
            writeTrace_result result = new writeTrace_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeTrace_result result = new writeTrace_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeTrace_args args, org.apache.thrift.async.AsyncMethodCallback<com.keruyun.commons.agent.collector.entity.ResponseResultEntity> resultHandler) throws org.apache.thrift.TException {
        iface.writeTrace(args.traces,resultHandler);
      }
    }

    public static class writeNetty<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeNetty_args, String> {
      public writeNetty() {
        super("writeNetty");
      }

      public writeNetty_args getEmptyArgsInstance() {
        return new writeNetty_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeNetty_result result = new writeNetty_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeNetty_result result = new writeNetty_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeNetty_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeNetty(args.nettyEntity,resultHandler);
      }
    }

    public static class getAgentConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAgentConfig_args, String> {
      public getAgentConfig() {
        super("getAgentConfig");
      }

      public getAgentConfig_args getEmptyArgsInstance() {
        return new getAgentConfig_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            getAgentConfig_result result = new getAgentConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAgentConfig_result result = new getAgentConfig_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAgentConfig_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.getAgentConfig(args.appName,resultHandler);
      }
    }

    public static class writeKMetrics<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeKMetrics_args, String> {
      public writeKMetrics() {
        super("writeKMetrics");
      }

      public writeKMetrics_args getEmptyArgsInstance() {
        return new writeKMetrics_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeKMetrics_result result = new writeKMetrics_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeKMetrics_result result = new writeKMetrics_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeKMetrics_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeKMetrics(args.kMetricsEntity,resultHandler);
      }
    }

    public static class writeKafkaClientMetrics<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeKafkaClientMetrics_args, String> {
      public writeKafkaClientMetrics() {
        super("writeKafkaClientMetrics");
      }

      public writeKafkaClientMetrics_args getEmptyArgsInstance() {
        return new writeKafkaClientMetrics_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeKafkaClientMetrics_result result = new writeKafkaClientMetrics_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeKafkaClientMetrics_result result = new writeKafkaClientMetrics_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeKafkaClientMetrics_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeKafkaClientMetrics(args.kafkaClientEntity,resultHandler);
      }
    }

    public static class writeClientProperties<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeClientProperties_args, String> {
      public writeClientProperties() {
        super("writeClientProperties");
      }

      public writeClientProperties_args getEmptyArgsInstance() {
        return new writeClientProperties_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeClientProperties_result result = new writeClientProperties_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeClientProperties_result result = new writeClientProperties_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeClientProperties_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeClientProperties(args.clientPropertiesEntity,resultHandler);
      }
    }

    public static class writeTraceLogs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeTraceLogs_args, String> {
      public writeTraceLogs() {
        super("writeTraceLogs");
      }

      public writeTraceLogs_args getEmptyArgsInstance() {
        return new writeTraceLogs_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            writeTraceLogs_result result = new writeTraceLogs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeTraceLogs_result result = new writeTraceLogs_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeTraceLogs_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.writeTraceLogs(args.traces,resultHandler);
      }
    }

  }

  public static class writeJvmInfo_args implements org.apache.thrift.TBase<writeJvmInfo_args, writeJvmInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeJvmInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeJvmInfo_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_INFO_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("InstanceInfoEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeJvmInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeJvmInfo_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.InstanceInfoEntity InstanceInfoEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_INFO_ENTITY((short)1, "InstanceInfoEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_INFO_ENTITY
            return INSTANCE_INFO_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_INFO_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("InstanceInfoEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.InstanceInfoEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeJvmInfo_args.class, metaDataMap);
    }

    public writeJvmInfo_args() {
    }

    public writeJvmInfo_args(
      com.keruyun.commons.agent.collector.entity.InstanceInfoEntity InstanceInfoEntity)
    {
      this();
      this.InstanceInfoEntity = InstanceInfoEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeJvmInfo_args(writeJvmInfo_args other) {
      if (other.isSetInstanceInfoEntity()) {
        this.InstanceInfoEntity = new com.keruyun.commons.agent.collector.entity.InstanceInfoEntity(other.InstanceInfoEntity);
      }
    }

    public writeJvmInfo_args deepCopy() {
      return new writeJvmInfo_args(this);
    }

    @Override
    public void clear() {
      this.InstanceInfoEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.InstanceInfoEntity getInstanceInfoEntity() {
      return this.InstanceInfoEntity;
    }

    public writeJvmInfo_args setInstanceInfoEntity(com.keruyun.commons.agent.collector.entity.InstanceInfoEntity InstanceInfoEntity) {
      this.InstanceInfoEntity = InstanceInfoEntity;
      return this;
    }

    public void unsetInstanceInfoEntity() {
      this.InstanceInfoEntity = null;
    }

    /** Returns true if field InstanceInfoEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceInfoEntity() {
      return this.InstanceInfoEntity != null;
    }

    public void setInstanceInfoEntityIsSet(boolean value) {
      if (!value) {
        this.InstanceInfoEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INSTANCE_INFO_ENTITY:
        if (value == null) {
          unsetInstanceInfoEntity();
        } else {
          setInstanceInfoEntity((com.keruyun.commons.agent.collector.entity.InstanceInfoEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_INFO_ENTITY:
        return getInstanceInfoEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_INFO_ENTITY:
        return isSetInstanceInfoEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeJvmInfo_args)
        return this.equals((writeJvmInfo_args)that);
      return false;
    }

    public boolean equals(writeJvmInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_InstanceInfoEntity = true && this.isSetInstanceInfoEntity();
      boolean that_present_InstanceInfoEntity = true && that.isSetInstanceInfoEntity();
      if (this_present_InstanceInfoEntity || that_present_InstanceInfoEntity) {
        if (!(this_present_InstanceInfoEntity && that_present_InstanceInfoEntity))
          return false;
        if (!this.InstanceInfoEntity.equals(that.InstanceInfoEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInstanceInfoEntity()) ? 131071 : 524287);
      if (isSetInstanceInfoEntity())
        hashCode = hashCode * 8191 + InstanceInfoEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeJvmInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInstanceInfoEntity()).compareTo(other.isSetInstanceInfoEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceInfoEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.InstanceInfoEntity, other.InstanceInfoEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeJvmInfo_args(");
      boolean first = true;

      sb.append("InstanceInfoEntity:");
      if (this.InstanceInfoEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.InstanceInfoEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (InstanceInfoEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'InstanceInfoEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (InstanceInfoEntity != null) {
        InstanceInfoEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeJvmInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeJvmInfo_argsStandardScheme getScheme() {
        return new writeJvmInfo_argsStandardScheme();
      }
    }

    private static class writeJvmInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeJvmInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeJvmInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_INFO_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.InstanceInfoEntity = new com.keruyun.commons.agent.collector.entity.InstanceInfoEntity();
                struct.InstanceInfoEntity.read(iprot);
                struct.setInstanceInfoEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeJvmInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.InstanceInfoEntity != null) {
          oprot.writeFieldBegin(INSTANCE_INFO_ENTITY_FIELD_DESC);
          struct.InstanceInfoEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeJvmInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeJvmInfo_argsTupleScheme getScheme() {
        return new writeJvmInfo_argsTupleScheme();
      }
    }

    private static class writeJvmInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeJvmInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeJvmInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.InstanceInfoEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeJvmInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.InstanceInfoEntity = new com.keruyun.commons.agent.collector.entity.InstanceInfoEntity();
        struct.InstanceInfoEntity.read(iprot);
        struct.setInstanceInfoEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeJvmInfo_result implements org.apache.thrift.TBase<writeJvmInfo_result, writeJvmInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeJvmInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeJvmInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeJvmInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeJvmInfo_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeJvmInfo_result.class, metaDataMap);
    }

    public writeJvmInfo_result() {
    }

    public writeJvmInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeJvmInfo_result(writeJvmInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeJvmInfo_result deepCopy() {
      return new writeJvmInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeJvmInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeJvmInfo_result)
        return this.equals((writeJvmInfo_result)that);
      return false;
    }

    public boolean equals(writeJvmInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeJvmInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeJvmInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeJvmInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeJvmInfo_resultStandardScheme getScheme() {
        return new writeJvmInfo_resultStandardScheme();
      }
    }

    private static class writeJvmInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeJvmInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeJvmInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeJvmInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeJvmInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeJvmInfo_resultTupleScheme getScheme() {
        return new writeJvmInfo_resultTupleScheme();
      }
    }

    private static class writeJvmInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeJvmInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeJvmInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeJvmInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeServerInfo_args implements org.apache.thrift.TBase<writeServerInfo_args, writeServerInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeServerInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeServerInfo_args");

    private static final org.apache.thrift.protocol.TField SERVER_INFO_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("serverInfoEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeServerInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeServerInfo_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.ServerInfoEntity serverInfoEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_INFO_ENTITY((short)1, "serverInfoEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_INFO_ENTITY
            return SERVER_INFO_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_INFO_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("serverInfoEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.ServerInfoEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeServerInfo_args.class, metaDataMap);
    }

    public writeServerInfo_args() {
    }

    public writeServerInfo_args(
      com.keruyun.commons.agent.collector.entity.ServerInfoEntity serverInfoEntity)
    {
      this();
      this.serverInfoEntity = serverInfoEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeServerInfo_args(writeServerInfo_args other) {
      if (other.isSetServerInfoEntity()) {
        this.serverInfoEntity = new com.keruyun.commons.agent.collector.entity.ServerInfoEntity(other.serverInfoEntity);
      }
    }

    public writeServerInfo_args deepCopy() {
      return new writeServerInfo_args(this);
    }

    @Override
    public void clear() {
      this.serverInfoEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.ServerInfoEntity getServerInfoEntity() {
      return this.serverInfoEntity;
    }

    public writeServerInfo_args setServerInfoEntity(com.keruyun.commons.agent.collector.entity.ServerInfoEntity serverInfoEntity) {
      this.serverInfoEntity = serverInfoEntity;
      return this;
    }

    public void unsetServerInfoEntity() {
      this.serverInfoEntity = null;
    }

    /** Returns true if field serverInfoEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetServerInfoEntity() {
      return this.serverInfoEntity != null;
    }

    public void setServerInfoEntityIsSet(boolean value) {
      if (!value) {
        this.serverInfoEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_INFO_ENTITY:
        if (value == null) {
          unsetServerInfoEntity();
        } else {
          setServerInfoEntity((com.keruyun.commons.agent.collector.entity.ServerInfoEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_INFO_ENTITY:
        return getServerInfoEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_INFO_ENTITY:
        return isSetServerInfoEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeServerInfo_args)
        return this.equals((writeServerInfo_args)that);
      return false;
    }

    public boolean equals(writeServerInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverInfoEntity = true && this.isSetServerInfoEntity();
      boolean that_present_serverInfoEntity = true && that.isSetServerInfoEntity();
      if (this_present_serverInfoEntity || that_present_serverInfoEntity) {
        if (!(this_present_serverInfoEntity && that_present_serverInfoEntity))
          return false;
        if (!this.serverInfoEntity.equals(that.serverInfoEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerInfoEntity()) ? 131071 : 524287);
      if (isSetServerInfoEntity())
        hashCode = hashCode * 8191 + serverInfoEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeServerInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServerInfoEntity()).compareTo(other.isSetServerInfoEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerInfoEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverInfoEntity, other.serverInfoEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeServerInfo_args(");
      boolean first = true;

      sb.append("serverInfoEntity:");
      if (this.serverInfoEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.serverInfoEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (serverInfoEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverInfoEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (serverInfoEntity != null) {
        serverInfoEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeServerInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeServerInfo_argsStandardScheme getScheme() {
        return new writeServerInfo_argsStandardScheme();
      }
    }

    private static class writeServerInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeServerInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeServerInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_INFO_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverInfoEntity = new com.keruyun.commons.agent.collector.entity.ServerInfoEntity();
                struct.serverInfoEntity.read(iprot);
                struct.setServerInfoEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeServerInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverInfoEntity != null) {
          oprot.writeFieldBegin(SERVER_INFO_ENTITY_FIELD_DESC);
          struct.serverInfoEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeServerInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeServerInfo_argsTupleScheme getScheme() {
        return new writeServerInfo_argsTupleScheme();
      }
    }

    private static class writeServerInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeServerInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeServerInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.serverInfoEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeServerInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.serverInfoEntity = new com.keruyun.commons.agent.collector.entity.ServerInfoEntity();
        struct.serverInfoEntity.read(iprot);
        struct.setServerInfoEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeServerInfo_result implements org.apache.thrift.TBase<writeServerInfo_result, writeServerInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeServerInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeServerInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeServerInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeServerInfo_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeServerInfo_result.class, metaDataMap);
    }

    public writeServerInfo_result() {
    }

    public writeServerInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeServerInfo_result(writeServerInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeServerInfo_result deepCopy() {
      return new writeServerInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeServerInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeServerInfo_result)
        return this.equals((writeServerInfo_result)that);
      return false;
    }

    public boolean equals(writeServerInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeServerInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeServerInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeServerInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeServerInfo_resultStandardScheme getScheme() {
        return new writeServerInfo_resultStandardScheme();
      }
    }

    private static class writeServerInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeServerInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeServerInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeServerInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeServerInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeServerInfo_resultTupleScheme getScheme() {
        return new writeServerInfo_resultTupleScheme();
      }
    }

    private static class writeServerInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeServerInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeServerInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeServerInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeRequest_args implements org.apache.thrift.TBase<writeRequest_args, writeRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeRequest_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("requestEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeRequest_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeRequest_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.RequestInfoEntity requestEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ENTITY((short)1, "requestEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ENTITY
            return REQUEST_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("requestEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.RequestInfoEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeRequest_args.class, metaDataMap);
    }

    public writeRequest_args() {
    }

    public writeRequest_args(
      com.keruyun.commons.agent.collector.entity.RequestInfoEntity requestEntity)
    {
      this();
      this.requestEntity = requestEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeRequest_args(writeRequest_args other) {
      if (other.isSetRequestEntity()) {
        this.requestEntity = new com.keruyun.commons.agent.collector.entity.RequestInfoEntity(other.requestEntity);
      }
    }

    public writeRequest_args deepCopy() {
      return new writeRequest_args(this);
    }

    @Override
    public void clear() {
      this.requestEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.RequestInfoEntity getRequestEntity() {
      return this.requestEntity;
    }

    public writeRequest_args setRequestEntity(com.keruyun.commons.agent.collector.entity.RequestInfoEntity requestEntity) {
      this.requestEntity = requestEntity;
      return this;
    }

    public void unsetRequestEntity() {
      this.requestEntity = null;
    }

    /** Returns true if field requestEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestEntity() {
      return this.requestEntity != null;
    }

    public void setRequestEntityIsSet(boolean value) {
      if (!value) {
        this.requestEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ENTITY:
        if (value == null) {
          unsetRequestEntity();
        } else {
          setRequestEntity((com.keruyun.commons.agent.collector.entity.RequestInfoEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ENTITY:
        return getRequestEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ENTITY:
        return isSetRequestEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeRequest_args)
        return this.equals((writeRequest_args)that);
      return false;
    }

    public boolean equals(writeRequest_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestEntity = true && this.isSetRequestEntity();
      boolean that_present_requestEntity = true && that.isSetRequestEntity();
      if (this_present_requestEntity || that_present_requestEntity) {
        if (!(this_present_requestEntity && that_present_requestEntity))
          return false;
        if (!this.requestEntity.equals(that.requestEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequestEntity()) ? 131071 : 524287);
      if (isSetRequestEntity())
        hashCode = hashCode * 8191 + requestEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestEntity()).compareTo(other.isSetRequestEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestEntity, other.requestEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeRequest_args(");
      boolean first = true;

      sb.append("requestEntity:");
      if (this.requestEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.requestEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (requestEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'requestEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (requestEntity != null) {
        requestEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeRequest_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeRequest_argsStandardScheme getScheme() {
        return new writeRequest_argsStandardScheme();
      }
    }

    private static class writeRequest_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.requestEntity = new com.keruyun.commons.agent.collector.entity.RequestInfoEntity();
                struct.requestEntity.read(iprot);
                struct.setRequestEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestEntity != null) {
          oprot.writeFieldBegin(REQUEST_ENTITY_FIELD_DESC);
          struct.requestEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeRequest_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeRequest_argsTupleScheme getScheme() {
        return new writeRequest_argsTupleScheme();
      }
    }

    private static class writeRequest_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.requestEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.requestEntity = new com.keruyun.commons.agent.collector.entity.RequestInfoEntity();
        struct.requestEntity.read(iprot);
        struct.setRequestEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeRequest_result implements org.apache.thrift.TBase<writeRequest_result, writeRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeRequest_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeRequest_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeRequest_result.class, metaDataMap);
    }

    public writeRequest_result() {
    }

    public writeRequest_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeRequest_result(writeRequest_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeRequest_result deepCopy() {
      return new writeRequest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeRequest_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeRequest_result)
        return this.equals((writeRequest_result)that);
      return false;
    }

    public boolean equals(writeRequest_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeRequest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeRequest_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeRequest_resultStandardScheme getScheme() {
        return new writeRequest_resultStandardScheme();
      }
    }

    private static class writeRequest_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeRequest_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeRequest_resultTupleScheme getScheme() {
        return new writeRequest_resultTupleScheme();
      }
    }

    private static class writeRequest_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeJdbcConnection_args implements org.apache.thrift.TBase<writeJdbcConnection_args, writeJdbcConnection_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeJdbcConnection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeJdbcConnection_args");

    private static final org.apache.thrift.protocol.TField JDBC_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("jdbcEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeJdbcConnection_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeJdbcConnection_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.JdbcConnectionEntity jdbcEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JDBC_ENTITY((short)1, "jdbcEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JDBC_ENTITY
            return JDBC_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JDBC_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("jdbcEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.JdbcConnectionEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeJdbcConnection_args.class, metaDataMap);
    }

    public writeJdbcConnection_args() {
    }

    public writeJdbcConnection_args(
      com.keruyun.commons.agent.collector.entity.JdbcConnectionEntity jdbcEntity)
    {
      this();
      this.jdbcEntity = jdbcEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeJdbcConnection_args(writeJdbcConnection_args other) {
      if (other.isSetJdbcEntity()) {
        this.jdbcEntity = new com.keruyun.commons.agent.collector.entity.JdbcConnectionEntity(other.jdbcEntity);
      }
    }

    public writeJdbcConnection_args deepCopy() {
      return new writeJdbcConnection_args(this);
    }

    @Override
    public void clear() {
      this.jdbcEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.JdbcConnectionEntity getJdbcEntity() {
      return this.jdbcEntity;
    }

    public writeJdbcConnection_args setJdbcEntity(com.keruyun.commons.agent.collector.entity.JdbcConnectionEntity jdbcEntity) {
      this.jdbcEntity = jdbcEntity;
      return this;
    }

    public void unsetJdbcEntity() {
      this.jdbcEntity = null;
    }

    /** Returns true if field jdbcEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetJdbcEntity() {
      return this.jdbcEntity != null;
    }

    public void setJdbcEntityIsSet(boolean value) {
      if (!value) {
        this.jdbcEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JDBC_ENTITY:
        if (value == null) {
          unsetJdbcEntity();
        } else {
          setJdbcEntity((com.keruyun.commons.agent.collector.entity.JdbcConnectionEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JDBC_ENTITY:
        return getJdbcEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JDBC_ENTITY:
        return isSetJdbcEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeJdbcConnection_args)
        return this.equals((writeJdbcConnection_args)that);
      return false;
    }

    public boolean equals(writeJdbcConnection_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_jdbcEntity = true && this.isSetJdbcEntity();
      boolean that_present_jdbcEntity = true && that.isSetJdbcEntity();
      if (this_present_jdbcEntity || that_present_jdbcEntity) {
        if (!(this_present_jdbcEntity && that_present_jdbcEntity))
          return false;
        if (!this.jdbcEntity.equals(that.jdbcEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetJdbcEntity()) ? 131071 : 524287);
      if (isSetJdbcEntity())
        hashCode = hashCode * 8191 + jdbcEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeJdbcConnection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJdbcEntity()).compareTo(other.isSetJdbcEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJdbcEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jdbcEntity, other.jdbcEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeJdbcConnection_args(");
      boolean first = true;

      sb.append("jdbcEntity:");
      if (this.jdbcEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.jdbcEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (jdbcEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jdbcEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (jdbcEntity != null) {
        jdbcEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeJdbcConnection_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeJdbcConnection_argsStandardScheme getScheme() {
        return new writeJdbcConnection_argsStandardScheme();
      }
    }

    private static class writeJdbcConnection_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeJdbcConnection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeJdbcConnection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JDBC_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jdbcEntity = new com.keruyun.commons.agent.collector.entity.JdbcConnectionEntity();
                struct.jdbcEntity.read(iprot);
                struct.setJdbcEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeJdbcConnection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jdbcEntity != null) {
          oprot.writeFieldBegin(JDBC_ENTITY_FIELD_DESC);
          struct.jdbcEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeJdbcConnection_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeJdbcConnection_argsTupleScheme getScheme() {
        return new writeJdbcConnection_argsTupleScheme();
      }
    }

    private static class writeJdbcConnection_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeJdbcConnection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeJdbcConnection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.jdbcEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeJdbcConnection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.jdbcEntity = new com.keruyun.commons.agent.collector.entity.JdbcConnectionEntity();
        struct.jdbcEntity.read(iprot);
        struct.setJdbcEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeJdbcConnection_result implements org.apache.thrift.TBase<writeJdbcConnection_result, writeJdbcConnection_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeJdbcConnection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeJdbcConnection_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeJdbcConnection_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeJdbcConnection_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeJdbcConnection_result.class, metaDataMap);
    }

    public writeJdbcConnection_result() {
    }

    public writeJdbcConnection_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeJdbcConnection_result(writeJdbcConnection_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeJdbcConnection_result deepCopy() {
      return new writeJdbcConnection_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeJdbcConnection_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeJdbcConnection_result)
        return this.equals((writeJdbcConnection_result)that);
      return false;
    }

    public boolean equals(writeJdbcConnection_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeJdbcConnection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeJdbcConnection_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeJdbcConnection_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeJdbcConnection_resultStandardScheme getScheme() {
        return new writeJdbcConnection_resultStandardScheme();
      }
    }

    private static class writeJdbcConnection_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeJdbcConnection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeJdbcConnection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeJdbcConnection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeJdbcConnection_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeJdbcConnection_resultTupleScheme getScheme() {
        return new writeJdbcConnection_resultTupleScheme();
      }
    }

    private static class writeJdbcConnection_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeJdbcConnection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeJdbcConnection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeJdbcConnection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeSql_args implements org.apache.thrift.TBase<writeSql_args, writeSql_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeSql_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeSql_args");

    private static final org.apache.thrift.protocol.TField SQL_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeSql_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeSql_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.SqlInfoEntity sqlEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL_ENTITY((short)1, "sqlEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL_ENTITY
            return SQL_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("sqlEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.SqlInfoEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeSql_args.class, metaDataMap);
    }

    public writeSql_args() {
    }

    public writeSql_args(
      com.keruyun.commons.agent.collector.entity.SqlInfoEntity sqlEntity)
    {
      this();
      this.sqlEntity = sqlEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeSql_args(writeSql_args other) {
      if (other.isSetSqlEntity()) {
        this.sqlEntity = new com.keruyun.commons.agent.collector.entity.SqlInfoEntity(other.sqlEntity);
      }
    }

    public writeSql_args deepCopy() {
      return new writeSql_args(this);
    }

    @Override
    public void clear() {
      this.sqlEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.SqlInfoEntity getSqlEntity() {
      return this.sqlEntity;
    }

    public writeSql_args setSqlEntity(com.keruyun.commons.agent.collector.entity.SqlInfoEntity sqlEntity) {
      this.sqlEntity = sqlEntity;
      return this;
    }

    public void unsetSqlEntity() {
      this.sqlEntity = null;
    }

    /** Returns true if field sqlEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlEntity() {
      return this.sqlEntity != null;
    }

    public void setSqlEntityIsSet(boolean value) {
      if (!value) {
        this.sqlEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL_ENTITY:
        if (value == null) {
          unsetSqlEntity();
        } else {
          setSqlEntity((com.keruyun.commons.agent.collector.entity.SqlInfoEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL_ENTITY:
        return getSqlEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL_ENTITY:
        return isSetSqlEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeSql_args)
        return this.equals((writeSql_args)that);
      return false;
    }

    public boolean equals(writeSql_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sqlEntity = true && this.isSetSqlEntity();
      boolean that_present_sqlEntity = true && that.isSetSqlEntity();
      if (this_present_sqlEntity || that_present_sqlEntity) {
        if (!(this_present_sqlEntity && that_present_sqlEntity))
          return false;
        if (!this.sqlEntity.equals(that.sqlEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSqlEntity()) ? 131071 : 524287);
      if (isSetSqlEntity())
        hashCode = hashCode * 8191 + sqlEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeSql_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSqlEntity()).compareTo(other.isSetSqlEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlEntity, other.sqlEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeSql_args(");
      boolean first = true;

      sb.append("sqlEntity:");
      if (this.sqlEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (sqlEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sqlEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (sqlEntity != null) {
        sqlEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeSql_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeSql_argsStandardScheme getScheme() {
        return new writeSql_argsStandardScheme();
      }
    }

    private static class writeSql_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeSql_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeSql_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlEntity = new com.keruyun.commons.agent.collector.entity.SqlInfoEntity();
                struct.sqlEntity.read(iprot);
                struct.setSqlEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeSql_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sqlEntity != null) {
          oprot.writeFieldBegin(SQL_ENTITY_FIELD_DESC);
          struct.sqlEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeSql_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeSql_argsTupleScheme getScheme() {
        return new writeSql_argsTupleScheme();
      }
    }

    private static class writeSql_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeSql_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeSql_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.sqlEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeSql_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.sqlEntity = new com.keruyun.commons.agent.collector.entity.SqlInfoEntity();
        struct.sqlEntity.read(iprot);
        struct.setSqlEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeSql_result implements org.apache.thrift.TBase<writeSql_result, writeSql_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeSql_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeSql_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeSql_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeSql_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeSql_result.class, metaDataMap);
    }

    public writeSql_result() {
    }

    public writeSql_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeSql_result(writeSql_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeSql_result deepCopy() {
      return new writeSql_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeSql_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeSql_result)
        return this.equals((writeSql_result)that);
      return false;
    }

    public boolean equals(writeSql_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeSql_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeSql_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeSql_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeSql_resultStandardScheme getScheme() {
        return new writeSql_resultStandardScheme();
      }
    }

    private static class writeSql_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeSql_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeSql_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeSql_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeSql_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeSql_resultTupleScheme getScheme() {
        return new writeSql_resultTupleScheme();
      }
    }

    private static class writeSql_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeSql_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeSql_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeSql_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeQuartz_args implements org.apache.thrift.TBase<writeQuartz_args, writeQuartz_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeQuartz_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeQuartz_args");

    private static final org.apache.thrift.protocol.TField QUARTZ_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quartzEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeQuartz_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeQuartz_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.QuartzEntity quartzEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUARTZ_ENTITY((short)1, "quartzEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUARTZ_ENTITY
            return QUARTZ_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUARTZ_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("quartzEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.QuartzEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeQuartz_args.class, metaDataMap);
    }

    public writeQuartz_args() {
    }

    public writeQuartz_args(
      com.keruyun.commons.agent.collector.entity.QuartzEntity quartzEntity)
    {
      this();
      this.quartzEntity = quartzEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeQuartz_args(writeQuartz_args other) {
      if (other.isSetQuartzEntity()) {
        this.quartzEntity = new com.keruyun.commons.agent.collector.entity.QuartzEntity(other.quartzEntity);
      }
    }

    public writeQuartz_args deepCopy() {
      return new writeQuartz_args(this);
    }

    @Override
    public void clear() {
      this.quartzEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.QuartzEntity getQuartzEntity() {
      return this.quartzEntity;
    }

    public writeQuartz_args setQuartzEntity(com.keruyun.commons.agent.collector.entity.QuartzEntity quartzEntity) {
      this.quartzEntity = quartzEntity;
      return this;
    }

    public void unsetQuartzEntity() {
      this.quartzEntity = null;
    }

    /** Returns true if field quartzEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetQuartzEntity() {
      return this.quartzEntity != null;
    }

    public void setQuartzEntityIsSet(boolean value) {
      if (!value) {
        this.quartzEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUARTZ_ENTITY:
        if (value == null) {
          unsetQuartzEntity();
        } else {
          setQuartzEntity((com.keruyun.commons.agent.collector.entity.QuartzEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUARTZ_ENTITY:
        return getQuartzEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUARTZ_ENTITY:
        return isSetQuartzEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeQuartz_args)
        return this.equals((writeQuartz_args)that);
      return false;
    }

    public boolean equals(writeQuartz_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_quartzEntity = true && this.isSetQuartzEntity();
      boolean that_present_quartzEntity = true && that.isSetQuartzEntity();
      if (this_present_quartzEntity || that_present_quartzEntity) {
        if (!(this_present_quartzEntity && that_present_quartzEntity))
          return false;
        if (!this.quartzEntity.equals(that.quartzEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuartzEntity()) ? 131071 : 524287);
      if (isSetQuartzEntity())
        hashCode = hashCode * 8191 + quartzEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeQuartz_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuartzEntity()).compareTo(other.isSetQuartzEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuartzEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quartzEntity, other.quartzEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeQuartz_args(");
      boolean first = true;

      sb.append("quartzEntity:");
      if (this.quartzEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.quartzEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (quartzEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'quartzEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (quartzEntity != null) {
        quartzEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeQuartz_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeQuartz_argsStandardScheme getScheme() {
        return new writeQuartz_argsStandardScheme();
      }
    }

    private static class writeQuartz_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeQuartz_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeQuartz_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUARTZ_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.quartzEntity = new com.keruyun.commons.agent.collector.entity.QuartzEntity();
                struct.quartzEntity.read(iprot);
                struct.setQuartzEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeQuartz_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.quartzEntity != null) {
          oprot.writeFieldBegin(QUARTZ_ENTITY_FIELD_DESC);
          struct.quartzEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeQuartz_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeQuartz_argsTupleScheme getScheme() {
        return new writeQuartz_argsTupleScheme();
      }
    }

    private static class writeQuartz_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeQuartz_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeQuartz_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.quartzEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeQuartz_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.quartzEntity = new com.keruyun.commons.agent.collector.entity.QuartzEntity();
        struct.quartzEntity.read(iprot);
        struct.setQuartzEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeQuartz_result implements org.apache.thrift.TBase<writeQuartz_result, writeQuartz_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeQuartz_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeQuartz_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeQuartz_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeQuartz_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeQuartz_result.class, metaDataMap);
    }

    public writeQuartz_result() {
    }

    public writeQuartz_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeQuartz_result(writeQuartz_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeQuartz_result deepCopy() {
      return new writeQuartz_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeQuartz_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeQuartz_result)
        return this.equals((writeQuartz_result)that);
      return false;
    }

    public boolean equals(writeQuartz_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeQuartz_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeQuartz_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeQuartz_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeQuartz_resultStandardScheme getScheme() {
        return new writeQuartz_resultStandardScheme();
      }
    }

    private static class writeQuartz_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeQuartz_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeQuartz_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeQuartz_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeQuartz_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeQuartz_resultTupleScheme getScheme() {
        return new writeQuartz_resultTupleScheme();
      }
    }

    private static class writeQuartz_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeQuartz_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeQuartz_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeQuartz_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeExtends_args implements org.apache.thrift.TBase<writeExtends_args, writeExtends_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeExtends_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeExtends_args");

    private static final org.apache.thrift.protocol.TField EXTEND_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("extendEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeExtends_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeExtends_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.ExtendEntity extendEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXTEND_ENTITY((short)1, "extendEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXTEND_ENTITY
            return EXTEND_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXTEND_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("extendEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.ExtendEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeExtends_args.class, metaDataMap);
    }

    public writeExtends_args() {
    }

    public writeExtends_args(
      com.keruyun.commons.agent.collector.entity.ExtendEntity extendEntity)
    {
      this();
      this.extendEntity = extendEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeExtends_args(writeExtends_args other) {
      if (other.isSetExtendEntity()) {
        this.extendEntity = new com.keruyun.commons.agent.collector.entity.ExtendEntity(other.extendEntity);
      }
    }

    public writeExtends_args deepCopy() {
      return new writeExtends_args(this);
    }

    @Override
    public void clear() {
      this.extendEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.ExtendEntity getExtendEntity() {
      return this.extendEntity;
    }

    public writeExtends_args setExtendEntity(com.keruyun.commons.agent.collector.entity.ExtendEntity extendEntity) {
      this.extendEntity = extendEntity;
      return this;
    }

    public void unsetExtendEntity() {
      this.extendEntity = null;
    }

    /** Returns true if field extendEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetExtendEntity() {
      return this.extendEntity != null;
    }

    public void setExtendEntityIsSet(boolean value) {
      if (!value) {
        this.extendEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXTEND_ENTITY:
        if (value == null) {
          unsetExtendEntity();
        } else {
          setExtendEntity((com.keruyun.commons.agent.collector.entity.ExtendEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXTEND_ENTITY:
        return getExtendEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXTEND_ENTITY:
        return isSetExtendEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeExtends_args)
        return this.equals((writeExtends_args)that);
      return false;
    }

    public boolean equals(writeExtends_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_extendEntity = true && this.isSetExtendEntity();
      boolean that_present_extendEntity = true && that.isSetExtendEntity();
      if (this_present_extendEntity || that_present_extendEntity) {
        if (!(this_present_extendEntity && that_present_extendEntity))
          return false;
        if (!this.extendEntity.equals(that.extendEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExtendEntity()) ? 131071 : 524287);
      if (isSetExtendEntity())
        hashCode = hashCode * 8191 + extendEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeExtends_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExtendEntity()).compareTo(other.isSetExtendEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtendEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extendEntity, other.extendEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeExtends_args(");
      boolean first = true;

      sb.append("extendEntity:");
      if (this.extendEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.extendEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (extendEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'extendEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (extendEntity != null) {
        extendEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeExtends_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeExtends_argsStandardScheme getScheme() {
        return new writeExtends_argsStandardScheme();
      }
    }

    private static class writeExtends_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeExtends_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeExtends_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXTEND_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.extendEntity = new com.keruyun.commons.agent.collector.entity.ExtendEntity();
                struct.extendEntity.read(iprot);
                struct.setExtendEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeExtends_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.extendEntity != null) {
          oprot.writeFieldBegin(EXTEND_ENTITY_FIELD_DESC);
          struct.extendEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeExtends_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeExtends_argsTupleScheme getScheme() {
        return new writeExtends_argsTupleScheme();
      }
    }

    private static class writeExtends_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeExtends_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeExtends_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.extendEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeExtends_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.extendEntity = new com.keruyun.commons.agent.collector.entity.ExtendEntity();
        struct.extendEntity.read(iprot);
        struct.setExtendEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeExtends_result implements org.apache.thrift.TBase<writeExtends_result, writeExtends_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeExtends_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeExtends_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeExtends_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeExtends_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeExtends_result.class, metaDataMap);
    }

    public writeExtends_result() {
    }

    public writeExtends_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeExtends_result(writeExtends_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeExtends_result deepCopy() {
      return new writeExtends_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeExtends_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeExtends_result)
        return this.equals((writeExtends_result)that);
      return false;
    }

    public boolean equals(writeExtends_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeExtends_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeExtends_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeExtends_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeExtends_resultStandardScheme getScheme() {
        return new writeExtends_resultStandardScheme();
      }
    }

    private static class writeExtends_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeExtends_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeExtends_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeExtends_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeExtends_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeExtends_resultTupleScheme getScheme() {
        return new writeExtends_resultTupleScheme();
      }
    }

    private static class writeExtends_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeExtends_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeExtends_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeExtends_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeMiddlewareInfo_args implements org.apache.thrift.TBase<writeMiddlewareInfo_args, writeMiddlewareInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeMiddlewareInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeMiddlewareInfo_args");

    private static final org.apache.thrift.protocol.TField MIDDLEWARE_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("middlewareEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeMiddlewareInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeMiddlewareInfo_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.MiddlewareEntity middlewareEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MIDDLEWARE_ENTITY((short)1, "middlewareEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MIDDLEWARE_ENTITY
            return MIDDLEWARE_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MIDDLEWARE_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("middlewareEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.MiddlewareEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeMiddlewareInfo_args.class, metaDataMap);
    }

    public writeMiddlewareInfo_args() {
    }

    public writeMiddlewareInfo_args(
      com.keruyun.commons.agent.collector.entity.MiddlewareEntity middlewareEntity)
    {
      this();
      this.middlewareEntity = middlewareEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeMiddlewareInfo_args(writeMiddlewareInfo_args other) {
      if (other.isSetMiddlewareEntity()) {
        this.middlewareEntity = new com.keruyun.commons.agent.collector.entity.MiddlewareEntity(other.middlewareEntity);
      }
    }

    public writeMiddlewareInfo_args deepCopy() {
      return new writeMiddlewareInfo_args(this);
    }

    @Override
    public void clear() {
      this.middlewareEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.MiddlewareEntity getMiddlewareEntity() {
      return this.middlewareEntity;
    }

    public writeMiddlewareInfo_args setMiddlewareEntity(com.keruyun.commons.agent.collector.entity.MiddlewareEntity middlewareEntity) {
      this.middlewareEntity = middlewareEntity;
      return this;
    }

    public void unsetMiddlewareEntity() {
      this.middlewareEntity = null;
    }

    /** Returns true if field middlewareEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetMiddlewareEntity() {
      return this.middlewareEntity != null;
    }

    public void setMiddlewareEntityIsSet(boolean value) {
      if (!value) {
        this.middlewareEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MIDDLEWARE_ENTITY:
        if (value == null) {
          unsetMiddlewareEntity();
        } else {
          setMiddlewareEntity((com.keruyun.commons.agent.collector.entity.MiddlewareEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MIDDLEWARE_ENTITY:
        return getMiddlewareEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MIDDLEWARE_ENTITY:
        return isSetMiddlewareEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeMiddlewareInfo_args)
        return this.equals((writeMiddlewareInfo_args)that);
      return false;
    }

    public boolean equals(writeMiddlewareInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_middlewareEntity = true && this.isSetMiddlewareEntity();
      boolean that_present_middlewareEntity = true && that.isSetMiddlewareEntity();
      if (this_present_middlewareEntity || that_present_middlewareEntity) {
        if (!(this_present_middlewareEntity && that_present_middlewareEntity))
          return false;
        if (!this.middlewareEntity.equals(that.middlewareEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMiddlewareEntity()) ? 131071 : 524287);
      if (isSetMiddlewareEntity())
        hashCode = hashCode * 8191 + middlewareEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeMiddlewareInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMiddlewareEntity()).compareTo(other.isSetMiddlewareEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMiddlewareEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.middlewareEntity, other.middlewareEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeMiddlewareInfo_args(");
      boolean first = true;

      sb.append("middlewareEntity:");
      if (this.middlewareEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.middlewareEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (middlewareEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'middlewareEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (middlewareEntity != null) {
        middlewareEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeMiddlewareInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeMiddlewareInfo_argsStandardScheme getScheme() {
        return new writeMiddlewareInfo_argsStandardScheme();
      }
    }

    private static class writeMiddlewareInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeMiddlewareInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeMiddlewareInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MIDDLEWARE_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.middlewareEntity = new com.keruyun.commons.agent.collector.entity.MiddlewareEntity();
                struct.middlewareEntity.read(iprot);
                struct.setMiddlewareEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeMiddlewareInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.middlewareEntity != null) {
          oprot.writeFieldBegin(MIDDLEWARE_ENTITY_FIELD_DESC);
          struct.middlewareEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeMiddlewareInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeMiddlewareInfo_argsTupleScheme getScheme() {
        return new writeMiddlewareInfo_argsTupleScheme();
      }
    }

    private static class writeMiddlewareInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeMiddlewareInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeMiddlewareInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.middlewareEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeMiddlewareInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.middlewareEntity = new com.keruyun.commons.agent.collector.entity.MiddlewareEntity();
        struct.middlewareEntity.read(iprot);
        struct.setMiddlewareEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeMiddlewareInfo_result implements org.apache.thrift.TBase<writeMiddlewareInfo_result, writeMiddlewareInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeMiddlewareInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeMiddlewareInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeMiddlewareInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeMiddlewareInfo_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeMiddlewareInfo_result.class, metaDataMap);
    }

    public writeMiddlewareInfo_result() {
    }

    public writeMiddlewareInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeMiddlewareInfo_result(writeMiddlewareInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeMiddlewareInfo_result deepCopy() {
      return new writeMiddlewareInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeMiddlewareInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeMiddlewareInfo_result)
        return this.equals((writeMiddlewareInfo_result)that);
      return false;
    }

    public boolean equals(writeMiddlewareInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeMiddlewareInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeMiddlewareInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeMiddlewareInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeMiddlewareInfo_resultStandardScheme getScheme() {
        return new writeMiddlewareInfo_resultStandardScheme();
      }
    }

    private static class writeMiddlewareInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeMiddlewareInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeMiddlewareInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeMiddlewareInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeMiddlewareInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeMiddlewareInfo_resultTupleScheme getScheme() {
        return new writeMiddlewareInfo_resultTupleScheme();
      }
    }

    private static class writeMiddlewareInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeMiddlewareInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeMiddlewareInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeMiddlewareInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeClusterInfo_args implements org.apache.thrift.TBase<writeClusterInfo_args, writeClusterInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeClusterInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeClusterInfo_args");

    private static final org.apache.thrift.protocol.TField CLUSTER_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeClusterInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeClusterInfo_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.ClusterEntity clusterEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTER_ENTITY((short)1, "clusterEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTER_ENTITY
            return CLUSTER_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTER_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("clusterEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.ClusterEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeClusterInfo_args.class, metaDataMap);
    }

    public writeClusterInfo_args() {
    }

    public writeClusterInfo_args(
      com.keruyun.commons.agent.collector.entity.ClusterEntity clusterEntity)
    {
      this();
      this.clusterEntity = clusterEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeClusterInfo_args(writeClusterInfo_args other) {
      if (other.isSetClusterEntity()) {
        this.clusterEntity = new com.keruyun.commons.agent.collector.entity.ClusterEntity(other.clusterEntity);
      }
    }

    public writeClusterInfo_args deepCopy() {
      return new writeClusterInfo_args(this);
    }

    @Override
    public void clear() {
      this.clusterEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.ClusterEntity getClusterEntity() {
      return this.clusterEntity;
    }

    public writeClusterInfo_args setClusterEntity(com.keruyun.commons.agent.collector.entity.ClusterEntity clusterEntity) {
      this.clusterEntity = clusterEntity;
      return this;
    }

    public void unsetClusterEntity() {
      this.clusterEntity = null;
    }

    /** Returns true if field clusterEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterEntity() {
      return this.clusterEntity != null;
    }

    public void setClusterEntityIsSet(boolean value) {
      if (!value) {
        this.clusterEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLUSTER_ENTITY:
        if (value == null) {
          unsetClusterEntity();
        } else {
          setClusterEntity((com.keruyun.commons.agent.collector.entity.ClusterEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTER_ENTITY:
        return getClusterEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLUSTER_ENTITY:
        return isSetClusterEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeClusterInfo_args)
        return this.equals((writeClusterInfo_args)that);
      return false;
    }

    public boolean equals(writeClusterInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_clusterEntity = true && this.isSetClusterEntity();
      boolean that_present_clusterEntity = true && that.isSetClusterEntity();
      if (this_present_clusterEntity || that_present_clusterEntity) {
        if (!(this_present_clusterEntity && that_present_clusterEntity))
          return false;
        if (!this.clusterEntity.equals(that.clusterEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetClusterEntity()) ? 131071 : 524287);
      if (isSetClusterEntity())
        hashCode = hashCode * 8191 + clusterEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeClusterInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClusterEntity()).compareTo(other.isSetClusterEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterEntity, other.clusterEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeClusterInfo_args(");
      boolean first = true;

      sb.append("clusterEntity:");
      if (this.clusterEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (clusterEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'clusterEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (clusterEntity != null) {
        clusterEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeClusterInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeClusterInfo_argsStandardScheme getScheme() {
        return new writeClusterInfo_argsStandardScheme();
      }
    }

    private static class writeClusterInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeClusterInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeClusterInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTER_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clusterEntity = new com.keruyun.commons.agent.collector.entity.ClusterEntity();
                struct.clusterEntity.read(iprot);
                struct.setClusterEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeClusterInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clusterEntity != null) {
          oprot.writeFieldBegin(CLUSTER_ENTITY_FIELD_DESC);
          struct.clusterEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeClusterInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeClusterInfo_argsTupleScheme getScheme() {
        return new writeClusterInfo_argsTupleScheme();
      }
    }

    private static class writeClusterInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeClusterInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeClusterInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.clusterEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeClusterInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.clusterEntity = new com.keruyun.commons.agent.collector.entity.ClusterEntity();
        struct.clusterEntity.read(iprot);
        struct.setClusterEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeClusterInfo_result implements org.apache.thrift.TBase<writeClusterInfo_result, writeClusterInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeClusterInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeClusterInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeClusterInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeClusterInfo_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeClusterInfo_result.class, metaDataMap);
    }

    public writeClusterInfo_result() {
    }

    public writeClusterInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeClusterInfo_result(writeClusterInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeClusterInfo_result deepCopy() {
      return new writeClusterInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeClusterInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeClusterInfo_result)
        return this.equals((writeClusterInfo_result)that);
      return false;
    }

    public boolean equals(writeClusterInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeClusterInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeClusterInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeClusterInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeClusterInfo_resultStandardScheme getScheme() {
        return new writeClusterInfo_resultStandardScheme();
      }
    }

    private static class writeClusterInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeClusterInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeClusterInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeClusterInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeClusterInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeClusterInfo_resultTupleScheme getScheme() {
        return new writeClusterInfo_resultTupleScheme();
      }
    }

    private static class writeClusterInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeClusterInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeClusterInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeClusterInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeHttpInfo_args implements org.apache.thrift.TBase<writeHttpInfo_args, writeHttpInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeHttpInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeHttpInfo_args");

    private static final org.apache.thrift.protocol.TField HTTP_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("httpEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeHttpInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeHttpInfo_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.HttpEntity httpEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HTTP_ENTITY((short)1, "httpEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HTTP_ENTITY
            return HTTP_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HTTP_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("httpEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.HttpEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeHttpInfo_args.class, metaDataMap);
    }

    public writeHttpInfo_args() {
    }

    public writeHttpInfo_args(
      com.keruyun.commons.agent.collector.entity.HttpEntity httpEntity)
    {
      this();
      this.httpEntity = httpEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeHttpInfo_args(writeHttpInfo_args other) {
      if (other.isSetHttpEntity()) {
        this.httpEntity = new com.keruyun.commons.agent.collector.entity.HttpEntity(other.httpEntity);
      }
    }

    public writeHttpInfo_args deepCopy() {
      return new writeHttpInfo_args(this);
    }

    @Override
    public void clear() {
      this.httpEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.HttpEntity getHttpEntity() {
      return this.httpEntity;
    }

    public writeHttpInfo_args setHttpEntity(com.keruyun.commons.agent.collector.entity.HttpEntity httpEntity) {
      this.httpEntity = httpEntity;
      return this;
    }

    public void unsetHttpEntity() {
      this.httpEntity = null;
    }

    /** Returns true if field httpEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetHttpEntity() {
      return this.httpEntity != null;
    }

    public void setHttpEntityIsSet(boolean value) {
      if (!value) {
        this.httpEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HTTP_ENTITY:
        if (value == null) {
          unsetHttpEntity();
        } else {
          setHttpEntity((com.keruyun.commons.agent.collector.entity.HttpEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HTTP_ENTITY:
        return getHttpEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HTTP_ENTITY:
        return isSetHttpEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeHttpInfo_args)
        return this.equals((writeHttpInfo_args)that);
      return false;
    }

    public boolean equals(writeHttpInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_httpEntity = true && this.isSetHttpEntity();
      boolean that_present_httpEntity = true && that.isSetHttpEntity();
      if (this_present_httpEntity || that_present_httpEntity) {
        if (!(this_present_httpEntity && that_present_httpEntity))
          return false;
        if (!this.httpEntity.equals(that.httpEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHttpEntity()) ? 131071 : 524287);
      if (isSetHttpEntity())
        hashCode = hashCode * 8191 + httpEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeHttpInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHttpEntity()).compareTo(other.isSetHttpEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHttpEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.httpEntity, other.httpEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeHttpInfo_args(");
      boolean first = true;

      sb.append("httpEntity:");
      if (this.httpEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.httpEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (httpEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'httpEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (httpEntity != null) {
        httpEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeHttpInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeHttpInfo_argsStandardScheme getScheme() {
        return new writeHttpInfo_argsStandardScheme();
      }
    }

    private static class writeHttpInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeHttpInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeHttpInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HTTP_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.httpEntity = new com.keruyun.commons.agent.collector.entity.HttpEntity();
                struct.httpEntity.read(iprot);
                struct.setHttpEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeHttpInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.httpEntity != null) {
          oprot.writeFieldBegin(HTTP_ENTITY_FIELD_DESC);
          struct.httpEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeHttpInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeHttpInfo_argsTupleScheme getScheme() {
        return new writeHttpInfo_argsTupleScheme();
      }
    }

    private static class writeHttpInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeHttpInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeHttpInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.httpEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeHttpInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.httpEntity = new com.keruyun.commons.agent.collector.entity.HttpEntity();
        struct.httpEntity.read(iprot);
        struct.setHttpEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeHttpInfo_result implements org.apache.thrift.TBase<writeHttpInfo_result, writeHttpInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeHttpInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeHttpInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeHttpInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeHttpInfo_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeHttpInfo_result.class, metaDataMap);
    }

    public writeHttpInfo_result() {
    }

    public writeHttpInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeHttpInfo_result(writeHttpInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeHttpInfo_result deepCopy() {
      return new writeHttpInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeHttpInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeHttpInfo_result)
        return this.equals((writeHttpInfo_result)that);
      return false;
    }

    public boolean equals(writeHttpInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeHttpInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeHttpInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeHttpInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeHttpInfo_resultStandardScheme getScheme() {
        return new writeHttpInfo_resultStandardScheme();
      }
    }

    private static class writeHttpInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeHttpInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeHttpInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeHttpInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeHttpInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeHttpInfo_resultTupleScheme getScheme() {
        return new writeHttpInfo_resultTupleScheme();
      }
    }

    private static class writeHttpInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeHttpInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeHttpInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeHttpInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeKafkaInfo_args implements org.apache.thrift.TBase<writeKafkaInfo_args, writeKafkaInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeKafkaInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeKafkaInfo_args");

    private static final org.apache.thrift.protocol.TField KAFKA_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("kafkaEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeKafkaInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeKafkaInfo_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.KafkaEntity kafkaEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KAFKA_ENTITY((short)1, "kafkaEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KAFKA_ENTITY
            return KAFKA_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KAFKA_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("kafkaEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.KafkaEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeKafkaInfo_args.class, metaDataMap);
    }

    public writeKafkaInfo_args() {
    }

    public writeKafkaInfo_args(
      com.keruyun.commons.agent.collector.entity.KafkaEntity kafkaEntity)
    {
      this();
      this.kafkaEntity = kafkaEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeKafkaInfo_args(writeKafkaInfo_args other) {
      if (other.isSetKafkaEntity()) {
        this.kafkaEntity = new com.keruyun.commons.agent.collector.entity.KafkaEntity(other.kafkaEntity);
      }
    }

    public writeKafkaInfo_args deepCopy() {
      return new writeKafkaInfo_args(this);
    }

    @Override
    public void clear() {
      this.kafkaEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.KafkaEntity getKafkaEntity() {
      return this.kafkaEntity;
    }

    public writeKafkaInfo_args setKafkaEntity(com.keruyun.commons.agent.collector.entity.KafkaEntity kafkaEntity) {
      this.kafkaEntity = kafkaEntity;
      return this;
    }

    public void unsetKafkaEntity() {
      this.kafkaEntity = null;
    }

    /** Returns true if field kafkaEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetKafkaEntity() {
      return this.kafkaEntity != null;
    }

    public void setKafkaEntityIsSet(boolean value) {
      if (!value) {
        this.kafkaEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KAFKA_ENTITY:
        if (value == null) {
          unsetKafkaEntity();
        } else {
          setKafkaEntity((com.keruyun.commons.agent.collector.entity.KafkaEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KAFKA_ENTITY:
        return getKafkaEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KAFKA_ENTITY:
        return isSetKafkaEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeKafkaInfo_args)
        return this.equals((writeKafkaInfo_args)that);
      return false;
    }

    public boolean equals(writeKafkaInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_kafkaEntity = true && this.isSetKafkaEntity();
      boolean that_present_kafkaEntity = true && that.isSetKafkaEntity();
      if (this_present_kafkaEntity || that_present_kafkaEntity) {
        if (!(this_present_kafkaEntity && that_present_kafkaEntity))
          return false;
        if (!this.kafkaEntity.equals(that.kafkaEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetKafkaEntity()) ? 131071 : 524287);
      if (isSetKafkaEntity())
        hashCode = hashCode * 8191 + kafkaEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeKafkaInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKafkaEntity()).compareTo(other.isSetKafkaEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKafkaEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kafkaEntity, other.kafkaEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeKafkaInfo_args(");
      boolean first = true;

      sb.append("kafkaEntity:");
      if (this.kafkaEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.kafkaEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (kafkaEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'kafkaEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (kafkaEntity != null) {
        kafkaEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeKafkaInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeKafkaInfo_argsStandardScheme getScheme() {
        return new writeKafkaInfo_argsStandardScheme();
      }
    }

    private static class writeKafkaInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeKafkaInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeKafkaInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KAFKA_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kafkaEntity = new com.keruyun.commons.agent.collector.entity.KafkaEntity();
                struct.kafkaEntity.read(iprot);
                struct.setKafkaEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeKafkaInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.kafkaEntity != null) {
          oprot.writeFieldBegin(KAFKA_ENTITY_FIELD_DESC);
          struct.kafkaEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeKafkaInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeKafkaInfo_argsTupleScheme getScheme() {
        return new writeKafkaInfo_argsTupleScheme();
      }
    }

    private static class writeKafkaInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeKafkaInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeKafkaInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.kafkaEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeKafkaInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.kafkaEntity = new com.keruyun.commons.agent.collector.entity.KafkaEntity();
        struct.kafkaEntity.read(iprot);
        struct.setKafkaEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeKafkaInfo_result implements org.apache.thrift.TBase<writeKafkaInfo_result, writeKafkaInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeKafkaInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeKafkaInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeKafkaInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeKafkaInfo_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeKafkaInfo_result.class, metaDataMap);
    }

    public writeKafkaInfo_result() {
    }

    public writeKafkaInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeKafkaInfo_result(writeKafkaInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeKafkaInfo_result deepCopy() {
      return new writeKafkaInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeKafkaInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeKafkaInfo_result)
        return this.equals((writeKafkaInfo_result)that);
      return false;
    }

    public boolean equals(writeKafkaInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeKafkaInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeKafkaInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeKafkaInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeKafkaInfo_resultStandardScheme getScheme() {
        return new writeKafkaInfo_resultStandardScheme();
      }
    }

    private static class writeKafkaInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeKafkaInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeKafkaInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeKafkaInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeKafkaInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeKafkaInfo_resultTupleScheme getScheme() {
        return new writeKafkaInfo_resultTupleScheme();
      }
    }

    private static class writeKafkaInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeKafkaInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeKafkaInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeKafkaInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeQuartzInfo_args implements org.apache.thrift.TBase<writeQuartzInfo_args, writeQuartzInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeQuartzInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeQuartzInfo_args");

    private static final org.apache.thrift.protocol.TField QUARTZ_INFO_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quartzInfoEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeQuartzInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeQuartzInfo_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.QuartzInfoEntity quartzInfoEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUARTZ_INFO_ENTITY((short)1, "quartzInfoEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUARTZ_INFO_ENTITY
            return QUARTZ_INFO_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUARTZ_INFO_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("quartzInfoEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.QuartzInfoEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeQuartzInfo_args.class, metaDataMap);
    }

    public writeQuartzInfo_args() {
    }

    public writeQuartzInfo_args(
      com.keruyun.commons.agent.collector.entity.QuartzInfoEntity quartzInfoEntity)
    {
      this();
      this.quartzInfoEntity = quartzInfoEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeQuartzInfo_args(writeQuartzInfo_args other) {
      if (other.isSetQuartzInfoEntity()) {
        this.quartzInfoEntity = new com.keruyun.commons.agent.collector.entity.QuartzInfoEntity(other.quartzInfoEntity);
      }
    }

    public writeQuartzInfo_args deepCopy() {
      return new writeQuartzInfo_args(this);
    }

    @Override
    public void clear() {
      this.quartzInfoEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.QuartzInfoEntity getQuartzInfoEntity() {
      return this.quartzInfoEntity;
    }

    public writeQuartzInfo_args setQuartzInfoEntity(com.keruyun.commons.agent.collector.entity.QuartzInfoEntity quartzInfoEntity) {
      this.quartzInfoEntity = quartzInfoEntity;
      return this;
    }

    public void unsetQuartzInfoEntity() {
      this.quartzInfoEntity = null;
    }

    /** Returns true if field quartzInfoEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetQuartzInfoEntity() {
      return this.quartzInfoEntity != null;
    }

    public void setQuartzInfoEntityIsSet(boolean value) {
      if (!value) {
        this.quartzInfoEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUARTZ_INFO_ENTITY:
        if (value == null) {
          unsetQuartzInfoEntity();
        } else {
          setQuartzInfoEntity((com.keruyun.commons.agent.collector.entity.QuartzInfoEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUARTZ_INFO_ENTITY:
        return getQuartzInfoEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUARTZ_INFO_ENTITY:
        return isSetQuartzInfoEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeQuartzInfo_args)
        return this.equals((writeQuartzInfo_args)that);
      return false;
    }

    public boolean equals(writeQuartzInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_quartzInfoEntity = true && this.isSetQuartzInfoEntity();
      boolean that_present_quartzInfoEntity = true && that.isSetQuartzInfoEntity();
      if (this_present_quartzInfoEntity || that_present_quartzInfoEntity) {
        if (!(this_present_quartzInfoEntity && that_present_quartzInfoEntity))
          return false;
        if (!this.quartzInfoEntity.equals(that.quartzInfoEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuartzInfoEntity()) ? 131071 : 524287);
      if (isSetQuartzInfoEntity())
        hashCode = hashCode * 8191 + quartzInfoEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeQuartzInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuartzInfoEntity()).compareTo(other.isSetQuartzInfoEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuartzInfoEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quartzInfoEntity, other.quartzInfoEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeQuartzInfo_args(");
      boolean first = true;

      sb.append("quartzInfoEntity:");
      if (this.quartzInfoEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.quartzInfoEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (quartzInfoEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'quartzInfoEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (quartzInfoEntity != null) {
        quartzInfoEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeQuartzInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeQuartzInfo_argsStandardScheme getScheme() {
        return new writeQuartzInfo_argsStandardScheme();
      }
    }

    private static class writeQuartzInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeQuartzInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeQuartzInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUARTZ_INFO_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.quartzInfoEntity = new com.keruyun.commons.agent.collector.entity.QuartzInfoEntity();
                struct.quartzInfoEntity.read(iprot);
                struct.setQuartzInfoEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeQuartzInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.quartzInfoEntity != null) {
          oprot.writeFieldBegin(QUARTZ_INFO_ENTITY_FIELD_DESC);
          struct.quartzInfoEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeQuartzInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeQuartzInfo_argsTupleScheme getScheme() {
        return new writeQuartzInfo_argsTupleScheme();
      }
    }

    private static class writeQuartzInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeQuartzInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeQuartzInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.quartzInfoEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeQuartzInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.quartzInfoEntity = new com.keruyun.commons.agent.collector.entity.QuartzInfoEntity();
        struct.quartzInfoEntity.read(iprot);
        struct.setQuartzInfoEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeQuartzInfo_result implements org.apache.thrift.TBase<writeQuartzInfo_result, writeQuartzInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeQuartzInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeQuartzInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeQuartzInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeQuartzInfo_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeQuartzInfo_result.class, metaDataMap);
    }

    public writeQuartzInfo_result() {
    }

    public writeQuartzInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeQuartzInfo_result(writeQuartzInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeQuartzInfo_result deepCopy() {
      return new writeQuartzInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeQuartzInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeQuartzInfo_result)
        return this.equals((writeQuartzInfo_result)that);
      return false;
    }

    public boolean equals(writeQuartzInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeQuartzInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeQuartzInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeQuartzInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeQuartzInfo_resultStandardScheme getScheme() {
        return new writeQuartzInfo_resultStandardScheme();
      }
    }

    private static class writeQuartzInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeQuartzInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeQuartzInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeQuartzInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeQuartzInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeQuartzInfo_resultTupleScheme getScheme() {
        return new writeQuartzInfo_resultTupleScheme();
      }
    }

    private static class writeQuartzInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeQuartzInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeQuartzInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeQuartzInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeDetail_args implements org.apache.thrift.TBase<writeDetail_args, writeDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeDetail_args");

    private static final org.apache.thrift.protocol.TField DETAIL_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("detailEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeDetail_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeDetail_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.DetailEntity detailEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DETAIL_ENTITY((short)1, "detailEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DETAIL_ENTITY
            return DETAIL_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DETAIL_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("detailEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.DetailEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeDetail_args.class, metaDataMap);
    }

    public writeDetail_args() {
    }

    public writeDetail_args(
      com.keruyun.commons.agent.collector.entity.DetailEntity detailEntity)
    {
      this();
      this.detailEntity = detailEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeDetail_args(writeDetail_args other) {
      if (other.isSetDetailEntity()) {
        this.detailEntity = new com.keruyun.commons.agent.collector.entity.DetailEntity(other.detailEntity);
      }
    }

    public writeDetail_args deepCopy() {
      return new writeDetail_args(this);
    }

    @Override
    public void clear() {
      this.detailEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.DetailEntity getDetailEntity() {
      return this.detailEntity;
    }

    public writeDetail_args setDetailEntity(com.keruyun.commons.agent.collector.entity.DetailEntity detailEntity) {
      this.detailEntity = detailEntity;
      return this;
    }

    public void unsetDetailEntity() {
      this.detailEntity = null;
    }

    /** Returns true if field detailEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetDetailEntity() {
      return this.detailEntity != null;
    }

    public void setDetailEntityIsSet(boolean value) {
      if (!value) {
        this.detailEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DETAIL_ENTITY:
        if (value == null) {
          unsetDetailEntity();
        } else {
          setDetailEntity((com.keruyun.commons.agent.collector.entity.DetailEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DETAIL_ENTITY:
        return getDetailEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DETAIL_ENTITY:
        return isSetDetailEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeDetail_args)
        return this.equals((writeDetail_args)that);
      return false;
    }

    public boolean equals(writeDetail_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_detailEntity = true && this.isSetDetailEntity();
      boolean that_present_detailEntity = true && that.isSetDetailEntity();
      if (this_present_detailEntity || that_present_detailEntity) {
        if (!(this_present_detailEntity && that_present_detailEntity))
          return false;
        if (!this.detailEntity.equals(that.detailEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDetailEntity()) ? 131071 : 524287);
      if (isSetDetailEntity())
        hashCode = hashCode * 8191 + detailEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDetailEntity()).compareTo(other.isSetDetailEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDetailEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailEntity, other.detailEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeDetail_args(");
      boolean first = true;

      sb.append("detailEntity:");
      if (this.detailEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.detailEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (detailEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'detailEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (detailEntity != null) {
        detailEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeDetail_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeDetail_argsStandardScheme getScheme() {
        return new writeDetail_argsStandardScheme();
      }
    }

    private static class writeDetail_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DETAIL_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.detailEntity = new com.keruyun.commons.agent.collector.entity.DetailEntity();
                struct.detailEntity.read(iprot);
                struct.setDetailEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.detailEntity != null) {
          oprot.writeFieldBegin(DETAIL_ENTITY_FIELD_DESC);
          struct.detailEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeDetail_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeDetail_argsTupleScheme getScheme() {
        return new writeDetail_argsTupleScheme();
      }
    }

    private static class writeDetail_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.detailEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.detailEntity = new com.keruyun.commons.agent.collector.entity.DetailEntity();
        struct.detailEntity.read(iprot);
        struct.setDetailEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeDetail_result implements org.apache.thrift.TBase<writeDetail_result, writeDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeDetail_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeDetail_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeDetail_result.class, metaDataMap);
    }

    public writeDetail_result() {
    }

    public writeDetail_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeDetail_result(writeDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeDetail_result deepCopy() {
      return new writeDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeDetail_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeDetail_result)
        return this.equals((writeDetail_result)that);
      return false;
    }

    public boolean equals(writeDetail_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeDetail_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeDetail_resultStandardScheme getScheme() {
        return new writeDetail_resultStandardScheme();
      }
    }

    private static class writeDetail_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeDetail_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeDetail_resultTupleScheme getScheme() {
        return new writeDetail_resultTupleScheme();
      }
    }

    private static class writeDetail_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeAppKafka_args implements org.apache.thrift.TBase<writeAppKafka_args, writeAppKafka_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeAppKafka_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeAppKafka_args");

    private static final org.apache.thrift.protocol.TField APP_KAFKA_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKafkaEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeAppKafka_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeAppKafka_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.AppKafkaEntity appKafkaEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_KAFKA_ENTITY((short)1, "appKafkaEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_KAFKA_ENTITY
            return APP_KAFKA_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_KAFKA_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("appKafkaEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.AppKafkaEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeAppKafka_args.class, metaDataMap);
    }

    public writeAppKafka_args() {
    }

    public writeAppKafka_args(
      com.keruyun.commons.agent.collector.entity.AppKafkaEntity appKafkaEntity)
    {
      this();
      this.appKafkaEntity = appKafkaEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeAppKafka_args(writeAppKafka_args other) {
      if (other.isSetAppKafkaEntity()) {
        this.appKafkaEntity = new com.keruyun.commons.agent.collector.entity.AppKafkaEntity(other.appKafkaEntity);
      }
    }

    public writeAppKafka_args deepCopy() {
      return new writeAppKafka_args(this);
    }

    @Override
    public void clear() {
      this.appKafkaEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.AppKafkaEntity getAppKafkaEntity() {
      return this.appKafkaEntity;
    }

    public writeAppKafka_args setAppKafkaEntity(com.keruyun.commons.agent.collector.entity.AppKafkaEntity appKafkaEntity) {
      this.appKafkaEntity = appKafkaEntity;
      return this;
    }

    public void unsetAppKafkaEntity() {
      this.appKafkaEntity = null;
    }

    /** Returns true if field appKafkaEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetAppKafkaEntity() {
      return this.appKafkaEntity != null;
    }

    public void setAppKafkaEntityIsSet(boolean value) {
      if (!value) {
        this.appKafkaEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_KAFKA_ENTITY:
        if (value == null) {
          unsetAppKafkaEntity();
        } else {
          setAppKafkaEntity((com.keruyun.commons.agent.collector.entity.AppKafkaEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_KAFKA_ENTITY:
        return getAppKafkaEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_KAFKA_ENTITY:
        return isSetAppKafkaEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeAppKafka_args)
        return this.equals((writeAppKafka_args)that);
      return false;
    }

    public boolean equals(writeAppKafka_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_appKafkaEntity = true && this.isSetAppKafkaEntity();
      boolean that_present_appKafkaEntity = true && that.isSetAppKafkaEntity();
      if (this_present_appKafkaEntity || that_present_appKafkaEntity) {
        if (!(this_present_appKafkaEntity && that_present_appKafkaEntity))
          return false;
        if (!this.appKafkaEntity.equals(that.appKafkaEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAppKafkaEntity()) ? 131071 : 524287);
      if (isSetAppKafkaEntity())
        hashCode = hashCode * 8191 + appKafkaEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeAppKafka_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppKafkaEntity()).compareTo(other.isSetAppKafkaEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppKafkaEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKafkaEntity, other.appKafkaEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeAppKafka_args(");
      boolean first = true;

      sb.append("appKafkaEntity:");
      if (this.appKafkaEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.appKafkaEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appKafkaEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appKafkaEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (appKafkaEntity != null) {
        appKafkaEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeAppKafka_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeAppKafka_argsStandardScheme getScheme() {
        return new writeAppKafka_argsStandardScheme();
      }
    }

    private static class writeAppKafka_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeAppKafka_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeAppKafka_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_KAFKA_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.appKafkaEntity = new com.keruyun.commons.agent.collector.entity.AppKafkaEntity();
                struct.appKafkaEntity.read(iprot);
                struct.setAppKafkaEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeAppKafka_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appKafkaEntity != null) {
          oprot.writeFieldBegin(APP_KAFKA_ENTITY_FIELD_DESC);
          struct.appKafkaEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeAppKafka_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeAppKafka_argsTupleScheme getScheme() {
        return new writeAppKafka_argsTupleScheme();
      }
    }

    private static class writeAppKafka_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeAppKafka_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeAppKafka_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.appKafkaEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeAppKafka_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.appKafkaEntity = new com.keruyun.commons.agent.collector.entity.AppKafkaEntity();
        struct.appKafkaEntity.read(iprot);
        struct.setAppKafkaEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeAppKafka_result implements org.apache.thrift.TBase<writeAppKafka_result, writeAppKafka_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeAppKafka_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeAppKafka_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeAppKafka_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeAppKafka_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeAppKafka_result.class, metaDataMap);
    }

    public writeAppKafka_result() {
    }

    public writeAppKafka_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeAppKafka_result(writeAppKafka_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeAppKafka_result deepCopy() {
      return new writeAppKafka_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeAppKafka_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeAppKafka_result)
        return this.equals((writeAppKafka_result)that);
      return false;
    }

    public boolean equals(writeAppKafka_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeAppKafka_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeAppKafka_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeAppKafka_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeAppKafka_resultStandardScheme getScheme() {
        return new writeAppKafka_resultStandardScheme();
      }
    }

    private static class writeAppKafka_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeAppKafka_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeAppKafka_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeAppKafka_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeAppKafka_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeAppKafka_resultTupleScheme getScheme() {
        return new writeAppKafka_resultTupleScheme();
      }
    }

    private static class writeAppKafka_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeAppKafka_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeAppKafka_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeAppKafka_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeZookeeperInfo_args implements org.apache.thrift.TBase<writeZookeeperInfo_args, writeZookeeperInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeZookeeperInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeZookeeperInfo_args");

    private static final org.apache.thrift.protocol.TField ZOOKEEPER_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("zookeeperEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeZookeeperInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeZookeeperInfo_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.ZookeeperEntity zookeeperEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ZOOKEEPER_ENTITY((short)1, "zookeeperEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ZOOKEEPER_ENTITY
            return ZOOKEEPER_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ZOOKEEPER_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("zookeeperEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.ZookeeperEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeZookeeperInfo_args.class, metaDataMap);
    }

    public writeZookeeperInfo_args() {
    }

    public writeZookeeperInfo_args(
      com.keruyun.commons.agent.collector.entity.ZookeeperEntity zookeeperEntity)
    {
      this();
      this.zookeeperEntity = zookeeperEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeZookeeperInfo_args(writeZookeeperInfo_args other) {
      if (other.isSetZookeeperEntity()) {
        this.zookeeperEntity = new com.keruyun.commons.agent.collector.entity.ZookeeperEntity(other.zookeeperEntity);
      }
    }

    public writeZookeeperInfo_args deepCopy() {
      return new writeZookeeperInfo_args(this);
    }

    @Override
    public void clear() {
      this.zookeeperEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.ZookeeperEntity getZookeeperEntity() {
      return this.zookeeperEntity;
    }

    public writeZookeeperInfo_args setZookeeperEntity(com.keruyun.commons.agent.collector.entity.ZookeeperEntity zookeeperEntity) {
      this.zookeeperEntity = zookeeperEntity;
      return this;
    }

    public void unsetZookeeperEntity() {
      this.zookeeperEntity = null;
    }

    /** Returns true if field zookeeperEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetZookeeperEntity() {
      return this.zookeeperEntity != null;
    }

    public void setZookeeperEntityIsSet(boolean value) {
      if (!value) {
        this.zookeeperEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ZOOKEEPER_ENTITY:
        if (value == null) {
          unsetZookeeperEntity();
        } else {
          setZookeeperEntity((com.keruyun.commons.agent.collector.entity.ZookeeperEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ZOOKEEPER_ENTITY:
        return getZookeeperEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ZOOKEEPER_ENTITY:
        return isSetZookeeperEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeZookeeperInfo_args)
        return this.equals((writeZookeeperInfo_args)that);
      return false;
    }

    public boolean equals(writeZookeeperInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_zookeeperEntity = true && this.isSetZookeeperEntity();
      boolean that_present_zookeeperEntity = true && that.isSetZookeeperEntity();
      if (this_present_zookeeperEntity || that_present_zookeeperEntity) {
        if (!(this_present_zookeeperEntity && that_present_zookeeperEntity))
          return false;
        if (!this.zookeeperEntity.equals(that.zookeeperEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetZookeeperEntity()) ? 131071 : 524287);
      if (isSetZookeeperEntity())
        hashCode = hashCode * 8191 + zookeeperEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeZookeeperInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetZookeeperEntity()).compareTo(other.isSetZookeeperEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZookeeperEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zookeeperEntity, other.zookeeperEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeZookeeperInfo_args(");
      boolean first = true;

      sb.append("zookeeperEntity:");
      if (this.zookeeperEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.zookeeperEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (zookeeperEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'zookeeperEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (zookeeperEntity != null) {
        zookeeperEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeZookeeperInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeZookeeperInfo_argsStandardScheme getScheme() {
        return new writeZookeeperInfo_argsStandardScheme();
      }
    }

    private static class writeZookeeperInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeZookeeperInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeZookeeperInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ZOOKEEPER_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.zookeeperEntity = new com.keruyun.commons.agent.collector.entity.ZookeeperEntity();
                struct.zookeeperEntity.read(iprot);
                struct.setZookeeperEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeZookeeperInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.zookeeperEntity != null) {
          oprot.writeFieldBegin(ZOOKEEPER_ENTITY_FIELD_DESC);
          struct.zookeeperEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeZookeeperInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeZookeeperInfo_argsTupleScheme getScheme() {
        return new writeZookeeperInfo_argsTupleScheme();
      }
    }

    private static class writeZookeeperInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeZookeeperInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeZookeeperInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.zookeeperEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeZookeeperInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.zookeeperEntity = new com.keruyun.commons.agent.collector.entity.ZookeeperEntity();
        struct.zookeeperEntity.read(iprot);
        struct.setZookeeperEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeZookeeperInfo_result implements org.apache.thrift.TBase<writeZookeeperInfo_result, writeZookeeperInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeZookeeperInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeZookeeperInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeZookeeperInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeZookeeperInfo_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeZookeeperInfo_result.class, metaDataMap);
    }

    public writeZookeeperInfo_result() {
    }

    public writeZookeeperInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeZookeeperInfo_result(writeZookeeperInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeZookeeperInfo_result deepCopy() {
      return new writeZookeeperInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeZookeeperInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeZookeeperInfo_result)
        return this.equals((writeZookeeperInfo_result)that);
      return false;
    }

    public boolean equals(writeZookeeperInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeZookeeperInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeZookeeperInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeZookeeperInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeZookeeperInfo_resultStandardScheme getScheme() {
        return new writeZookeeperInfo_resultStandardScheme();
      }
    }

    private static class writeZookeeperInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeZookeeperInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeZookeeperInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeZookeeperInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeZookeeperInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeZookeeperInfo_resultTupleScheme getScheme() {
        return new writeZookeeperInfo_resultTupleScheme();
      }
    }

    private static class writeZookeeperInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeZookeeperInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeZookeeperInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeZookeeperInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeFailureMessage_args implements org.apache.thrift.TBase<writeFailureMessage_args, writeFailureMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeFailureMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeFailureMessage_args");

    private static final org.apache.thrift.protocol.TField FAILURE_MESSAGE_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("failureMessageEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeFailureMessage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeFailureMessage_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.FailureMessageEntity failureMessageEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FAILURE_MESSAGE_ENTITY((short)1, "failureMessageEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FAILURE_MESSAGE_ENTITY
            return FAILURE_MESSAGE_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FAILURE_MESSAGE_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("failureMessageEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.FailureMessageEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeFailureMessage_args.class, metaDataMap);
    }

    public writeFailureMessage_args() {
    }

    public writeFailureMessage_args(
      com.keruyun.commons.agent.collector.entity.FailureMessageEntity failureMessageEntity)
    {
      this();
      this.failureMessageEntity = failureMessageEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeFailureMessage_args(writeFailureMessage_args other) {
      if (other.isSetFailureMessageEntity()) {
        this.failureMessageEntity = new com.keruyun.commons.agent.collector.entity.FailureMessageEntity(other.failureMessageEntity);
      }
    }

    public writeFailureMessage_args deepCopy() {
      return new writeFailureMessage_args(this);
    }

    @Override
    public void clear() {
      this.failureMessageEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.FailureMessageEntity getFailureMessageEntity() {
      return this.failureMessageEntity;
    }

    public writeFailureMessage_args setFailureMessageEntity(com.keruyun.commons.agent.collector.entity.FailureMessageEntity failureMessageEntity) {
      this.failureMessageEntity = failureMessageEntity;
      return this;
    }

    public void unsetFailureMessageEntity() {
      this.failureMessageEntity = null;
    }

    /** Returns true if field failureMessageEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetFailureMessageEntity() {
      return this.failureMessageEntity != null;
    }

    public void setFailureMessageEntityIsSet(boolean value) {
      if (!value) {
        this.failureMessageEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FAILURE_MESSAGE_ENTITY:
        if (value == null) {
          unsetFailureMessageEntity();
        } else {
          setFailureMessageEntity((com.keruyun.commons.agent.collector.entity.FailureMessageEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FAILURE_MESSAGE_ENTITY:
        return getFailureMessageEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FAILURE_MESSAGE_ENTITY:
        return isSetFailureMessageEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeFailureMessage_args)
        return this.equals((writeFailureMessage_args)that);
      return false;
    }

    public boolean equals(writeFailureMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_failureMessageEntity = true && this.isSetFailureMessageEntity();
      boolean that_present_failureMessageEntity = true && that.isSetFailureMessageEntity();
      if (this_present_failureMessageEntity || that_present_failureMessageEntity) {
        if (!(this_present_failureMessageEntity && that_present_failureMessageEntity))
          return false;
        if (!this.failureMessageEntity.equals(that.failureMessageEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFailureMessageEntity()) ? 131071 : 524287);
      if (isSetFailureMessageEntity())
        hashCode = hashCode * 8191 + failureMessageEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeFailureMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFailureMessageEntity()).compareTo(other.isSetFailureMessageEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFailureMessageEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failureMessageEntity, other.failureMessageEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeFailureMessage_args(");
      boolean first = true;

      sb.append("failureMessageEntity:");
      if (this.failureMessageEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.failureMessageEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (failureMessageEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'failureMessageEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (failureMessageEntity != null) {
        failureMessageEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeFailureMessage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeFailureMessage_argsStandardScheme getScheme() {
        return new writeFailureMessage_argsStandardScheme();
      }
    }

    private static class writeFailureMessage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeFailureMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeFailureMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FAILURE_MESSAGE_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.failureMessageEntity = new com.keruyun.commons.agent.collector.entity.FailureMessageEntity();
                struct.failureMessageEntity.read(iprot);
                struct.setFailureMessageEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeFailureMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.failureMessageEntity != null) {
          oprot.writeFieldBegin(FAILURE_MESSAGE_ENTITY_FIELD_DESC);
          struct.failureMessageEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeFailureMessage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeFailureMessage_argsTupleScheme getScheme() {
        return new writeFailureMessage_argsTupleScheme();
      }
    }

    private static class writeFailureMessage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeFailureMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeFailureMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.failureMessageEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeFailureMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.failureMessageEntity = new com.keruyun.commons.agent.collector.entity.FailureMessageEntity();
        struct.failureMessageEntity.read(iprot);
        struct.setFailureMessageEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeFailureMessage_result implements org.apache.thrift.TBase<writeFailureMessage_result, writeFailureMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeFailureMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeFailureMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeFailureMessage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeFailureMessage_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeFailureMessage_result.class, metaDataMap);
    }

    public writeFailureMessage_result() {
    }

    public writeFailureMessage_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeFailureMessage_result(writeFailureMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeFailureMessage_result deepCopy() {
      return new writeFailureMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeFailureMessage_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeFailureMessage_result)
        return this.equals((writeFailureMessage_result)that);
      return false;
    }

    public boolean equals(writeFailureMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeFailureMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeFailureMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeFailureMessage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeFailureMessage_resultStandardScheme getScheme() {
        return new writeFailureMessage_resultStandardScheme();
      }
    }

    private static class writeFailureMessage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeFailureMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeFailureMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeFailureMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeFailureMessage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeFailureMessage_resultTupleScheme getScheme() {
        return new writeFailureMessage_resultTupleScheme();
      }
    }

    private static class writeFailureMessage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeFailureMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeFailureMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeFailureMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeSpringRestfulUriPattern_args implements org.apache.thrift.TBase<writeSpringRestfulUriPattern_args, writeSpringRestfulUriPattern_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeSpringRestfulUriPattern_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeSpringRestfulUriPattern_args");

    private static final org.apache.thrift.protocol.TField SPRING_RESTFUL_URI_PATTERN_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("springRestfulUriPatternEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeSpringRestfulUriPattern_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeSpringRestfulUriPattern_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.SpringRestfulUriPatternEntity springRestfulUriPatternEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPRING_RESTFUL_URI_PATTERN_ENTITY((short)1, "springRestfulUriPatternEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPRING_RESTFUL_URI_PATTERN_ENTITY
            return SPRING_RESTFUL_URI_PATTERN_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPRING_RESTFUL_URI_PATTERN_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("springRestfulUriPatternEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.SpringRestfulUriPatternEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeSpringRestfulUriPattern_args.class, metaDataMap);
    }

    public writeSpringRestfulUriPattern_args() {
    }

    public writeSpringRestfulUriPattern_args(
      com.keruyun.commons.agent.collector.entity.SpringRestfulUriPatternEntity springRestfulUriPatternEntity)
    {
      this();
      this.springRestfulUriPatternEntity = springRestfulUriPatternEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeSpringRestfulUriPattern_args(writeSpringRestfulUriPattern_args other) {
      if (other.isSetSpringRestfulUriPatternEntity()) {
        this.springRestfulUriPatternEntity = new com.keruyun.commons.agent.collector.entity.SpringRestfulUriPatternEntity(other.springRestfulUriPatternEntity);
      }
    }

    public writeSpringRestfulUriPattern_args deepCopy() {
      return new writeSpringRestfulUriPattern_args(this);
    }

    @Override
    public void clear() {
      this.springRestfulUriPatternEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.SpringRestfulUriPatternEntity getSpringRestfulUriPatternEntity() {
      return this.springRestfulUriPatternEntity;
    }

    public writeSpringRestfulUriPattern_args setSpringRestfulUriPatternEntity(com.keruyun.commons.agent.collector.entity.SpringRestfulUriPatternEntity springRestfulUriPatternEntity) {
      this.springRestfulUriPatternEntity = springRestfulUriPatternEntity;
      return this;
    }

    public void unsetSpringRestfulUriPatternEntity() {
      this.springRestfulUriPatternEntity = null;
    }

    /** Returns true if field springRestfulUriPatternEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetSpringRestfulUriPatternEntity() {
      return this.springRestfulUriPatternEntity != null;
    }

    public void setSpringRestfulUriPatternEntityIsSet(boolean value) {
      if (!value) {
        this.springRestfulUriPatternEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPRING_RESTFUL_URI_PATTERN_ENTITY:
        if (value == null) {
          unsetSpringRestfulUriPatternEntity();
        } else {
          setSpringRestfulUriPatternEntity((com.keruyun.commons.agent.collector.entity.SpringRestfulUriPatternEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPRING_RESTFUL_URI_PATTERN_ENTITY:
        return getSpringRestfulUriPatternEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPRING_RESTFUL_URI_PATTERN_ENTITY:
        return isSetSpringRestfulUriPatternEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeSpringRestfulUriPattern_args)
        return this.equals((writeSpringRestfulUriPattern_args)that);
      return false;
    }

    public boolean equals(writeSpringRestfulUriPattern_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_springRestfulUriPatternEntity = true && this.isSetSpringRestfulUriPatternEntity();
      boolean that_present_springRestfulUriPatternEntity = true && that.isSetSpringRestfulUriPatternEntity();
      if (this_present_springRestfulUriPatternEntity || that_present_springRestfulUriPatternEntity) {
        if (!(this_present_springRestfulUriPatternEntity && that_present_springRestfulUriPatternEntity))
          return false;
        if (!this.springRestfulUriPatternEntity.equals(that.springRestfulUriPatternEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSpringRestfulUriPatternEntity()) ? 131071 : 524287);
      if (isSetSpringRestfulUriPatternEntity())
        hashCode = hashCode * 8191 + springRestfulUriPatternEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeSpringRestfulUriPattern_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpringRestfulUriPatternEntity()).compareTo(other.isSetSpringRestfulUriPatternEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpringRestfulUriPatternEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.springRestfulUriPatternEntity, other.springRestfulUriPatternEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeSpringRestfulUriPattern_args(");
      boolean first = true;

      sb.append("springRestfulUriPatternEntity:");
      if (this.springRestfulUriPatternEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.springRestfulUriPatternEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (springRestfulUriPatternEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'springRestfulUriPatternEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (springRestfulUriPatternEntity != null) {
        springRestfulUriPatternEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeSpringRestfulUriPattern_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeSpringRestfulUriPattern_argsStandardScheme getScheme() {
        return new writeSpringRestfulUriPattern_argsStandardScheme();
      }
    }

    private static class writeSpringRestfulUriPattern_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeSpringRestfulUriPattern_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeSpringRestfulUriPattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPRING_RESTFUL_URI_PATTERN_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.springRestfulUriPatternEntity = new com.keruyun.commons.agent.collector.entity.SpringRestfulUriPatternEntity();
                struct.springRestfulUriPatternEntity.read(iprot);
                struct.setSpringRestfulUriPatternEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeSpringRestfulUriPattern_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.springRestfulUriPatternEntity != null) {
          oprot.writeFieldBegin(SPRING_RESTFUL_URI_PATTERN_ENTITY_FIELD_DESC);
          struct.springRestfulUriPatternEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeSpringRestfulUriPattern_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeSpringRestfulUriPattern_argsTupleScheme getScheme() {
        return new writeSpringRestfulUriPattern_argsTupleScheme();
      }
    }

    private static class writeSpringRestfulUriPattern_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeSpringRestfulUriPattern_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeSpringRestfulUriPattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.springRestfulUriPatternEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeSpringRestfulUriPattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.springRestfulUriPatternEntity = new com.keruyun.commons.agent.collector.entity.SpringRestfulUriPatternEntity();
        struct.springRestfulUriPatternEntity.read(iprot);
        struct.setSpringRestfulUriPatternEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeSpringRestfulUriPattern_result implements org.apache.thrift.TBase<writeSpringRestfulUriPattern_result, writeSpringRestfulUriPattern_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeSpringRestfulUriPattern_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeSpringRestfulUriPattern_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeSpringRestfulUriPattern_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeSpringRestfulUriPattern_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeSpringRestfulUriPattern_result.class, metaDataMap);
    }

    public writeSpringRestfulUriPattern_result() {
    }

    public writeSpringRestfulUriPattern_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeSpringRestfulUriPattern_result(writeSpringRestfulUriPattern_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeSpringRestfulUriPattern_result deepCopy() {
      return new writeSpringRestfulUriPattern_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeSpringRestfulUriPattern_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeSpringRestfulUriPattern_result)
        return this.equals((writeSpringRestfulUriPattern_result)that);
      return false;
    }

    public boolean equals(writeSpringRestfulUriPattern_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeSpringRestfulUriPattern_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeSpringRestfulUriPattern_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeSpringRestfulUriPattern_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeSpringRestfulUriPattern_resultStandardScheme getScheme() {
        return new writeSpringRestfulUriPattern_resultStandardScheme();
      }
    }

    private static class writeSpringRestfulUriPattern_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeSpringRestfulUriPattern_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeSpringRestfulUriPattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeSpringRestfulUriPattern_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeSpringRestfulUriPattern_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeSpringRestfulUriPattern_resultTupleScheme getScheme() {
        return new writeSpringRestfulUriPattern_resultTupleScheme();
      }
    }

    private static class writeSpringRestfulUriPattern_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeSpringRestfulUriPattern_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeSpringRestfulUriPattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeSpringRestfulUriPattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeChannel_args implements org.apache.thrift.TBase<writeChannel_args, writeChannel_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeChannel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeChannel_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("channelEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeChannel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeChannel_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.ChannelEntity channelEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_ENTITY((short)1, "channelEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_ENTITY
            return CHANNEL_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("channelEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.ChannelEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeChannel_args.class, metaDataMap);
    }

    public writeChannel_args() {
    }

    public writeChannel_args(
      com.keruyun.commons.agent.collector.entity.ChannelEntity channelEntity)
    {
      this();
      this.channelEntity = channelEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeChannel_args(writeChannel_args other) {
      if (other.isSetChannelEntity()) {
        this.channelEntity = new com.keruyun.commons.agent.collector.entity.ChannelEntity(other.channelEntity);
      }
    }

    public writeChannel_args deepCopy() {
      return new writeChannel_args(this);
    }

    @Override
    public void clear() {
      this.channelEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.ChannelEntity getChannelEntity() {
      return this.channelEntity;
    }

    public writeChannel_args setChannelEntity(com.keruyun.commons.agent.collector.entity.ChannelEntity channelEntity) {
      this.channelEntity = channelEntity;
      return this;
    }

    public void unsetChannelEntity() {
      this.channelEntity = null;
    }

    /** Returns true if field channelEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelEntity() {
      return this.channelEntity != null;
    }

    public void setChannelEntityIsSet(boolean value) {
      if (!value) {
        this.channelEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_ENTITY:
        if (value == null) {
          unsetChannelEntity();
        } else {
          setChannelEntity((com.keruyun.commons.agent.collector.entity.ChannelEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_ENTITY:
        return getChannelEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_ENTITY:
        return isSetChannelEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeChannel_args)
        return this.equals((writeChannel_args)that);
      return false;
    }

    public boolean equals(writeChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelEntity = true && this.isSetChannelEntity();
      boolean that_present_channelEntity = true && that.isSetChannelEntity();
      if (this_present_channelEntity || that_present_channelEntity) {
        if (!(this_present_channelEntity && that_present_channelEntity))
          return false;
        if (!this.channelEntity.equals(that.channelEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetChannelEntity()) ? 131071 : 524287);
      if (isSetChannelEntity())
        hashCode = hashCode * 8191 + channelEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeChannel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelEntity()).compareTo(other.isSetChannelEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelEntity, other.channelEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeChannel_args(");
      boolean first = true;

      sb.append("channelEntity:");
      if (this.channelEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.channelEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (channelEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'channelEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (channelEntity != null) {
        channelEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeChannel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeChannel_argsStandardScheme getScheme() {
        return new writeChannel_argsStandardScheme();
      }
    }

    private static class writeChannel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeChannel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.channelEntity = new com.keruyun.commons.agent.collector.entity.ChannelEntity();
                struct.channelEntity.read(iprot);
                struct.setChannelEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeChannel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelEntity != null) {
          oprot.writeFieldBegin(CHANNEL_ENTITY_FIELD_DESC);
          struct.channelEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeChannel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeChannel_argsTupleScheme getScheme() {
        return new writeChannel_argsTupleScheme();
      }
    }

    private static class writeChannel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeChannel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.channelEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.channelEntity = new com.keruyun.commons.agent.collector.entity.ChannelEntity();
        struct.channelEntity.read(iprot);
        struct.setChannelEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeChannel_result implements org.apache.thrift.TBase<writeChannel_result, writeChannel_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeChannel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeChannel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeChannel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeChannel_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeChannel_result.class, metaDataMap);
    }

    public writeChannel_result() {
    }

    public writeChannel_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeChannel_result(writeChannel_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeChannel_result deepCopy() {
      return new writeChannel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeChannel_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeChannel_result)
        return this.equals((writeChannel_result)that);
      return false;
    }

    public boolean equals(writeChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeChannel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeChannel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeChannel_resultStandardScheme getScheme() {
        return new writeChannel_resultStandardScheme();
      }
    }

    private static class writeChannel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeChannel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeChannel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeChannel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeChannel_resultTupleScheme getScheme() {
        return new writeChannel_resultTupleScheme();
      }
    }

    private static class writeChannel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeChannel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.ResponseResultEntity success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.ResponseResultEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      com.keruyun.commons.agent.collector.entity.ResponseResultEntity success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.keruyun.commons.agent.collector.entity.ResponseResultEntity(other.success);
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.keruyun.commons.agent.collector.entity.ResponseResultEntity getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(com.keruyun.commons.agent.collector.entity.ResponseResultEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.keruyun.commons.agent.collector.entity.ResponseResultEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.keruyun.commons.agent.collector.entity.ResponseResultEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.keruyun.commons.agent.collector.entity.ResponseResultEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeTrace_args implements org.apache.thrift.TBase<writeTrace_args, writeTrace_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeTrace_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeTrace_args");

    private static final org.apache.thrift.protocol.TField TRACES_FIELD_DESC = new org.apache.thrift.protocol.TField("traces", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeTrace_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeTrace_argsTupleSchemeFactory();

    public java.util.List<String> traces; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRACES((short)1, "traces");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRACES
            return TRACES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRACES, new org.apache.thrift.meta_data.FieldMetaData("traces", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeTrace_args.class, metaDataMap);
    }

    public writeTrace_args() {
    }

    public writeTrace_args(
      java.util.List<String> traces)
    {
      this();
      this.traces = traces;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeTrace_args(writeTrace_args other) {
      if (other.isSetTraces()) {
        java.util.List<String> __this__traces = new java.util.ArrayList<String>(other.traces);
        this.traces = __this__traces;
      }
    }

    public writeTrace_args deepCopy() {
      return new writeTrace_args(this);
    }

    @Override
    public void clear() {
      this.traces = null;
    }

    public int getTracesSize() {
      return (this.traces == null) ? 0 : this.traces.size();
    }

    public java.util.Iterator<String> getTracesIterator() {
      return (this.traces == null) ? null : this.traces.iterator();
    }

    public void addToTraces(String elem) {
      if (this.traces == null) {
        this.traces = new java.util.ArrayList<String>();
      }
      this.traces.add(elem);
    }

    public java.util.List<String> getTraces() {
      return this.traces;
    }

    public writeTrace_args setTraces(java.util.List<String> traces) {
      this.traces = traces;
      return this;
    }

    public void unsetTraces() {
      this.traces = null;
    }

    /** Returns true if field traces is set (has been assigned a value) and false otherwise */
    public boolean isSetTraces() {
      return this.traces != null;
    }

    public void setTracesIsSet(boolean value) {
      if (!value) {
        this.traces = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRACES:
        if (value == null) {
          unsetTraces();
        } else {
          setTraces((java.util.List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRACES:
        return getTraces();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRACES:
        return isSetTraces();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeTrace_args)
        return this.equals((writeTrace_args)that);
      return false;
    }

    public boolean equals(writeTrace_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_traces = true && this.isSetTraces();
      boolean that_present_traces = true && that.isSetTraces();
      if (this_present_traces || that_present_traces) {
        if (!(this_present_traces && that_present_traces))
          return false;
        if (!this.traces.equals(that.traces))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTraces()) ? 131071 : 524287);
      if (isSetTraces())
        hashCode = hashCode * 8191 + traces.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeTrace_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTraces()).compareTo(other.isSetTraces());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTraces()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traces, other.traces);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeTrace_args(");
      boolean first = true;

      sb.append("traces:");
      if (this.traces == null) {
        sb.append("null");
      } else {
        sb.append(this.traces);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (traces == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'traces' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeTrace_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeTrace_argsStandardScheme getScheme() {
        return new writeTrace_argsStandardScheme();
      }
    }

    private static class writeTrace_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeTrace_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeTrace_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRACES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.traces = new java.util.ArrayList<String>(_list0.size);
                  String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.traces.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setTracesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeTrace_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.traces != null) {
          oprot.writeFieldBegin(TRACES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.traces.size()));
            for (String _iter3 : struct.traces)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeTrace_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeTrace_argsTupleScheme getScheme() {
        return new writeTrace_argsTupleScheme();
      }
    }

    private static class writeTrace_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeTrace_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeTrace_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        {
          oprot.writeI32(struct.traces.size());
          for (String _iter4 : struct.traces)
          {
            oprot.writeString(_iter4);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeTrace_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.traces = new java.util.ArrayList<String>(_list5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.traces.add(_elem6);
          }
        }
        struct.setTracesIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeTrace_result implements org.apache.thrift.TBase<writeTrace_result, writeTrace_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeTrace_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeTrace_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeTrace_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeTrace_resultTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.ResponseResultEntity success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.ResponseResultEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeTrace_result.class, metaDataMap);
    }

    public writeTrace_result() {
    }

    public writeTrace_result(
      com.keruyun.commons.agent.collector.entity.ResponseResultEntity success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeTrace_result(writeTrace_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.keruyun.commons.agent.collector.entity.ResponseResultEntity(other.success);
      }
    }

    public writeTrace_result deepCopy() {
      return new writeTrace_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.keruyun.commons.agent.collector.entity.ResponseResultEntity getSuccess() {
      return this.success;
    }

    public writeTrace_result setSuccess(com.keruyun.commons.agent.collector.entity.ResponseResultEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.keruyun.commons.agent.collector.entity.ResponseResultEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeTrace_result)
        return this.equals((writeTrace_result)that);
      return false;
    }

    public boolean equals(writeTrace_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeTrace_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeTrace_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeTrace_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeTrace_resultStandardScheme getScheme() {
        return new writeTrace_resultStandardScheme();
      }
    }

    private static class writeTrace_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeTrace_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeTrace_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.keruyun.commons.agent.collector.entity.ResponseResultEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeTrace_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeTrace_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeTrace_resultTupleScheme getScheme() {
        return new writeTrace_resultTupleScheme();
      }
    }

    private static class writeTrace_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeTrace_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeTrace_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeTrace_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.keruyun.commons.agent.collector.entity.ResponseResultEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeNetty_args implements org.apache.thrift.TBase<writeNetty_args, writeNetty_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeNetty_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeNetty_args");

    private static final org.apache.thrift.protocol.TField NETTY_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("nettyEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeNetty_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeNetty_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.NettyEntity nettyEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NETTY_ENTITY((short)1, "nettyEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NETTY_ENTITY
            return NETTY_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NETTY_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("nettyEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.NettyEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeNetty_args.class, metaDataMap);
    }

    public writeNetty_args() {
    }

    public writeNetty_args(
      com.keruyun.commons.agent.collector.entity.NettyEntity nettyEntity)
    {
      this();
      this.nettyEntity = nettyEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeNetty_args(writeNetty_args other) {
      if (other.isSetNettyEntity()) {
        this.nettyEntity = new com.keruyun.commons.agent.collector.entity.NettyEntity(other.nettyEntity);
      }
    }

    public writeNetty_args deepCopy() {
      return new writeNetty_args(this);
    }

    @Override
    public void clear() {
      this.nettyEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.NettyEntity getNettyEntity() {
      return this.nettyEntity;
    }

    public writeNetty_args setNettyEntity(com.keruyun.commons.agent.collector.entity.NettyEntity nettyEntity) {
      this.nettyEntity = nettyEntity;
      return this;
    }

    public void unsetNettyEntity() {
      this.nettyEntity = null;
    }

    /** Returns true if field nettyEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetNettyEntity() {
      return this.nettyEntity != null;
    }

    public void setNettyEntityIsSet(boolean value) {
      if (!value) {
        this.nettyEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NETTY_ENTITY:
        if (value == null) {
          unsetNettyEntity();
        } else {
          setNettyEntity((com.keruyun.commons.agent.collector.entity.NettyEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NETTY_ENTITY:
        return getNettyEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NETTY_ENTITY:
        return isSetNettyEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeNetty_args)
        return this.equals((writeNetty_args)that);
      return false;
    }

    public boolean equals(writeNetty_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nettyEntity = true && this.isSetNettyEntity();
      boolean that_present_nettyEntity = true && that.isSetNettyEntity();
      if (this_present_nettyEntity || that_present_nettyEntity) {
        if (!(this_present_nettyEntity && that_present_nettyEntity))
          return false;
        if (!this.nettyEntity.equals(that.nettyEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNettyEntity()) ? 131071 : 524287);
      if (isSetNettyEntity())
        hashCode = hashCode * 8191 + nettyEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeNetty_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNettyEntity()).compareTo(other.isSetNettyEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNettyEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nettyEntity, other.nettyEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeNetty_args(");
      boolean first = true;

      sb.append("nettyEntity:");
      if (this.nettyEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.nettyEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (nettyEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'nettyEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (nettyEntity != null) {
        nettyEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeNetty_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeNetty_argsStandardScheme getScheme() {
        return new writeNetty_argsStandardScheme();
      }
    }

    private static class writeNetty_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeNetty_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeNetty_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NETTY_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nettyEntity = new com.keruyun.commons.agent.collector.entity.NettyEntity();
                struct.nettyEntity.read(iprot);
                struct.setNettyEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeNetty_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nettyEntity != null) {
          oprot.writeFieldBegin(NETTY_ENTITY_FIELD_DESC);
          struct.nettyEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeNetty_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeNetty_argsTupleScheme getScheme() {
        return new writeNetty_argsTupleScheme();
      }
    }

    private static class writeNetty_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeNetty_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeNetty_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.nettyEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeNetty_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.nettyEntity = new com.keruyun.commons.agent.collector.entity.NettyEntity();
        struct.nettyEntity.read(iprot);
        struct.setNettyEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeNetty_result implements org.apache.thrift.TBase<writeNetty_result, writeNetty_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeNetty_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeNetty_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeNetty_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeNetty_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeNetty_result.class, metaDataMap);
    }

    public writeNetty_result() {
    }

    public writeNetty_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeNetty_result(writeNetty_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeNetty_result deepCopy() {
      return new writeNetty_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeNetty_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeNetty_result)
        return this.equals((writeNetty_result)that);
      return false;
    }

    public boolean equals(writeNetty_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeNetty_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeNetty_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeNetty_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeNetty_resultStandardScheme getScheme() {
        return new writeNetty_resultStandardScheme();
      }
    }

    private static class writeNetty_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeNetty_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeNetty_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeNetty_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeNetty_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeNetty_resultTupleScheme getScheme() {
        return new writeNetty_resultTupleScheme();
      }
    }

    private static class writeNetty_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeNetty_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeNetty_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeNetty_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAgentConfig_args implements org.apache.thrift.TBase<getAgentConfig_args, getAgentConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAgentConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAgentConfig_args");

    private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAgentConfig_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAgentConfig_argsTupleSchemeFactory();

    public String appName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_NAME((short)1, "appName");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_NAME
            return APP_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAgentConfig_args.class, metaDataMap);
    }

    public getAgentConfig_args() {
    }

    public getAgentConfig_args(
      String appName)
    {
      this();
      this.appName = appName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAgentConfig_args(getAgentConfig_args other) {
      if (other.isSetAppName()) {
        this.appName = other.appName;
      }
    }

    public getAgentConfig_args deepCopy() {
      return new getAgentConfig_args(this);
    }

    @Override
    public void clear() {
      this.appName = null;
    }

    public String getAppName() {
      return this.appName;
    }

    public getAgentConfig_args setAppName(String appName) {
      this.appName = appName;
      return this;
    }

    public void unsetAppName() {
      this.appName = null;
    }

    /** Returns true if field appName is set (has been assigned a value) and false otherwise */
    public boolean isSetAppName() {
      return this.appName != null;
    }

    public void setAppNameIsSet(boolean value) {
      if (!value) {
        this.appName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_NAME:
        if (value == null) {
          unsetAppName();
        } else {
          setAppName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_NAME:
        return getAppName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_NAME:
        return isSetAppName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAgentConfig_args)
        return this.equals((getAgentConfig_args)that);
      return false;
    }

    public boolean equals(getAgentConfig_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_appName = true && this.isSetAppName();
      boolean that_present_appName = true && that.isSetAppName();
      if (this_present_appName || that_present_appName) {
        if (!(this_present_appName && that_present_appName))
          return false;
        if (!this.appName.equals(that.appName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAppName()) ? 131071 : 524287);
      if (isSetAppName())
        hashCode = hashCode * 8191 + appName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAgentConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAgentConfig_args(");
      boolean first = true;

      sb.append("appName:");
      if (this.appName == null) {
        sb.append("null");
      } else {
        sb.append(this.appName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAgentConfig_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAgentConfig_argsStandardScheme getScheme() {
        return new getAgentConfig_argsStandardScheme();
      }
    }

    private static class getAgentConfig_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAgentConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAgentConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appName = iprot.readString();
                struct.setAppNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAgentConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appName != null) {
          oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
          oprot.writeString(struct.appName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAgentConfig_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAgentConfig_argsTupleScheme getScheme() {
        return new getAgentConfig_argsTupleScheme();
      }
    }

    private static class getAgentConfig_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAgentConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAgentConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.appName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAgentConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.appName = iprot.readString();
        struct.setAppNameIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAgentConfig_result implements org.apache.thrift.TBase<getAgentConfig_result, getAgentConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAgentConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAgentConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAgentConfig_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAgentConfig_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAgentConfig_result.class, metaDataMap);
    }

    public getAgentConfig_result() {
    }

    public getAgentConfig_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAgentConfig_result(getAgentConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getAgentConfig_result deepCopy() {
      return new getAgentConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getAgentConfig_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAgentConfig_result)
        return this.equals((getAgentConfig_result)that);
      return false;
    }

    public boolean equals(getAgentConfig_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAgentConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAgentConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAgentConfig_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAgentConfig_resultStandardScheme getScheme() {
        return new getAgentConfig_resultStandardScheme();
      }
    }

    private static class getAgentConfig_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAgentConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAgentConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAgentConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAgentConfig_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAgentConfig_resultTupleScheme getScheme() {
        return new getAgentConfig_resultTupleScheme();
      }
    }

    private static class getAgentConfig_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAgentConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAgentConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAgentConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeKMetrics_args implements org.apache.thrift.TBase<writeKMetrics_args, writeKMetrics_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeKMetrics_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeKMetrics_args");

    private static final org.apache.thrift.protocol.TField K_METRICS_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("kMetricsEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeKMetrics_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeKMetrics_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.KMetricsEntity kMetricsEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      K_METRICS_ENTITY((short)1, "kMetricsEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // K_METRICS_ENTITY
            return K_METRICS_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.K_METRICS_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("kMetricsEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.KMetricsEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeKMetrics_args.class, metaDataMap);
    }

    public writeKMetrics_args() {
    }

    public writeKMetrics_args(
      com.keruyun.commons.agent.collector.entity.KMetricsEntity kMetricsEntity)
    {
      this();
      this.kMetricsEntity = kMetricsEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeKMetrics_args(writeKMetrics_args other) {
      if (other.isSetKMetricsEntity()) {
        this.kMetricsEntity = new com.keruyun.commons.agent.collector.entity.KMetricsEntity(other.kMetricsEntity);
      }
    }

    public writeKMetrics_args deepCopy() {
      return new writeKMetrics_args(this);
    }

    @Override
    public void clear() {
      this.kMetricsEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.KMetricsEntity getKMetricsEntity() {
      return this.kMetricsEntity;
    }

    public writeKMetrics_args setKMetricsEntity(com.keruyun.commons.agent.collector.entity.KMetricsEntity kMetricsEntity) {
      this.kMetricsEntity = kMetricsEntity;
      return this;
    }

    public void unsetKMetricsEntity() {
      this.kMetricsEntity = null;
    }

    /** Returns true if field kMetricsEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetKMetricsEntity() {
      return this.kMetricsEntity != null;
    }

    public void setKMetricsEntityIsSet(boolean value) {
      if (!value) {
        this.kMetricsEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case K_METRICS_ENTITY:
        if (value == null) {
          unsetKMetricsEntity();
        } else {
          setKMetricsEntity((com.keruyun.commons.agent.collector.entity.KMetricsEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case K_METRICS_ENTITY:
        return getKMetricsEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case K_METRICS_ENTITY:
        return isSetKMetricsEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeKMetrics_args)
        return this.equals((writeKMetrics_args)that);
      return false;
    }

    public boolean equals(writeKMetrics_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_kMetricsEntity = true && this.isSetKMetricsEntity();
      boolean that_present_kMetricsEntity = true && that.isSetKMetricsEntity();
      if (this_present_kMetricsEntity || that_present_kMetricsEntity) {
        if (!(this_present_kMetricsEntity && that_present_kMetricsEntity))
          return false;
        if (!this.kMetricsEntity.equals(that.kMetricsEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetKMetricsEntity()) ? 131071 : 524287);
      if (isSetKMetricsEntity())
        hashCode = hashCode * 8191 + kMetricsEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeKMetrics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKMetricsEntity()).compareTo(other.isSetKMetricsEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKMetricsEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kMetricsEntity, other.kMetricsEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeKMetrics_args(");
      boolean first = true;

      sb.append("kMetricsEntity:");
      if (this.kMetricsEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.kMetricsEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (kMetricsEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'kMetricsEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (kMetricsEntity != null) {
        kMetricsEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeKMetrics_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeKMetrics_argsStandardScheme getScheme() {
        return new writeKMetrics_argsStandardScheme();
      }
    }

    private static class writeKMetrics_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeKMetrics_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeKMetrics_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // K_METRICS_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kMetricsEntity = new com.keruyun.commons.agent.collector.entity.KMetricsEntity();
                struct.kMetricsEntity.read(iprot);
                struct.setKMetricsEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeKMetrics_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.kMetricsEntity != null) {
          oprot.writeFieldBegin(K_METRICS_ENTITY_FIELD_DESC);
          struct.kMetricsEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeKMetrics_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeKMetrics_argsTupleScheme getScheme() {
        return new writeKMetrics_argsTupleScheme();
      }
    }

    private static class writeKMetrics_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeKMetrics_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeKMetrics_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.kMetricsEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeKMetrics_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.kMetricsEntity = new com.keruyun.commons.agent.collector.entity.KMetricsEntity();
        struct.kMetricsEntity.read(iprot);
        struct.setKMetricsEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeKMetrics_result implements org.apache.thrift.TBase<writeKMetrics_result, writeKMetrics_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeKMetrics_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeKMetrics_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeKMetrics_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeKMetrics_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeKMetrics_result.class, metaDataMap);
    }

    public writeKMetrics_result() {
    }

    public writeKMetrics_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeKMetrics_result(writeKMetrics_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeKMetrics_result deepCopy() {
      return new writeKMetrics_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeKMetrics_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeKMetrics_result)
        return this.equals((writeKMetrics_result)that);
      return false;
    }

    public boolean equals(writeKMetrics_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeKMetrics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeKMetrics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeKMetrics_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeKMetrics_resultStandardScheme getScheme() {
        return new writeKMetrics_resultStandardScheme();
      }
    }

    private static class writeKMetrics_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeKMetrics_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeKMetrics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeKMetrics_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeKMetrics_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeKMetrics_resultTupleScheme getScheme() {
        return new writeKMetrics_resultTupleScheme();
      }
    }

    private static class writeKMetrics_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeKMetrics_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeKMetrics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeKMetrics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeKafkaClientMetrics_args implements org.apache.thrift.TBase<writeKafkaClientMetrics_args, writeKafkaClientMetrics_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeKafkaClientMetrics_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeKafkaClientMetrics_args");

    private static final org.apache.thrift.protocol.TField KAFKA_CLIENT_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("kafkaClientEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeKafkaClientMetrics_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeKafkaClientMetrics_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.KafkaClientEntity kafkaClientEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KAFKA_CLIENT_ENTITY((short)1, "kafkaClientEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KAFKA_CLIENT_ENTITY
            return KAFKA_CLIENT_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KAFKA_CLIENT_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("kafkaClientEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.KafkaClientEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeKafkaClientMetrics_args.class, metaDataMap);
    }

    public writeKafkaClientMetrics_args() {
    }

    public writeKafkaClientMetrics_args(
      com.keruyun.commons.agent.collector.entity.KafkaClientEntity kafkaClientEntity)
    {
      this();
      this.kafkaClientEntity = kafkaClientEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeKafkaClientMetrics_args(writeKafkaClientMetrics_args other) {
      if (other.isSetKafkaClientEntity()) {
        this.kafkaClientEntity = new com.keruyun.commons.agent.collector.entity.KafkaClientEntity(other.kafkaClientEntity);
      }
    }

    public writeKafkaClientMetrics_args deepCopy() {
      return new writeKafkaClientMetrics_args(this);
    }

    @Override
    public void clear() {
      this.kafkaClientEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.KafkaClientEntity getKafkaClientEntity() {
      return this.kafkaClientEntity;
    }

    public writeKafkaClientMetrics_args setKafkaClientEntity(com.keruyun.commons.agent.collector.entity.KafkaClientEntity kafkaClientEntity) {
      this.kafkaClientEntity = kafkaClientEntity;
      return this;
    }

    public void unsetKafkaClientEntity() {
      this.kafkaClientEntity = null;
    }

    /** Returns true if field kafkaClientEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetKafkaClientEntity() {
      return this.kafkaClientEntity != null;
    }

    public void setKafkaClientEntityIsSet(boolean value) {
      if (!value) {
        this.kafkaClientEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KAFKA_CLIENT_ENTITY:
        if (value == null) {
          unsetKafkaClientEntity();
        } else {
          setKafkaClientEntity((com.keruyun.commons.agent.collector.entity.KafkaClientEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KAFKA_CLIENT_ENTITY:
        return getKafkaClientEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KAFKA_CLIENT_ENTITY:
        return isSetKafkaClientEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeKafkaClientMetrics_args)
        return this.equals((writeKafkaClientMetrics_args)that);
      return false;
    }

    public boolean equals(writeKafkaClientMetrics_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_kafkaClientEntity = true && this.isSetKafkaClientEntity();
      boolean that_present_kafkaClientEntity = true && that.isSetKafkaClientEntity();
      if (this_present_kafkaClientEntity || that_present_kafkaClientEntity) {
        if (!(this_present_kafkaClientEntity && that_present_kafkaClientEntity))
          return false;
        if (!this.kafkaClientEntity.equals(that.kafkaClientEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetKafkaClientEntity()) ? 131071 : 524287);
      if (isSetKafkaClientEntity())
        hashCode = hashCode * 8191 + kafkaClientEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeKafkaClientMetrics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKafkaClientEntity()).compareTo(other.isSetKafkaClientEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKafkaClientEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kafkaClientEntity, other.kafkaClientEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeKafkaClientMetrics_args(");
      boolean first = true;

      sb.append("kafkaClientEntity:");
      if (this.kafkaClientEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.kafkaClientEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (kafkaClientEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'kafkaClientEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (kafkaClientEntity != null) {
        kafkaClientEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeKafkaClientMetrics_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeKafkaClientMetrics_argsStandardScheme getScheme() {
        return new writeKafkaClientMetrics_argsStandardScheme();
      }
    }

    private static class writeKafkaClientMetrics_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeKafkaClientMetrics_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeKafkaClientMetrics_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KAFKA_CLIENT_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kafkaClientEntity = new com.keruyun.commons.agent.collector.entity.KafkaClientEntity();
                struct.kafkaClientEntity.read(iprot);
                struct.setKafkaClientEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeKafkaClientMetrics_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.kafkaClientEntity != null) {
          oprot.writeFieldBegin(KAFKA_CLIENT_ENTITY_FIELD_DESC);
          struct.kafkaClientEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeKafkaClientMetrics_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeKafkaClientMetrics_argsTupleScheme getScheme() {
        return new writeKafkaClientMetrics_argsTupleScheme();
      }
    }

    private static class writeKafkaClientMetrics_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeKafkaClientMetrics_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeKafkaClientMetrics_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.kafkaClientEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeKafkaClientMetrics_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.kafkaClientEntity = new com.keruyun.commons.agent.collector.entity.KafkaClientEntity();
        struct.kafkaClientEntity.read(iprot);
        struct.setKafkaClientEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeKafkaClientMetrics_result implements org.apache.thrift.TBase<writeKafkaClientMetrics_result, writeKafkaClientMetrics_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeKafkaClientMetrics_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeKafkaClientMetrics_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeKafkaClientMetrics_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeKafkaClientMetrics_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeKafkaClientMetrics_result.class, metaDataMap);
    }

    public writeKafkaClientMetrics_result() {
    }

    public writeKafkaClientMetrics_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeKafkaClientMetrics_result(writeKafkaClientMetrics_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeKafkaClientMetrics_result deepCopy() {
      return new writeKafkaClientMetrics_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeKafkaClientMetrics_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeKafkaClientMetrics_result)
        return this.equals((writeKafkaClientMetrics_result)that);
      return false;
    }

    public boolean equals(writeKafkaClientMetrics_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeKafkaClientMetrics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeKafkaClientMetrics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeKafkaClientMetrics_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeKafkaClientMetrics_resultStandardScheme getScheme() {
        return new writeKafkaClientMetrics_resultStandardScheme();
      }
    }

    private static class writeKafkaClientMetrics_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeKafkaClientMetrics_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeKafkaClientMetrics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeKafkaClientMetrics_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeKafkaClientMetrics_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeKafkaClientMetrics_resultTupleScheme getScheme() {
        return new writeKafkaClientMetrics_resultTupleScheme();
      }
    }

    private static class writeKafkaClientMetrics_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeKafkaClientMetrics_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeKafkaClientMetrics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeKafkaClientMetrics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeClientProperties_args implements org.apache.thrift.TBase<writeClientProperties_args, writeClientProperties_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeClientProperties_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeClientProperties_args");

    private static final org.apache.thrift.protocol.TField CLIENT_PROPERTIES_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("clientPropertiesEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeClientProperties_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeClientProperties_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.ClientPropertiesEntity clientPropertiesEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_PROPERTIES_ENTITY((short)1, "clientPropertiesEntity");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_PROPERTIES_ENTITY
            return CLIENT_PROPERTIES_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_PROPERTIES_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("clientPropertiesEntity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.ClientPropertiesEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeClientProperties_args.class, metaDataMap);
    }

    public writeClientProperties_args() {
    }

    public writeClientProperties_args(
      com.keruyun.commons.agent.collector.entity.ClientPropertiesEntity clientPropertiesEntity)
    {
      this();
      this.clientPropertiesEntity = clientPropertiesEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeClientProperties_args(writeClientProperties_args other) {
      if (other.isSetClientPropertiesEntity()) {
        this.clientPropertiesEntity = new com.keruyun.commons.agent.collector.entity.ClientPropertiesEntity(other.clientPropertiesEntity);
      }
    }

    public writeClientProperties_args deepCopy() {
      return new writeClientProperties_args(this);
    }

    @Override
    public void clear() {
      this.clientPropertiesEntity = null;
    }

    public com.keruyun.commons.agent.collector.entity.ClientPropertiesEntity getClientPropertiesEntity() {
      return this.clientPropertiesEntity;
    }

    public writeClientProperties_args setClientPropertiesEntity(com.keruyun.commons.agent.collector.entity.ClientPropertiesEntity clientPropertiesEntity) {
      this.clientPropertiesEntity = clientPropertiesEntity;
      return this;
    }

    public void unsetClientPropertiesEntity() {
      this.clientPropertiesEntity = null;
    }

    /** Returns true if field clientPropertiesEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetClientPropertiesEntity() {
      return this.clientPropertiesEntity != null;
    }

    public void setClientPropertiesEntityIsSet(boolean value) {
      if (!value) {
        this.clientPropertiesEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_PROPERTIES_ENTITY:
        if (value == null) {
          unsetClientPropertiesEntity();
        } else {
          setClientPropertiesEntity((com.keruyun.commons.agent.collector.entity.ClientPropertiesEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_PROPERTIES_ENTITY:
        return getClientPropertiesEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_PROPERTIES_ENTITY:
        return isSetClientPropertiesEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeClientProperties_args)
        return this.equals((writeClientProperties_args)that);
      return false;
    }

    public boolean equals(writeClientProperties_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_clientPropertiesEntity = true && this.isSetClientPropertiesEntity();
      boolean that_present_clientPropertiesEntity = true && that.isSetClientPropertiesEntity();
      if (this_present_clientPropertiesEntity || that_present_clientPropertiesEntity) {
        if (!(this_present_clientPropertiesEntity && that_present_clientPropertiesEntity))
          return false;
        if (!this.clientPropertiesEntity.equals(that.clientPropertiesEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetClientPropertiesEntity()) ? 131071 : 524287);
      if (isSetClientPropertiesEntity())
        hashCode = hashCode * 8191 + clientPropertiesEntity.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeClientProperties_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientPropertiesEntity()).compareTo(other.isSetClientPropertiesEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientPropertiesEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientPropertiesEntity, other.clientPropertiesEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeClientProperties_args(");
      boolean first = true;

      sb.append("clientPropertiesEntity:");
      if (this.clientPropertiesEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.clientPropertiesEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (clientPropertiesEntity == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientPropertiesEntity' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (clientPropertiesEntity != null) {
        clientPropertiesEntity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeClientProperties_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeClientProperties_argsStandardScheme getScheme() {
        return new writeClientProperties_argsStandardScheme();
      }
    }

    private static class writeClientProperties_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeClientProperties_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeClientProperties_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_PROPERTIES_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientPropertiesEntity = new com.keruyun.commons.agent.collector.entity.ClientPropertiesEntity();
                struct.clientPropertiesEntity.read(iprot);
                struct.setClientPropertiesEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeClientProperties_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientPropertiesEntity != null) {
          oprot.writeFieldBegin(CLIENT_PROPERTIES_ENTITY_FIELD_DESC);
          struct.clientPropertiesEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeClientProperties_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeClientProperties_argsTupleScheme getScheme() {
        return new writeClientProperties_argsTupleScheme();
      }
    }

    private static class writeClientProperties_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeClientProperties_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeClientProperties_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.clientPropertiesEntity.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeClientProperties_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.clientPropertiesEntity = new com.keruyun.commons.agent.collector.entity.ClientPropertiesEntity();
        struct.clientPropertiesEntity.read(iprot);
        struct.setClientPropertiesEntityIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeClientProperties_result implements org.apache.thrift.TBase<writeClientProperties_result, writeClientProperties_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeClientProperties_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeClientProperties_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeClientProperties_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeClientProperties_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeClientProperties_result.class, metaDataMap);
    }

    public writeClientProperties_result() {
    }

    public writeClientProperties_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeClientProperties_result(writeClientProperties_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeClientProperties_result deepCopy() {
      return new writeClientProperties_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeClientProperties_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeClientProperties_result)
        return this.equals((writeClientProperties_result)that);
      return false;
    }

    public boolean equals(writeClientProperties_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeClientProperties_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeClientProperties_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeClientProperties_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeClientProperties_resultStandardScheme getScheme() {
        return new writeClientProperties_resultStandardScheme();
      }
    }

    private static class writeClientProperties_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeClientProperties_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeClientProperties_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeClientProperties_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeClientProperties_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeClientProperties_resultTupleScheme getScheme() {
        return new writeClientProperties_resultTupleScheme();
      }
    }

    private static class writeClientProperties_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeClientProperties_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeClientProperties_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeClientProperties_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeTraceLogs_args implements org.apache.thrift.TBase<writeTraceLogs_args, writeTraceLogs_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeTraceLogs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeTraceLogs_args");

    private static final org.apache.thrift.protocol.TField TRACES_FIELD_DESC = new org.apache.thrift.protocol.TField("traces", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeTraceLogs_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeTraceLogs_argsTupleSchemeFactory();

    public com.keruyun.commons.agent.collector.entity.TraceLogEntities traces; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRACES((short)1, "traces");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRACES
            return TRACES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRACES, new org.apache.thrift.meta_data.FieldMetaData("traces", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.keruyun.commons.agent.collector.entity.TraceLogEntities.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeTraceLogs_args.class, metaDataMap);
    }

    public writeTraceLogs_args() {
    }

    public writeTraceLogs_args(
      com.keruyun.commons.agent.collector.entity.TraceLogEntities traces)
    {
      this();
      this.traces = traces;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeTraceLogs_args(writeTraceLogs_args other) {
      if (other.isSetTraces()) {
        this.traces = new com.keruyun.commons.agent.collector.entity.TraceLogEntities(other.traces);
      }
    }

    public writeTraceLogs_args deepCopy() {
      return new writeTraceLogs_args(this);
    }

    @Override
    public void clear() {
      this.traces = null;
    }

    public com.keruyun.commons.agent.collector.entity.TraceLogEntities getTraces() {
      return this.traces;
    }

    public writeTraceLogs_args setTraces(com.keruyun.commons.agent.collector.entity.TraceLogEntities traces) {
      this.traces = traces;
      return this;
    }

    public void unsetTraces() {
      this.traces = null;
    }

    /** Returns true if field traces is set (has been assigned a value) and false otherwise */
    public boolean isSetTraces() {
      return this.traces != null;
    }

    public void setTracesIsSet(boolean value) {
      if (!value) {
        this.traces = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRACES:
        if (value == null) {
          unsetTraces();
        } else {
          setTraces((com.keruyun.commons.agent.collector.entity.TraceLogEntities)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRACES:
        return getTraces();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRACES:
        return isSetTraces();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeTraceLogs_args)
        return this.equals((writeTraceLogs_args)that);
      return false;
    }

    public boolean equals(writeTraceLogs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_traces = true && this.isSetTraces();
      boolean that_present_traces = true && that.isSetTraces();
      if (this_present_traces || that_present_traces) {
        if (!(this_present_traces && that_present_traces))
          return false;
        if (!this.traces.equals(that.traces))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTraces()) ? 131071 : 524287);
      if (isSetTraces())
        hashCode = hashCode * 8191 + traces.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeTraceLogs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTraces()).compareTo(other.isSetTraces());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTraces()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traces, other.traces);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeTraceLogs_args(");
      boolean first = true;

      sb.append("traces:");
      if (this.traces == null) {
        sb.append("null");
      } else {
        sb.append(this.traces);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (traces == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'traces' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (traces != null) {
        traces.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeTraceLogs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeTraceLogs_argsStandardScheme getScheme() {
        return new writeTraceLogs_argsStandardScheme();
      }
    }

    private static class writeTraceLogs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeTraceLogs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeTraceLogs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRACES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.traces = new com.keruyun.commons.agent.collector.entity.TraceLogEntities();
                struct.traces.read(iprot);
                struct.setTracesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeTraceLogs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.traces != null) {
          oprot.writeFieldBegin(TRACES_FIELD_DESC);
          struct.traces.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeTraceLogs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeTraceLogs_argsTupleScheme getScheme() {
        return new writeTraceLogs_argsTupleScheme();
      }
    }

    private static class writeTraceLogs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeTraceLogs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeTraceLogs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.traces.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeTraceLogs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.traces = new com.keruyun.commons.agent.collector.entity.TraceLogEntities();
        struct.traces.read(iprot);
        struct.setTracesIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeTraceLogs_result implements org.apache.thrift.TBase<writeTraceLogs_result, writeTraceLogs_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeTraceLogs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeTraceLogs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeTraceLogs_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeTraceLogs_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeTraceLogs_result.class, metaDataMap);
    }

    public writeTraceLogs_result() {
    }

    public writeTraceLogs_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeTraceLogs_result(writeTraceLogs_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public writeTraceLogs_result deepCopy() {
      return new writeTraceLogs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeTraceLogs_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeTraceLogs_result)
        return this.equals((writeTraceLogs_result)that);
      return false;
    }

    public boolean equals(writeTraceLogs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeTraceLogs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeTraceLogs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeTraceLogs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeTraceLogs_resultStandardScheme getScheme() {
        return new writeTraceLogs_resultStandardScheme();
      }
    }

    private static class writeTraceLogs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeTraceLogs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeTraceLogs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeTraceLogs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeTraceLogs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeTraceLogs_resultTupleScheme getScheme() {
        return new writeTraceLogs_resultTupleScheme();
      }
    }

    private static class writeTraceLogs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeTraceLogs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeTraceLogs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeTraceLogs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
