/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class MongoDBClusterEntity implements org.apache.thrift.TBase<MongoDBClusterEntity, MongoDBClusterEntity._Fields>, java.io.Serializable, Cloneable, Comparable<MongoDBClusterEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MongoDBClusterEntity");

  private static final org.apache.thrift.protocol.TField REPLICA_SET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("replicaSetName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REPLICA_HOSTS_FIELD_DESC = new org.apache.thrift.protocol.TField("replicaHosts", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CURRENT_CONNECTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("currentConnections", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField AVAILABLE_CONNECTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("availableConnections", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField RESIDENT_MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("residentMem", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField READ_LOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("readLocks", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField WRITE_LOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("writeLocks", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField INDEX_HITS_FIELD_DESC = new org.apache.thrift.protocol.TField("indexHits", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField INDEX_MISSES_FIELD_DESC = new org.apache.thrift.protocol.TField("indexMisses", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TOTAL_NETWORK_BYTES_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("totalNetworkBytesIn", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField TOTAL_NETWORK_BYTES_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalNetworkBytesOut", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField INSERT_COUNTER_FIELD_DESC = new org.apache.thrift.protocol.TField("insertCounter", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField QUERY_COUNTER_FIELD_DESC = new org.apache.thrift.protocol.TField("queryCounter", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField UPDATE_COUNTER_FIELD_DESC = new org.apache.thrift.protocol.TField("updateCounter", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField DELETE_COUNTER_FIELD_DESC = new org.apache.thrift.protocol.TField("deleteCounter", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField PAGE_FAULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("pageFaults", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)21);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MongoDBClusterEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MongoDBClusterEntityTupleSchemeFactory();

  public String replicaSetName; // required
  public java.util.List<String> replicaHosts; // required
  public long timestamp; // required
  public int interval; // required
  public int currentConnections; // required
  public int availableConnections; // required
  public long residentMem; // required
  public int readLocks; // required
  public int writeLocks; // required
  public int indexHits; // required
  public int indexMisses; // required
  public long totalNetworkBytesIn; // required
  public long totalNetworkBytesOut; // required
  public long insertCounter; // required
  public long queryCounter; // required
  public long updateCounter; // required
  public long deleteCounter; // required
  public long pageFaults; // required
  public String flag; // optional
  public String host; // optional
  public int port; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPLICA_SET_NAME((short)1, "replicaSetName"),
    REPLICA_HOSTS((short)2, "replicaHosts"),
    TIMESTAMP((short)3, "timestamp"),
    INTERVAL((short)4, "interval"),
    CURRENT_CONNECTIONS((short)5, "currentConnections"),
    AVAILABLE_CONNECTIONS((short)6, "availableConnections"),
    RESIDENT_MEM((short)7, "residentMem"),
    READ_LOCKS((short)8, "readLocks"),
    WRITE_LOCKS((short)9, "writeLocks"),
    INDEX_HITS((short)10, "indexHits"),
    INDEX_MISSES((short)11, "indexMisses"),
    TOTAL_NETWORK_BYTES_IN((short)12, "totalNetworkBytesIn"),
    TOTAL_NETWORK_BYTES_OUT((short)13, "totalNetworkBytesOut"),
    INSERT_COUNTER((short)14, "insertCounter"),
    QUERY_COUNTER((short)15, "queryCounter"),
    UPDATE_COUNTER((short)16, "updateCounter"),
    DELETE_COUNTER((short)17, "deleteCounter"),
    PAGE_FAULTS((short)18, "pageFaults"),
    FLAG((short)19, "flag"),
    HOST((short)20, "host"),
    PORT((short)21, "port");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPLICA_SET_NAME
          return REPLICA_SET_NAME;
        case 2: // REPLICA_HOSTS
          return REPLICA_HOSTS;
        case 3: // TIMESTAMP
          return TIMESTAMP;
        case 4: // INTERVAL
          return INTERVAL;
        case 5: // CURRENT_CONNECTIONS
          return CURRENT_CONNECTIONS;
        case 6: // AVAILABLE_CONNECTIONS
          return AVAILABLE_CONNECTIONS;
        case 7: // RESIDENT_MEM
          return RESIDENT_MEM;
        case 8: // READ_LOCKS
          return READ_LOCKS;
        case 9: // WRITE_LOCKS
          return WRITE_LOCKS;
        case 10: // INDEX_HITS
          return INDEX_HITS;
        case 11: // INDEX_MISSES
          return INDEX_MISSES;
        case 12: // TOTAL_NETWORK_BYTES_IN
          return TOTAL_NETWORK_BYTES_IN;
        case 13: // TOTAL_NETWORK_BYTES_OUT
          return TOTAL_NETWORK_BYTES_OUT;
        case 14: // INSERT_COUNTER
          return INSERT_COUNTER;
        case 15: // QUERY_COUNTER
          return QUERY_COUNTER;
        case 16: // UPDATE_COUNTER
          return UPDATE_COUNTER;
        case 17: // DELETE_COUNTER
          return DELETE_COUNTER;
        case 18: // PAGE_FAULTS
          return PAGE_FAULTS;
        case 19: // FLAG
          return FLAG;
        case 20: // HOST
          return HOST;
        case 21: // PORT
          return PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __INTERVAL_ISSET_ID = 1;
  private static final int __CURRENTCONNECTIONS_ISSET_ID = 2;
  private static final int __AVAILABLECONNECTIONS_ISSET_ID = 3;
  private static final int __RESIDENTMEM_ISSET_ID = 4;
  private static final int __READLOCKS_ISSET_ID = 5;
  private static final int __WRITELOCKS_ISSET_ID = 6;
  private static final int __INDEXHITS_ISSET_ID = 7;
  private static final int __INDEXMISSES_ISSET_ID = 8;
  private static final int __TOTALNETWORKBYTESIN_ISSET_ID = 9;
  private static final int __TOTALNETWORKBYTESOUT_ISSET_ID = 10;
  private static final int __INSERTCOUNTER_ISSET_ID = 11;
  private static final int __QUERYCOUNTER_ISSET_ID = 12;
  private static final int __UPDATECOUNTER_ISSET_ID = 13;
  private static final int __DELETECOUNTER_ISSET_ID = 14;
  private static final int __PAGEFAULTS_ISSET_ID = 15;
  private static final int __PORT_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FLAG,_Fields.HOST,_Fields.PORT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPLICA_SET_NAME, new org.apache.thrift.meta_data.FieldMetaData("replicaSetName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLICA_HOSTS, new org.apache.thrift.meta_data.FieldMetaData("replicaHosts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_CONNECTIONS, new org.apache.thrift.meta_data.FieldMetaData("currentConnections", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVAILABLE_CONNECTIONS, new org.apache.thrift.meta_data.FieldMetaData("availableConnections", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESIDENT_MEM, new org.apache.thrift.meta_data.FieldMetaData("residentMem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.READ_LOCKS, new org.apache.thrift.meta_data.FieldMetaData("readLocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WRITE_LOCKS, new org.apache.thrift.meta_data.FieldMetaData("writeLocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INDEX_HITS, new org.apache.thrift.meta_data.FieldMetaData("indexHits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INDEX_MISSES, new org.apache.thrift.meta_data.FieldMetaData("indexMisses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_NETWORK_BYTES_IN, new org.apache.thrift.meta_data.FieldMetaData("totalNetworkBytesIn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_NETWORK_BYTES_OUT, new org.apache.thrift.meta_data.FieldMetaData("totalNetworkBytesOut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INSERT_COUNTER, new org.apache.thrift.meta_data.FieldMetaData("insertCounter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_COUNTER, new org.apache.thrift.meta_data.FieldMetaData("queryCounter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_COUNTER, new org.apache.thrift.meta_data.FieldMetaData("updateCounter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DELETE_COUNTER, new org.apache.thrift.meta_data.FieldMetaData("deleteCounter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAGE_FAULTS, new org.apache.thrift.meta_data.FieldMetaData("pageFaults", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MongoDBClusterEntity.class, metaDataMap);
  }

  public MongoDBClusterEntity() {
    this.flag = "1";

  }

  public MongoDBClusterEntity(
    String replicaSetName,
    java.util.List<String> replicaHosts,
    long timestamp,
    int interval,
    int currentConnections,
    int availableConnections,
    long residentMem,
    int readLocks,
    int writeLocks,
    int indexHits,
    int indexMisses,
    long totalNetworkBytesIn,
    long totalNetworkBytesOut,
    long insertCounter,
    long queryCounter,
    long updateCounter,
    long deleteCounter,
    long pageFaults)
  {
    this();
    this.replicaSetName = replicaSetName;
    this.replicaHosts = replicaHosts;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.interval = interval;
    setIntervalIsSet(true);
    this.currentConnections = currentConnections;
    setCurrentConnectionsIsSet(true);
    this.availableConnections = availableConnections;
    setAvailableConnectionsIsSet(true);
    this.residentMem = residentMem;
    setResidentMemIsSet(true);
    this.readLocks = readLocks;
    setReadLocksIsSet(true);
    this.writeLocks = writeLocks;
    setWriteLocksIsSet(true);
    this.indexHits = indexHits;
    setIndexHitsIsSet(true);
    this.indexMisses = indexMisses;
    setIndexMissesIsSet(true);
    this.totalNetworkBytesIn = totalNetworkBytesIn;
    setTotalNetworkBytesInIsSet(true);
    this.totalNetworkBytesOut = totalNetworkBytesOut;
    setTotalNetworkBytesOutIsSet(true);
    this.insertCounter = insertCounter;
    setInsertCounterIsSet(true);
    this.queryCounter = queryCounter;
    setQueryCounterIsSet(true);
    this.updateCounter = updateCounter;
    setUpdateCounterIsSet(true);
    this.deleteCounter = deleteCounter;
    setDeleteCounterIsSet(true);
    this.pageFaults = pageFaults;
    setPageFaultsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MongoDBClusterEntity(MongoDBClusterEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReplicaSetName()) {
      this.replicaSetName = other.replicaSetName;
    }
    if (other.isSetReplicaHosts()) {
      java.util.List<String> __this__replicaHosts = new java.util.ArrayList<String>(other.replicaHosts);
      this.replicaHosts = __this__replicaHosts;
    }
    this.timestamp = other.timestamp;
    this.interval = other.interval;
    this.currentConnections = other.currentConnections;
    this.availableConnections = other.availableConnections;
    this.residentMem = other.residentMem;
    this.readLocks = other.readLocks;
    this.writeLocks = other.writeLocks;
    this.indexHits = other.indexHits;
    this.indexMisses = other.indexMisses;
    this.totalNetworkBytesIn = other.totalNetworkBytesIn;
    this.totalNetworkBytesOut = other.totalNetworkBytesOut;
    this.insertCounter = other.insertCounter;
    this.queryCounter = other.queryCounter;
    this.updateCounter = other.updateCounter;
    this.deleteCounter = other.deleteCounter;
    this.pageFaults = other.pageFaults;
    if (other.isSetFlag()) {
      this.flag = other.flag;
    }
    if (other.isSetHost()) {
      this.host = other.host;
    }
    this.port = other.port;
  }

  public MongoDBClusterEntity deepCopy() {
    return new MongoDBClusterEntity(this);
  }

  @Override
  public void clear() {
    this.replicaSetName = null;
    this.replicaHosts = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setIntervalIsSet(false);
    this.interval = 0;
    setCurrentConnectionsIsSet(false);
    this.currentConnections = 0;
    setAvailableConnectionsIsSet(false);
    this.availableConnections = 0;
    setResidentMemIsSet(false);
    this.residentMem = 0;
    setReadLocksIsSet(false);
    this.readLocks = 0;
    setWriteLocksIsSet(false);
    this.writeLocks = 0;
    setIndexHitsIsSet(false);
    this.indexHits = 0;
    setIndexMissesIsSet(false);
    this.indexMisses = 0;
    setTotalNetworkBytesInIsSet(false);
    this.totalNetworkBytesIn = 0;
    setTotalNetworkBytesOutIsSet(false);
    this.totalNetworkBytesOut = 0;
    setInsertCounterIsSet(false);
    this.insertCounter = 0;
    setQueryCounterIsSet(false);
    this.queryCounter = 0;
    setUpdateCounterIsSet(false);
    this.updateCounter = 0;
    setDeleteCounterIsSet(false);
    this.deleteCounter = 0;
    setPageFaultsIsSet(false);
    this.pageFaults = 0;
    this.flag = "1";

    this.host = null;
    setPortIsSet(false);
    this.port = 0;
  }

  public String getReplicaSetName() {
    return this.replicaSetName;
  }

  public MongoDBClusterEntity setReplicaSetName(String replicaSetName) {
    this.replicaSetName = replicaSetName;
    return this;
  }

  public void unsetReplicaSetName() {
    this.replicaSetName = null;
  }

  /** Returns true if field replicaSetName is set (has been assigned a value) and false otherwise */
  public boolean isSetReplicaSetName() {
    return this.replicaSetName != null;
  }

  public void setReplicaSetNameIsSet(boolean value) {
    if (!value) {
      this.replicaSetName = null;
    }
  }

  public int getReplicaHostsSize() {
    return (this.replicaHosts == null) ? 0 : this.replicaHosts.size();
  }

  public java.util.Iterator<String> getReplicaHostsIterator() {
    return (this.replicaHosts == null) ? null : this.replicaHosts.iterator();
  }

  public void addToReplicaHosts(String elem) {
    if (this.replicaHosts == null) {
      this.replicaHosts = new java.util.ArrayList<String>();
    }
    this.replicaHosts.add(elem);
  }

  public java.util.List<String> getReplicaHosts() {
    return this.replicaHosts;
  }

  public MongoDBClusterEntity setReplicaHosts(java.util.List<String> replicaHosts) {
    this.replicaHosts = replicaHosts;
    return this;
  }

  public void unsetReplicaHosts() {
    this.replicaHosts = null;
  }

  /** Returns true if field replicaHosts is set (has been assigned a value) and false otherwise */
  public boolean isSetReplicaHosts() {
    return this.replicaHosts != null;
  }

  public void setReplicaHostsIsSet(boolean value) {
    if (!value) {
      this.replicaHosts = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public MongoDBClusterEntity setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getInterval() {
    return this.interval;
  }

  public MongoDBClusterEntity setInterval(int interval) {
    this.interval = interval;
    setIntervalIsSet(true);
    return this;
  }

  public void unsetInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  /** Returns true if field interval is set (has been assigned a value) and false otherwise */
  public boolean isSetInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  public void setIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
  }

  public int getCurrentConnections() {
    return this.currentConnections;
  }

  public MongoDBClusterEntity setCurrentConnections(int currentConnections) {
    this.currentConnections = currentConnections;
    setCurrentConnectionsIsSet(true);
    return this;
  }

  public void unsetCurrentConnections() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURRENTCONNECTIONS_ISSET_ID);
  }

  /** Returns true if field currentConnections is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentConnections() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRENTCONNECTIONS_ISSET_ID);
  }

  public void setCurrentConnectionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURRENTCONNECTIONS_ISSET_ID, value);
  }

  public int getAvailableConnections() {
    return this.availableConnections;
  }

  public MongoDBClusterEntity setAvailableConnections(int availableConnections) {
    this.availableConnections = availableConnections;
    setAvailableConnectionsIsSet(true);
    return this;
  }

  public void unsetAvailableConnections() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AVAILABLECONNECTIONS_ISSET_ID);
  }

  /** Returns true if field availableConnections is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableConnections() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AVAILABLECONNECTIONS_ISSET_ID);
  }

  public void setAvailableConnectionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AVAILABLECONNECTIONS_ISSET_ID, value);
  }

  public long getResidentMem() {
    return this.residentMem;
  }

  public MongoDBClusterEntity setResidentMem(long residentMem) {
    this.residentMem = residentMem;
    setResidentMemIsSet(true);
    return this;
  }

  public void unsetResidentMem() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESIDENTMEM_ISSET_ID);
  }

  /** Returns true if field residentMem is set (has been assigned a value) and false otherwise */
  public boolean isSetResidentMem() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESIDENTMEM_ISSET_ID);
  }

  public void setResidentMemIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESIDENTMEM_ISSET_ID, value);
  }

  public int getReadLocks() {
    return this.readLocks;
  }

  public MongoDBClusterEntity setReadLocks(int readLocks) {
    this.readLocks = readLocks;
    setReadLocksIsSet(true);
    return this;
  }

  public void unsetReadLocks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __READLOCKS_ISSET_ID);
  }

  /** Returns true if field readLocks is set (has been assigned a value) and false otherwise */
  public boolean isSetReadLocks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __READLOCKS_ISSET_ID);
  }

  public void setReadLocksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __READLOCKS_ISSET_ID, value);
  }

  public int getWriteLocks() {
    return this.writeLocks;
  }

  public MongoDBClusterEntity setWriteLocks(int writeLocks) {
    this.writeLocks = writeLocks;
    setWriteLocksIsSet(true);
    return this;
  }

  public void unsetWriteLocks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WRITELOCKS_ISSET_ID);
  }

  /** Returns true if field writeLocks is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteLocks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WRITELOCKS_ISSET_ID);
  }

  public void setWriteLocksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WRITELOCKS_ISSET_ID, value);
  }

  public int getIndexHits() {
    return this.indexHits;
  }

  public MongoDBClusterEntity setIndexHits(int indexHits) {
    this.indexHits = indexHits;
    setIndexHitsIsSet(true);
    return this;
  }

  public void unsetIndexHits() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEXHITS_ISSET_ID);
  }

  /** Returns true if field indexHits is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexHits() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEXHITS_ISSET_ID);
  }

  public void setIndexHitsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEXHITS_ISSET_ID, value);
  }

  public int getIndexMisses() {
    return this.indexMisses;
  }

  public MongoDBClusterEntity setIndexMisses(int indexMisses) {
    this.indexMisses = indexMisses;
    setIndexMissesIsSet(true);
    return this;
  }

  public void unsetIndexMisses() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEXMISSES_ISSET_ID);
  }

  /** Returns true if field indexMisses is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexMisses() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEXMISSES_ISSET_ID);
  }

  public void setIndexMissesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEXMISSES_ISSET_ID, value);
  }

  public long getTotalNetworkBytesIn() {
    return this.totalNetworkBytesIn;
  }

  public MongoDBClusterEntity setTotalNetworkBytesIn(long totalNetworkBytesIn) {
    this.totalNetworkBytesIn = totalNetworkBytesIn;
    setTotalNetworkBytesInIsSet(true);
    return this;
  }

  public void unsetTotalNetworkBytesIn() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALNETWORKBYTESIN_ISSET_ID);
  }

  /** Returns true if field totalNetworkBytesIn is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalNetworkBytesIn() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALNETWORKBYTESIN_ISSET_ID);
  }

  public void setTotalNetworkBytesInIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALNETWORKBYTESIN_ISSET_ID, value);
  }

  public long getTotalNetworkBytesOut() {
    return this.totalNetworkBytesOut;
  }

  public MongoDBClusterEntity setTotalNetworkBytesOut(long totalNetworkBytesOut) {
    this.totalNetworkBytesOut = totalNetworkBytesOut;
    setTotalNetworkBytesOutIsSet(true);
    return this;
  }

  public void unsetTotalNetworkBytesOut() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALNETWORKBYTESOUT_ISSET_ID);
  }

  /** Returns true if field totalNetworkBytesOut is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalNetworkBytesOut() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALNETWORKBYTESOUT_ISSET_ID);
  }

  public void setTotalNetworkBytesOutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALNETWORKBYTESOUT_ISSET_ID, value);
  }

  public long getInsertCounter() {
    return this.insertCounter;
  }

  public MongoDBClusterEntity setInsertCounter(long insertCounter) {
    this.insertCounter = insertCounter;
    setInsertCounterIsSet(true);
    return this;
  }

  public void unsetInsertCounter() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INSERTCOUNTER_ISSET_ID);
  }

  /** Returns true if field insertCounter is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertCounter() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INSERTCOUNTER_ISSET_ID);
  }

  public void setInsertCounterIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INSERTCOUNTER_ISSET_ID, value);
  }

  public long getQueryCounter() {
    return this.queryCounter;
  }

  public MongoDBClusterEntity setQueryCounter(long queryCounter) {
    this.queryCounter = queryCounter;
    setQueryCounterIsSet(true);
    return this;
  }

  public void unsetQueryCounter() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERYCOUNTER_ISSET_ID);
  }

  /** Returns true if field queryCounter is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryCounter() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERYCOUNTER_ISSET_ID);
  }

  public void setQueryCounterIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERYCOUNTER_ISSET_ID, value);
  }

  public long getUpdateCounter() {
    return this.updateCounter;
  }

  public MongoDBClusterEntity setUpdateCounter(long updateCounter) {
    this.updateCounter = updateCounter;
    setUpdateCounterIsSet(true);
    return this;
  }

  public void unsetUpdateCounter() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATECOUNTER_ISSET_ID);
  }

  /** Returns true if field updateCounter is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateCounter() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATECOUNTER_ISSET_ID);
  }

  public void setUpdateCounterIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATECOUNTER_ISSET_ID, value);
  }

  public long getDeleteCounter() {
    return this.deleteCounter;
  }

  public MongoDBClusterEntity setDeleteCounter(long deleteCounter) {
    this.deleteCounter = deleteCounter;
    setDeleteCounterIsSet(true);
    return this;
  }

  public void unsetDeleteCounter() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DELETECOUNTER_ISSET_ID);
  }

  /** Returns true if field deleteCounter is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleteCounter() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DELETECOUNTER_ISSET_ID);
  }

  public void setDeleteCounterIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DELETECOUNTER_ISSET_ID, value);
  }

  public long getPageFaults() {
    return this.pageFaults;
  }

  public MongoDBClusterEntity setPageFaults(long pageFaults) {
    this.pageFaults = pageFaults;
    setPageFaultsIsSet(true);
    return this;
  }

  public void unsetPageFaults() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGEFAULTS_ISSET_ID);
  }

  /** Returns true if field pageFaults is set (has been assigned a value) and false otherwise */
  public boolean isSetPageFaults() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGEFAULTS_ISSET_ID);
  }

  public void setPageFaultsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGEFAULTS_ISSET_ID, value);
  }

  public String getFlag() {
    return this.flag;
  }

  public MongoDBClusterEntity setFlag(String flag) {
    this.flag = flag;
    return this;
  }

  public void unsetFlag() {
    this.flag = null;
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return this.flag != null;
  }

  public void setFlagIsSet(boolean value) {
    if (!value) {
      this.flag = null;
    }
  }

  public String getHost() {
    return this.host;
  }

  public MongoDBClusterEntity setHost(String host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public MongoDBClusterEntity setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REPLICA_SET_NAME:
      if (value == null) {
        unsetReplicaSetName();
      } else {
        setReplicaSetName((String)value);
      }
      break;

    case REPLICA_HOSTS:
      if (value == null) {
        unsetReplicaHosts();
      } else {
        setReplicaHosts((java.util.List<String>)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((Integer)value);
      }
      break;

    case CURRENT_CONNECTIONS:
      if (value == null) {
        unsetCurrentConnections();
      } else {
        setCurrentConnections((Integer)value);
      }
      break;

    case AVAILABLE_CONNECTIONS:
      if (value == null) {
        unsetAvailableConnections();
      } else {
        setAvailableConnections((Integer)value);
      }
      break;

    case RESIDENT_MEM:
      if (value == null) {
        unsetResidentMem();
      } else {
        setResidentMem((Long)value);
      }
      break;

    case READ_LOCKS:
      if (value == null) {
        unsetReadLocks();
      } else {
        setReadLocks((Integer)value);
      }
      break;

    case WRITE_LOCKS:
      if (value == null) {
        unsetWriteLocks();
      } else {
        setWriteLocks((Integer)value);
      }
      break;

    case INDEX_HITS:
      if (value == null) {
        unsetIndexHits();
      } else {
        setIndexHits((Integer)value);
      }
      break;

    case INDEX_MISSES:
      if (value == null) {
        unsetIndexMisses();
      } else {
        setIndexMisses((Integer)value);
      }
      break;

    case TOTAL_NETWORK_BYTES_IN:
      if (value == null) {
        unsetTotalNetworkBytesIn();
      } else {
        setTotalNetworkBytesIn((Long)value);
      }
      break;

    case TOTAL_NETWORK_BYTES_OUT:
      if (value == null) {
        unsetTotalNetworkBytesOut();
      } else {
        setTotalNetworkBytesOut((Long)value);
      }
      break;

    case INSERT_COUNTER:
      if (value == null) {
        unsetInsertCounter();
      } else {
        setInsertCounter((Long)value);
      }
      break;

    case QUERY_COUNTER:
      if (value == null) {
        unsetQueryCounter();
      } else {
        setQueryCounter((Long)value);
      }
      break;

    case UPDATE_COUNTER:
      if (value == null) {
        unsetUpdateCounter();
      } else {
        setUpdateCounter((Long)value);
      }
      break;

    case DELETE_COUNTER:
      if (value == null) {
        unsetDeleteCounter();
      } else {
        setDeleteCounter((Long)value);
      }
      break;

    case PAGE_FAULTS:
      if (value == null) {
        unsetPageFaults();
      } else {
        setPageFaults((Long)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((String)value);
      }
      break;

    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REPLICA_SET_NAME:
      return getReplicaSetName();

    case REPLICA_HOSTS:
      return getReplicaHosts();

    case TIMESTAMP:
      return getTimestamp();

    case INTERVAL:
      return getInterval();

    case CURRENT_CONNECTIONS:
      return getCurrentConnections();

    case AVAILABLE_CONNECTIONS:
      return getAvailableConnections();

    case RESIDENT_MEM:
      return getResidentMem();

    case READ_LOCKS:
      return getReadLocks();

    case WRITE_LOCKS:
      return getWriteLocks();

    case INDEX_HITS:
      return getIndexHits();

    case INDEX_MISSES:
      return getIndexMisses();

    case TOTAL_NETWORK_BYTES_IN:
      return getTotalNetworkBytesIn();

    case TOTAL_NETWORK_BYTES_OUT:
      return getTotalNetworkBytesOut();

    case INSERT_COUNTER:
      return getInsertCounter();

    case QUERY_COUNTER:
      return getQueryCounter();

    case UPDATE_COUNTER:
      return getUpdateCounter();

    case DELETE_COUNTER:
      return getDeleteCounter();

    case PAGE_FAULTS:
      return getPageFaults();

    case FLAG:
      return getFlag();

    case HOST:
      return getHost();

    case PORT:
      return getPort();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REPLICA_SET_NAME:
      return isSetReplicaSetName();
    case REPLICA_HOSTS:
      return isSetReplicaHosts();
    case TIMESTAMP:
      return isSetTimestamp();
    case INTERVAL:
      return isSetInterval();
    case CURRENT_CONNECTIONS:
      return isSetCurrentConnections();
    case AVAILABLE_CONNECTIONS:
      return isSetAvailableConnections();
    case RESIDENT_MEM:
      return isSetResidentMem();
    case READ_LOCKS:
      return isSetReadLocks();
    case WRITE_LOCKS:
      return isSetWriteLocks();
    case INDEX_HITS:
      return isSetIndexHits();
    case INDEX_MISSES:
      return isSetIndexMisses();
    case TOTAL_NETWORK_BYTES_IN:
      return isSetTotalNetworkBytesIn();
    case TOTAL_NETWORK_BYTES_OUT:
      return isSetTotalNetworkBytesOut();
    case INSERT_COUNTER:
      return isSetInsertCounter();
    case QUERY_COUNTER:
      return isSetQueryCounter();
    case UPDATE_COUNTER:
      return isSetUpdateCounter();
    case DELETE_COUNTER:
      return isSetDeleteCounter();
    case PAGE_FAULTS:
      return isSetPageFaults();
    case FLAG:
      return isSetFlag();
    case HOST:
      return isSetHost();
    case PORT:
      return isSetPort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MongoDBClusterEntity)
      return this.equals((MongoDBClusterEntity)that);
    return false;
  }

  public boolean equals(MongoDBClusterEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_replicaSetName = true && this.isSetReplicaSetName();
    boolean that_present_replicaSetName = true && that.isSetReplicaSetName();
    if (this_present_replicaSetName || that_present_replicaSetName) {
      if (!(this_present_replicaSetName && that_present_replicaSetName))
        return false;
      if (!this.replicaSetName.equals(that.replicaSetName))
        return false;
    }

    boolean this_present_replicaHosts = true && this.isSetReplicaHosts();
    boolean that_present_replicaHosts = true && that.isSetReplicaHosts();
    if (this_present_replicaHosts || that_present_replicaHosts) {
      if (!(this_present_replicaHosts && that_present_replicaHosts))
        return false;
      if (!this.replicaHosts.equals(that.replicaHosts))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_interval = true;
    boolean that_present_interval = true;
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (this.interval != that.interval)
        return false;
    }

    boolean this_present_currentConnections = true;
    boolean that_present_currentConnections = true;
    if (this_present_currentConnections || that_present_currentConnections) {
      if (!(this_present_currentConnections && that_present_currentConnections))
        return false;
      if (this.currentConnections != that.currentConnections)
        return false;
    }

    boolean this_present_availableConnections = true;
    boolean that_present_availableConnections = true;
    if (this_present_availableConnections || that_present_availableConnections) {
      if (!(this_present_availableConnections && that_present_availableConnections))
        return false;
      if (this.availableConnections != that.availableConnections)
        return false;
    }

    boolean this_present_residentMem = true;
    boolean that_present_residentMem = true;
    if (this_present_residentMem || that_present_residentMem) {
      if (!(this_present_residentMem && that_present_residentMem))
        return false;
      if (this.residentMem != that.residentMem)
        return false;
    }

    boolean this_present_readLocks = true;
    boolean that_present_readLocks = true;
    if (this_present_readLocks || that_present_readLocks) {
      if (!(this_present_readLocks && that_present_readLocks))
        return false;
      if (this.readLocks != that.readLocks)
        return false;
    }

    boolean this_present_writeLocks = true;
    boolean that_present_writeLocks = true;
    if (this_present_writeLocks || that_present_writeLocks) {
      if (!(this_present_writeLocks && that_present_writeLocks))
        return false;
      if (this.writeLocks != that.writeLocks)
        return false;
    }

    boolean this_present_indexHits = true;
    boolean that_present_indexHits = true;
    if (this_present_indexHits || that_present_indexHits) {
      if (!(this_present_indexHits && that_present_indexHits))
        return false;
      if (this.indexHits != that.indexHits)
        return false;
    }

    boolean this_present_indexMisses = true;
    boolean that_present_indexMisses = true;
    if (this_present_indexMisses || that_present_indexMisses) {
      if (!(this_present_indexMisses && that_present_indexMisses))
        return false;
      if (this.indexMisses != that.indexMisses)
        return false;
    }

    boolean this_present_totalNetworkBytesIn = true;
    boolean that_present_totalNetworkBytesIn = true;
    if (this_present_totalNetworkBytesIn || that_present_totalNetworkBytesIn) {
      if (!(this_present_totalNetworkBytesIn && that_present_totalNetworkBytesIn))
        return false;
      if (this.totalNetworkBytesIn != that.totalNetworkBytesIn)
        return false;
    }

    boolean this_present_totalNetworkBytesOut = true;
    boolean that_present_totalNetworkBytesOut = true;
    if (this_present_totalNetworkBytesOut || that_present_totalNetworkBytesOut) {
      if (!(this_present_totalNetworkBytesOut && that_present_totalNetworkBytesOut))
        return false;
      if (this.totalNetworkBytesOut != that.totalNetworkBytesOut)
        return false;
    }

    boolean this_present_insertCounter = true;
    boolean that_present_insertCounter = true;
    if (this_present_insertCounter || that_present_insertCounter) {
      if (!(this_present_insertCounter && that_present_insertCounter))
        return false;
      if (this.insertCounter != that.insertCounter)
        return false;
    }

    boolean this_present_queryCounter = true;
    boolean that_present_queryCounter = true;
    if (this_present_queryCounter || that_present_queryCounter) {
      if (!(this_present_queryCounter && that_present_queryCounter))
        return false;
      if (this.queryCounter != that.queryCounter)
        return false;
    }

    boolean this_present_updateCounter = true;
    boolean that_present_updateCounter = true;
    if (this_present_updateCounter || that_present_updateCounter) {
      if (!(this_present_updateCounter && that_present_updateCounter))
        return false;
      if (this.updateCounter != that.updateCounter)
        return false;
    }

    boolean this_present_deleteCounter = true;
    boolean that_present_deleteCounter = true;
    if (this_present_deleteCounter || that_present_deleteCounter) {
      if (!(this_present_deleteCounter && that_present_deleteCounter))
        return false;
      if (this.deleteCounter != that.deleteCounter)
        return false;
    }

    boolean this_present_pageFaults = true;
    boolean that_present_pageFaults = true;
    if (this_present_pageFaults || that_present_pageFaults) {
      if (!(this_present_pageFaults && that_present_pageFaults))
        return false;
      if (this.pageFaults != that.pageFaults)
        return false;
    }

    boolean this_present_flag = true && this.isSetFlag();
    boolean that_present_flag = true && that.isSetFlag();
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (!this.flag.equals(that.flag))
        return false;
    }

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_port = true && this.isSetPort();
    boolean that_present_port = true && that.isSetPort();
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetReplicaSetName()) ? 131071 : 524287);
    if (isSetReplicaSetName())
      hashCode = hashCode * 8191 + replicaSetName.hashCode();

    hashCode = hashCode * 8191 + ((isSetReplicaHosts()) ? 131071 : 524287);
    if (isSetReplicaHosts())
      hashCode = hashCode * 8191 + replicaHosts.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + interval;

    hashCode = hashCode * 8191 + currentConnections;

    hashCode = hashCode * 8191 + availableConnections;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(residentMem);

    hashCode = hashCode * 8191 + readLocks;

    hashCode = hashCode * 8191 + writeLocks;

    hashCode = hashCode * 8191 + indexHits;

    hashCode = hashCode * 8191 + indexMisses;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalNetworkBytesIn);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalNetworkBytesOut);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(insertCounter);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(queryCounter);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(updateCounter);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(deleteCounter);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(pageFaults);

    hashCode = hashCode * 8191 + ((isSetFlag()) ? 131071 : 524287);
    if (isSetFlag())
      hashCode = hashCode * 8191 + flag.hashCode();

    hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
    if (isSetHost())
      hashCode = hashCode * 8191 + host.hashCode();

    hashCode = hashCode * 8191 + ((isSetPort()) ? 131071 : 524287);
    if (isSetPort())
      hashCode = hashCode * 8191 + port;

    return hashCode;
  }

  @Override
  public int compareTo(MongoDBClusterEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReplicaSetName()).compareTo(other.isSetReplicaSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplicaSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicaSetName, other.replicaSetName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplicaHosts()).compareTo(other.isSetReplicaHosts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplicaHosts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicaHosts, other.replicaHosts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentConnections()).compareTo(other.isSetCurrentConnections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentConnections()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentConnections, other.currentConnections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableConnections()).compareTo(other.isSetAvailableConnections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableConnections()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableConnections, other.availableConnections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResidentMem()).compareTo(other.isSetResidentMem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResidentMem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.residentMem, other.residentMem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadLocks()).compareTo(other.isSetReadLocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadLocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readLocks, other.readLocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWriteLocks()).compareTo(other.isSetWriteLocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteLocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeLocks, other.writeLocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndexHits()).compareTo(other.isSetIndexHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexHits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexHits, other.indexHits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndexMisses()).compareTo(other.isSetIndexMisses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexMisses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexMisses, other.indexMisses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalNetworkBytesIn()).compareTo(other.isSetTotalNetworkBytesIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalNetworkBytesIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalNetworkBytesIn, other.totalNetworkBytesIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalNetworkBytesOut()).compareTo(other.isSetTotalNetworkBytesOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalNetworkBytesOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalNetworkBytesOut, other.totalNetworkBytesOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertCounter()).compareTo(other.isSetInsertCounter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertCounter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertCounter, other.insertCounter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryCounter()).compareTo(other.isSetQueryCounter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryCounter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryCounter, other.queryCounter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateCounter()).compareTo(other.isSetUpdateCounter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateCounter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateCounter, other.updateCounter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleteCounter()).compareTo(other.isSetDeleteCounter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleteCounter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleteCounter, other.deleteCounter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageFaults()).compareTo(other.isSetPageFaults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageFaults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageFaults, other.pageFaults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MongoDBClusterEntity(");
    boolean first = true;

    sb.append("replicaSetName:");
    if (this.replicaSetName == null) {
      sb.append("null");
    } else {
      sb.append(this.replicaSetName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replicaHosts:");
    if (this.replicaHosts == null) {
      sb.append("null");
    } else {
      sb.append(this.replicaHosts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interval:");
    sb.append(this.interval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentConnections:");
    sb.append(this.currentConnections);
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableConnections:");
    sb.append(this.availableConnections);
    first = false;
    if (!first) sb.append(", ");
    sb.append("residentMem:");
    sb.append(this.residentMem);
    first = false;
    if (!first) sb.append(", ");
    sb.append("readLocks:");
    sb.append(this.readLocks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("writeLocks:");
    sb.append(this.writeLocks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("indexHits:");
    sb.append(this.indexHits);
    first = false;
    if (!first) sb.append(", ");
    sb.append("indexMisses:");
    sb.append(this.indexMisses);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalNetworkBytesIn:");
    sb.append(this.totalNetworkBytesIn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalNetworkBytesOut:");
    sb.append(this.totalNetworkBytesOut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("insertCounter:");
    sb.append(this.insertCounter);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryCounter:");
    sb.append(this.queryCounter);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateCounter:");
    sb.append(this.updateCounter);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deleteCounter:");
    sb.append(this.deleteCounter);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageFaults:");
    sb.append(this.pageFaults);
    first = false;
    if (isSetFlag()) {
      if (!first) sb.append(", ");
      sb.append("flag:");
      if (this.flag == null) {
        sb.append("null");
      } else {
        sb.append(this.flag);
      }
      first = false;
    }
    if (isSetHost()) {
      if (!first) sb.append(", ");
      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
    }
    if (isSetPort()) {
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MongoDBClusterEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MongoDBClusterEntityStandardScheme getScheme() {
      return new MongoDBClusterEntityStandardScheme();
    }
  }

  private static class MongoDBClusterEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<MongoDBClusterEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MongoDBClusterEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPLICA_SET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.replicaSetName = iprot.readString();
              struct.setReplicaSetNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPLICA_HOSTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.replicaHosts = new java.util.ArrayList<String>(_list16.size);
                String _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readString();
                  struct.replicaHosts.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setReplicaHostsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interval = iprot.readI32();
              struct.setIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CURRENT_CONNECTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currentConnections = iprot.readI32();
              struct.setCurrentConnectionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AVAILABLE_CONNECTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.availableConnections = iprot.readI32();
              struct.setAvailableConnectionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RESIDENT_MEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.residentMem = iprot.readI64();
              struct.setResidentMemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // READ_LOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.readLocks = iprot.readI32();
              struct.setReadLocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WRITE_LOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.writeLocks = iprot.readI32();
              struct.setWriteLocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // INDEX_HITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.indexHits = iprot.readI32();
              struct.setIndexHitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // INDEX_MISSES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.indexMisses = iprot.readI32();
              struct.setIndexMissesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TOTAL_NETWORK_BYTES_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalNetworkBytesIn = iprot.readI64();
              struct.setTotalNetworkBytesInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TOTAL_NETWORK_BYTES_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalNetworkBytesOut = iprot.readI64();
              struct.setTotalNetworkBytesOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // INSERT_COUNTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.insertCounter = iprot.readI64();
              struct.setInsertCounterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // QUERY_COUNTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.queryCounter = iprot.readI64();
              struct.setQueryCounterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UPDATE_COUNTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateCounter = iprot.readI64();
              struct.setUpdateCounterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DELETE_COUNTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.deleteCounter = iprot.readI64();
              struct.setDeleteCounterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PAGE_FAULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pageFaults = iprot.readI64();
              struct.setPageFaultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flag = iprot.readString();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host = iprot.readString();
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MongoDBClusterEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.replicaSetName != null) {
        oprot.writeFieldBegin(REPLICA_SET_NAME_FIELD_DESC);
        oprot.writeString(struct.replicaSetName);
        oprot.writeFieldEnd();
      }
      if (struct.replicaHosts != null) {
        oprot.writeFieldBegin(REPLICA_HOSTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.replicaHosts.size()));
          for (String _iter19 : struct.replicaHosts)
          {
            oprot.writeString(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.interval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_CONNECTIONS_FIELD_DESC);
      oprot.writeI32(struct.currentConnections);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_CONNECTIONS_FIELD_DESC);
      oprot.writeI32(struct.availableConnections);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESIDENT_MEM_FIELD_DESC);
      oprot.writeI64(struct.residentMem);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(READ_LOCKS_FIELD_DESC);
      oprot.writeI32(struct.readLocks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WRITE_LOCKS_FIELD_DESC);
      oprot.writeI32(struct.writeLocks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INDEX_HITS_FIELD_DESC);
      oprot.writeI32(struct.indexHits);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INDEX_MISSES_FIELD_DESC);
      oprot.writeI32(struct.indexMisses);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_NETWORK_BYTES_IN_FIELD_DESC);
      oprot.writeI64(struct.totalNetworkBytesIn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_NETWORK_BYTES_OUT_FIELD_DESC);
      oprot.writeI64(struct.totalNetworkBytesOut);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INSERT_COUNTER_FIELD_DESC);
      oprot.writeI64(struct.insertCounter);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUERY_COUNTER_FIELD_DESC);
      oprot.writeI64(struct.queryCounter);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_COUNTER_FIELD_DESC);
      oprot.writeI64(struct.updateCounter);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELETE_COUNTER_FIELD_DESC);
      oprot.writeI64(struct.deleteCounter);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FAULTS_FIELD_DESC);
      oprot.writeI64(struct.pageFaults);
      oprot.writeFieldEnd();
      if (struct.flag != null) {
        if (struct.isSetFlag()) {
          oprot.writeFieldBegin(FLAG_FIELD_DESC);
          oprot.writeString(struct.flag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.host != null) {
        if (struct.isSetHost()) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          oprot.writeString(struct.host);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPort()) {
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MongoDBClusterEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MongoDBClusterEntityTupleScheme getScheme() {
      return new MongoDBClusterEntityTupleScheme();
    }
  }

  private static class MongoDBClusterEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<MongoDBClusterEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MongoDBClusterEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReplicaSetName()) {
        optionals.set(0);
      }
      if (struct.isSetReplicaHosts()) {
        optionals.set(1);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetInterval()) {
        optionals.set(3);
      }
      if (struct.isSetCurrentConnections()) {
        optionals.set(4);
      }
      if (struct.isSetAvailableConnections()) {
        optionals.set(5);
      }
      if (struct.isSetResidentMem()) {
        optionals.set(6);
      }
      if (struct.isSetReadLocks()) {
        optionals.set(7);
      }
      if (struct.isSetWriteLocks()) {
        optionals.set(8);
      }
      if (struct.isSetIndexHits()) {
        optionals.set(9);
      }
      if (struct.isSetIndexMisses()) {
        optionals.set(10);
      }
      if (struct.isSetTotalNetworkBytesIn()) {
        optionals.set(11);
      }
      if (struct.isSetTotalNetworkBytesOut()) {
        optionals.set(12);
      }
      if (struct.isSetInsertCounter()) {
        optionals.set(13);
      }
      if (struct.isSetQueryCounter()) {
        optionals.set(14);
      }
      if (struct.isSetUpdateCounter()) {
        optionals.set(15);
      }
      if (struct.isSetDeleteCounter()) {
        optionals.set(16);
      }
      if (struct.isSetPageFaults()) {
        optionals.set(17);
      }
      if (struct.isSetFlag()) {
        optionals.set(18);
      }
      if (struct.isSetHost()) {
        optionals.set(19);
      }
      if (struct.isSetPort()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetReplicaSetName()) {
        oprot.writeString(struct.replicaSetName);
      }
      if (struct.isSetReplicaHosts()) {
        {
          oprot.writeI32(struct.replicaHosts.size());
          for (String _iter20 : struct.replicaHosts)
          {
            oprot.writeString(_iter20);
          }
        }
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetInterval()) {
        oprot.writeI32(struct.interval);
      }
      if (struct.isSetCurrentConnections()) {
        oprot.writeI32(struct.currentConnections);
      }
      if (struct.isSetAvailableConnections()) {
        oprot.writeI32(struct.availableConnections);
      }
      if (struct.isSetResidentMem()) {
        oprot.writeI64(struct.residentMem);
      }
      if (struct.isSetReadLocks()) {
        oprot.writeI32(struct.readLocks);
      }
      if (struct.isSetWriteLocks()) {
        oprot.writeI32(struct.writeLocks);
      }
      if (struct.isSetIndexHits()) {
        oprot.writeI32(struct.indexHits);
      }
      if (struct.isSetIndexMisses()) {
        oprot.writeI32(struct.indexMisses);
      }
      if (struct.isSetTotalNetworkBytesIn()) {
        oprot.writeI64(struct.totalNetworkBytesIn);
      }
      if (struct.isSetTotalNetworkBytesOut()) {
        oprot.writeI64(struct.totalNetworkBytesOut);
      }
      if (struct.isSetInsertCounter()) {
        oprot.writeI64(struct.insertCounter);
      }
      if (struct.isSetQueryCounter()) {
        oprot.writeI64(struct.queryCounter);
      }
      if (struct.isSetUpdateCounter()) {
        oprot.writeI64(struct.updateCounter);
      }
      if (struct.isSetDeleteCounter()) {
        oprot.writeI64(struct.deleteCounter);
      }
      if (struct.isSetPageFaults()) {
        oprot.writeI64(struct.pageFaults);
      }
      if (struct.isSetFlag()) {
        oprot.writeString(struct.flag);
      }
      if (struct.isSetHost()) {
        oprot.writeString(struct.host);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MongoDBClusterEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.replicaSetName = iprot.readString();
        struct.setReplicaSetNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.replicaHosts = new java.util.ArrayList<String>(_list21.size);
          String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.replicaHosts.add(_elem22);
          }
        }
        struct.setReplicaHostsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.interval = iprot.readI32();
        struct.setIntervalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.currentConnections = iprot.readI32();
        struct.setCurrentConnectionsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.availableConnections = iprot.readI32();
        struct.setAvailableConnectionsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.residentMem = iprot.readI64();
        struct.setResidentMemIsSet(true);
      }
      if (incoming.get(7)) {
        struct.readLocks = iprot.readI32();
        struct.setReadLocksIsSet(true);
      }
      if (incoming.get(8)) {
        struct.writeLocks = iprot.readI32();
        struct.setWriteLocksIsSet(true);
      }
      if (incoming.get(9)) {
        struct.indexHits = iprot.readI32();
        struct.setIndexHitsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.indexMisses = iprot.readI32();
        struct.setIndexMissesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.totalNetworkBytesIn = iprot.readI64();
        struct.setTotalNetworkBytesInIsSet(true);
      }
      if (incoming.get(12)) {
        struct.totalNetworkBytesOut = iprot.readI64();
        struct.setTotalNetworkBytesOutIsSet(true);
      }
      if (incoming.get(13)) {
        struct.insertCounter = iprot.readI64();
        struct.setInsertCounterIsSet(true);
      }
      if (incoming.get(14)) {
        struct.queryCounter = iprot.readI64();
        struct.setQueryCounterIsSet(true);
      }
      if (incoming.get(15)) {
        struct.updateCounter = iprot.readI64();
        struct.setUpdateCounterIsSet(true);
      }
      if (incoming.get(16)) {
        struct.deleteCounter = iprot.readI64();
        struct.setDeleteCounterIsSet(true);
      }
      if (incoming.get(17)) {
        struct.pageFaults = iprot.readI64();
        struct.setPageFaultsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.flag = iprot.readString();
        struct.setFlagIsSet(true);
      }
      if (incoming.get(19)) {
        struct.host = iprot.readString();
        struct.setHostIsSet(true);
      }
      if (incoming.get(20)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

