/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class KafkaClientNodeNetworkEntities implements org.apache.thrift.TBase<KafkaClientNodeNetworkEntities, KafkaClientNodeNetworkEntities._Fields>, java.io.Serializable, Cloneable, Comparable<KafkaClientNodeNetworkEntities> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KafkaClientNodeNetworkEntities");

  private static final org.apache.thrift.protocol.TField CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONNECTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("connectionId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INCOMING_BYTE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("incomingByteRate", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField OUTGOING_BYTE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("outgoingByteRate", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField REQUEST_LATENCY_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("requestLatencyAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField REQUEST_LATENCY_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("requestLatencyMax", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField REQUEST_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestRate", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField REQUEST_SIZE_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("requestSizeAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField REQUEST_SIZE_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("requestSizeMax", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField RESPONSE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("responseRate", org.apache.thrift.protocol.TType.DOUBLE, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KafkaClientNodeNetworkEntitiesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KafkaClientNodeNetworkEntitiesTupleSchemeFactory();

  public String cluster; // required
  public String clientId; // required
  public String connectionId; // required
  public double incomingByteRate; // required
  public double outgoingByteRate; // required
  public double requestLatencyAvg; // required
  public double requestLatencyMax; // required
  public double requestRate; // required
  public double requestSizeAvg; // required
  public double requestSizeMax; // required
  public double responseRate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLUSTER((short)1, "cluster"),
    CLIENT_ID((short)2, "clientId"),
    CONNECTION_ID((short)3, "connectionId"),
    INCOMING_BYTE_RATE((short)4, "incomingByteRate"),
    OUTGOING_BYTE_RATE((short)5, "outgoingByteRate"),
    REQUEST_LATENCY_AVG((short)6, "requestLatencyAvg"),
    REQUEST_LATENCY_MAX((short)7, "requestLatencyMax"),
    REQUEST_RATE((short)8, "requestRate"),
    REQUEST_SIZE_AVG((short)9, "requestSizeAvg"),
    REQUEST_SIZE_MAX((short)10, "requestSizeMax"),
    RESPONSE_RATE((short)11, "responseRate");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLUSTER
          return CLUSTER;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // CONNECTION_ID
          return CONNECTION_ID;
        case 4: // INCOMING_BYTE_RATE
          return INCOMING_BYTE_RATE;
        case 5: // OUTGOING_BYTE_RATE
          return OUTGOING_BYTE_RATE;
        case 6: // REQUEST_LATENCY_AVG
          return REQUEST_LATENCY_AVG;
        case 7: // REQUEST_LATENCY_MAX
          return REQUEST_LATENCY_MAX;
        case 8: // REQUEST_RATE
          return REQUEST_RATE;
        case 9: // REQUEST_SIZE_AVG
          return REQUEST_SIZE_AVG;
        case 10: // REQUEST_SIZE_MAX
          return REQUEST_SIZE_MAX;
        case 11: // RESPONSE_RATE
          return RESPONSE_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INCOMINGBYTERATE_ISSET_ID = 0;
  private static final int __OUTGOINGBYTERATE_ISSET_ID = 1;
  private static final int __REQUESTLATENCYAVG_ISSET_ID = 2;
  private static final int __REQUESTLATENCYMAX_ISSET_ID = 3;
  private static final int __REQUESTRATE_ISSET_ID = 4;
  private static final int __REQUESTSIZEAVG_ISSET_ID = 5;
  private static final int __REQUESTSIZEMAX_ISSET_ID = 6;
  private static final int __RESPONSERATE_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("cluster", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONNECTION_ID, new org.apache.thrift.meta_data.FieldMetaData("connectionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INCOMING_BYTE_RATE, new org.apache.thrift.meta_data.FieldMetaData("incomingByteRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OUTGOING_BYTE_RATE, new org.apache.thrift.meta_data.FieldMetaData("outgoingByteRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_LATENCY_AVG, new org.apache.thrift.meta_data.FieldMetaData("requestLatencyAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_LATENCY_MAX, new org.apache.thrift.meta_data.FieldMetaData("requestLatencyMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_RATE, new org.apache.thrift.meta_data.FieldMetaData("requestRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_SIZE_AVG, new org.apache.thrift.meta_data.FieldMetaData("requestSizeAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_SIZE_MAX, new org.apache.thrift.meta_data.FieldMetaData("requestSizeMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RESPONSE_RATE, new org.apache.thrift.meta_data.FieldMetaData("responseRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KafkaClientNodeNetworkEntities.class, metaDataMap);
  }

  public KafkaClientNodeNetworkEntities() {
  }

  public KafkaClientNodeNetworkEntities(
    String cluster,
    String clientId,
    String connectionId,
    double incomingByteRate,
    double outgoingByteRate,
    double requestLatencyAvg,
    double requestLatencyMax,
    double requestRate,
    double requestSizeAvg,
    double requestSizeMax,
    double responseRate)
  {
    this();
    this.cluster = cluster;
    this.clientId = clientId;
    this.connectionId = connectionId;
    this.incomingByteRate = incomingByteRate;
    setIncomingByteRateIsSet(true);
    this.outgoingByteRate = outgoingByteRate;
    setOutgoingByteRateIsSet(true);
    this.requestLatencyAvg = requestLatencyAvg;
    setRequestLatencyAvgIsSet(true);
    this.requestLatencyMax = requestLatencyMax;
    setRequestLatencyMaxIsSet(true);
    this.requestRate = requestRate;
    setRequestRateIsSet(true);
    this.requestSizeAvg = requestSizeAvg;
    setRequestSizeAvgIsSet(true);
    this.requestSizeMax = requestSizeMax;
    setRequestSizeMaxIsSet(true);
    this.responseRate = responseRate;
    setResponseRateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KafkaClientNodeNetworkEntities(KafkaClientNodeNetworkEntities other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCluster()) {
      this.cluster = other.cluster;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetConnectionId()) {
      this.connectionId = other.connectionId;
    }
    this.incomingByteRate = other.incomingByteRate;
    this.outgoingByteRate = other.outgoingByteRate;
    this.requestLatencyAvg = other.requestLatencyAvg;
    this.requestLatencyMax = other.requestLatencyMax;
    this.requestRate = other.requestRate;
    this.requestSizeAvg = other.requestSizeAvg;
    this.requestSizeMax = other.requestSizeMax;
    this.responseRate = other.responseRate;
  }

  public KafkaClientNodeNetworkEntities deepCopy() {
    return new KafkaClientNodeNetworkEntities(this);
  }

  @Override
  public void clear() {
    this.cluster = null;
    this.clientId = null;
    this.connectionId = null;
    setIncomingByteRateIsSet(false);
    this.incomingByteRate = 0.0;
    setOutgoingByteRateIsSet(false);
    this.outgoingByteRate = 0.0;
    setRequestLatencyAvgIsSet(false);
    this.requestLatencyAvg = 0.0;
    setRequestLatencyMaxIsSet(false);
    this.requestLatencyMax = 0.0;
    setRequestRateIsSet(false);
    this.requestRate = 0.0;
    setRequestSizeAvgIsSet(false);
    this.requestSizeAvg = 0.0;
    setRequestSizeMaxIsSet(false);
    this.requestSizeMax = 0.0;
    setResponseRateIsSet(false);
    this.responseRate = 0.0;
  }

  public String getCluster() {
    return this.cluster;
  }

  public KafkaClientNodeNetworkEntities setCluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

  public void unsetCluster() {
    this.cluster = null;
  }

  /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster() {
    return this.cluster != null;
  }

  public void setClusterIsSet(boolean value) {
    if (!value) {
      this.cluster = null;
    }
  }

  public String getClientId() {
    return this.clientId;
  }

  public KafkaClientNodeNetworkEntities setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  public String getConnectionId() {
    return this.connectionId;
  }

  public KafkaClientNodeNetworkEntities setConnectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

  public void unsetConnectionId() {
    this.connectionId = null;
  }

  /** Returns true if field connectionId is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectionId() {
    return this.connectionId != null;
  }

  public void setConnectionIdIsSet(boolean value) {
    if (!value) {
      this.connectionId = null;
    }
  }

  public double getIncomingByteRate() {
    return this.incomingByteRate;
  }

  public KafkaClientNodeNetworkEntities setIncomingByteRate(double incomingByteRate) {
    this.incomingByteRate = incomingByteRate;
    setIncomingByteRateIsSet(true);
    return this;
  }

  public void unsetIncomingByteRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INCOMINGBYTERATE_ISSET_ID);
  }

  /** Returns true if field incomingByteRate is set (has been assigned a value) and false otherwise */
  public boolean isSetIncomingByteRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INCOMINGBYTERATE_ISSET_ID);
  }

  public void setIncomingByteRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INCOMINGBYTERATE_ISSET_ID, value);
  }

  public double getOutgoingByteRate() {
    return this.outgoingByteRate;
  }

  public KafkaClientNodeNetworkEntities setOutgoingByteRate(double outgoingByteRate) {
    this.outgoingByteRate = outgoingByteRate;
    setOutgoingByteRateIsSet(true);
    return this;
  }

  public void unsetOutgoingByteRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTGOINGBYTERATE_ISSET_ID);
  }

  /** Returns true if field outgoingByteRate is set (has been assigned a value) and false otherwise */
  public boolean isSetOutgoingByteRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTGOINGBYTERATE_ISSET_ID);
  }

  public void setOutgoingByteRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTGOINGBYTERATE_ISSET_ID, value);
  }

  public double getRequestLatencyAvg() {
    return this.requestLatencyAvg;
  }

  public KafkaClientNodeNetworkEntities setRequestLatencyAvg(double requestLatencyAvg) {
    this.requestLatencyAvg = requestLatencyAvg;
    setRequestLatencyAvgIsSet(true);
    return this;
  }

  public void unsetRequestLatencyAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTLATENCYAVG_ISSET_ID);
  }

  /** Returns true if field requestLatencyAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestLatencyAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTLATENCYAVG_ISSET_ID);
  }

  public void setRequestLatencyAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTLATENCYAVG_ISSET_ID, value);
  }

  public double getRequestLatencyMax() {
    return this.requestLatencyMax;
  }

  public KafkaClientNodeNetworkEntities setRequestLatencyMax(double requestLatencyMax) {
    this.requestLatencyMax = requestLatencyMax;
    setRequestLatencyMaxIsSet(true);
    return this;
  }

  public void unsetRequestLatencyMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTLATENCYMAX_ISSET_ID);
  }

  /** Returns true if field requestLatencyMax is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestLatencyMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTLATENCYMAX_ISSET_ID);
  }

  public void setRequestLatencyMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTLATENCYMAX_ISSET_ID, value);
  }

  public double getRequestRate() {
    return this.requestRate;
  }

  public KafkaClientNodeNetworkEntities setRequestRate(double requestRate) {
    this.requestRate = requestRate;
    setRequestRateIsSet(true);
    return this;
  }

  public void unsetRequestRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTRATE_ISSET_ID);
  }

  /** Returns true if field requestRate is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTRATE_ISSET_ID);
  }

  public void setRequestRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTRATE_ISSET_ID, value);
  }

  public double getRequestSizeAvg() {
    return this.requestSizeAvg;
  }

  public KafkaClientNodeNetworkEntities setRequestSizeAvg(double requestSizeAvg) {
    this.requestSizeAvg = requestSizeAvg;
    setRequestSizeAvgIsSet(true);
    return this;
  }

  public void unsetRequestSizeAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTSIZEAVG_ISSET_ID);
  }

  /** Returns true if field requestSizeAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestSizeAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTSIZEAVG_ISSET_ID);
  }

  public void setRequestSizeAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTSIZEAVG_ISSET_ID, value);
  }

  public double getRequestSizeMax() {
    return this.requestSizeMax;
  }

  public KafkaClientNodeNetworkEntities setRequestSizeMax(double requestSizeMax) {
    this.requestSizeMax = requestSizeMax;
    setRequestSizeMaxIsSet(true);
    return this;
  }

  public void unsetRequestSizeMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTSIZEMAX_ISSET_ID);
  }

  /** Returns true if field requestSizeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestSizeMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTSIZEMAX_ISSET_ID);
  }

  public void setRequestSizeMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTSIZEMAX_ISSET_ID, value);
  }

  public double getResponseRate() {
    return this.responseRate;
  }

  public KafkaClientNodeNetworkEntities setResponseRate(double responseRate) {
    this.responseRate = responseRate;
    setResponseRateIsSet(true);
    return this;
  }

  public void unsetResponseRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSERATE_ISSET_ID);
  }

  /** Returns true if field responseRate is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSERATE_ISSET_ID);
  }

  public void setResponseRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSERATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLUSTER:
      if (value == null) {
        unsetCluster();
      } else {
        setCluster((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case CONNECTION_ID:
      if (value == null) {
        unsetConnectionId();
      } else {
        setConnectionId((String)value);
      }
      break;

    case INCOMING_BYTE_RATE:
      if (value == null) {
        unsetIncomingByteRate();
      } else {
        setIncomingByteRate((Double)value);
      }
      break;

    case OUTGOING_BYTE_RATE:
      if (value == null) {
        unsetOutgoingByteRate();
      } else {
        setOutgoingByteRate((Double)value);
      }
      break;

    case REQUEST_LATENCY_AVG:
      if (value == null) {
        unsetRequestLatencyAvg();
      } else {
        setRequestLatencyAvg((Double)value);
      }
      break;

    case REQUEST_LATENCY_MAX:
      if (value == null) {
        unsetRequestLatencyMax();
      } else {
        setRequestLatencyMax((Double)value);
      }
      break;

    case REQUEST_RATE:
      if (value == null) {
        unsetRequestRate();
      } else {
        setRequestRate((Double)value);
      }
      break;

    case REQUEST_SIZE_AVG:
      if (value == null) {
        unsetRequestSizeAvg();
      } else {
        setRequestSizeAvg((Double)value);
      }
      break;

    case REQUEST_SIZE_MAX:
      if (value == null) {
        unsetRequestSizeMax();
      } else {
        setRequestSizeMax((Double)value);
      }
      break;

    case RESPONSE_RATE:
      if (value == null) {
        unsetResponseRate();
      } else {
        setResponseRate((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLUSTER:
      return getCluster();

    case CLIENT_ID:
      return getClientId();

    case CONNECTION_ID:
      return getConnectionId();

    case INCOMING_BYTE_RATE:
      return getIncomingByteRate();

    case OUTGOING_BYTE_RATE:
      return getOutgoingByteRate();

    case REQUEST_LATENCY_AVG:
      return getRequestLatencyAvg();

    case REQUEST_LATENCY_MAX:
      return getRequestLatencyMax();

    case REQUEST_RATE:
      return getRequestRate();

    case REQUEST_SIZE_AVG:
      return getRequestSizeAvg();

    case REQUEST_SIZE_MAX:
      return getRequestSizeMax();

    case RESPONSE_RATE:
      return getResponseRate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLUSTER:
      return isSetCluster();
    case CLIENT_ID:
      return isSetClientId();
    case CONNECTION_ID:
      return isSetConnectionId();
    case INCOMING_BYTE_RATE:
      return isSetIncomingByteRate();
    case OUTGOING_BYTE_RATE:
      return isSetOutgoingByteRate();
    case REQUEST_LATENCY_AVG:
      return isSetRequestLatencyAvg();
    case REQUEST_LATENCY_MAX:
      return isSetRequestLatencyMax();
    case REQUEST_RATE:
      return isSetRequestRate();
    case REQUEST_SIZE_AVG:
      return isSetRequestSizeAvg();
    case REQUEST_SIZE_MAX:
      return isSetRequestSizeMax();
    case RESPONSE_RATE:
      return isSetResponseRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KafkaClientNodeNetworkEntities)
      return this.equals((KafkaClientNodeNetworkEntities)that);
    return false;
  }

  public boolean equals(KafkaClientNodeNetworkEntities that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cluster = true && this.isSetCluster();
    boolean that_present_cluster = true && that.isSetCluster();
    if (this_present_cluster || that_present_cluster) {
      if (!(this_present_cluster && that_present_cluster))
        return false;
      if (!this.cluster.equals(that.cluster))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_connectionId = true && this.isSetConnectionId();
    boolean that_present_connectionId = true && that.isSetConnectionId();
    if (this_present_connectionId || that_present_connectionId) {
      if (!(this_present_connectionId && that_present_connectionId))
        return false;
      if (!this.connectionId.equals(that.connectionId))
        return false;
    }

    boolean this_present_incomingByteRate = true;
    boolean that_present_incomingByteRate = true;
    if (this_present_incomingByteRate || that_present_incomingByteRate) {
      if (!(this_present_incomingByteRate && that_present_incomingByteRate))
        return false;
      if (this.incomingByteRate != that.incomingByteRate)
        return false;
    }

    boolean this_present_outgoingByteRate = true;
    boolean that_present_outgoingByteRate = true;
    if (this_present_outgoingByteRate || that_present_outgoingByteRate) {
      if (!(this_present_outgoingByteRate && that_present_outgoingByteRate))
        return false;
      if (this.outgoingByteRate != that.outgoingByteRate)
        return false;
    }

    boolean this_present_requestLatencyAvg = true;
    boolean that_present_requestLatencyAvg = true;
    if (this_present_requestLatencyAvg || that_present_requestLatencyAvg) {
      if (!(this_present_requestLatencyAvg && that_present_requestLatencyAvg))
        return false;
      if (this.requestLatencyAvg != that.requestLatencyAvg)
        return false;
    }

    boolean this_present_requestLatencyMax = true;
    boolean that_present_requestLatencyMax = true;
    if (this_present_requestLatencyMax || that_present_requestLatencyMax) {
      if (!(this_present_requestLatencyMax && that_present_requestLatencyMax))
        return false;
      if (this.requestLatencyMax != that.requestLatencyMax)
        return false;
    }

    boolean this_present_requestRate = true;
    boolean that_present_requestRate = true;
    if (this_present_requestRate || that_present_requestRate) {
      if (!(this_present_requestRate && that_present_requestRate))
        return false;
      if (this.requestRate != that.requestRate)
        return false;
    }

    boolean this_present_requestSizeAvg = true;
    boolean that_present_requestSizeAvg = true;
    if (this_present_requestSizeAvg || that_present_requestSizeAvg) {
      if (!(this_present_requestSizeAvg && that_present_requestSizeAvg))
        return false;
      if (this.requestSizeAvg != that.requestSizeAvg)
        return false;
    }

    boolean this_present_requestSizeMax = true;
    boolean that_present_requestSizeMax = true;
    if (this_present_requestSizeMax || that_present_requestSizeMax) {
      if (!(this_present_requestSizeMax && that_present_requestSizeMax))
        return false;
      if (this.requestSizeMax != that.requestSizeMax)
        return false;
    }

    boolean this_present_responseRate = true;
    boolean that_present_responseRate = true;
    if (this_present_responseRate || that_present_responseRate) {
      if (!(this_present_responseRate && that_present_responseRate))
        return false;
      if (this.responseRate != that.responseRate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCluster()) ? 131071 : 524287);
    if (isSetCluster())
      hashCode = hashCode * 8191 + cluster.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientId()) ? 131071 : 524287);
    if (isSetClientId())
      hashCode = hashCode * 8191 + clientId.hashCode();

    hashCode = hashCode * 8191 + ((isSetConnectionId()) ? 131071 : 524287);
    if (isSetConnectionId())
      hashCode = hashCode * 8191 + connectionId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(incomingByteRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outgoingByteRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestLatencyAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestLatencyMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestSizeAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestSizeMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseRate);

    return hashCode;
  }

  @Override
  public int compareTo(KafkaClientNodeNetworkEntities other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCluster()).compareTo(other.isSetCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster, other.cluster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnectionId()).compareTo(other.isSetConnectionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectionId, other.connectionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncomingByteRate()).compareTo(other.isSetIncomingByteRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncomingByteRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomingByteRate, other.incomingByteRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutgoingByteRate()).compareTo(other.isSetOutgoingByteRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutgoingByteRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outgoingByteRate, other.outgoingByteRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestLatencyAvg()).compareTo(other.isSetRequestLatencyAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestLatencyAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestLatencyAvg, other.requestLatencyAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestLatencyMax()).compareTo(other.isSetRequestLatencyMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestLatencyMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestLatencyMax, other.requestLatencyMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestRate()).compareTo(other.isSetRequestRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestRate, other.requestRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestSizeAvg()).compareTo(other.isSetRequestSizeAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestSizeAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestSizeAvg, other.requestSizeAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestSizeMax()).compareTo(other.isSetRequestSizeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestSizeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestSizeMax, other.requestSizeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseRate()).compareTo(other.isSetResponseRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseRate, other.responseRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KafkaClientNodeNetworkEntities(");
    boolean first = true;

    sb.append("cluster:");
    if (this.cluster == null) {
      sb.append("null");
    } else {
      sb.append(this.cluster);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("connectionId:");
    if (this.connectionId == null) {
      sb.append("null");
    } else {
      sb.append(this.connectionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("incomingByteRate:");
    sb.append(this.incomingByteRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outgoingByteRate:");
    sb.append(this.outgoingByteRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestLatencyAvg:");
    sb.append(this.requestLatencyAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestLatencyMax:");
    sb.append(this.requestLatencyMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestRate:");
    sb.append(this.requestRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestSizeAvg:");
    sb.append(this.requestSizeAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestSizeMax:");
    sb.append(this.requestSizeMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseRate:");
    sb.append(this.responseRate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KafkaClientNodeNetworkEntitiesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaClientNodeNetworkEntitiesStandardScheme getScheme() {
      return new KafkaClientNodeNetworkEntitiesStandardScheme();
    }
  }

  private static class KafkaClientNodeNetworkEntitiesStandardScheme extends org.apache.thrift.scheme.StandardScheme<KafkaClientNodeNetworkEntities> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KafkaClientNodeNetworkEntities struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLUSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cluster = iprot.readString();
              struct.setClusterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONNECTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.connectionId = iprot.readString();
              struct.setConnectionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INCOMING_BYTE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.incomingByteRate = iprot.readDouble();
              struct.setIncomingByteRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OUTGOING_BYTE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.outgoingByteRate = iprot.readDouble();
              struct.setOutgoingByteRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQUEST_LATENCY_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requestLatencyAvg = iprot.readDouble();
              struct.setRequestLatencyAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REQUEST_LATENCY_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requestLatencyMax = iprot.readDouble();
              struct.setRequestLatencyMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REQUEST_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requestRate = iprot.readDouble();
              struct.setRequestRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REQUEST_SIZE_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requestSizeAvg = iprot.readDouble();
              struct.setRequestSizeAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REQUEST_SIZE_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requestSizeMax = iprot.readDouble();
              struct.setRequestSizeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RESPONSE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.responseRate = iprot.readDouble();
              struct.setResponseRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KafkaClientNodeNetworkEntities struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cluster != null) {
        oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
        oprot.writeString(struct.cluster);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.connectionId != null) {
        oprot.writeFieldBegin(CONNECTION_ID_FIELD_DESC);
        oprot.writeString(struct.connectionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INCOMING_BYTE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.incomingByteRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUTGOING_BYTE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.outgoingByteRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_LATENCY_AVG_FIELD_DESC);
      oprot.writeDouble(struct.requestLatencyAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_LATENCY_MAX_FIELD_DESC);
      oprot.writeDouble(struct.requestLatencyMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_RATE_FIELD_DESC);
      oprot.writeDouble(struct.requestRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_SIZE_AVG_FIELD_DESC);
      oprot.writeDouble(struct.requestSizeAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_SIZE_MAX_FIELD_DESC);
      oprot.writeDouble(struct.requestSizeMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESPONSE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.responseRate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KafkaClientNodeNetworkEntitiesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaClientNodeNetworkEntitiesTupleScheme getScheme() {
      return new KafkaClientNodeNetworkEntitiesTupleScheme();
    }
  }

  private static class KafkaClientNodeNetworkEntitiesTupleScheme extends org.apache.thrift.scheme.TupleScheme<KafkaClientNodeNetworkEntities> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KafkaClientNodeNetworkEntities struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCluster()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetConnectionId()) {
        optionals.set(2);
      }
      if (struct.isSetIncomingByteRate()) {
        optionals.set(3);
      }
      if (struct.isSetOutgoingByteRate()) {
        optionals.set(4);
      }
      if (struct.isSetRequestLatencyAvg()) {
        optionals.set(5);
      }
      if (struct.isSetRequestLatencyMax()) {
        optionals.set(6);
      }
      if (struct.isSetRequestRate()) {
        optionals.set(7);
      }
      if (struct.isSetRequestSizeAvg()) {
        optionals.set(8);
      }
      if (struct.isSetRequestSizeMax()) {
        optionals.set(9);
      }
      if (struct.isSetResponseRate()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetCluster()) {
        oprot.writeString(struct.cluster);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetConnectionId()) {
        oprot.writeString(struct.connectionId);
      }
      if (struct.isSetIncomingByteRate()) {
        oprot.writeDouble(struct.incomingByteRate);
      }
      if (struct.isSetOutgoingByteRate()) {
        oprot.writeDouble(struct.outgoingByteRate);
      }
      if (struct.isSetRequestLatencyAvg()) {
        oprot.writeDouble(struct.requestLatencyAvg);
      }
      if (struct.isSetRequestLatencyMax()) {
        oprot.writeDouble(struct.requestLatencyMax);
      }
      if (struct.isSetRequestRate()) {
        oprot.writeDouble(struct.requestRate);
      }
      if (struct.isSetRequestSizeAvg()) {
        oprot.writeDouble(struct.requestSizeAvg);
      }
      if (struct.isSetRequestSizeMax()) {
        oprot.writeDouble(struct.requestSizeMax);
      }
      if (struct.isSetResponseRate()) {
        oprot.writeDouble(struct.responseRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KafkaClientNodeNetworkEntities struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.cluster = iprot.readString();
        struct.setClusterIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.connectionId = iprot.readString();
        struct.setConnectionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.incomingByteRate = iprot.readDouble();
        struct.setIncomingByteRateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.outgoingByteRate = iprot.readDouble();
        struct.setOutgoingByteRateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.requestLatencyAvg = iprot.readDouble();
        struct.setRequestLatencyAvgIsSet(true);
      }
      if (incoming.get(6)) {
        struct.requestLatencyMax = iprot.readDouble();
        struct.setRequestLatencyMaxIsSet(true);
      }
      if (incoming.get(7)) {
        struct.requestRate = iprot.readDouble();
        struct.setRequestRateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.requestSizeAvg = iprot.readDouble();
        struct.setRequestSizeAvgIsSet(true);
      }
      if (incoming.get(9)) {
        struct.requestSizeMax = iprot.readDouble();
        struct.setRequestSizeMaxIsSet(true);
      }
      if (incoming.get(10)) {
        struct.responseRate = iprot.readDouble();
        struct.setResponseRateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

