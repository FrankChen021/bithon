/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class SqlPerformanceEntity implements org.apache.thrift.TBase<SqlPerformanceEntity, SqlPerformanceEntity._Fields>, java.io.Serializable, Cloneable, Comparable<SqlPerformanceEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SqlPerformanceEntity");

  private static final org.apache.thrift.protocol.TField COST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("costTime", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField FAILURE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("failureCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField QUERY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField UPDATE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateCount", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField HOST_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPort", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SqlPerformanceEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SqlPerformanceEntityTupleSchemeFactory();

  public long costTime; // required
  public int failureCount; // required
  public int total; // required
  public int queryCount; // required
  public int updateCount; // required
  public String hostPort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COST_TIME((short)1, "costTime"),
    FAILURE_COUNT((short)2, "failureCount"),
    TOTAL((short)3, "total"),
    QUERY_COUNT((short)4, "queryCount"),
    UPDATE_COUNT((short)5, "updateCount"),
    HOST_PORT((short)6, "hostPort");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COST_TIME
          return COST_TIME;
        case 2: // FAILURE_COUNT
          return FAILURE_COUNT;
        case 3: // TOTAL
          return TOTAL;
        case 4: // QUERY_COUNT
          return QUERY_COUNT;
        case 5: // UPDATE_COUNT
          return UPDATE_COUNT;
        case 6: // HOST_PORT
          return HOST_PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COSTTIME_ISSET_ID = 0;
  private static final int __FAILURECOUNT_ISSET_ID = 1;
  private static final int __TOTAL_ISSET_ID = 2;
  private static final int __QUERYCOUNT_ISSET_ID = 3;
  private static final int __UPDATECOUNT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COST_TIME, new org.apache.thrift.meta_data.FieldMetaData("costTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FAILURE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("failureCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUERY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("queryCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("updateCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOST_PORT, new org.apache.thrift.meta_data.FieldMetaData("hostPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SqlPerformanceEntity.class, metaDataMap);
  }

  public SqlPerformanceEntity() {
  }

  public SqlPerformanceEntity(
    long costTime,
    int failureCount,
    int total,
    int queryCount,
    int updateCount,
    String hostPort)
  {
    this();
    this.costTime = costTime;
    setCostTimeIsSet(true);
    this.failureCount = failureCount;
    setFailureCountIsSet(true);
    this.total = total;
    setTotalIsSet(true);
    this.queryCount = queryCount;
    setQueryCountIsSet(true);
    this.updateCount = updateCount;
    setUpdateCountIsSet(true);
    this.hostPort = hostPort;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SqlPerformanceEntity(SqlPerformanceEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.costTime = other.costTime;
    this.failureCount = other.failureCount;
    this.total = other.total;
    this.queryCount = other.queryCount;
    this.updateCount = other.updateCount;
    if (other.isSetHostPort()) {
      this.hostPort = other.hostPort;
    }
  }

  public SqlPerformanceEntity deepCopy() {
    return new SqlPerformanceEntity(this);
  }

  @Override
  public void clear() {
    setCostTimeIsSet(false);
    this.costTime = 0;
    setFailureCountIsSet(false);
    this.failureCount = 0;
    setTotalIsSet(false);
    this.total = 0;
    setQueryCountIsSet(false);
    this.queryCount = 0;
    setUpdateCountIsSet(false);
    this.updateCount = 0;
    this.hostPort = null;
  }

  public long getCostTime() {
    return this.costTime;
  }

  public SqlPerformanceEntity setCostTime(long costTime) {
    this.costTime = costTime;
    setCostTimeIsSet(true);
    return this;
  }

  public void unsetCostTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COSTTIME_ISSET_ID);
  }

  /** Returns true if field costTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCostTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COSTTIME_ISSET_ID);
  }

  public void setCostTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COSTTIME_ISSET_ID, value);
  }

  public int getFailureCount() {
    return this.failureCount;
  }

  public SqlPerformanceEntity setFailureCount(int failureCount) {
    this.failureCount = failureCount;
    setFailureCountIsSet(true);
    return this;
  }

  public void unsetFailureCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FAILURECOUNT_ISSET_ID);
  }

  /** Returns true if field failureCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FAILURECOUNT_ISSET_ID);
  }

  public void setFailureCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FAILURECOUNT_ISSET_ID, value);
  }

  public int getTotal() {
    return this.total;
  }

  public SqlPerformanceEntity setTotal(int total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public int getQueryCount() {
    return this.queryCount;
  }

  public SqlPerformanceEntity setQueryCount(int queryCount) {
    this.queryCount = queryCount;
    setQueryCountIsSet(true);
    return this;
  }

  public void unsetQueryCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERYCOUNT_ISSET_ID);
  }

  /** Returns true if field queryCount is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERYCOUNT_ISSET_ID);
  }

  public void setQueryCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERYCOUNT_ISSET_ID, value);
  }

  public int getUpdateCount() {
    return this.updateCount;
  }

  public SqlPerformanceEntity setUpdateCount(int updateCount) {
    this.updateCount = updateCount;
    setUpdateCountIsSet(true);
    return this;
  }

  public void unsetUpdateCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATECOUNT_ISSET_ID);
  }

  /** Returns true if field updateCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATECOUNT_ISSET_ID);
  }

  public void setUpdateCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATECOUNT_ISSET_ID, value);
  }

  public String getHostPort() {
    return this.hostPort;
  }

  public SqlPerformanceEntity setHostPort(String hostPort) {
    this.hostPort = hostPort;
    return this;
  }

  public void unsetHostPort() {
    this.hostPort = null;
  }

  /** Returns true if field hostPort is set (has been assigned a value) and false otherwise */
  public boolean isSetHostPort() {
    return this.hostPort != null;
  }

  public void setHostPortIsSet(boolean value) {
    if (!value) {
      this.hostPort = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COST_TIME:
      if (value == null) {
        unsetCostTime();
      } else {
        setCostTime((Long)value);
      }
      break;

    case FAILURE_COUNT:
      if (value == null) {
        unsetFailureCount();
      } else {
        setFailureCount((Integer)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Integer)value);
      }
      break;

    case QUERY_COUNT:
      if (value == null) {
        unsetQueryCount();
      } else {
        setQueryCount((Integer)value);
      }
      break;

    case UPDATE_COUNT:
      if (value == null) {
        unsetUpdateCount();
      } else {
        setUpdateCount((Integer)value);
      }
      break;

    case HOST_PORT:
      if (value == null) {
        unsetHostPort();
      } else {
        setHostPort((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COST_TIME:
      return getCostTime();

    case FAILURE_COUNT:
      return getFailureCount();

    case TOTAL:
      return getTotal();

    case QUERY_COUNT:
      return getQueryCount();

    case UPDATE_COUNT:
      return getUpdateCount();

    case HOST_PORT:
      return getHostPort();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COST_TIME:
      return isSetCostTime();
    case FAILURE_COUNT:
      return isSetFailureCount();
    case TOTAL:
      return isSetTotal();
    case QUERY_COUNT:
      return isSetQueryCount();
    case UPDATE_COUNT:
      return isSetUpdateCount();
    case HOST_PORT:
      return isSetHostPort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SqlPerformanceEntity)
      return this.equals((SqlPerformanceEntity)that);
    return false;
  }

  public boolean equals(SqlPerformanceEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_costTime = true;
    boolean that_present_costTime = true;
    if (this_present_costTime || that_present_costTime) {
      if (!(this_present_costTime && that_present_costTime))
        return false;
      if (this.costTime != that.costTime)
        return false;
    }

    boolean this_present_failureCount = true;
    boolean that_present_failureCount = true;
    if (this_present_failureCount || that_present_failureCount) {
      if (!(this_present_failureCount && that_present_failureCount))
        return false;
      if (this.failureCount != that.failureCount)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_queryCount = true;
    boolean that_present_queryCount = true;
    if (this_present_queryCount || that_present_queryCount) {
      if (!(this_present_queryCount && that_present_queryCount))
        return false;
      if (this.queryCount != that.queryCount)
        return false;
    }

    boolean this_present_updateCount = true;
    boolean that_present_updateCount = true;
    if (this_present_updateCount || that_present_updateCount) {
      if (!(this_present_updateCount && that_present_updateCount))
        return false;
      if (this.updateCount != that.updateCount)
        return false;
    }

    boolean this_present_hostPort = true && this.isSetHostPort();
    boolean that_present_hostPort = true && that.isSetHostPort();
    if (this_present_hostPort || that_present_hostPort) {
      if (!(this_present_hostPort && that_present_hostPort))
        return false;
      if (!this.hostPort.equals(that.hostPort))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(costTime);

    hashCode = hashCode * 8191 + failureCount;

    hashCode = hashCode * 8191 + total;

    hashCode = hashCode * 8191 + queryCount;

    hashCode = hashCode * 8191 + updateCount;

    hashCode = hashCode * 8191 + ((isSetHostPort()) ? 131071 : 524287);
    if (isSetHostPort())
      hashCode = hashCode * 8191 + hostPort.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SqlPerformanceEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCostTime()).compareTo(other.isSetCostTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costTime, other.costTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailureCount()).compareTo(other.isSetFailureCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failureCount, other.failureCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryCount()).compareTo(other.isSetQueryCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryCount, other.queryCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateCount()).compareTo(other.isSetUpdateCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateCount, other.updateCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostPort()).compareTo(other.isSetHostPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPort, other.hostPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SqlPerformanceEntity(");
    boolean first = true;

    sb.append("costTime:");
    sb.append(this.costTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failureCount:");
    sb.append(this.failureCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryCount:");
    sb.append(this.queryCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateCount:");
    sb.append(this.updateCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostPort:");
    if (this.hostPort == null) {
      sb.append("null");
    } else {
      sb.append(this.hostPort);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SqlPerformanceEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SqlPerformanceEntityStandardScheme getScheme() {
      return new SqlPerformanceEntityStandardScheme();
    }
  }

  private static class SqlPerformanceEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<SqlPerformanceEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SqlPerformanceEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.costTime = iprot.readI64();
              struct.setCostTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FAILURE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.failureCount = iprot.readI32();
              struct.setFailureCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total = iprot.readI32();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUERY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queryCount = iprot.readI32();
              struct.setQueryCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPDATE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateCount = iprot.readI32();
              struct.setUpdateCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HOST_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostPort = iprot.readString();
              struct.setHostPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SqlPerformanceEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COST_TIME_FIELD_DESC);
      oprot.writeI64(struct.costTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAILURE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.failureCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeI32(struct.total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUERY_COUNT_FIELD_DESC);
      oprot.writeI32(struct.queryCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.updateCount);
      oprot.writeFieldEnd();
      if (struct.hostPort != null) {
        oprot.writeFieldBegin(HOST_PORT_FIELD_DESC);
        oprot.writeString(struct.hostPort);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SqlPerformanceEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SqlPerformanceEntityTupleScheme getScheme() {
      return new SqlPerformanceEntityTupleScheme();
    }
  }

  private static class SqlPerformanceEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<SqlPerformanceEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SqlPerformanceEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCostTime()) {
        optionals.set(0);
      }
      if (struct.isSetFailureCount()) {
        optionals.set(1);
      }
      if (struct.isSetTotal()) {
        optionals.set(2);
      }
      if (struct.isSetQueryCount()) {
        optionals.set(3);
      }
      if (struct.isSetUpdateCount()) {
        optionals.set(4);
      }
      if (struct.isSetHostPort()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetCostTime()) {
        oprot.writeI64(struct.costTime);
      }
      if (struct.isSetFailureCount()) {
        oprot.writeI32(struct.failureCount);
      }
      if (struct.isSetTotal()) {
        oprot.writeI32(struct.total);
      }
      if (struct.isSetQueryCount()) {
        oprot.writeI32(struct.queryCount);
      }
      if (struct.isSetUpdateCount()) {
        oprot.writeI32(struct.updateCount);
      }
      if (struct.isSetHostPort()) {
        oprot.writeString(struct.hostPort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SqlPerformanceEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.costTime = iprot.readI64();
        struct.setCostTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.failureCount = iprot.readI32();
        struct.setFailureCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.total = iprot.readI32();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.queryCount = iprot.readI32();
        struct.setQueryCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.updateCount = iprot.readI32();
        struct.setUpdateCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.hostPort = iprot.readString();
        struct.setHostPortIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

