/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class JdbcSqlStatEntity implements org.apache.thrift.TBase<JdbcSqlStatEntity, JdbcSqlStatEntity._Fields>, java.io.Serializable, Cloneable, Comparable<JdbcSqlStatEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JdbcSqlStatEntity");

  private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXECUTE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("executeCount", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField EXECUTE_ERROR_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("executeErrorCount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("totalTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_TIMESPAN_FIELD_DESC = new org.apache.thrift.protocol.TField("maxTimespan", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField EFFECT_ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("effectRowCount", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField FETCH_ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchRowCount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField BATCH_SIZE_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("batchSizeMax", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField BATCH_SIZE_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("batchSizeTotal", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField CONCURRENT_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("concurrentMax", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JdbcSqlStatEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JdbcSqlStatEntityTupleSchemeFactory();

  public String sql; // required
  public long executeCount; // required
  public long executeErrorCount; // required
  public long totalTime; // required
  public long lastTime; // required
  public long maxTimespan; // required
  public long effectRowCount; // required
  public long fetchRowCount; // required
  public long batchSizeMax; // required
  public long batchSizeTotal; // required
  public long concurrentMax; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SQL((short)1, "sql"),
    EXECUTE_COUNT((short)2, "executeCount"),
    EXECUTE_ERROR_COUNT((short)3, "executeErrorCount"),
    TOTAL_TIME((short)4, "totalTime"),
    LAST_TIME((short)5, "lastTime"),
    MAX_TIMESPAN((short)6, "maxTimespan"),
    EFFECT_ROW_COUNT((short)7, "effectRowCount"),
    FETCH_ROW_COUNT((short)8, "fetchRowCount"),
    BATCH_SIZE_MAX((short)9, "batchSizeMax"),
    BATCH_SIZE_TOTAL((short)10, "batchSizeTotal"),
    CONCURRENT_MAX((short)11, "concurrentMax");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SQL
          return SQL;
        case 2: // EXECUTE_COUNT
          return EXECUTE_COUNT;
        case 3: // EXECUTE_ERROR_COUNT
          return EXECUTE_ERROR_COUNT;
        case 4: // TOTAL_TIME
          return TOTAL_TIME;
        case 5: // LAST_TIME
          return LAST_TIME;
        case 6: // MAX_TIMESPAN
          return MAX_TIMESPAN;
        case 7: // EFFECT_ROW_COUNT
          return EFFECT_ROW_COUNT;
        case 8: // FETCH_ROW_COUNT
          return FETCH_ROW_COUNT;
        case 9: // BATCH_SIZE_MAX
          return BATCH_SIZE_MAX;
        case 10: // BATCH_SIZE_TOTAL
          return BATCH_SIZE_TOTAL;
        case 11: // CONCURRENT_MAX
          return CONCURRENT_MAX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECUTECOUNT_ISSET_ID = 0;
  private static final int __EXECUTEERRORCOUNT_ISSET_ID = 1;
  private static final int __TOTALTIME_ISSET_ID = 2;
  private static final int __LASTTIME_ISSET_ID = 3;
  private static final int __MAXTIMESPAN_ISSET_ID = 4;
  private static final int __EFFECTROWCOUNT_ISSET_ID = 5;
  private static final int __FETCHROWCOUNT_ISSET_ID = 6;
  private static final int __BATCHSIZEMAX_ISSET_ID = 7;
  private static final int __BATCHSIZETOTAL_ISSET_ID = 8;
  private static final int __CONCURRENTMAX_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("executeCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXECUTE_ERROR_COUNT, new org.apache.thrift.meta_data.FieldMetaData("executeErrorCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("totalTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_TIMESPAN, new org.apache.thrift.meta_data.FieldMetaData("maxTimespan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EFFECT_ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("effectRowCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FETCH_ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("fetchRowCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BATCH_SIZE_MAX, new org.apache.thrift.meta_data.FieldMetaData("batchSizeMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BATCH_SIZE_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("batchSizeTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONCURRENT_MAX, new org.apache.thrift.meta_data.FieldMetaData("concurrentMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JdbcSqlStatEntity.class, metaDataMap);
  }

  public JdbcSqlStatEntity() {
  }

  public JdbcSqlStatEntity(
    String sql,
    long executeCount,
    long executeErrorCount,
    long totalTime,
    long lastTime,
    long maxTimespan,
    long effectRowCount,
    long fetchRowCount,
    long batchSizeMax,
    long batchSizeTotal,
    long concurrentMax)
  {
    this();
    this.sql = sql;
    this.executeCount = executeCount;
    setExecuteCountIsSet(true);
    this.executeErrorCount = executeErrorCount;
    setExecuteErrorCountIsSet(true);
    this.totalTime = totalTime;
    setTotalTimeIsSet(true);
    this.lastTime = lastTime;
    setLastTimeIsSet(true);
    this.maxTimespan = maxTimespan;
    setMaxTimespanIsSet(true);
    this.effectRowCount = effectRowCount;
    setEffectRowCountIsSet(true);
    this.fetchRowCount = fetchRowCount;
    setFetchRowCountIsSet(true);
    this.batchSizeMax = batchSizeMax;
    setBatchSizeMaxIsSet(true);
    this.batchSizeTotal = batchSizeTotal;
    setBatchSizeTotalIsSet(true);
    this.concurrentMax = concurrentMax;
    setConcurrentMaxIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JdbcSqlStatEntity(JdbcSqlStatEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSql()) {
      this.sql = other.sql;
    }
    this.executeCount = other.executeCount;
    this.executeErrorCount = other.executeErrorCount;
    this.totalTime = other.totalTime;
    this.lastTime = other.lastTime;
    this.maxTimespan = other.maxTimespan;
    this.effectRowCount = other.effectRowCount;
    this.fetchRowCount = other.fetchRowCount;
    this.batchSizeMax = other.batchSizeMax;
    this.batchSizeTotal = other.batchSizeTotal;
    this.concurrentMax = other.concurrentMax;
  }

  public JdbcSqlStatEntity deepCopy() {
    return new JdbcSqlStatEntity(this);
  }

  @Override
  public void clear() {
    this.sql = null;
    setExecuteCountIsSet(false);
    this.executeCount = 0;
    setExecuteErrorCountIsSet(false);
    this.executeErrorCount = 0;
    setTotalTimeIsSet(false);
    this.totalTime = 0;
    setLastTimeIsSet(false);
    this.lastTime = 0;
    setMaxTimespanIsSet(false);
    this.maxTimespan = 0;
    setEffectRowCountIsSet(false);
    this.effectRowCount = 0;
    setFetchRowCountIsSet(false);
    this.fetchRowCount = 0;
    setBatchSizeMaxIsSet(false);
    this.batchSizeMax = 0;
    setBatchSizeTotalIsSet(false);
    this.batchSizeTotal = 0;
    setConcurrentMaxIsSet(false);
    this.concurrentMax = 0;
  }

  public String getSql() {
    return this.sql;
  }

  public JdbcSqlStatEntity setSql(String sql) {
    this.sql = sql;
    return this;
  }

  public void unsetSql() {
    this.sql = null;
  }

  /** Returns true if field sql is set (has been assigned a value) and false otherwise */
  public boolean isSetSql() {
    return this.sql != null;
  }

  public void setSqlIsSet(boolean value) {
    if (!value) {
      this.sql = null;
    }
  }

  public long getExecuteCount() {
    return this.executeCount;
  }

  public JdbcSqlStatEntity setExecuteCount(long executeCount) {
    this.executeCount = executeCount;
    setExecuteCountIsSet(true);
    return this;
  }

  public void unsetExecuteCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXECUTECOUNT_ISSET_ID);
  }

  /** Returns true if field executeCount is set (has been assigned a value) and false otherwise */
  public boolean isSetExecuteCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXECUTECOUNT_ISSET_ID);
  }

  public void setExecuteCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXECUTECOUNT_ISSET_ID, value);
  }

  public long getExecuteErrorCount() {
    return this.executeErrorCount;
  }

  public JdbcSqlStatEntity setExecuteErrorCount(long executeErrorCount) {
    this.executeErrorCount = executeErrorCount;
    setExecuteErrorCountIsSet(true);
    return this;
  }

  public void unsetExecuteErrorCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXECUTEERRORCOUNT_ISSET_ID);
  }

  /** Returns true if field executeErrorCount is set (has been assigned a value) and false otherwise */
  public boolean isSetExecuteErrorCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXECUTEERRORCOUNT_ISSET_ID);
  }

  public void setExecuteErrorCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXECUTEERRORCOUNT_ISSET_ID, value);
  }

  public long getTotalTime() {
    return this.totalTime;
  }

  public JdbcSqlStatEntity setTotalTime(long totalTime) {
    this.totalTime = totalTime;
    setTotalTimeIsSet(true);
    return this;
  }

  public void unsetTotalTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALTIME_ISSET_ID);
  }

  /** Returns true if field totalTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALTIME_ISSET_ID);
  }

  public void setTotalTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALTIME_ISSET_ID, value);
  }

  public long getLastTime() {
    return this.lastTime;
  }

  public JdbcSqlStatEntity setLastTime(long lastTime) {
    this.lastTime = lastTime;
    setLastTimeIsSet(true);
    return this;
  }

  public void unsetLastTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTTIME_ISSET_ID);
  }

  /** Returns true if field lastTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTTIME_ISSET_ID);
  }

  public void setLastTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTTIME_ISSET_ID, value);
  }

  public long getMaxTimespan() {
    return this.maxTimespan;
  }

  public JdbcSqlStatEntity setMaxTimespan(long maxTimespan) {
    this.maxTimespan = maxTimespan;
    setMaxTimespanIsSet(true);
    return this;
  }

  public void unsetMaxTimespan() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXTIMESPAN_ISSET_ID);
  }

  /** Returns true if field maxTimespan is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxTimespan() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXTIMESPAN_ISSET_ID);
  }

  public void setMaxTimespanIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXTIMESPAN_ISSET_ID, value);
  }

  public long getEffectRowCount() {
    return this.effectRowCount;
  }

  public JdbcSqlStatEntity setEffectRowCount(long effectRowCount) {
    this.effectRowCount = effectRowCount;
    setEffectRowCountIsSet(true);
    return this;
  }

  public void unsetEffectRowCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EFFECTROWCOUNT_ISSET_ID);
  }

  /** Returns true if field effectRowCount is set (has been assigned a value) and false otherwise */
  public boolean isSetEffectRowCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EFFECTROWCOUNT_ISSET_ID);
  }

  public void setEffectRowCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EFFECTROWCOUNT_ISSET_ID, value);
  }

  public long getFetchRowCount() {
    return this.fetchRowCount;
  }

  public JdbcSqlStatEntity setFetchRowCount(long fetchRowCount) {
    this.fetchRowCount = fetchRowCount;
    setFetchRowCountIsSet(true);
    return this;
  }

  public void unsetFetchRowCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FETCHROWCOUNT_ISSET_ID);
  }

  /** Returns true if field fetchRowCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchRowCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FETCHROWCOUNT_ISSET_ID);
  }

  public void setFetchRowCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FETCHROWCOUNT_ISSET_ID, value);
  }

  public long getBatchSizeMax() {
    return this.batchSizeMax;
  }

  public JdbcSqlStatEntity setBatchSizeMax(long batchSizeMax) {
    this.batchSizeMax = batchSizeMax;
    setBatchSizeMaxIsSet(true);
    return this;
  }

  public void unsetBatchSizeMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BATCHSIZEMAX_ISSET_ID);
  }

  /** Returns true if field batchSizeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchSizeMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BATCHSIZEMAX_ISSET_ID);
  }

  public void setBatchSizeMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BATCHSIZEMAX_ISSET_ID, value);
  }

  public long getBatchSizeTotal() {
    return this.batchSizeTotal;
  }

  public JdbcSqlStatEntity setBatchSizeTotal(long batchSizeTotal) {
    this.batchSizeTotal = batchSizeTotal;
    setBatchSizeTotalIsSet(true);
    return this;
  }

  public void unsetBatchSizeTotal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BATCHSIZETOTAL_ISSET_ID);
  }

  /** Returns true if field batchSizeTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchSizeTotal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BATCHSIZETOTAL_ISSET_ID);
  }

  public void setBatchSizeTotalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BATCHSIZETOTAL_ISSET_ID, value);
  }

  public long getConcurrentMax() {
    return this.concurrentMax;
  }

  public JdbcSqlStatEntity setConcurrentMax(long concurrentMax) {
    this.concurrentMax = concurrentMax;
    setConcurrentMaxIsSet(true);
    return this;
  }

  public void unsetConcurrentMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONCURRENTMAX_ISSET_ID);
  }

  /** Returns true if field concurrentMax is set (has been assigned a value) and false otherwise */
  public boolean isSetConcurrentMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONCURRENTMAX_ISSET_ID);
  }

  public void setConcurrentMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONCURRENTMAX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SQL:
      if (value == null) {
        unsetSql();
      } else {
        setSql((String)value);
      }
      break;

    case EXECUTE_COUNT:
      if (value == null) {
        unsetExecuteCount();
      } else {
        setExecuteCount((Long)value);
      }
      break;

    case EXECUTE_ERROR_COUNT:
      if (value == null) {
        unsetExecuteErrorCount();
      } else {
        setExecuteErrorCount((Long)value);
      }
      break;

    case TOTAL_TIME:
      if (value == null) {
        unsetTotalTime();
      } else {
        setTotalTime((Long)value);
      }
      break;

    case LAST_TIME:
      if (value == null) {
        unsetLastTime();
      } else {
        setLastTime((Long)value);
      }
      break;

    case MAX_TIMESPAN:
      if (value == null) {
        unsetMaxTimespan();
      } else {
        setMaxTimespan((Long)value);
      }
      break;

    case EFFECT_ROW_COUNT:
      if (value == null) {
        unsetEffectRowCount();
      } else {
        setEffectRowCount((Long)value);
      }
      break;

    case FETCH_ROW_COUNT:
      if (value == null) {
        unsetFetchRowCount();
      } else {
        setFetchRowCount((Long)value);
      }
      break;

    case BATCH_SIZE_MAX:
      if (value == null) {
        unsetBatchSizeMax();
      } else {
        setBatchSizeMax((Long)value);
      }
      break;

    case BATCH_SIZE_TOTAL:
      if (value == null) {
        unsetBatchSizeTotal();
      } else {
        setBatchSizeTotal((Long)value);
      }
      break;

    case CONCURRENT_MAX:
      if (value == null) {
        unsetConcurrentMax();
      } else {
        setConcurrentMax((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SQL:
      return getSql();

    case EXECUTE_COUNT:
      return getExecuteCount();

    case EXECUTE_ERROR_COUNT:
      return getExecuteErrorCount();

    case TOTAL_TIME:
      return getTotalTime();

    case LAST_TIME:
      return getLastTime();

    case MAX_TIMESPAN:
      return getMaxTimespan();

    case EFFECT_ROW_COUNT:
      return getEffectRowCount();

    case FETCH_ROW_COUNT:
      return getFetchRowCount();

    case BATCH_SIZE_MAX:
      return getBatchSizeMax();

    case BATCH_SIZE_TOTAL:
      return getBatchSizeTotal();

    case CONCURRENT_MAX:
      return getConcurrentMax();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SQL:
      return isSetSql();
    case EXECUTE_COUNT:
      return isSetExecuteCount();
    case EXECUTE_ERROR_COUNT:
      return isSetExecuteErrorCount();
    case TOTAL_TIME:
      return isSetTotalTime();
    case LAST_TIME:
      return isSetLastTime();
    case MAX_TIMESPAN:
      return isSetMaxTimespan();
    case EFFECT_ROW_COUNT:
      return isSetEffectRowCount();
    case FETCH_ROW_COUNT:
      return isSetFetchRowCount();
    case BATCH_SIZE_MAX:
      return isSetBatchSizeMax();
    case BATCH_SIZE_TOTAL:
      return isSetBatchSizeTotal();
    case CONCURRENT_MAX:
      return isSetConcurrentMax();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JdbcSqlStatEntity)
      return this.equals((JdbcSqlStatEntity)that);
    return false;
  }

  public boolean equals(JdbcSqlStatEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sql = true && this.isSetSql();
    boolean that_present_sql = true && that.isSetSql();
    if (this_present_sql || that_present_sql) {
      if (!(this_present_sql && that_present_sql))
        return false;
      if (!this.sql.equals(that.sql))
        return false;
    }

    boolean this_present_executeCount = true;
    boolean that_present_executeCount = true;
    if (this_present_executeCount || that_present_executeCount) {
      if (!(this_present_executeCount && that_present_executeCount))
        return false;
      if (this.executeCount != that.executeCount)
        return false;
    }

    boolean this_present_executeErrorCount = true;
    boolean that_present_executeErrorCount = true;
    if (this_present_executeErrorCount || that_present_executeErrorCount) {
      if (!(this_present_executeErrorCount && that_present_executeErrorCount))
        return false;
      if (this.executeErrorCount != that.executeErrorCount)
        return false;
    }

    boolean this_present_totalTime = true;
    boolean that_present_totalTime = true;
    if (this_present_totalTime || that_present_totalTime) {
      if (!(this_present_totalTime && that_present_totalTime))
        return false;
      if (this.totalTime != that.totalTime)
        return false;
    }

    boolean this_present_lastTime = true;
    boolean that_present_lastTime = true;
    if (this_present_lastTime || that_present_lastTime) {
      if (!(this_present_lastTime && that_present_lastTime))
        return false;
      if (this.lastTime != that.lastTime)
        return false;
    }

    boolean this_present_maxTimespan = true;
    boolean that_present_maxTimespan = true;
    if (this_present_maxTimespan || that_present_maxTimespan) {
      if (!(this_present_maxTimespan && that_present_maxTimespan))
        return false;
      if (this.maxTimespan != that.maxTimespan)
        return false;
    }

    boolean this_present_effectRowCount = true;
    boolean that_present_effectRowCount = true;
    if (this_present_effectRowCount || that_present_effectRowCount) {
      if (!(this_present_effectRowCount && that_present_effectRowCount))
        return false;
      if (this.effectRowCount != that.effectRowCount)
        return false;
    }

    boolean this_present_fetchRowCount = true;
    boolean that_present_fetchRowCount = true;
    if (this_present_fetchRowCount || that_present_fetchRowCount) {
      if (!(this_present_fetchRowCount && that_present_fetchRowCount))
        return false;
      if (this.fetchRowCount != that.fetchRowCount)
        return false;
    }

    boolean this_present_batchSizeMax = true;
    boolean that_present_batchSizeMax = true;
    if (this_present_batchSizeMax || that_present_batchSizeMax) {
      if (!(this_present_batchSizeMax && that_present_batchSizeMax))
        return false;
      if (this.batchSizeMax != that.batchSizeMax)
        return false;
    }

    boolean this_present_batchSizeTotal = true;
    boolean that_present_batchSizeTotal = true;
    if (this_present_batchSizeTotal || that_present_batchSizeTotal) {
      if (!(this_present_batchSizeTotal && that_present_batchSizeTotal))
        return false;
      if (this.batchSizeTotal != that.batchSizeTotal)
        return false;
    }

    boolean this_present_concurrentMax = true;
    boolean that_present_concurrentMax = true;
    if (this_present_concurrentMax || that_present_concurrentMax) {
      if (!(this_present_concurrentMax && that_present_concurrentMax))
        return false;
      if (this.concurrentMax != that.concurrentMax)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSql()) ? 131071 : 524287);
    if (isSetSql())
      hashCode = hashCode * 8191 + sql.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(executeCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(executeErrorCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxTimespan);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(effectRowCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fetchRowCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(batchSizeMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(batchSizeTotal);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(concurrentMax);

    return hashCode;
  }

  @Override
  public int compareTo(JdbcSqlStatEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecuteCount()).compareTo(other.isSetExecuteCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecuteCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executeCount, other.executeCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecuteErrorCount()).compareTo(other.isSetExecuteErrorCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecuteErrorCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executeErrorCount, other.executeErrorCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalTime()).compareTo(other.isSetTotalTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalTime, other.totalTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastTime()).compareTo(other.isSetLastTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastTime, other.lastTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxTimespan()).compareTo(other.isSetMaxTimespan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxTimespan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxTimespan, other.maxTimespan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEffectRowCount()).compareTo(other.isSetEffectRowCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEffectRowCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.effectRowCount, other.effectRowCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchRowCount()).compareTo(other.isSetFetchRowCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchRowCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchRowCount, other.fetchRowCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchSizeMax()).compareTo(other.isSetBatchSizeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchSizeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchSizeMax, other.batchSizeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchSizeTotal()).compareTo(other.isSetBatchSizeTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchSizeTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchSizeTotal, other.batchSizeTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConcurrentMax()).compareTo(other.isSetConcurrentMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConcurrentMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.concurrentMax, other.concurrentMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JdbcSqlStatEntity(");
    boolean first = true;

    sb.append("sql:");
    if (this.sql == null) {
      sb.append("null");
    } else {
      sb.append(this.sql);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executeCount:");
    sb.append(this.executeCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("executeErrorCount:");
    sb.append(this.executeErrorCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalTime:");
    sb.append(this.totalTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastTime:");
    sb.append(this.lastTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxTimespan:");
    sb.append(this.maxTimespan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("effectRowCount:");
    sb.append(this.effectRowCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetchRowCount:");
    sb.append(this.fetchRowCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("batchSizeMax:");
    sb.append(this.batchSizeMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("batchSizeTotal:");
    sb.append(this.batchSizeTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("concurrentMax:");
    sb.append(this.concurrentMax);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JdbcSqlStatEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JdbcSqlStatEntityStandardScheme getScheme() {
      return new JdbcSqlStatEntityStandardScheme();
    }
  }

  private static class JdbcSqlStatEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<JdbcSqlStatEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JdbcSqlStatEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SQL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql = iprot.readString();
              struct.setSqlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXECUTE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.executeCount = iprot.readI64();
              struct.setExecuteCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXECUTE_ERROR_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.executeErrorCount = iprot.readI64();
              struct.setExecuteErrorCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalTime = iprot.readI64();
              struct.setTotalTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastTime = iprot.readI64();
              struct.setLastTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_TIMESPAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxTimespan = iprot.readI64();
              struct.setMaxTimespanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EFFECT_ROW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.effectRowCount = iprot.readI64();
              struct.setEffectRowCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FETCH_ROW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fetchRowCount = iprot.readI64();
              struct.setFetchRowCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BATCH_SIZE_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.batchSizeMax = iprot.readI64();
              struct.setBatchSizeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BATCH_SIZE_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.batchSizeTotal = iprot.readI64();
              struct.setBatchSizeTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CONCURRENT_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.concurrentMax = iprot.readI64();
              struct.setConcurrentMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JdbcSqlStatEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sql != null) {
        oprot.writeFieldBegin(SQL_FIELD_DESC);
        oprot.writeString(struct.sql);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXECUTE_COUNT_FIELD_DESC);
      oprot.writeI64(struct.executeCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXECUTE_ERROR_COUNT_FIELD_DESC);
      oprot.writeI64(struct.executeErrorCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_TIME_FIELD_DESC);
      oprot.writeI64(struct.totalTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_TIME_FIELD_DESC);
      oprot.writeI64(struct.lastTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_TIMESPAN_FIELD_DESC);
      oprot.writeI64(struct.maxTimespan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EFFECT_ROW_COUNT_FIELD_DESC);
      oprot.writeI64(struct.effectRowCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FETCH_ROW_COUNT_FIELD_DESC);
      oprot.writeI64(struct.fetchRowCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BATCH_SIZE_MAX_FIELD_DESC);
      oprot.writeI64(struct.batchSizeMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BATCH_SIZE_TOTAL_FIELD_DESC);
      oprot.writeI64(struct.batchSizeTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONCURRENT_MAX_FIELD_DESC);
      oprot.writeI64(struct.concurrentMax);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JdbcSqlStatEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JdbcSqlStatEntityTupleScheme getScheme() {
      return new JdbcSqlStatEntityTupleScheme();
    }
  }

  private static class JdbcSqlStatEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<JdbcSqlStatEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JdbcSqlStatEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSql()) {
        optionals.set(0);
      }
      if (struct.isSetExecuteCount()) {
        optionals.set(1);
      }
      if (struct.isSetExecuteErrorCount()) {
        optionals.set(2);
      }
      if (struct.isSetTotalTime()) {
        optionals.set(3);
      }
      if (struct.isSetLastTime()) {
        optionals.set(4);
      }
      if (struct.isSetMaxTimespan()) {
        optionals.set(5);
      }
      if (struct.isSetEffectRowCount()) {
        optionals.set(6);
      }
      if (struct.isSetFetchRowCount()) {
        optionals.set(7);
      }
      if (struct.isSetBatchSizeMax()) {
        optionals.set(8);
      }
      if (struct.isSetBatchSizeTotal()) {
        optionals.set(9);
      }
      if (struct.isSetConcurrentMax()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetSql()) {
        oprot.writeString(struct.sql);
      }
      if (struct.isSetExecuteCount()) {
        oprot.writeI64(struct.executeCount);
      }
      if (struct.isSetExecuteErrorCount()) {
        oprot.writeI64(struct.executeErrorCount);
      }
      if (struct.isSetTotalTime()) {
        oprot.writeI64(struct.totalTime);
      }
      if (struct.isSetLastTime()) {
        oprot.writeI64(struct.lastTime);
      }
      if (struct.isSetMaxTimespan()) {
        oprot.writeI64(struct.maxTimespan);
      }
      if (struct.isSetEffectRowCount()) {
        oprot.writeI64(struct.effectRowCount);
      }
      if (struct.isSetFetchRowCount()) {
        oprot.writeI64(struct.fetchRowCount);
      }
      if (struct.isSetBatchSizeMax()) {
        oprot.writeI64(struct.batchSizeMax);
      }
      if (struct.isSetBatchSizeTotal()) {
        oprot.writeI64(struct.batchSizeTotal);
      }
      if (struct.isSetConcurrentMax()) {
        oprot.writeI64(struct.concurrentMax);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JdbcSqlStatEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.sql = iprot.readString();
        struct.setSqlIsSet(true);
      }
      if (incoming.get(1)) {
        struct.executeCount = iprot.readI64();
        struct.setExecuteCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.executeErrorCount = iprot.readI64();
        struct.setExecuteErrorCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.totalTime = iprot.readI64();
        struct.setTotalTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastTime = iprot.readI64();
        struct.setLastTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.maxTimespan = iprot.readI64();
        struct.setMaxTimespanIsSet(true);
      }
      if (incoming.get(6)) {
        struct.effectRowCount = iprot.readI64();
        struct.setEffectRowCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fetchRowCount = iprot.readI64();
        struct.setFetchRowCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.batchSizeMax = iprot.readI64();
        struct.setBatchSizeMaxIsSet(true);
      }
      if (incoming.get(9)) {
        struct.batchSizeTotal = iprot.readI64();
        struct.setBatchSizeTotalIsSet(true);
      }
      if (incoming.get(10)) {
        struct.concurrentMax = iprot.readI64();
        struct.setConcurrentMaxIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

