/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * ***************************  业务自定义指标收集  ************************
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class KMetricsCounterEntity implements org.apache.thrift.TBase<KMetricsCounterEntity, KMetricsCounterEntity._Fields>, java.io.Serializable, Cloneable, Comparable<KMetricsCounterEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KMetricsCounterEntity");

  private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField METRICS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("metricsName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CALL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("callCount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COUNTER_FIELD_DESC = new org.apache.thrift.protocol.TField("counter", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KMetricsCounterEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KMetricsCounterEntityTupleSchemeFactory();

  public String groupName; // required
  public String metricsName; // required
  public long callCount; // required
  public long counter; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP_NAME((short)1, "groupName"),
    METRICS_NAME((short)2, "metricsName"),
    CALL_COUNT((short)3, "callCount"),
    COUNTER((short)4, "counter");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP_NAME
          return GROUP_NAME;
        case 2: // METRICS_NAME
          return METRICS_NAME;
        case 3: // CALL_COUNT
          return CALL_COUNT;
        case 4: // COUNTER
          return COUNTER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CALLCOUNT_ISSET_ID = 0;
  private static final int __COUNTER_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METRICS_NAME, new org.apache.thrift.meta_data.FieldMetaData("metricsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("callCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COUNTER, new org.apache.thrift.meta_data.FieldMetaData("counter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KMetricsCounterEntity.class, metaDataMap);
  }

  public KMetricsCounterEntity() {
  }

  public KMetricsCounterEntity(
    String groupName,
    String metricsName,
    long callCount,
    long counter)
  {
    this();
    this.groupName = groupName;
    this.metricsName = metricsName;
    this.callCount = callCount;
    setCallCountIsSet(true);
    this.counter = counter;
    setCounterIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KMetricsCounterEntity(KMetricsCounterEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGroupName()) {
      this.groupName = other.groupName;
    }
    if (other.isSetMetricsName()) {
      this.metricsName = other.metricsName;
    }
    this.callCount = other.callCount;
    this.counter = other.counter;
  }

  public KMetricsCounterEntity deepCopy() {
    return new KMetricsCounterEntity(this);
  }

  @Override
  public void clear() {
    this.groupName = null;
    this.metricsName = null;
    setCallCountIsSet(false);
    this.callCount = 0;
    setCounterIsSet(false);
    this.counter = 0;
  }

  public String getGroupName() {
    return this.groupName;
  }

  public KMetricsCounterEntity setGroupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  public void unsetGroupName() {
    this.groupName = null;
  }

  /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupName() {
    return this.groupName != null;
  }

  public void setGroupNameIsSet(boolean value) {
    if (!value) {
      this.groupName = null;
    }
  }

  public String getMetricsName() {
    return this.metricsName;
  }

  public KMetricsCounterEntity setMetricsName(String metricsName) {
    this.metricsName = metricsName;
    return this;
  }

  public void unsetMetricsName() {
    this.metricsName = null;
  }

  /** Returns true if field metricsName is set (has been assigned a value) and false otherwise */
  public boolean isSetMetricsName() {
    return this.metricsName != null;
  }

  public void setMetricsNameIsSet(boolean value) {
    if (!value) {
      this.metricsName = null;
    }
  }

  public long getCallCount() {
    return this.callCount;
  }

  public KMetricsCounterEntity setCallCount(long callCount) {
    this.callCount = callCount;
    setCallCountIsSet(true);
    return this;
  }

  public void unsetCallCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CALLCOUNT_ISSET_ID);
  }

  /** Returns true if field callCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCallCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CALLCOUNT_ISSET_ID);
  }

  public void setCallCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CALLCOUNT_ISSET_ID, value);
  }

  public long getCounter() {
    return this.counter;
  }

  public KMetricsCounterEntity setCounter(long counter) {
    this.counter = counter;
    setCounterIsSet(true);
    return this;
  }

  public void unsetCounter() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNTER_ISSET_ID);
  }

  /** Returns true if field counter is set (has been assigned a value) and false otherwise */
  public boolean isSetCounter() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNTER_ISSET_ID);
  }

  public void setCounterIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNTER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUP_NAME:
      if (value == null) {
        unsetGroupName();
      } else {
        setGroupName((String)value);
      }
      break;

    case METRICS_NAME:
      if (value == null) {
        unsetMetricsName();
      } else {
        setMetricsName((String)value);
      }
      break;

    case CALL_COUNT:
      if (value == null) {
        unsetCallCount();
      } else {
        setCallCount((Long)value);
      }
      break;

    case COUNTER:
      if (value == null) {
        unsetCounter();
      } else {
        setCounter((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP_NAME:
      return getGroupName();

    case METRICS_NAME:
      return getMetricsName();

    case CALL_COUNT:
      return getCallCount();

    case COUNTER:
      return getCounter();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUP_NAME:
      return isSetGroupName();
    case METRICS_NAME:
      return isSetMetricsName();
    case CALL_COUNT:
      return isSetCallCount();
    case COUNTER:
      return isSetCounter();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KMetricsCounterEntity)
      return this.equals((KMetricsCounterEntity)that);
    return false;
  }

  public boolean equals(KMetricsCounterEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_groupName = true && this.isSetGroupName();
    boolean that_present_groupName = true && that.isSetGroupName();
    if (this_present_groupName || that_present_groupName) {
      if (!(this_present_groupName && that_present_groupName))
        return false;
      if (!this.groupName.equals(that.groupName))
        return false;
    }

    boolean this_present_metricsName = true && this.isSetMetricsName();
    boolean that_present_metricsName = true && that.isSetMetricsName();
    if (this_present_metricsName || that_present_metricsName) {
      if (!(this_present_metricsName && that_present_metricsName))
        return false;
      if (!this.metricsName.equals(that.metricsName))
        return false;
    }

    boolean this_present_callCount = true;
    boolean that_present_callCount = true;
    if (this_present_callCount || that_present_callCount) {
      if (!(this_present_callCount && that_present_callCount))
        return false;
      if (this.callCount != that.callCount)
        return false;
    }

    boolean this_present_counter = true;
    boolean that_present_counter = true;
    if (this_present_counter || that_present_counter) {
      if (!(this_present_counter && that_present_counter))
        return false;
      if (this.counter != that.counter)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetGroupName()) ? 131071 : 524287);
    if (isSetGroupName())
      hashCode = hashCode * 8191 + groupName.hashCode();

    hashCode = hashCode * 8191 + ((isSetMetricsName()) ? 131071 : 524287);
    if (isSetMetricsName())
      hashCode = hashCode * 8191 + metricsName.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(callCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(counter);

    return hashCode;
  }

  @Override
  public int compareTo(KMetricsCounterEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(other.isSetGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, other.groupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetricsName()).compareTo(other.isSetMetricsName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetricsName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metricsName, other.metricsName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallCount()).compareTo(other.isSetCallCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callCount, other.callCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCounter()).compareTo(other.isSetCounter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counter, other.counter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KMetricsCounterEntity(");
    boolean first = true;

    sb.append("groupName:");
    if (this.groupName == null) {
      sb.append("null");
    } else {
      sb.append(this.groupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metricsName:");
    if (this.metricsName == null) {
      sb.append("null");
    } else {
      sb.append(this.metricsName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("callCount:");
    sb.append(this.callCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("counter:");
    sb.append(this.counter);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KMetricsCounterEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KMetricsCounterEntityStandardScheme getScheme() {
      return new KMetricsCounterEntityStandardScheme();
    }
  }

  private static class KMetricsCounterEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<KMetricsCounterEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KMetricsCounterEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupName = iprot.readString();
              struct.setGroupNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // METRICS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metricsName = iprot.readString();
              struct.setMetricsNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CALL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.callCount = iprot.readI64();
              struct.setCallCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COUNTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.counter = iprot.readI64();
              struct.setCounterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KMetricsCounterEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.groupName != null) {
        oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
        oprot.writeString(struct.groupName);
        oprot.writeFieldEnd();
      }
      if (struct.metricsName != null) {
        oprot.writeFieldBegin(METRICS_NAME_FIELD_DESC);
        oprot.writeString(struct.metricsName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CALL_COUNT_FIELD_DESC);
      oprot.writeI64(struct.callCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNTER_FIELD_DESC);
      oprot.writeI64(struct.counter);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KMetricsCounterEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KMetricsCounterEntityTupleScheme getScheme() {
      return new KMetricsCounterEntityTupleScheme();
    }
  }

  private static class KMetricsCounterEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<KMetricsCounterEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KMetricsCounterEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGroupName()) {
        optionals.set(0);
      }
      if (struct.isSetMetricsName()) {
        optionals.set(1);
      }
      if (struct.isSetCallCount()) {
        optionals.set(2);
      }
      if (struct.isSetCounter()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetGroupName()) {
        oprot.writeString(struct.groupName);
      }
      if (struct.isSetMetricsName()) {
        oprot.writeString(struct.metricsName);
      }
      if (struct.isSetCallCount()) {
        oprot.writeI64(struct.callCount);
      }
      if (struct.isSetCounter()) {
        oprot.writeI64(struct.counter);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KMetricsCounterEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.groupName = iprot.readString();
        struct.setGroupNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.metricsName = iprot.readString();
        struct.setMetricsNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.callCount = iprot.readI64();
        struct.setCallCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.counter = iprot.readI64();
        struct.setCounterIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

