/**
 * Autogenerated by Thrift Compiler (0.11.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * ***************** OkHttp/HttpComponent/HttpConnection  ****************
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class HttpEntity implements org.apache.thrift.TBase<HttpEntity, HttpEntity._Fields>, java.io.Serializable, Cloneable, Comparable<HttpEntity> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HttpEntity");

    private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short) 4);
    private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short) 5);
    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short) 6);
    private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short) 7);
    private static final org.apache.thrift.protocol.TField METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("method", org.apache.thrift.protocol.TType.STRING, (short) 8);
    private static final org.apache.thrift.protocol.TField COST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("costTime", org.apache.thrift.protocol.TType.I64, (short) 9);
    private static final org.apache.thrift.protocol.TField COUNT4XX_FIELD_DESC = new org.apache.thrift.protocol.TField("count4xx", org.apache.thrift.protocol.TType.I32, (short) 10);
    private static final org.apache.thrift.protocol.TField COUNT5XX_FIELD_DESC = new org.apache.thrift.protocol.TField("count5xx", org.apache.thrift.protocol.TType.I32, (short) 11);
    private static final org.apache.thrift.protocol.TField BRAND_FIELD_DESC = new org.apache.thrift.protocol.TField("brand", org.apache.thrift.protocol.TType.STRING, (short) 12);
    private static final org.apache.thrift.protocol.TField REQUEST_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestCount", org.apache.thrift.protocol.TType.I32, (short) 13);
    private static final org.apache.thrift.protocol.TField REQUEST_BYTE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestByteSize", org.apache.thrift.protocol.TType.I64, (short) 14);
    private static final org.apache.thrift.protocol.TField RESPONSE_BYTE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("responseByteSize", org.apache.thrift.protocol.TType.I64, (short) 15);
    private static final org.apache.thrift.protocol.TField TARGET_DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("targetDomain", org.apache.thrift.protocol.TType.I32, (short) 16);
    private static final org.apache.thrift.protocol.TField TARGET_HOST_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("targetHostPort", org.apache.thrift.protocol.TType.I32, (short) 17);
    private static final org.apache.thrift.protocol.TField GRANULARITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("GranularityType", org.apache.thrift.protocol.TType.I32, (short) 18);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HttpEntityStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HttpEntityTupleSchemeFactory();

    public String appName; // required
    public String hostName; // required
    public int port; // required
    public long timestamp; // required
    public int interval; // required
    public String category; // required
    public String uri; // required
    public String method; // required
    public long costTime; // required
    public int count4xx; // required
    public int count5xx; // required
    public String brand; // required
    public int requestCount; // required
    public long requestByteSize; // required
    public long responseByteSize; // required
    public int targetDomain; // optional
    public int targetHostPort; // optional
    public int GranularityType; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        APP_NAME((short) 1, "appName"),
        HOST_NAME((short) 2, "hostName"),
        PORT((short) 3, "port"),
        TIMESTAMP((short) 4, "timestamp"),
        INTERVAL((short) 5, "interval"),
        CATEGORY((short) 6, "category"),
        URI((short) 7, "uri"),
        METHOD((short) 8, "method"),
        COST_TIME((short) 9, "costTime"),
        COUNT4XX((short) 10, "count4xx"),
        COUNT5XX((short) 11, "count5xx"),
        BRAND((short) 12, "brand"),
        REQUEST_COUNT((short) 13, "requestCount"),
        REQUEST_BYTE_SIZE((short) 14, "requestByteSize"),
        RESPONSE_BYTE_SIZE((short) 15, "responseByteSize"),
        TARGET_DOMAIN((short) 16, "targetDomain"),
        TARGET_HOST_PORT((short) 17, "targetHostPort"),
        GRANULARITY_TYPE((short) 18, "GranularityType");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // APP_NAME
                    return APP_NAME;
                case 2: // HOST_NAME
                    return HOST_NAME;
                case 3: // PORT
                    return PORT;
                case 4: // TIMESTAMP
                    return TIMESTAMP;
                case 5: // INTERVAL
                    return INTERVAL;
                case 6: // CATEGORY
                    return CATEGORY;
                case 7: // URI
                    return URI;
                case 8: // METHOD
                    return METHOD;
                case 9: // COST_TIME
                    return COST_TIME;
                case 10: // COUNT4XX
                    return COUNT4XX;
                case 11: // COUNT5XX
                    return COUNT5XX;
                case 12: // BRAND
                    return BRAND;
                case 13: // REQUEST_COUNT
                    return REQUEST_COUNT;
                case 14: // REQUEST_BYTE_SIZE
                    return REQUEST_BYTE_SIZE;
                case 15: // RESPONSE_BYTE_SIZE
                    return RESPONSE_BYTE_SIZE;
                case 16: // TARGET_DOMAIN
                    return TARGET_DOMAIN;
                case 17: // TARGET_HOST_PORT
                    return TARGET_HOST_PORT;
                case 18: // GRANULARITY_TYPE
                    return GRANULARITY_TYPE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __TIMESTAMP_ISSET_ID = 1;
    private static final int __INTERVAL_ISSET_ID = 2;
    private static final int __COSTTIME_ISSET_ID = 3;
    private static final int __COUNT4XX_ISSET_ID = 4;
    private static final int __COUNT5XX_ISSET_ID = 5;
    private static final int __REQUESTCOUNT_ISSET_ID = 6;
    private static final int __REQUESTBYTESIZE_ISSET_ID = 7;
    private static final int __RESPONSEBYTESIZE_ISSET_ID = 8;
    private static final int __TARGETDOMAIN_ISSET_ID = 9;
    private static final int __TARGETHOSTPORT_ISSET_ID = 10;
    private static final int __GRANULARITYTYPE_ISSET_ID = 11;
    private short __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.TARGET_DOMAIN, _Fields.TARGET_HOST_PORT, _Fields.GRANULARITY_TYPE};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                               new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.METHOD, new org.apache.thrift.meta_data.FieldMetaData("method", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                 new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.COST_TIME, new org.apache.thrift.meta_data.FieldMetaData("costTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.COUNT4XX, new org.apache.thrift.meta_data.FieldMetaData("count4xx", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.COUNT5XX, new org.apache.thrift.meta_data.FieldMetaData("count5xx", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.BRAND, new org.apache.thrift.meta_data.FieldMetaData("brand", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.REQUEST_COUNT, new org.apache.thrift.meta_data.FieldMetaData("requestCount", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.REQUEST_BYTE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("requestByteSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.RESPONSE_BYTE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("responseByteSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.TARGET_DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("targetDomain", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                                                                                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TARGET_HOST_PORT, new org.apache.thrift.meta_data.FieldMetaData("targetHostPort", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                                                                                           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.GRANULARITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("GranularityType", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                                                                                           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HttpEntity.class, metaDataMap);
    }

    public HttpEntity() {
    }

    public HttpEntity(
        String appName,
        String hostName,
        int port,
        long timestamp,
        int interval,
        String category,
        String uri,
        String method,
        long costTime,
        int count4xx,
        int count5xx,
        String brand,
        int requestCount,
        long requestByteSize,
        long responseByteSize) {
        this();
        this.appName = appName;
        this.hostName = hostName;
        this.port = port;
        setPortIsSet(true);
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        this.interval = interval;
        setIntervalIsSet(true);
        this.category = category;
        this.uri = uri;
        this.method = method;
        this.costTime = costTime;
        setCostTimeIsSet(true);
        this.count4xx = count4xx;
        setCount4xxIsSet(true);
        this.count5xx = count5xx;
        setCount5xxIsSet(true);
        this.brand = brand;
        this.requestCount = requestCount;
        setRequestCountIsSet(true);
        this.requestByteSize = requestByteSize;
        setRequestByteSizeIsSet(true);
        this.responseByteSize = responseByteSize;
        setResponseByteSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public HttpEntity(HttpEntity other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetAppName()) {
            this.appName = other.appName;
        }
        if (other.isSetHostName()) {
            this.hostName = other.hostName;
        }
        this.port = other.port;
        this.timestamp = other.timestamp;
        this.interval = other.interval;
        if (other.isSetCategory()) {
            this.category = other.category;
        }
        if (other.isSetUri()) {
            this.uri = other.uri;
        }
        if (other.isSetMethod()) {
            this.method = other.method;
        }
        this.costTime = other.costTime;
        this.count4xx = other.count4xx;
        this.count5xx = other.count5xx;
        if (other.isSetBrand()) {
            this.brand = other.brand;
        }
        this.requestCount = other.requestCount;
        this.requestByteSize = other.requestByteSize;
        this.responseByteSize = other.responseByteSize;
        this.targetDomain = other.targetDomain;
        this.targetHostPort = other.targetHostPort;
        this.GranularityType = other.GranularityType;
    }

    public HttpEntity deepCopy() {
        return new HttpEntity(this);
    }

    @Override
    public void clear() {
        this.appName = null;
        this.hostName = null;
        setPortIsSet(false);
        this.port = 0;
        setTimestampIsSet(false);
        this.timestamp = 0;
        setIntervalIsSet(false);
        this.interval = 0;
        this.category = null;
        this.uri = null;
        this.method = null;
        setCostTimeIsSet(false);
        this.costTime = 0;
        setCount4xxIsSet(false);
        this.count4xx = 0;
        setCount5xxIsSet(false);
        this.count5xx = 0;
        this.brand = null;
        setRequestCountIsSet(false);
        this.requestCount = 0;
        setRequestByteSizeIsSet(false);
        this.requestByteSize = 0;
        setResponseByteSizeIsSet(false);
        this.responseByteSize = 0;
        setTargetDomainIsSet(false);
        this.targetDomain = 0;
        setTargetHostPortIsSet(false);
        this.targetHostPort = 0;
        setGranularityTypeIsSet(false);
        this.GranularityType = 0;
    }

    public String getAppName() {
        return this.appName;
    }

    public HttpEntity setAppName(String appName) {
        this.appName = appName;
        return this;
    }

    public void unsetAppName() {
        this.appName = null;
    }

    /** Returns true if field appName is set (has been assigned a value) and false otherwise */
    public boolean isSetAppName() {
        return this.appName != null;
    }

    public void setAppNameIsSet(boolean value) {
        if (!value) {
            this.appName = null;
        }
    }

    public String getHostName() {
        return this.hostName;
    }

    public HttpEntity setHostName(String hostName) {
        this.hostName = hostName;
        return this;
    }

    public void unsetHostName() {
        this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
        return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
        if (!value) {
            this.hostName = null;
        }
    }

    public int getPort() {
        return this.port;
    }

    public HttpEntity setPort(int port) {
        this.port = port;
        setPortIsSet(true);
        return this;
    }

    public void unsetPort() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public long getTimestamp() {
        return this.timestamp;
    }

    public HttpEntity setTimestamp(long timestamp) {
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        return this;
    }

    public void unsetTimestamp() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public int getInterval() {
        return this.interval;
    }

    public HttpEntity setInterval(int interval) {
        this.interval = interval;
        setIntervalIsSet(true);
        return this;
    }

    public void unsetInterval() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
    }

    /** Returns true if field interval is set (has been assigned a value) and false otherwise */
    public boolean isSetInterval() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
    }

    public void setIntervalIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
    }

    public String getCategory() {
        return this.category;
    }

    public HttpEntity setCategory(String category) {
        this.category = category;
        return this;
    }

    public void unsetCategory() {
        this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
        return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
        if (!value) {
            this.category = null;
        }
    }

    public String getUri() {
        return this.uri;
    }

    public HttpEntity setUri(String uri) {
        this.uri = uri;
        return this;
    }

    public void unsetUri() {
        this.uri = null;
    }

    /** Returns true if field uri is set (has been assigned a value) and false otherwise */
    public boolean isSetUri() {
        return this.uri != null;
    }

    public void setUriIsSet(boolean value) {
        if (!value) {
            this.uri = null;
        }
    }

    public String getMethod() {
        return this.method;
    }

    public HttpEntity setMethod(String method) {
        this.method = method;
        return this;
    }

    public void unsetMethod() {
        this.method = null;
    }

    /** Returns true if field method is set (has been assigned a value) and false otherwise */
    public boolean isSetMethod() {
        return this.method != null;
    }

    public void setMethodIsSet(boolean value) {
        if (!value) {
            this.method = null;
        }
    }

    public long getCostTime() {
        return this.costTime;
    }

    public HttpEntity setCostTime(long costTime) {
        this.costTime = costTime;
        setCostTimeIsSet(true);
        return this;
    }

    public void unsetCostTime() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COSTTIME_ISSET_ID);
    }

    /** Returns true if field costTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCostTime() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COSTTIME_ISSET_ID);
    }

    public void setCostTimeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COSTTIME_ISSET_ID, value);
    }

    public int getCount4xx() {
        return this.count4xx;
    }

    public HttpEntity setCount4xx(int count4xx) {
        this.count4xx = count4xx;
        setCount4xxIsSet(true);
        return this;
    }

    public void unsetCount4xx() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT4XX_ISSET_ID);
    }

    /** Returns true if field count4xx is set (has been assigned a value) and false otherwise */
    public boolean isSetCount4xx() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT4XX_ISSET_ID);
    }

    public void setCount4xxIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT4XX_ISSET_ID, value);
    }

    public int getCount5xx() {
        return this.count5xx;
    }

    public HttpEntity setCount5xx(int count5xx) {
        this.count5xx = count5xx;
        setCount5xxIsSet(true);
        return this;
    }

    public void unsetCount5xx() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT5XX_ISSET_ID);
    }

    /** Returns true if field count5xx is set (has been assigned a value) and false otherwise */
    public boolean isSetCount5xx() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT5XX_ISSET_ID);
    }

    public void setCount5xxIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT5XX_ISSET_ID, value);
    }

    public String getBrand() {
        return this.brand;
    }

    public HttpEntity setBrand(String brand) {
        this.brand = brand;
        return this;
    }

    public void unsetBrand() {
        this.brand = null;
    }

    /** Returns true if field brand is set (has been assigned a value) and false otherwise */
    public boolean isSetBrand() {
        return this.brand != null;
    }

    public void setBrandIsSet(boolean value) {
        if (!value) {
            this.brand = null;
        }
    }

    public int getRequestCount() {
        return this.requestCount;
    }

    public HttpEntity setRequestCount(int requestCount) {
        this.requestCount = requestCount;
        setRequestCountIsSet(true);
        return this;
    }

    public void unsetRequestCount() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTCOUNT_ISSET_ID);
    }

    /** Returns true if field requestCount is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestCount() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTCOUNT_ISSET_ID);
    }

    public void setRequestCountIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTCOUNT_ISSET_ID, value);
    }

    public long getRequestByteSize() {
        return this.requestByteSize;
    }

    public HttpEntity setRequestByteSize(long requestByteSize) {
        this.requestByteSize = requestByteSize;
        setRequestByteSizeIsSet(true);
        return this;
    }

    public void unsetRequestByteSize() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTBYTESIZE_ISSET_ID);
    }

    /** Returns true if field requestByteSize is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestByteSize() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTBYTESIZE_ISSET_ID);
    }

    public void setRequestByteSizeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTBYTESIZE_ISSET_ID, value);
    }

    public long getResponseByteSize() {
        return this.responseByteSize;
    }

    public HttpEntity setResponseByteSize(long responseByteSize) {
        this.responseByteSize = responseByteSize;
        setResponseByteSizeIsSet(true);
        return this;
    }

    public void unsetResponseByteSize() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSEBYTESIZE_ISSET_ID);
    }

    /** Returns true if field responseByteSize is set (has been assigned a value) and false otherwise */
    public boolean isSetResponseByteSize() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSEBYTESIZE_ISSET_ID);
    }

    public void setResponseByteSizeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSEBYTESIZE_ISSET_ID, value);
    }

    public int getTargetDomain() {
        return this.targetDomain;
    }

    public HttpEntity setTargetDomain(int targetDomain) {
        this.targetDomain = targetDomain;
        setTargetDomainIsSet(true);
        return this;
    }

    public void unsetTargetDomain() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TARGETDOMAIN_ISSET_ID);
    }

    /** Returns true if field targetDomain is set (has been assigned a value) and false otherwise */
    public boolean isSetTargetDomain() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TARGETDOMAIN_ISSET_ID);
    }

    public void setTargetDomainIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TARGETDOMAIN_ISSET_ID, value);
    }

    public int getTargetHostPort() {
        return this.targetHostPort;
    }

    public HttpEntity setTargetHostPort(int targetHostPort) {
        this.targetHostPort = targetHostPort;
        setTargetHostPortIsSet(true);
        return this;
    }

    public void unsetTargetHostPort() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TARGETHOSTPORT_ISSET_ID);
    }

    /** Returns true if field targetHostPort is set (has been assigned a value) and false otherwise */
    public boolean isSetTargetHostPort() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TARGETHOSTPORT_ISSET_ID);
    }

    public void setTargetHostPortIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TARGETHOSTPORT_ISSET_ID, value);
    }

    public int getGranularityType() {
        return this.GranularityType;
    }

    public HttpEntity setGranularityType(int GranularityType) {
        this.GranularityType = GranularityType;
        setGranularityTypeIsSet(true);
        return this;
    }

    public void unsetGranularityType() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID);
    }

    /** Returns true if field GranularityType is set (has been assigned a value) and false otherwise */
    public boolean isSetGranularityType() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID);
    }

    public void setGranularityTypeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case APP_NAME:
                if (value == null) {
                    unsetAppName();
                } else {
                    setAppName((String) value);
                }
                break;

            case HOST_NAME:
                if (value == null) {
                    unsetHostName();
                } else {
                    setHostName((String) value);
                }
                break;

            case PORT:
                if (value == null) {
                    unsetPort();
                } else {
                    setPort((Integer) value);
                }
                break;

            case TIMESTAMP:
                if (value == null) {
                    unsetTimestamp();
                } else {
                    setTimestamp((Long) value);
                }
                break;

            case INTERVAL:
                if (value == null) {
                    unsetInterval();
                } else {
                    setInterval((Integer) value);
                }
                break;

            case CATEGORY:
                if (value == null) {
                    unsetCategory();
                } else {
                    setCategory((String) value);
                }
                break;

            case URI:
                if (value == null) {
                    unsetUri();
                } else {
                    setUri((String) value);
                }
                break;

            case METHOD:
                if (value == null) {
                    unsetMethod();
                } else {
                    setMethod((String) value);
                }
                break;

            case COST_TIME:
                if (value == null) {
                    unsetCostTime();
                } else {
                    setCostTime((Long) value);
                }
                break;

            case COUNT4XX:
                if (value == null) {
                    unsetCount4xx();
                } else {
                    setCount4xx((Integer) value);
                }
                break;

            case COUNT5XX:
                if (value == null) {
                    unsetCount5xx();
                } else {
                    setCount5xx((Integer) value);
                }
                break;

            case BRAND:
                if (value == null) {
                    unsetBrand();
                } else {
                    setBrand((String) value);
                }
                break;

            case REQUEST_COUNT:
                if (value == null) {
                    unsetRequestCount();
                } else {
                    setRequestCount((Integer) value);
                }
                break;

            case REQUEST_BYTE_SIZE:
                if (value == null) {
                    unsetRequestByteSize();
                } else {
                    setRequestByteSize((Long) value);
                }
                break;

            case RESPONSE_BYTE_SIZE:
                if (value == null) {
                    unsetResponseByteSize();
                } else {
                    setResponseByteSize((Long) value);
                }
                break;

            case TARGET_DOMAIN:
                if (value == null) {
                    unsetTargetDomain();
                } else {
                    setTargetDomain((Integer) value);
                }
                break;

            case TARGET_HOST_PORT:
                if (value == null) {
                    unsetTargetHostPort();
                } else {
                    setTargetHostPort((Integer) value);
                }
                break;

            case GRANULARITY_TYPE:
                if (value == null) {
                    unsetGranularityType();
                } else {
                    setGranularityType((Integer) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case APP_NAME:
                return getAppName();

            case HOST_NAME:
                return getHostName();

            case PORT:
                return getPort();

            case TIMESTAMP:
                return getTimestamp();

            case INTERVAL:
                return getInterval();

            case CATEGORY:
                return getCategory();

            case URI:
                return getUri();

            case METHOD:
                return getMethod();

            case COST_TIME:
                return getCostTime();

            case COUNT4XX:
                return getCount4xx();

            case COUNT5XX:
                return getCount5xx();

            case BRAND:
                return getBrand();

            case REQUEST_COUNT:
                return getRequestCount();

            case REQUEST_BYTE_SIZE:
                return getRequestByteSize();

            case RESPONSE_BYTE_SIZE:
                return getResponseByteSize();

            case TARGET_DOMAIN:
                return getTargetDomain();

            case TARGET_HOST_PORT:
                return getTargetHostPort();

            case GRANULARITY_TYPE:
                return getGranularityType();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case APP_NAME:
                return isSetAppName();
            case HOST_NAME:
                return isSetHostName();
            case PORT:
                return isSetPort();
            case TIMESTAMP:
                return isSetTimestamp();
            case INTERVAL:
                return isSetInterval();
            case CATEGORY:
                return isSetCategory();
            case URI:
                return isSetUri();
            case METHOD:
                return isSetMethod();
            case COST_TIME:
                return isSetCostTime();
            case COUNT4XX:
                return isSetCount4xx();
            case COUNT5XX:
                return isSetCount5xx();
            case BRAND:
                return isSetBrand();
            case REQUEST_COUNT:
                return isSetRequestCount();
            case REQUEST_BYTE_SIZE:
                return isSetRequestByteSize();
            case RESPONSE_BYTE_SIZE:
                return isSetResponseByteSize();
            case TARGET_DOMAIN:
                return isSetTargetDomain();
            case TARGET_HOST_PORT:
                return isSetTargetHostPort();
            case GRANULARITY_TYPE:
                return isSetGranularityType();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof HttpEntity)
            return this.equals((HttpEntity) that);
        return false;
    }

    public boolean equals(HttpEntity that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_appName = true && this.isSetAppName();
        boolean that_present_appName = true && that.isSetAppName();
        if (this_present_appName || that_present_appName) {
            if (!(this_present_appName && that_present_appName))
                return false;
            if (!this.appName.equals(that.appName))
                return false;
        }

        boolean this_present_hostName = true && this.isSetHostName();
        boolean that_present_hostName = true && that.isSetHostName();
        if (this_present_hostName || that_present_hostName) {
            if (!(this_present_hostName && that_present_hostName))
                return false;
            if (!this.hostName.equals(that.hostName))
                return false;
        }

        boolean this_present_port = true;
        boolean that_present_port = true;
        if (this_present_port || that_present_port) {
            if (!(this_present_port && that_present_port))
                return false;
            if (this.port != that.port)
                return false;
        }

        boolean this_present_timestamp = true;
        boolean that_present_timestamp = true;
        if (this_present_timestamp || that_present_timestamp) {
            if (!(this_present_timestamp && that_present_timestamp))
                return false;
            if (this.timestamp != that.timestamp)
                return false;
        }

        boolean this_present_interval = true;
        boolean that_present_interval = true;
        if (this_present_interval || that_present_interval) {
            if (!(this_present_interval && that_present_interval))
                return false;
            if (this.interval != that.interval)
                return false;
        }

        boolean this_present_category = true && this.isSetCategory();
        boolean that_present_category = true && that.isSetCategory();
        if (this_present_category || that_present_category) {
            if (!(this_present_category && that_present_category))
                return false;
            if (!this.category.equals(that.category))
                return false;
        }

        boolean this_present_uri = true && this.isSetUri();
        boolean that_present_uri = true && that.isSetUri();
        if (this_present_uri || that_present_uri) {
            if (!(this_present_uri && that_present_uri))
                return false;
            if (!this.uri.equals(that.uri))
                return false;
        }

        boolean this_present_method = true && this.isSetMethod();
        boolean that_present_method = true && that.isSetMethod();
        if (this_present_method || that_present_method) {
            if (!(this_present_method && that_present_method))
                return false;
            if (!this.method.equals(that.method))
                return false;
        }

        boolean this_present_costTime = true;
        boolean that_present_costTime = true;
        if (this_present_costTime || that_present_costTime) {
            if (!(this_present_costTime && that_present_costTime))
                return false;
            if (this.costTime != that.costTime)
                return false;
        }

        boolean this_present_count4xx = true;
        boolean that_present_count4xx = true;
        if (this_present_count4xx || that_present_count4xx) {
            if (!(this_present_count4xx && that_present_count4xx))
                return false;
            if (this.count4xx != that.count4xx)
                return false;
        }

        boolean this_present_count5xx = true;
        boolean that_present_count5xx = true;
        if (this_present_count5xx || that_present_count5xx) {
            if (!(this_present_count5xx && that_present_count5xx))
                return false;
            if (this.count5xx != that.count5xx)
                return false;
        }

        boolean this_present_brand = true && this.isSetBrand();
        boolean that_present_brand = true && that.isSetBrand();
        if (this_present_brand || that_present_brand) {
            if (!(this_present_brand && that_present_brand))
                return false;
            if (!this.brand.equals(that.brand))
                return false;
        }

        boolean this_present_requestCount = true;
        boolean that_present_requestCount = true;
        if (this_present_requestCount || that_present_requestCount) {
            if (!(this_present_requestCount && that_present_requestCount))
                return false;
            if (this.requestCount != that.requestCount)
                return false;
        }

        boolean this_present_requestByteSize = true;
        boolean that_present_requestByteSize = true;
        if (this_present_requestByteSize || that_present_requestByteSize) {
            if (!(this_present_requestByteSize && that_present_requestByteSize))
                return false;
            if (this.requestByteSize != that.requestByteSize)
                return false;
        }

        boolean this_present_responseByteSize = true;
        boolean that_present_responseByteSize = true;
        if (this_present_responseByteSize || that_present_responseByteSize) {
            if (!(this_present_responseByteSize && that_present_responseByteSize))
                return false;
            if (this.responseByteSize != that.responseByteSize)
                return false;
        }

        boolean this_present_targetDomain = true && this.isSetTargetDomain();
        boolean that_present_targetDomain = true && that.isSetTargetDomain();
        if (this_present_targetDomain || that_present_targetDomain) {
            if (!(this_present_targetDomain && that_present_targetDomain))
                return false;
            if (this.targetDomain != that.targetDomain)
                return false;
        }

        boolean this_present_targetHostPort = true && this.isSetTargetHostPort();
        boolean that_present_targetHostPort = true && that.isSetTargetHostPort();
        if (this_present_targetHostPort || that_present_targetHostPort) {
            if (!(this_present_targetHostPort && that_present_targetHostPort))
                return false;
            if (this.targetHostPort != that.targetHostPort)
                return false;
        }

        boolean this_present_GranularityType = true && this.isSetGranularityType();
        boolean that_present_GranularityType = true && that.isSetGranularityType();
        if (this_present_GranularityType || that_present_GranularityType) {
            if (!(this_present_GranularityType && that_present_GranularityType))
                return false;
            if (this.GranularityType != that.GranularityType)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetAppName()) ? 131071 : 524287);
        if (isSetAppName())
            hashCode = hashCode * 8191 + appName.hashCode();

        hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
        if (isSetHostName())
            hashCode = hashCode * 8191 + hostName.hashCode();

        hashCode = hashCode * 8191 + port;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

        hashCode = hashCode * 8191 + interval;

        hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
        if (isSetCategory())
            hashCode = hashCode * 8191 + category.hashCode();

        hashCode = hashCode * 8191 + ((isSetUri()) ? 131071 : 524287);
        if (isSetUri())
            hashCode = hashCode * 8191 + uri.hashCode();

        hashCode = hashCode * 8191 + ((isSetMethod()) ? 131071 : 524287);
        if (isSetMethod())
            hashCode = hashCode * 8191 + method.hashCode();

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(costTime);

        hashCode = hashCode * 8191 + count4xx;

        hashCode = hashCode * 8191 + count5xx;

        hashCode = hashCode * 8191 + ((isSetBrand()) ? 131071 : 524287);
        if (isSetBrand())
            hashCode = hashCode * 8191 + brand.hashCode();

        hashCode = hashCode * 8191 + requestCount;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestByteSize);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseByteSize);

        hashCode = hashCode * 8191 + ((isSetTargetDomain()) ? 131071 : 524287);
        if (isSetTargetDomain())
            hashCode = hashCode * 8191 + targetDomain;

        hashCode = hashCode * 8191 + ((isSetTargetHostPort()) ? 131071 : 524287);
        if (isSetTargetHostPort())
            hashCode = hashCode * 8191 + targetHostPort;

        hashCode = hashCode * 8191 + ((isSetGranularityType()) ? 131071 : 524287);
        if (isSetGranularityType())
            hashCode = hashCode * 8191 + GranularityType;

        return hashCode;
    }

    @Override
    public int compareTo(HttpEntity other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAppName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHostName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPort()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTimestamp()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetInterval()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCategory()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUri()).compareTo(other.isSetUri());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUri()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMethod()).compareTo(other.isSetMethod());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMethod()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.method, other.method);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCostTime()).compareTo(other.isSetCostTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCostTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costTime, other.costTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCount4xx()).compareTo(other.isSetCount4xx());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCount4xx()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count4xx, other.count4xx);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCount5xx()).compareTo(other.isSetCount5xx());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCount5xx()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count5xx, other.count5xx);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetBrand()).compareTo(other.isSetBrand());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBrand()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brand, other.brand);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetRequestCount()).compareTo(other.isSetRequestCount());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRequestCount()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestCount, other.requestCount);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetRequestByteSize()).compareTo(other.isSetRequestByteSize());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRequestByteSize()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestByteSize, other.requestByteSize);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetResponseByteSize()).compareTo(other.isSetResponseByteSize());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetResponseByteSize()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseByteSize, other.responseByteSize);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTargetDomain()).compareTo(other.isSetTargetDomain());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTargetDomain()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetDomain, other.targetDomain);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTargetHostPort()).compareTo(other.isSetTargetHostPort());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTargetHostPort()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetHostPort, other.targetHostPort);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetGranularityType()).compareTo(other.isSetGranularityType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGranularityType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GranularityType, other.GranularityType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("HttpEntity(");
        boolean first = true;

        sb.append("appName:");
        if (this.appName == null) {
            sb.append("null");
        } else {
            sb.append(this.appName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("hostName:");
        if (this.hostName == null) {
            sb.append("null");
        } else {
            sb.append(this.hostName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("port:");
        sb.append(this.port);
        first = false;
        if (!first) sb.append(", ");
        sb.append("timestamp:");
        sb.append(this.timestamp);
        first = false;
        if (!first) sb.append(", ");
        sb.append("interval:");
        sb.append(this.interval);
        first = false;
        if (!first) sb.append(", ");
        sb.append("category:");
        if (this.category == null) {
            sb.append("null");
        } else {
            sb.append(this.category);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("uri:");
        if (this.uri == null) {
            sb.append("null");
        } else {
            sb.append(this.uri);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("method:");
        if (this.method == null) {
            sb.append("null");
        } else {
            sb.append(this.method);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("costTime:");
        sb.append(this.costTime);
        first = false;
        if (!first) sb.append(", ");
        sb.append("count4xx:");
        sb.append(this.count4xx);
        first = false;
        if (!first) sb.append(", ");
        sb.append("count5xx:");
        sb.append(this.count5xx);
        first = false;
        if (!first) sb.append(", ");
        sb.append("brand:");
        if (this.brand == null) {
            sb.append("null");
        } else {
            sb.append(this.brand);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("requestCount:");
        sb.append(this.requestCount);
        first = false;
        if (!first) sb.append(", ");
        sb.append("requestByteSize:");
        sb.append(this.requestByteSize);
        first = false;
        if (!first) sb.append(", ");
        sb.append("responseByteSize:");
        sb.append(this.responseByteSize);
        first = false;
        if (isSetTargetDomain()) {
            if (!first) sb.append(", ");
            sb.append("targetDomain:");
            sb.append(this.targetDomain);
            first = false;
        }
        if (isSetTargetHostPort()) {
            if (!first) sb.append(", ");
            sb.append("targetHostPort:");
            sb.append(this.targetHostPort);
            first = false;
        }
        if (isSetGranularityType()) {
            if (!first) sb.append(", ");
            sb.append("GranularityType:");
            sb.append(this.GranularityType);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class HttpEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public HttpEntityStandardScheme getScheme() {
            return new HttpEntityStandardScheme();
        }
    }

    private static class HttpEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<HttpEntity> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, HttpEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // APP_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.appName = iprot.readString();
                            struct.setAppNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // HOST_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.hostName = iprot.readString();
                            struct.setHostNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // PORT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.port = iprot.readI32();
                            struct.setPortIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // TIMESTAMP
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.timestamp = iprot.readI64();
                            struct.setTimestampIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // INTERVAL
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.interval = iprot.readI32();
                            struct.setIntervalIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // CATEGORY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.category = iprot.readString();
                            struct.setCategoryIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // URI
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.uri = iprot.readString();
                            struct.setUriIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // METHOD
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.method = iprot.readString();
                            struct.setMethodIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // COST_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.costTime = iprot.readI64();
                            struct.setCostTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // COUNT4XX
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.count4xx = iprot.readI32();
                            struct.setCount4xxIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // COUNT5XX
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.count5xx = iprot.readI32();
                            struct.setCount5xxIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 12: // BRAND
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.brand = iprot.readString();
                            struct.setBrandIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 13: // REQUEST_COUNT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.requestCount = iprot.readI32();
                            struct.setRequestCountIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 14: // REQUEST_BYTE_SIZE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.requestByteSize = iprot.readI64();
                            struct.setRequestByteSizeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 15: // RESPONSE_BYTE_SIZE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.responseByteSize = iprot.readI64();
                            struct.setResponseByteSizeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 16: // TARGET_DOMAIN
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.targetDomain = iprot.readI32();
                            struct.setTargetDomainIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 17: // TARGET_HOST_PORT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.targetHostPort = iprot.readI32();
                            struct.setTargetHostPortIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 18: // GRANULARITY_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.GranularityType = iprot.readI32();
                            struct.setGranularityTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, HttpEntity struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.appName != null) {
                oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
                oprot.writeString(struct.appName);
                oprot.writeFieldEnd();
            }
            if (struct.hostName != null) {
                oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
                oprot.writeString(struct.hostName);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(PORT_FIELD_DESC);
            oprot.writeI32(struct.port);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
            oprot.writeI64(struct.timestamp);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
            oprot.writeI32(struct.interval);
            oprot.writeFieldEnd();
            if (struct.category != null) {
                oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
                oprot.writeString(struct.category);
                oprot.writeFieldEnd();
            }
            if (struct.uri != null) {
                oprot.writeFieldBegin(URI_FIELD_DESC);
                oprot.writeString(struct.uri);
                oprot.writeFieldEnd();
            }
            if (struct.method != null) {
                oprot.writeFieldBegin(METHOD_FIELD_DESC);
                oprot.writeString(struct.method);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(COST_TIME_FIELD_DESC);
            oprot.writeI64(struct.costTime);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(COUNT4XX_FIELD_DESC);
            oprot.writeI32(struct.count4xx);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(COUNT5XX_FIELD_DESC);
            oprot.writeI32(struct.count5xx);
            oprot.writeFieldEnd();
            if (struct.brand != null) {
                oprot.writeFieldBegin(BRAND_FIELD_DESC);
                oprot.writeString(struct.brand);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(REQUEST_COUNT_FIELD_DESC);
            oprot.writeI32(struct.requestCount);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(REQUEST_BYTE_SIZE_FIELD_DESC);
            oprot.writeI64(struct.requestByteSize);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(RESPONSE_BYTE_SIZE_FIELD_DESC);
            oprot.writeI64(struct.responseByteSize);
            oprot.writeFieldEnd();
            if (struct.isSetTargetDomain()) {
                oprot.writeFieldBegin(TARGET_DOMAIN_FIELD_DESC);
                oprot.writeI32(struct.targetDomain);
                oprot.writeFieldEnd();
            }
            if (struct.isSetTargetHostPort()) {
                oprot.writeFieldBegin(TARGET_HOST_PORT_FIELD_DESC);
                oprot.writeI32(struct.targetHostPort);
                oprot.writeFieldEnd();
            }
            if (struct.isSetGranularityType()) {
                oprot.writeFieldBegin(GRANULARITY_TYPE_FIELD_DESC);
                oprot.writeI32(struct.GranularityType);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class HttpEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public HttpEntityTupleScheme getScheme() {
            return new HttpEntityTupleScheme();
        }
    }

    private static class HttpEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<HttpEntity> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, HttpEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetAppName()) {
                optionals.set(0);
            }
            if (struct.isSetHostName()) {
                optionals.set(1);
            }
            if (struct.isSetPort()) {
                optionals.set(2);
            }
            if (struct.isSetTimestamp()) {
                optionals.set(3);
            }
            if (struct.isSetInterval()) {
                optionals.set(4);
            }
            if (struct.isSetCategory()) {
                optionals.set(5);
            }
            if (struct.isSetUri()) {
                optionals.set(6);
            }
            if (struct.isSetMethod()) {
                optionals.set(7);
            }
            if (struct.isSetCostTime()) {
                optionals.set(8);
            }
            if (struct.isSetCount4xx()) {
                optionals.set(9);
            }
            if (struct.isSetCount5xx()) {
                optionals.set(10);
            }
            if (struct.isSetBrand()) {
                optionals.set(11);
            }
            if (struct.isSetRequestCount()) {
                optionals.set(12);
            }
            if (struct.isSetRequestByteSize()) {
                optionals.set(13);
            }
            if (struct.isSetResponseByteSize()) {
                optionals.set(14);
            }
            if (struct.isSetTargetDomain()) {
                optionals.set(15);
            }
            if (struct.isSetTargetHostPort()) {
                optionals.set(16);
            }
            if (struct.isSetGranularityType()) {
                optionals.set(17);
            }
            oprot.writeBitSet(optionals, 18);
            if (struct.isSetAppName()) {
                oprot.writeString(struct.appName);
            }
            if (struct.isSetHostName()) {
                oprot.writeString(struct.hostName);
            }
            if (struct.isSetPort()) {
                oprot.writeI32(struct.port);
            }
            if (struct.isSetTimestamp()) {
                oprot.writeI64(struct.timestamp);
            }
            if (struct.isSetInterval()) {
                oprot.writeI32(struct.interval);
            }
            if (struct.isSetCategory()) {
                oprot.writeString(struct.category);
            }
            if (struct.isSetUri()) {
                oprot.writeString(struct.uri);
            }
            if (struct.isSetMethod()) {
                oprot.writeString(struct.method);
            }
            if (struct.isSetCostTime()) {
                oprot.writeI64(struct.costTime);
            }
            if (struct.isSetCount4xx()) {
                oprot.writeI32(struct.count4xx);
            }
            if (struct.isSetCount5xx()) {
                oprot.writeI32(struct.count5xx);
            }
            if (struct.isSetBrand()) {
                oprot.writeString(struct.brand);
            }
            if (struct.isSetRequestCount()) {
                oprot.writeI32(struct.requestCount);
            }
            if (struct.isSetRequestByteSize()) {
                oprot.writeI64(struct.requestByteSize);
            }
            if (struct.isSetResponseByteSize()) {
                oprot.writeI64(struct.responseByteSize);
            }
            if (struct.isSetTargetDomain()) {
                oprot.writeI32(struct.targetDomain);
            }
            if (struct.isSetTargetHostPort()) {
                oprot.writeI32(struct.targetHostPort);
            }
            if (struct.isSetGranularityType()) {
                oprot.writeI32(struct.GranularityType);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, HttpEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(18);
            if (incoming.get(0)) {
                struct.appName = iprot.readString();
                struct.setAppNameIsSet(true);
            }
            if (incoming.get(1)) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
            }
            if (incoming.get(2)) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
            }
            if (incoming.get(3)) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
            }
            if (incoming.get(4)) {
                struct.interval = iprot.readI32();
                struct.setIntervalIsSet(true);
            }
            if (incoming.get(5)) {
                struct.category = iprot.readString();
                struct.setCategoryIsSet(true);
            }
            if (incoming.get(6)) {
                struct.uri = iprot.readString();
                struct.setUriIsSet(true);
            }
            if (incoming.get(7)) {
                struct.method = iprot.readString();
                struct.setMethodIsSet(true);
            }
            if (incoming.get(8)) {
                struct.costTime = iprot.readI64();
                struct.setCostTimeIsSet(true);
            }
            if (incoming.get(9)) {
                struct.count4xx = iprot.readI32();
                struct.setCount4xxIsSet(true);
            }
            if (incoming.get(10)) {
                struct.count5xx = iprot.readI32();
                struct.setCount5xxIsSet(true);
            }
            if (incoming.get(11)) {
                struct.brand = iprot.readString();
                struct.setBrandIsSet(true);
            }
            if (incoming.get(12)) {
                struct.requestCount = iprot.readI32();
                struct.setRequestCountIsSet(true);
            }
            if (incoming.get(13)) {
                struct.requestByteSize = iprot.readI64();
                struct.setRequestByteSizeIsSet(true);
            }
            if (incoming.get(14)) {
                struct.responseByteSize = iprot.readI64();
                struct.setResponseByteSizeIsSet(true);
            }
            if (incoming.get(15)) {
                struct.targetDomain = iprot.readI32();
                struct.setTargetDomainIsSet(true);
            }
            if (incoming.get(16)) {
                struct.targetHostPort = iprot.readI32();
                struct.setTargetHostPortIsSet(true);
            }
            if (incoming.get(17)) {
                struct.GranularityType = iprot.readI32();
                struct.setGranularityTypeIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

