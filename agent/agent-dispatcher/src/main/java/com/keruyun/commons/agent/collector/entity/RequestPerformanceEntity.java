/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class RequestPerformanceEntity implements org.apache.thrift.TBase<RequestPerformanceEntity, RequestPerformanceEntity._Fields>, java.io.Serializable, Cloneable, Comparable<RequestPerformanceEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestPerformanceEntity");

  private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("costTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("requests", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FAILURE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("failureCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COUNT4XX_FIELD_DESC = new org.apache.thrift.protocol.TField("count4xx", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField COUNT5XX_FIELD_DESC = new org.apache.thrift.protocol.TField("count5xx", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField REQUEST_BYTE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestByteSize", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField RESPONSE_BYTE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("responseByteSize", org.apache.thrift.protocol.TType.I64, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestPerformanceEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestPerformanceEntityTupleSchemeFactory();

  public String uri; // required
  public long costTime; // required
  public int requests; // required
  public int failureCount; // required
  public int count4xx; // required
  public int count5xx; // required
  public long requestByteSize; // required
  public long responseByteSize; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    URI((short)1, "uri"),
    COST_TIME((short)2, "costTime"),
    REQUESTS((short)3, "requests"),
    FAILURE_COUNT((short)4, "failureCount"),
    COUNT4XX((short)5, "count4xx"),
    COUNT5XX((short)6, "count5xx"),
    REQUEST_BYTE_SIZE((short)7, "requestByteSize"),
    RESPONSE_BYTE_SIZE((short)8, "responseByteSize");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // URI
          return URI;
        case 2: // COST_TIME
          return COST_TIME;
        case 3: // REQUESTS
          return REQUESTS;
        case 4: // FAILURE_COUNT
          return FAILURE_COUNT;
        case 5: // COUNT4XX
          return COUNT4XX;
        case 6: // COUNT5XX
          return COUNT5XX;
        case 7: // REQUEST_BYTE_SIZE
          return REQUEST_BYTE_SIZE;
        case 8: // RESPONSE_BYTE_SIZE
          return RESPONSE_BYTE_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COSTTIME_ISSET_ID = 0;
  private static final int __REQUESTS_ISSET_ID = 1;
  private static final int __FAILURECOUNT_ISSET_ID = 2;
  private static final int __COUNT4XX_ISSET_ID = 3;
  private static final int __COUNT5XX_ISSET_ID = 4;
  private static final int __REQUESTBYTESIZE_ISSET_ID = 5;
  private static final int __RESPONSEBYTESIZE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COST_TIME, new org.apache.thrift.meta_data.FieldMetaData("costTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("requests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAILURE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("failureCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT4XX, new org.apache.thrift.meta_data.FieldMetaData("count4xx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT5XX, new org.apache.thrift.meta_data.FieldMetaData("count5xx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_BYTE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("requestByteSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESPONSE_BYTE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("responseByteSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestPerformanceEntity.class, metaDataMap);
  }

  public RequestPerformanceEntity() {
  }

  public RequestPerformanceEntity(
    String uri,
    long costTime,
    int requests,
    int failureCount,
    int count4xx,
    int count5xx,
    long requestByteSize,
    long responseByteSize)
  {
    this();
    this.uri = uri;
    this.costTime = costTime;
    setCostTimeIsSet(true);
    this.requests = requests;
    setRequestsIsSet(true);
    this.failureCount = failureCount;
    setFailureCountIsSet(true);
    this.count4xx = count4xx;
    setCount4xxIsSet(true);
    this.count5xx = count5xx;
    setCount5xxIsSet(true);
    this.requestByteSize = requestByteSize;
    setRequestByteSizeIsSet(true);
    this.responseByteSize = responseByteSize;
    setResponseByteSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RequestPerformanceEntity(RequestPerformanceEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUri()) {
      this.uri = other.uri;
    }
    this.costTime = other.costTime;
    this.requests = other.requests;
    this.failureCount = other.failureCount;
    this.count4xx = other.count4xx;
    this.count5xx = other.count5xx;
    this.requestByteSize = other.requestByteSize;
    this.responseByteSize = other.responseByteSize;
  }

  public RequestPerformanceEntity deepCopy() {
    return new RequestPerformanceEntity(this);
  }

  @Override
  public void clear() {
    this.uri = null;
    setCostTimeIsSet(false);
    this.costTime = 0;
    setRequestsIsSet(false);
    this.requests = 0;
    setFailureCountIsSet(false);
    this.failureCount = 0;
    setCount4xxIsSet(false);
    this.count4xx = 0;
    setCount5xxIsSet(false);
    this.count5xx = 0;
    setRequestByteSizeIsSet(false);
    this.requestByteSize = 0;
    setResponseByteSizeIsSet(false);
    this.responseByteSize = 0;
  }

  public String getUri() {
    return this.uri;
  }

  public RequestPerformanceEntity setUri(String uri) {
    this.uri = uri;
    return this;
  }

  public void unsetUri() {
    this.uri = null;
  }

  /** Returns true if field uri is set (has been assigned a value) and false otherwise */
  public boolean isSetUri() {
    return this.uri != null;
  }

  public void setUriIsSet(boolean value) {
    if (!value) {
      this.uri = null;
    }
  }

  public long getCostTime() {
    return this.costTime;
  }

  public RequestPerformanceEntity setCostTime(long costTime) {
    this.costTime = costTime;
    setCostTimeIsSet(true);
    return this;
  }

  public void unsetCostTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COSTTIME_ISSET_ID);
  }

  /** Returns true if field costTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCostTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COSTTIME_ISSET_ID);
  }

  public void setCostTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COSTTIME_ISSET_ID, value);
  }

  public int getRequests() {
    return this.requests;
  }

  public RequestPerformanceEntity setRequests(int requests) {
    this.requests = requests;
    setRequestsIsSet(true);
    return this;
  }

  public void unsetRequests() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTS_ISSET_ID);
  }

  /** Returns true if field requests is set (has been assigned a value) and false otherwise */
  public boolean isSetRequests() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTS_ISSET_ID);
  }

  public void setRequestsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTS_ISSET_ID, value);
  }

  public int getFailureCount() {
    return this.failureCount;
  }

  public RequestPerformanceEntity setFailureCount(int failureCount) {
    this.failureCount = failureCount;
    setFailureCountIsSet(true);
    return this;
  }

  public void unsetFailureCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FAILURECOUNT_ISSET_ID);
  }

  /** Returns true if field failureCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FAILURECOUNT_ISSET_ID);
  }

  public void setFailureCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FAILURECOUNT_ISSET_ID, value);
  }

  public int getCount4xx() {
    return this.count4xx;
  }

  public RequestPerformanceEntity setCount4xx(int count4xx) {
    this.count4xx = count4xx;
    setCount4xxIsSet(true);
    return this;
  }

  public void unsetCount4xx() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT4XX_ISSET_ID);
  }

  /** Returns true if field count4xx is set (has been assigned a value) and false otherwise */
  public boolean isSetCount4xx() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT4XX_ISSET_ID);
  }

  public void setCount4xxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT4XX_ISSET_ID, value);
  }

  public int getCount5xx() {
    return this.count5xx;
  }

  public RequestPerformanceEntity setCount5xx(int count5xx) {
    this.count5xx = count5xx;
    setCount5xxIsSet(true);
    return this;
  }

  public void unsetCount5xx() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT5XX_ISSET_ID);
  }

  /** Returns true if field count5xx is set (has been assigned a value) and false otherwise */
  public boolean isSetCount5xx() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT5XX_ISSET_ID);
  }

  public void setCount5xxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT5XX_ISSET_ID, value);
  }

  public long getRequestByteSize() {
    return this.requestByteSize;
  }

  public RequestPerformanceEntity setRequestByteSize(long requestByteSize) {
    this.requestByteSize = requestByteSize;
    setRequestByteSizeIsSet(true);
    return this;
  }

  public void unsetRequestByteSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTBYTESIZE_ISSET_ID);
  }

  /** Returns true if field requestByteSize is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestByteSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTBYTESIZE_ISSET_ID);
  }

  public void setRequestByteSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTBYTESIZE_ISSET_ID, value);
  }

  public long getResponseByteSize() {
    return this.responseByteSize;
  }

  public RequestPerformanceEntity setResponseByteSize(long responseByteSize) {
    this.responseByteSize = responseByteSize;
    setResponseByteSizeIsSet(true);
    return this;
  }

  public void unsetResponseByteSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSEBYTESIZE_ISSET_ID);
  }

  /** Returns true if field responseByteSize is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseByteSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSEBYTESIZE_ISSET_ID);
  }

  public void setResponseByteSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSEBYTESIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case URI:
      if (value == null) {
        unsetUri();
      } else {
        setUri((String)value);
      }
      break;

    case COST_TIME:
      if (value == null) {
        unsetCostTime();
      } else {
        setCostTime((Long)value);
      }
      break;

    case REQUESTS:
      if (value == null) {
        unsetRequests();
      } else {
        setRequests((Integer)value);
      }
      break;

    case FAILURE_COUNT:
      if (value == null) {
        unsetFailureCount();
      } else {
        setFailureCount((Integer)value);
      }
      break;

    case COUNT4XX:
      if (value == null) {
        unsetCount4xx();
      } else {
        setCount4xx((Integer)value);
      }
      break;

    case COUNT5XX:
      if (value == null) {
        unsetCount5xx();
      } else {
        setCount5xx((Integer)value);
      }
      break;

    case REQUEST_BYTE_SIZE:
      if (value == null) {
        unsetRequestByteSize();
      } else {
        setRequestByteSize((Long)value);
      }
      break;

    case RESPONSE_BYTE_SIZE:
      if (value == null) {
        unsetResponseByteSize();
      } else {
        setResponseByteSize((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case URI:
      return getUri();

    case COST_TIME:
      return getCostTime();

    case REQUESTS:
      return getRequests();

    case FAILURE_COUNT:
      return getFailureCount();

    case COUNT4XX:
      return getCount4xx();

    case COUNT5XX:
      return getCount5xx();

    case REQUEST_BYTE_SIZE:
      return getRequestByteSize();

    case RESPONSE_BYTE_SIZE:
      return getResponseByteSize();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case URI:
      return isSetUri();
    case COST_TIME:
      return isSetCostTime();
    case REQUESTS:
      return isSetRequests();
    case FAILURE_COUNT:
      return isSetFailureCount();
    case COUNT4XX:
      return isSetCount4xx();
    case COUNT5XX:
      return isSetCount5xx();
    case REQUEST_BYTE_SIZE:
      return isSetRequestByteSize();
    case RESPONSE_BYTE_SIZE:
      return isSetResponseByteSize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RequestPerformanceEntity)
      return this.equals((RequestPerformanceEntity)that);
    return false;
  }

  public boolean equals(RequestPerformanceEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uri = true && this.isSetUri();
    boolean that_present_uri = true && that.isSetUri();
    if (this_present_uri || that_present_uri) {
      if (!(this_present_uri && that_present_uri))
        return false;
      if (!this.uri.equals(that.uri))
        return false;
    }

    boolean this_present_costTime = true;
    boolean that_present_costTime = true;
    if (this_present_costTime || that_present_costTime) {
      if (!(this_present_costTime && that_present_costTime))
        return false;
      if (this.costTime != that.costTime)
        return false;
    }

    boolean this_present_requests = true;
    boolean that_present_requests = true;
    if (this_present_requests || that_present_requests) {
      if (!(this_present_requests && that_present_requests))
        return false;
      if (this.requests != that.requests)
        return false;
    }

    boolean this_present_failureCount = true;
    boolean that_present_failureCount = true;
    if (this_present_failureCount || that_present_failureCount) {
      if (!(this_present_failureCount && that_present_failureCount))
        return false;
      if (this.failureCount != that.failureCount)
        return false;
    }

    boolean this_present_count4xx = true;
    boolean that_present_count4xx = true;
    if (this_present_count4xx || that_present_count4xx) {
      if (!(this_present_count4xx && that_present_count4xx))
        return false;
      if (this.count4xx != that.count4xx)
        return false;
    }

    boolean this_present_count5xx = true;
    boolean that_present_count5xx = true;
    if (this_present_count5xx || that_present_count5xx) {
      if (!(this_present_count5xx && that_present_count5xx))
        return false;
      if (this.count5xx != that.count5xx)
        return false;
    }

    boolean this_present_requestByteSize = true;
    boolean that_present_requestByteSize = true;
    if (this_present_requestByteSize || that_present_requestByteSize) {
      if (!(this_present_requestByteSize && that_present_requestByteSize))
        return false;
      if (this.requestByteSize != that.requestByteSize)
        return false;
    }

    boolean this_present_responseByteSize = true;
    boolean that_present_responseByteSize = true;
    if (this_present_responseByteSize || that_present_responseByteSize) {
      if (!(this_present_responseByteSize && that_present_responseByteSize))
        return false;
      if (this.responseByteSize != that.responseByteSize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUri()) ? 131071 : 524287);
    if (isSetUri())
      hashCode = hashCode * 8191 + uri.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(costTime);

    hashCode = hashCode * 8191 + requests;

    hashCode = hashCode * 8191 + failureCount;

    hashCode = hashCode * 8191 + count4xx;

    hashCode = hashCode * 8191 + count5xx;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestByteSize);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseByteSize);

    return hashCode;
  }

  @Override
  public int compareTo(RequestPerformanceEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUri()).compareTo(other.isSetUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCostTime()).compareTo(other.isSetCostTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costTime, other.costTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequests()).compareTo(other.isSetRequests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requests, other.requests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailureCount()).compareTo(other.isSetFailureCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failureCount, other.failureCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount4xx()).compareTo(other.isSetCount4xx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount4xx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count4xx, other.count4xx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount5xx()).compareTo(other.isSetCount5xx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount5xx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count5xx, other.count5xx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestByteSize()).compareTo(other.isSetRequestByteSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestByteSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestByteSize, other.requestByteSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseByteSize()).compareTo(other.isSetResponseByteSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseByteSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseByteSize, other.responseByteSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RequestPerformanceEntity(");
    boolean first = true;

    sb.append("uri:");
    if (this.uri == null) {
      sb.append("null");
    } else {
      sb.append(this.uri);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("costTime:");
    sb.append(this.costTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requests:");
    sb.append(this.requests);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failureCount:");
    sb.append(this.failureCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count4xx:");
    sb.append(this.count4xx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count5xx:");
    sb.append(this.count5xx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestByteSize:");
    sb.append(this.requestByteSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseByteSize:");
    sb.append(this.responseByteSize);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestPerformanceEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RequestPerformanceEntityStandardScheme getScheme() {
      return new RequestPerformanceEntityStandardScheme();
    }
  }

  private static class RequestPerformanceEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<RequestPerformanceEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RequestPerformanceEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uri = iprot.readString();
              struct.setUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.costTime = iprot.readI64();
              struct.setCostTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requests = iprot.readI32();
              struct.setRequestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FAILURE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.failureCount = iprot.readI32();
              struct.setFailureCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COUNT4XX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count4xx = iprot.readI32();
              struct.setCount4xxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COUNT5XX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count5xx = iprot.readI32();
              struct.setCount5xxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REQUEST_BYTE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.requestByteSize = iprot.readI64();
              struct.setRequestByteSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RESPONSE_BYTE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.responseByteSize = iprot.readI64();
              struct.setResponseByteSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RequestPerformanceEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uri != null) {
        oprot.writeFieldBegin(URI_FIELD_DESC);
        oprot.writeString(struct.uri);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COST_TIME_FIELD_DESC);
      oprot.writeI64(struct.costTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUESTS_FIELD_DESC);
      oprot.writeI32(struct.requests);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAILURE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.failureCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT4XX_FIELD_DESC);
      oprot.writeI32(struct.count4xx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT5XX_FIELD_DESC);
      oprot.writeI32(struct.count5xx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_BYTE_SIZE_FIELD_DESC);
      oprot.writeI64(struct.requestByteSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESPONSE_BYTE_SIZE_FIELD_DESC);
      oprot.writeI64(struct.responseByteSize);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestPerformanceEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RequestPerformanceEntityTupleScheme getScheme() {
      return new RequestPerformanceEntityTupleScheme();
    }
  }

  private static class RequestPerformanceEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<RequestPerformanceEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RequestPerformanceEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUri()) {
        optionals.set(0);
      }
      if (struct.isSetCostTime()) {
        optionals.set(1);
      }
      if (struct.isSetRequests()) {
        optionals.set(2);
      }
      if (struct.isSetFailureCount()) {
        optionals.set(3);
      }
      if (struct.isSetCount4xx()) {
        optionals.set(4);
      }
      if (struct.isSetCount5xx()) {
        optionals.set(5);
      }
      if (struct.isSetRequestByteSize()) {
        optionals.set(6);
      }
      if (struct.isSetResponseByteSize()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetUri()) {
        oprot.writeString(struct.uri);
      }
      if (struct.isSetCostTime()) {
        oprot.writeI64(struct.costTime);
      }
      if (struct.isSetRequests()) {
        oprot.writeI32(struct.requests);
      }
      if (struct.isSetFailureCount()) {
        oprot.writeI32(struct.failureCount);
      }
      if (struct.isSetCount4xx()) {
        oprot.writeI32(struct.count4xx);
      }
      if (struct.isSetCount5xx()) {
        oprot.writeI32(struct.count5xx);
      }
      if (struct.isSetRequestByteSize()) {
        oprot.writeI64(struct.requestByteSize);
      }
      if (struct.isSetResponseByteSize()) {
        oprot.writeI64(struct.responseByteSize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RequestPerformanceEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.uri = iprot.readString();
        struct.setUriIsSet(true);
      }
      if (incoming.get(1)) {
        struct.costTime = iprot.readI64();
        struct.setCostTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.requests = iprot.readI32();
        struct.setRequestsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.failureCount = iprot.readI32();
        struct.setFailureCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.count4xx = iprot.readI32();
        struct.setCount4xxIsSet(true);
      }
      if (incoming.get(5)) {
        struct.count5xx = iprot.readI32();
        struct.setCount5xxIsSet(true);
      }
      if (incoming.get(6)) {
        struct.requestByteSize = iprot.readI64();
        struct.setRequestByteSizeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.responseByteSize = iprot.readI64();
        struct.setResponseByteSizeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

