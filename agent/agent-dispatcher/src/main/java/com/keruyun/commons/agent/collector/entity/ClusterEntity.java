/**
 * Autogenerated by Thrift Compiler (0.11.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * ****************************  集群服务Database信息  *********************
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class ClusterEntity implements org.apache.thrift.TBase<ClusterEntity, ClusterEntity._Fields>, java.io.Serializable, Cloneable, Comparable<ClusterEntity> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClusterEntity");

    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField REDIS_CLUSTER_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("redisClusterEntity", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
    private static final org.apache.thrift.protocol.TField MONGO_DBCLUSTER_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("mongoDBClusterEntity", org.apache.thrift.protocol.TType.STRUCT, (short) 3);
    private static final org.apache.thrift.protocol.TField MYSQL_CLUSTER_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("mysqlClusterEntity", org.apache.thrift.protocol.TType.STRUCT, (short) 4);
    private static final org.apache.thrift.protocol.TField GRANULARITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("GranularityType", org.apache.thrift.protocol.TType.I32, (short) 5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ClusterEntityStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ClusterEntityTupleSchemeFactory();

    public String category; // required
    public RedisClusterEntity redisClusterEntity; // required
    public MongoDBClusterEntity mongoDBClusterEntity; // required
    public MysqlClusterEntity mysqlClusterEntity; // required
    public int GranularityType; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        CATEGORY((short) 1, "category"),
        REDIS_CLUSTER_ENTITY((short) 2, "redisClusterEntity"),
        MONGO_DBCLUSTER_ENTITY((short) 3, "mongoDBClusterEntity"),
        MYSQL_CLUSTER_ENTITY((short) 4, "mysqlClusterEntity"),
        GRANULARITY_TYPE((short) 5, "GranularityType");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // CATEGORY
                    return CATEGORY;
                case 2: // REDIS_CLUSTER_ENTITY
                    return REDIS_CLUSTER_ENTITY;
                case 3: // MONGO_DBCLUSTER_ENTITY
                    return MONGO_DBCLUSTER_ENTITY;
                case 4: // MYSQL_CLUSTER_ENTITY
                    return MYSQL_CLUSTER_ENTITY;
                case 5: // GRANULARITY_TYPE
                    return GRANULARITY_TYPE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __GRANULARITYTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.GRANULARITY_TYPE};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.REDIS_CLUSTER_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("redisClusterEntity", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                               new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "RedisClusterEntity")));
        tmpMap.put(_Fields.MONGO_DBCLUSTER_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("mongoDBClusterEntity", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                                 new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "MongoDBClusterEntity")));
        tmpMap.put(_Fields.MYSQL_CLUSTER_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("mysqlClusterEntity", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                               new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "MysqlClusterEntity")));
        tmpMap.put(_Fields.GRANULARITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("GranularityType", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                                                                                           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClusterEntity.class, metaDataMap);
    }

    public ClusterEntity() {
    }

    public ClusterEntity(
        String category,
        RedisClusterEntity redisClusterEntity,
        MongoDBClusterEntity mongoDBClusterEntity,
        MysqlClusterEntity mysqlClusterEntity) {
        this();
        this.category = category;
        this.redisClusterEntity = redisClusterEntity;
        this.mongoDBClusterEntity = mongoDBClusterEntity;
        this.mysqlClusterEntity = mysqlClusterEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ClusterEntity(ClusterEntity other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetCategory()) {
            this.category = other.category;
        }
        if (other.isSetRedisClusterEntity()) {
            this.redisClusterEntity = new RedisClusterEntity(other.redisClusterEntity);
        }
        if (other.isSetMongoDBClusterEntity()) {
            this.mongoDBClusterEntity = new MongoDBClusterEntity(other.mongoDBClusterEntity);
        }
        if (other.isSetMysqlClusterEntity()) {
            this.mysqlClusterEntity = new MysqlClusterEntity(other.mysqlClusterEntity);
        }
        this.GranularityType = other.GranularityType;
    }

    public ClusterEntity deepCopy() {
        return new ClusterEntity(this);
    }

    @Override
    public void clear() {
        this.category = null;
        this.redisClusterEntity = null;
        this.mongoDBClusterEntity = null;
        this.mysqlClusterEntity = null;
        setGranularityTypeIsSet(false);
        this.GranularityType = 0;
    }

    public String getCategory() {
        return this.category;
    }

    public ClusterEntity setCategory(String category) {
        this.category = category;
        return this;
    }

    public void unsetCategory() {
        this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
        return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
        if (!value) {
            this.category = null;
        }
    }

    public RedisClusterEntity getRedisClusterEntity() {
        return this.redisClusterEntity;
    }

    public ClusterEntity setRedisClusterEntity(RedisClusterEntity redisClusterEntity) {
        this.redisClusterEntity = redisClusterEntity;
        return this;
    }

    public void unsetRedisClusterEntity() {
        this.redisClusterEntity = null;
    }

    /** Returns true if field redisClusterEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetRedisClusterEntity() {
        return this.redisClusterEntity != null;
    }

    public void setRedisClusterEntityIsSet(boolean value) {
        if (!value) {
            this.redisClusterEntity = null;
        }
    }

    public MongoDBClusterEntity getMongoDBClusterEntity() {
        return this.mongoDBClusterEntity;
    }

    public ClusterEntity setMongoDBClusterEntity(MongoDBClusterEntity mongoDBClusterEntity) {
        this.mongoDBClusterEntity = mongoDBClusterEntity;
        return this;
    }

    public void unsetMongoDBClusterEntity() {
        this.mongoDBClusterEntity = null;
    }

    /** Returns true if field mongoDBClusterEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetMongoDBClusterEntity() {
        return this.mongoDBClusterEntity != null;
    }

    public void setMongoDBClusterEntityIsSet(boolean value) {
        if (!value) {
            this.mongoDBClusterEntity = null;
        }
    }

    public MysqlClusterEntity getMysqlClusterEntity() {
        return this.mysqlClusterEntity;
    }

    public ClusterEntity setMysqlClusterEntity(MysqlClusterEntity mysqlClusterEntity) {
        this.mysqlClusterEntity = mysqlClusterEntity;
        return this;
    }

    public void unsetMysqlClusterEntity() {
        this.mysqlClusterEntity = null;
    }

    /** Returns true if field mysqlClusterEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetMysqlClusterEntity() {
        return this.mysqlClusterEntity != null;
    }

    public void setMysqlClusterEntityIsSet(boolean value) {
        if (!value) {
            this.mysqlClusterEntity = null;
        }
    }

    public int getGranularityType() {
        return this.GranularityType;
    }

    public ClusterEntity setGranularityType(int GranularityType) {
        this.GranularityType = GranularityType;
        setGranularityTypeIsSet(true);
        return this;
    }

    public void unsetGranularityType() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID);
    }

    /** Returns true if field GranularityType is set (has been assigned a value) and false otherwise */
    public boolean isSetGranularityType() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID);
    }

    public void setGranularityTypeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case CATEGORY:
                if (value == null) {
                    unsetCategory();
                } else {
                    setCategory((String) value);
                }
                break;

            case REDIS_CLUSTER_ENTITY:
                if (value == null) {
                    unsetRedisClusterEntity();
                } else {
                    setRedisClusterEntity((RedisClusterEntity) value);
                }
                break;

            case MONGO_DBCLUSTER_ENTITY:
                if (value == null) {
                    unsetMongoDBClusterEntity();
                } else {
                    setMongoDBClusterEntity((MongoDBClusterEntity) value);
                }
                break;

            case MYSQL_CLUSTER_ENTITY:
                if (value == null) {
                    unsetMysqlClusterEntity();
                } else {
                    setMysqlClusterEntity((MysqlClusterEntity) value);
                }
                break;

            case GRANULARITY_TYPE:
                if (value == null) {
                    unsetGranularityType();
                } else {
                    setGranularityType((Integer) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case CATEGORY:
                return getCategory();

            case REDIS_CLUSTER_ENTITY:
                return getRedisClusterEntity();

            case MONGO_DBCLUSTER_ENTITY:
                return getMongoDBClusterEntity();

            case MYSQL_CLUSTER_ENTITY:
                return getMysqlClusterEntity();

            case GRANULARITY_TYPE:
                return getGranularityType();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case CATEGORY:
                return isSetCategory();
            case REDIS_CLUSTER_ENTITY:
                return isSetRedisClusterEntity();
            case MONGO_DBCLUSTER_ENTITY:
                return isSetMongoDBClusterEntity();
            case MYSQL_CLUSTER_ENTITY:
                return isSetMysqlClusterEntity();
            case GRANULARITY_TYPE:
                return isSetGranularityType();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof ClusterEntity)
            return this.equals((ClusterEntity) that);
        return false;
    }

    public boolean equals(ClusterEntity that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_category = true && this.isSetCategory();
        boolean that_present_category = true && that.isSetCategory();
        if (this_present_category || that_present_category) {
            if (!(this_present_category && that_present_category))
                return false;
            if (!this.category.equals(that.category))
                return false;
        }

        boolean this_present_redisClusterEntity = true && this.isSetRedisClusterEntity();
        boolean that_present_redisClusterEntity = true && that.isSetRedisClusterEntity();
        if (this_present_redisClusterEntity || that_present_redisClusterEntity) {
            if (!(this_present_redisClusterEntity && that_present_redisClusterEntity))
                return false;
            if (!this.redisClusterEntity.equals(that.redisClusterEntity))
                return false;
        }

        boolean this_present_mongoDBClusterEntity = true && this.isSetMongoDBClusterEntity();
        boolean that_present_mongoDBClusterEntity = true && that.isSetMongoDBClusterEntity();
        if (this_present_mongoDBClusterEntity || that_present_mongoDBClusterEntity) {
            if (!(this_present_mongoDBClusterEntity && that_present_mongoDBClusterEntity))
                return false;
            if (!this.mongoDBClusterEntity.equals(that.mongoDBClusterEntity))
                return false;
        }

        boolean this_present_mysqlClusterEntity = true && this.isSetMysqlClusterEntity();
        boolean that_present_mysqlClusterEntity = true && that.isSetMysqlClusterEntity();
        if (this_present_mysqlClusterEntity || that_present_mysqlClusterEntity) {
            if (!(this_present_mysqlClusterEntity && that_present_mysqlClusterEntity))
                return false;
            if (!this.mysqlClusterEntity.equals(that.mysqlClusterEntity))
                return false;
        }

        boolean this_present_GranularityType = true && this.isSetGranularityType();
        boolean that_present_GranularityType = true && that.isSetGranularityType();
        if (this_present_GranularityType || that_present_GranularityType) {
            if (!(this_present_GranularityType && that_present_GranularityType))
                return false;
            if (this.GranularityType != that.GranularityType)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
        if (isSetCategory())
            hashCode = hashCode * 8191 + category.hashCode();

        hashCode = hashCode * 8191 + ((isSetRedisClusterEntity()) ? 131071 : 524287);
        if (isSetRedisClusterEntity())
            hashCode = hashCode * 8191 + redisClusterEntity.hashCode();

        hashCode = hashCode * 8191 + ((isSetMongoDBClusterEntity()) ? 131071 : 524287);
        if (isSetMongoDBClusterEntity())
            hashCode = hashCode * 8191 + mongoDBClusterEntity.hashCode();

        hashCode = hashCode * 8191 + ((isSetMysqlClusterEntity()) ? 131071 : 524287);
        if (isSetMysqlClusterEntity())
            hashCode = hashCode * 8191 + mysqlClusterEntity.hashCode();

        hashCode = hashCode * 8191 + ((isSetGranularityType()) ? 131071 : 524287);
        if (isSetGranularityType())
            hashCode = hashCode * 8191 + GranularityType;

        return hashCode;
    }

    @Override
    public int compareTo(ClusterEntity other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCategory()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetRedisClusterEntity()).compareTo(other.isSetRedisClusterEntity());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRedisClusterEntity()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redisClusterEntity, other.redisClusterEntity);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMongoDBClusterEntity()).compareTo(other.isSetMongoDBClusterEntity());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMongoDBClusterEntity()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mongoDBClusterEntity, other.mongoDBClusterEntity);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMysqlClusterEntity()).compareTo(other.isSetMysqlClusterEntity());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMysqlClusterEntity()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mysqlClusterEntity, other.mysqlClusterEntity);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetGranularityType()).compareTo(other.isSetGranularityType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGranularityType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GranularityType, other.GranularityType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ClusterEntity(");
        boolean first = true;

        sb.append("category:");
        if (this.category == null) {
            sb.append("null");
        } else {
            sb.append(this.category);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("redisClusterEntity:");
        if (this.redisClusterEntity == null) {
            sb.append("null");
        } else {
            sb.append(this.redisClusterEntity);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("mongoDBClusterEntity:");
        if (this.mongoDBClusterEntity == null) {
            sb.append("null");
        } else {
            sb.append(this.mongoDBClusterEntity);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("mysqlClusterEntity:");
        if (this.mysqlClusterEntity == null) {
            sb.append("null");
        } else {
            sb.append(this.mysqlClusterEntity);
        }
        first = false;
        if (isSetGranularityType()) {
            if (!first) sb.append(", ");
            sb.append("GranularityType:");
            sb.append(this.GranularityType);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ClusterEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ClusterEntityStandardScheme getScheme() {
            return new ClusterEntityStandardScheme();
        }
    }

    private static class ClusterEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<ClusterEntity> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ClusterEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // CATEGORY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.category = iprot.readString();
                            struct.setCategoryIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // REDIS_CLUSTER_ENTITY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.redisClusterEntity = new RedisClusterEntity();
                            struct.redisClusterEntity.read(iprot);
                            struct.setRedisClusterEntityIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // MONGO_DBCLUSTER_ENTITY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.mongoDBClusterEntity = new MongoDBClusterEntity();
                            struct.mongoDBClusterEntity.read(iprot);
                            struct.setMongoDBClusterEntityIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // MYSQL_CLUSTER_ENTITY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.mysqlClusterEntity = new MysqlClusterEntity();
                            struct.mysqlClusterEntity.read(iprot);
                            struct.setMysqlClusterEntityIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // GRANULARITY_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.GranularityType = iprot.readI32();
                            struct.setGranularityTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ClusterEntity struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.category != null) {
                oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
                oprot.writeString(struct.category);
                oprot.writeFieldEnd();
            }
            if (struct.redisClusterEntity != null) {
                oprot.writeFieldBegin(REDIS_CLUSTER_ENTITY_FIELD_DESC);
                struct.redisClusterEntity.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.mongoDBClusterEntity != null) {
                oprot.writeFieldBegin(MONGO_DBCLUSTER_ENTITY_FIELD_DESC);
                struct.mongoDBClusterEntity.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.mysqlClusterEntity != null) {
                oprot.writeFieldBegin(MYSQL_CLUSTER_ENTITY_FIELD_DESC);
                struct.mysqlClusterEntity.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.isSetGranularityType()) {
                oprot.writeFieldBegin(GRANULARITY_TYPE_FIELD_DESC);
                oprot.writeI32(struct.GranularityType);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ClusterEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ClusterEntityTupleScheme getScheme() {
            return new ClusterEntityTupleScheme();
        }
    }

    private static class ClusterEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<ClusterEntity> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ClusterEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetCategory()) {
                optionals.set(0);
            }
            if (struct.isSetRedisClusterEntity()) {
                optionals.set(1);
            }
            if (struct.isSetMongoDBClusterEntity()) {
                optionals.set(2);
            }
            if (struct.isSetMysqlClusterEntity()) {
                optionals.set(3);
            }
            if (struct.isSetGranularityType()) {
                optionals.set(4);
            }
            oprot.writeBitSet(optionals, 5);
            if (struct.isSetCategory()) {
                oprot.writeString(struct.category);
            }
            if (struct.isSetRedisClusterEntity()) {
                struct.redisClusterEntity.write(oprot);
            }
            if (struct.isSetMongoDBClusterEntity()) {
                struct.mongoDBClusterEntity.write(oprot);
            }
            if (struct.isSetMysqlClusterEntity()) {
                struct.mysqlClusterEntity.write(oprot);
            }
            if (struct.isSetGranularityType()) {
                oprot.writeI32(struct.GranularityType);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ClusterEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(5);
            if (incoming.get(0)) {
                struct.category = iprot.readString();
                struct.setCategoryIsSet(true);
            }
            if (incoming.get(1)) {
                struct.redisClusterEntity = new RedisClusterEntity();
                struct.redisClusterEntity.read(iprot);
                struct.setRedisClusterEntityIsSet(true);
            }
            if (incoming.get(2)) {
                struct.mongoDBClusterEntity = new MongoDBClusterEntity();
                struct.mongoDBClusterEntity.read(iprot);
                struct.setMongoDBClusterEntityIsSet(true);
            }
            if (incoming.get(3)) {
                struct.mysqlClusterEntity = new MysqlClusterEntity();
                struct.mysqlClusterEntity.read(iprot);
                struct.setMysqlClusterEntityIsSet(true);
            }
            if (incoming.get(4)) {
                struct.GranularityType = iprot.readI32();
                struct.setGranularityTypeIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

