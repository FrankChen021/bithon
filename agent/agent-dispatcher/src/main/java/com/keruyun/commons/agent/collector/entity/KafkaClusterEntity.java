/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class KafkaClusterEntity implements org.apache.thrift.TBase<KafkaClusterEntity, KafkaClusterEntity._Fields>, java.io.Serializable, Cloneable, Comparable<KafkaClusterEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KafkaClusterEntity");

  private static final org.apache.thrift.protocol.TField CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nameId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField MESSAGE_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("messageIn", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField BYTES_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("bytesIn", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField BYTES_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("bytesOut", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField BYTES_REJECTED_FIELD_DESC = new org.apache.thrift.protocol.TField("bytesRejected", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField PRODUCE_REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("produceRequests", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField FETCH_REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchRequests", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KafkaClusterEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KafkaClusterEntityTupleSchemeFactory();

  public String clusterId; // required
  public String nameId; // required
  public String hostName; // required
  public int port; // required
  public long timestamp; // required
  public int interval; // required
  public double messageIn; // required
  public long bytesIn; // required
  public long bytesOut; // required
  public long bytesRejected; // required
  public int produceRequests; // required
  public int fetchRequests; // required
  public String type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLUSTER_ID((short)1, "clusterId"),
    NAME_ID((short)2, "nameId"),
    HOST_NAME((short)3, "hostName"),
    PORT((short)4, "port"),
    TIMESTAMP((short)5, "timestamp"),
    INTERVAL((short)6, "interval"),
    MESSAGE_IN((short)7, "messageIn"),
    BYTES_IN((short)8, "bytesIn"),
    BYTES_OUT((short)9, "bytesOut"),
    BYTES_REJECTED((short)10, "bytesRejected"),
    PRODUCE_REQUESTS((short)11, "produceRequests"),
    FETCH_REQUESTS((short)12, "fetchRequests"),
    TYPE((short)13, "type");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLUSTER_ID
          return CLUSTER_ID;
        case 2: // NAME_ID
          return NAME_ID;
        case 3: // HOST_NAME
          return HOST_NAME;
        case 4: // PORT
          return PORT;
        case 5: // TIMESTAMP
          return TIMESTAMP;
        case 6: // INTERVAL
          return INTERVAL;
        case 7: // MESSAGE_IN
          return MESSAGE_IN;
        case 8: // BYTES_IN
          return BYTES_IN;
        case 9: // BYTES_OUT
          return BYTES_OUT;
        case 10: // BYTES_REJECTED
          return BYTES_REJECTED;
        case 11: // PRODUCE_REQUESTS
          return PRODUCE_REQUESTS;
        case 12: // FETCH_REQUESTS
          return FETCH_REQUESTS;
        case 13: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private static final int __TIMESTAMP_ISSET_ID = 1;
  private static final int __INTERVAL_ISSET_ID = 2;
  private static final int __MESSAGEIN_ISSET_ID = 3;
  private static final int __BYTESIN_ISSET_ID = 4;
  private static final int __BYTESOUT_ISSET_ID = 5;
  private static final int __BYTESREJECTED_ISSET_ID = 6;
  private static final int __PRODUCEREQUESTS_ISSET_ID = 7;
  private static final int __FETCHREQUESTS_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("clusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_ID, new org.apache.thrift.meta_data.FieldMetaData("nameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSAGE_IN, new org.apache.thrift.meta_data.FieldMetaData("messageIn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BYTES_IN, new org.apache.thrift.meta_data.FieldMetaData("bytesIn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BYTES_OUT, new org.apache.thrift.meta_data.FieldMetaData("bytesOut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BYTES_REJECTED, new org.apache.thrift.meta_data.FieldMetaData("bytesRejected", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRODUCE_REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("produceRequests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FETCH_REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("fetchRequests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KafkaClusterEntity.class, metaDataMap);
  }

  public KafkaClusterEntity() {
    this.type = "2";

  }

  public KafkaClusterEntity(
    String clusterId,
    String nameId,
    String hostName,
    int port,
    long timestamp,
    int interval,
    double messageIn,
    long bytesIn,
    long bytesOut,
    long bytesRejected,
    int produceRequests,
    int fetchRequests,
    String type)
  {
    this();
    this.clusterId = clusterId;
    this.nameId = nameId;
    this.hostName = hostName;
    this.port = port;
    setPortIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.interval = interval;
    setIntervalIsSet(true);
    this.messageIn = messageIn;
    setMessageInIsSet(true);
    this.bytesIn = bytesIn;
    setBytesInIsSet(true);
    this.bytesOut = bytesOut;
    setBytesOutIsSet(true);
    this.bytesRejected = bytesRejected;
    setBytesRejectedIsSet(true);
    this.produceRequests = produceRequests;
    setProduceRequestsIsSet(true);
    this.fetchRequests = fetchRequests;
    setFetchRequestsIsSet(true);
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KafkaClusterEntity(KafkaClusterEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClusterId()) {
      this.clusterId = other.clusterId;
    }
    if (other.isSetNameId()) {
      this.nameId = other.nameId;
    }
    if (other.isSetHostName()) {
      this.hostName = other.hostName;
    }
    this.port = other.port;
    this.timestamp = other.timestamp;
    this.interval = other.interval;
    this.messageIn = other.messageIn;
    this.bytesIn = other.bytesIn;
    this.bytesOut = other.bytesOut;
    this.bytesRejected = other.bytesRejected;
    this.produceRequests = other.produceRequests;
    this.fetchRequests = other.fetchRequests;
    if (other.isSetType()) {
      this.type = other.type;
    }
  }

  public KafkaClusterEntity deepCopy() {
    return new KafkaClusterEntity(this);
  }

  @Override
  public void clear() {
    this.clusterId = null;
    this.nameId = null;
    this.hostName = null;
    setPortIsSet(false);
    this.port = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setIntervalIsSet(false);
    this.interval = 0;
    setMessageInIsSet(false);
    this.messageIn = 0.0;
    setBytesInIsSet(false);
    this.bytesIn = 0;
    setBytesOutIsSet(false);
    this.bytesOut = 0;
    setBytesRejectedIsSet(false);
    this.bytesRejected = 0;
    setProduceRequestsIsSet(false);
    this.produceRequests = 0;
    setFetchRequestsIsSet(false);
    this.fetchRequests = 0;
    this.type = "2";

  }

  public String getClusterId() {
    return this.clusterId;
  }

  public KafkaClusterEntity setClusterId(String clusterId) {
    this.clusterId = clusterId;
    return this;
  }

  public void unsetClusterId() {
    this.clusterId = null;
  }

  /** Returns true if field clusterId is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterId() {
    return this.clusterId != null;
  }

  public void setClusterIdIsSet(boolean value) {
    if (!value) {
      this.clusterId = null;
    }
  }

  public String getNameId() {
    return this.nameId;
  }

  public KafkaClusterEntity setNameId(String nameId) {
    this.nameId = nameId;
    return this;
  }

  public void unsetNameId() {
    this.nameId = null;
  }

  /** Returns true if field nameId is set (has been assigned a value) and false otherwise */
  public boolean isSetNameId() {
    return this.nameId != null;
  }

  public void setNameIdIsSet(boolean value) {
    if (!value) {
      this.nameId = null;
    }
  }

  public String getHostName() {
    return this.hostName;
  }

  public KafkaClusterEntity setHostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  public void unsetHostName() {
    this.hostName = null;
  }

  /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
  public boolean isSetHostName() {
    return this.hostName != null;
  }

  public void setHostNameIsSet(boolean value) {
    if (!value) {
      this.hostName = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public KafkaClusterEntity setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public KafkaClusterEntity setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getInterval() {
    return this.interval;
  }

  public KafkaClusterEntity setInterval(int interval) {
    this.interval = interval;
    setIntervalIsSet(true);
    return this;
  }

  public void unsetInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  /** Returns true if field interval is set (has been assigned a value) and false otherwise */
  public boolean isSetInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  public void setIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
  }

  public double getMessageIn() {
    return this.messageIn;
  }

  public KafkaClusterEntity setMessageIn(double messageIn) {
    this.messageIn = messageIn;
    setMessageInIsSet(true);
    return this;
  }

  public void unsetMessageIn() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MESSAGEIN_ISSET_ID);
  }

  /** Returns true if field messageIn is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageIn() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MESSAGEIN_ISSET_ID);
  }

  public void setMessageInIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MESSAGEIN_ISSET_ID, value);
  }

  public long getBytesIn() {
    return this.bytesIn;
  }

  public KafkaClusterEntity setBytesIn(long bytesIn) {
    this.bytesIn = bytesIn;
    setBytesInIsSet(true);
    return this;
  }

  public void unsetBytesIn() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BYTESIN_ISSET_ID);
  }

  /** Returns true if field bytesIn is set (has been assigned a value) and false otherwise */
  public boolean isSetBytesIn() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BYTESIN_ISSET_ID);
  }

  public void setBytesInIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BYTESIN_ISSET_ID, value);
  }

  public long getBytesOut() {
    return this.bytesOut;
  }

  public KafkaClusterEntity setBytesOut(long bytesOut) {
    this.bytesOut = bytesOut;
    setBytesOutIsSet(true);
    return this;
  }

  public void unsetBytesOut() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BYTESOUT_ISSET_ID);
  }

  /** Returns true if field bytesOut is set (has been assigned a value) and false otherwise */
  public boolean isSetBytesOut() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BYTESOUT_ISSET_ID);
  }

  public void setBytesOutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BYTESOUT_ISSET_ID, value);
  }

  public long getBytesRejected() {
    return this.bytesRejected;
  }

  public KafkaClusterEntity setBytesRejected(long bytesRejected) {
    this.bytesRejected = bytesRejected;
    setBytesRejectedIsSet(true);
    return this;
  }

  public void unsetBytesRejected() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BYTESREJECTED_ISSET_ID);
  }

  /** Returns true if field bytesRejected is set (has been assigned a value) and false otherwise */
  public boolean isSetBytesRejected() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BYTESREJECTED_ISSET_ID);
  }

  public void setBytesRejectedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BYTESREJECTED_ISSET_ID, value);
  }

  public int getProduceRequests() {
    return this.produceRequests;
  }

  public KafkaClusterEntity setProduceRequests(int produceRequests) {
    this.produceRequests = produceRequests;
    setProduceRequestsIsSet(true);
    return this;
  }

  public void unsetProduceRequests() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRODUCEREQUESTS_ISSET_ID);
  }

  /** Returns true if field produceRequests is set (has been assigned a value) and false otherwise */
  public boolean isSetProduceRequests() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRODUCEREQUESTS_ISSET_ID);
  }

  public void setProduceRequestsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRODUCEREQUESTS_ISSET_ID, value);
  }

  public int getFetchRequests() {
    return this.fetchRequests;
  }

  public KafkaClusterEntity setFetchRequests(int fetchRequests) {
    this.fetchRequests = fetchRequests;
    setFetchRequestsIsSet(true);
    return this;
  }

  public void unsetFetchRequests() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FETCHREQUESTS_ISSET_ID);
  }

  /** Returns true if field fetchRequests is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchRequests() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FETCHREQUESTS_ISSET_ID);
  }

  public void setFetchRequestsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FETCHREQUESTS_ISSET_ID, value);
  }

  public String getType() {
    return this.type;
  }

  public KafkaClusterEntity setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLUSTER_ID:
      if (value == null) {
        unsetClusterId();
      } else {
        setClusterId((String)value);
      }
      break;

    case NAME_ID:
      if (value == null) {
        unsetNameId();
      } else {
        setNameId((String)value);
      }
      break;

    case HOST_NAME:
      if (value == null) {
        unsetHostName();
      } else {
        setHostName((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((Integer)value);
      }
      break;

    case MESSAGE_IN:
      if (value == null) {
        unsetMessageIn();
      } else {
        setMessageIn((Double)value);
      }
      break;

    case BYTES_IN:
      if (value == null) {
        unsetBytesIn();
      } else {
        setBytesIn((Long)value);
      }
      break;

    case BYTES_OUT:
      if (value == null) {
        unsetBytesOut();
      } else {
        setBytesOut((Long)value);
      }
      break;

    case BYTES_REJECTED:
      if (value == null) {
        unsetBytesRejected();
      } else {
        setBytesRejected((Long)value);
      }
      break;

    case PRODUCE_REQUESTS:
      if (value == null) {
        unsetProduceRequests();
      } else {
        setProduceRequests((Integer)value);
      }
      break;

    case FETCH_REQUESTS:
      if (value == null) {
        unsetFetchRequests();
      } else {
        setFetchRequests((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLUSTER_ID:
      return getClusterId();

    case NAME_ID:
      return getNameId();

    case HOST_NAME:
      return getHostName();

    case PORT:
      return getPort();

    case TIMESTAMP:
      return getTimestamp();

    case INTERVAL:
      return getInterval();

    case MESSAGE_IN:
      return getMessageIn();

    case BYTES_IN:
      return getBytesIn();

    case BYTES_OUT:
      return getBytesOut();

    case BYTES_REJECTED:
      return getBytesRejected();

    case PRODUCE_REQUESTS:
      return getProduceRequests();

    case FETCH_REQUESTS:
      return getFetchRequests();

    case TYPE:
      return getType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLUSTER_ID:
      return isSetClusterId();
    case NAME_ID:
      return isSetNameId();
    case HOST_NAME:
      return isSetHostName();
    case PORT:
      return isSetPort();
    case TIMESTAMP:
      return isSetTimestamp();
    case INTERVAL:
      return isSetInterval();
    case MESSAGE_IN:
      return isSetMessageIn();
    case BYTES_IN:
      return isSetBytesIn();
    case BYTES_OUT:
      return isSetBytesOut();
    case BYTES_REJECTED:
      return isSetBytesRejected();
    case PRODUCE_REQUESTS:
      return isSetProduceRequests();
    case FETCH_REQUESTS:
      return isSetFetchRequests();
    case TYPE:
      return isSetType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KafkaClusterEntity)
      return this.equals((KafkaClusterEntity)that);
    return false;
  }

  public boolean equals(KafkaClusterEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_clusterId = true && this.isSetClusterId();
    boolean that_present_clusterId = true && that.isSetClusterId();
    if (this_present_clusterId || that_present_clusterId) {
      if (!(this_present_clusterId && that_present_clusterId))
        return false;
      if (!this.clusterId.equals(that.clusterId))
        return false;
    }

    boolean this_present_nameId = true && this.isSetNameId();
    boolean that_present_nameId = true && that.isSetNameId();
    if (this_present_nameId || that_present_nameId) {
      if (!(this_present_nameId && that_present_nameId))
        return false;
      if (!this.nameId.equals(that.nameId))
        return false;
    }

    boolean this_present_hostName = true && this.isSetHostName();
    boolean that_present_hostName = true && that.isSetHostName();
    if (this_present_hostName || that_present_hostName) {
      if (!(this_present_hostName && that_present_hostName))
        return false;
      if (!this.hostName.equals(that.hostName))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_interval = true;
    boolean that_present_interval = true;
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (this.interval != that.interval)
        return false;
    }

    boolean this_present_messageIn = true;
    boolean that_present_messageIn = true;
    if (this_present_messageIn || that_present_messageIn) {
      if (!(this_present_messageIn && that_present_messageIn))
        return false;
      if (this.messageIn != that.messageIn)
        return false;
    }

    boolean this_present_bytesIn = true;
    boolean that_present_bytesIn = true;
    if (this_present_bytesIn || that_present_bytesIn) {
      if (!(this_present_bytesIn && that_present_bytesIn))
        return false;
      if (this.bytesIn != that.bytesIn)
        return false;
    }

    boolean this_present_bytesOut = true;
    boolean that_present_bytesOut = true;
    if (this_present_bytesOut || that_present_bytesOut) {
      if (!(this_present_bytesOut && that_present_bytesOut))
        return false;
      if (this.bytesOut != that.bytesOut)
        return false;
    }

    boolean this_present_bytesRejected = true;
    boolean that_present_bytesRejected = true;
    if (this_present_bytesRejected || that_present_bytesRejected) {
      if (!(this_present_bytesRejected && that_present_bytesRejected))
        return false;
      if (this.bytesRejected != that.bytesRejected)
        return false;
    }

    boolean this_present_produceRequests = true;
    boolean that_present_produceRequests = true;
    if (this_present_produceRequests || that_present_produceRequests) {
      if (!(this_present_produceRequests && that_present_produceRequests))
        return false;
      if (this.produceRequests != that.produceRequests)
        return false;
    }

    boolean this_present_fetchRequests = true;
    boolean that_present_fetchRequests = true;
    if (this_present_fetchRequests || that_present_fetchRequests) {
      if (!(this_present_fetchRequests && that_present_fetchRequests))
        return false;
      if (this.fetchRequests != that.fetchRequests)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetClusterId()) ? 131071 : 524287);
    if (isSetClusterId())
      hashCode = hashCode * 8191 + clusterId.hashCode();

    hashCode = hashCode * 8191 + ((isSetNameId()) ? 131071 : 524287);
    if (isSetNameId())
      hashCode = hashCode * 8191 + nameId.hashCode();

    hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
    if (isSetHostName())
      hashCode = hashCode * 8191 + hostName.hashCode();

    hashCode = hashCode * 8191 + port;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + interval;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(messageIn);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bytesIn);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bytesOut);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bytesRejected);

    hashCode = hashCode * 8191 + produceRequests;

    hashCode = hashCode * 8191 + fetchRequests;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(KafkaClusterEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClusterId()).compareTo(other.isSetClusterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterId, other.clusterId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameId()).compareTo(other.isSetNameId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameId, other.nameId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageIn()).compareTo(other.isSetMessageIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageIn, other.messageIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBytesIn()).compareTo(other.isSetBytesIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBytesIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytesIn, other.bytesIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBytesOut()).compareTo(other.isSetBytesOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBytesOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytesOut, other.bytesOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBytesRejected()).compareTo(other.isSetBytesRejected());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBytesRejected()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytesRejected, other.bytesRejected);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProduceRequests()).compareTo(other.isSetProduceRequests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProduceRequests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.produceRequests, other.produceRequests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchRequests()).compareTo(other.isSetFetchRequests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchRequests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchRequests, other.fetchRequests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KafkaClusterEntity(");
    boolean first = true;

    sb.append("clusterId:");
    if (this.clusterId == null) {
      sb.append("null");
    } else {
      sb.append(this.clusterId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nameId:");
    if (this.nameId == null) {
      sb.append("null");
    } else {
      sb.append(this.nameId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostName:");
    if (this.hostName == null) {
      sb.append("null");
    } else {
      sb.append(this.hostName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interval:");
    sb.append(this.interval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageIn:");
    sb.append(this.messageIn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bytesIn:");
    sb.append(this.bytesIn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bytesOut:");
    sb.append(this.bytesOut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bytesRejected:");
    sb.append(this.bytesRejected);
    first = false;
    if (!first) sb.append(", ");
    sb.append("produceRequests:");
    sb.append(this.produceRequests);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetchRequests:");
    sb.append(this.fetchRequests);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KafkaClusterEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaClusterEntityStandardScheme getScheme() {
      return new KafkaClusterEntityStandardScheme();
    }
  }

  private static class KafkaClusterEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<KafkaClusterEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KafkaClusterEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLUSTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clusterId = iprot.readString();
              struct.setClusterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameId = iprot.readString();
              struct.setNameIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostName = iprot.readString();
              struct.setHostNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interval = iprot.readI32();
              struct.setIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MESSAGE_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.messageIn = iprot.readDouble();
              struct.setMessageInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BYTES_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bytesIn = iprot.readI64();
              struct.setBytesInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BYTES_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bytesOut = iprot.readI64();
              struct.setBytesOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BYTES_REJECTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bytesRejected = iprot.readI64();
              struct.setBytesRejectedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PRODUCE_REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.produceRequests = iprot.readI32();
              struct.setProduceRequestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FETCH_REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fetchRequests = iprot.readI32();
              struct.setFetchRequestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KafkaClusterEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clusterId != null) {
        oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
        oprot.writeString(struct.clusterId);
        oprot.writeFieldEnd();
      }
      if (struct.nameId != null) {
        oprot.writeFieldBegin(NAME_ID_FIELD_DESC);
        oprot.writeString(struct.nameId);
        oprot.writeFieldEnd();
      }
      if (struct.hostName != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(struct.hostName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.port);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.interval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGE_IN_FIELD_DESC);
      oprot.writeDouble(struct.messageIn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BYTES_IN_FIELD_DESC);
      oprot.writeI64(struct.bytesIn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BYTES_OUT_FIELD_DESC);
      oprot.writeI64(struct.bytesOut);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BYTES_REJECTED_FIELD_DESC);
      oprot.writeI64(struct.bytesRejected);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCE_REQUESTS_FIELD_DESC);
      oprot.writeI32(struct.produceRequests);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FETCH_REQUESTS_FIELD_DESC);
      oprot.writeI32(struct.fetchRequests);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KafkaClusterEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaClusterEntityTupleScheme getScheme() {
      return new KafkaClusterEntityTupleScheme();
    }
  }

  private static class KafkaClusterEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<KafkaClusterEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KafkaClusterEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetClusterId()) {
        optionals.set(0);
      }
      if (struct.isSetNameId()) {
        optionals.set(1);
      }
      if (struct.isSetHostName()) {
        optionals.set(2);
      }
      if (struct.isSetPort()) {
        optionals.set(3);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(4);
      }
      if (struct.isSetInterval()) {
        optionals.set(5);
      }
      if (struct.isSetMessageIn()) {
        optionals.set(6);
      }
      if (struct.isSetBytesIn()) {
        optionals.set(7);
      }
      if (struct.isSetBytesOut()) {
        optionals.set(8);
      }
      if (struct.isSetBytesRejected()) {
        optionals.set(9);
      }
      if (struct.isSetProduceRequests()) {
        optionals.set(10);
      }
      if (struct.isSetFetchRequests()) {
        optionals.set(11);
      }
      if (struct.isSetType()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetClusterId()) {
        oprot.writeString(struct.clusterId);
      }
      if (struct.isSetNameId()) {
        oprot.writeString(struct.nameId);
      }
      if (struct.isSetHostName()) {
        oprot.writeString(struct.hostName);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetInterval()) {
        oprot.writeI32(struct.interval);
      }
      if (struct.isSetMessageIn()) {
        oprot.writeDouble(struct.messageIn);
      }
      if (struct.isSetBytesIn()) {
        oprot.writeI64(struct.bytesIn);
      }
      if (struct.isSetBytesOut()) {
        oprot.writeI64(struct.bytesOut);
      }
      if (struct.isSetBytesRejected()) {
        oprot.writeI64(struct.bytesRejected);
      }
      if (struct.isSetProduceRequests()) {
        oprot.writeI32(struct.produceRequests);
      }
      if (struct.isSetFetchRequests()) {
        oprot.writeI32(struct.fetchRequests);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KafkaClusterEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.clusterId = iprot.readString();
        struct.setClusterIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nameId = iprot.readString();
        struct.setNameIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hostName = iprot.readString();
        struct.setHostNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(4)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(5)) {
        struct.interval = iprot.readI32();
        struct.setIntervalIsSet(true);
      }
      if (incoming.get(6)) {
        struct.messageIn = iprot.readDouble();
        struct.setMessageInIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bytesIn = iprot.readI64();
        struct.setBytesInIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bytesOut = iprot.readI64();
        struct.setBytesOutIsSet(true);
      }
      if (incoming.get(9)) {
        struct.bytesRejected = iprot.readI64();
        struct.setBytesRejectedIsSet(true);
      }
      if (incoming.get(10)) {
        struct.produceRequests = iprot.readI32();
        struct.setProduceRequestsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.fetchRequests = iprot.readI32();
        struct.setFetchRequestsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

