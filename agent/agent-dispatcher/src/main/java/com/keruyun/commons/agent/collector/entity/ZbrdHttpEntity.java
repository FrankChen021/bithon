/**
 * Autogenerated by Thrift Compiler (0.11.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * ***************** ZBRD Http  ****************
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class ZbrdHttpEntity implements org.apache.thrift.TBase<ZbrdHttpEntity, ZbrdHttpEntity._Fields>, java.io.Serializable, Cloneable, Comparable<ZbrdHttpEntity> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ZbrdHttpEntity");

    private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short) 2);
    private static final org.apache.thrift.protocol.TField TARGET_DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("targetDomain", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField TARGET_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("targetUri", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.protocol.TField COST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("costTime", org.apache.thrift.protocol.TType.I64, (short) 5);
    private static final org.apache.thrift.protocol.TField COUNT4XX_FIELD_DESC = new org.apache.thrift.protocol.TField("count4xx", org.apache.thrift.protocol.TType.I32, (short) 6);
    private static final org.apache.thrift.protocol.TField COUNT5XX_FIELD_DESC = new org.apache.thrift.protocol.TField("count5xx", org.apache.thrift.protocol.TType.I32, (short) 7);
    private static final org.apache.thrift.protocol.TField REQUEST_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestCount", org.apache.thrift.protocol.TType.I32, (short) 8);
    private static final org.apache.thrift.protocol.TField REQUEST_BYTE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestByteSize", org.apache.thrift.protocol.TType.I64, (short) 9);
    private static final org.apache.thrift.protocol.TField RESPONSE_BYTE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("responseByteSize", org.apache.thrift.protocol.TType.I64, (short) 10);
    private static final org.apache.thrift.protocol.TField METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("method", org.apache.thrift.protocol.TType.STRING, (short) 11);
    private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short) 12);
    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short) 13);
    private static final org.apache.thrift.protocol.TField GRANULARITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("GranularityType", org.apache.thrift.protocol.TType.I32, (short) 14);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ZbrdHttpEntityStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ZbrdHttpEntityTupleSchemeFactory();

    public String host; // required
    public long timestamp; // required
    public String targetDomain; // required
    public String targetUri; // required
    public long costTime; // required
    public int count4xx; // required
    public int count5xx; // required
    public int requestCount; // required
    public long requestByteSize; // required
    public long responseByteSize; // required
    public String method; // required
    public String appName; // required
    public String category; // required
    public int GranularityType; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        HOST((short) 1, "host"),
        TIMESTAMP((short) 2, "timestamp"),
        TARGET_DOMAIN((short) 3, "targetDomain"),
        TARGET_URI((short) 4, "targetUri"),
        COST_TIME((short) 5, "costTime"),
        COUNT4XX((short) 6, "count4xx"),
        COUNT5XX((short) 7, "count5xx"),
        REQUEST_COUNT((short) 8, "requestCount"),
        REQUEST_BYTE_SIZE((short) 9, "requestByteSize"),
        RESPONSE_BYTE_SIZE((short) 10, "responseByteSize"),
        METHOD((short) 11, "method"),
        APP_NAME((short) 12, "appName"),
        CATEGORY((short) 13, "category"),
        GRANULARITY_TYPE((short) 14, "GranularityType");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // HOST
                    return HOST;
                case 2: // TIMESTAMP
                    return TIMESTAMP;
                case 3: // TARGET_DOMAIN
                    return TARGET_DOMAIN;
                case 4: // TARGET_URI
                    return TARGET_URI;
                case 5: // COST_TIME
                    return COST_TIME;
                case 6: // COUNT4XX
                    return COUNT4XX;
                case 7: // COUNT5XX
                    return COUNT5XX;
                case 8: // REQUEST_COUNT
                    return REQUEST_COUNT;
                case 9: // REQUEST_BYTE_SIZE
                    return REQUEST_BYTE_SIZE;
                case 10: // RESPONSE_BYTE_SIZE
                    return RESPONSE_BYTE_SIZE;
                case 11: // METHOD
                    return METHOD;
                case 12: // APP_NAME
                    return APP_NAME;
                case 13: // CATEGORY
                    return CATEGORY;
                case 14: // GRANULARITY_TYPE
                    return GRANULARITY_TYPE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __TIMESTAMP_ISSET_ID = 0;
    private static final int __COSTTIME_ISSET_ID = 1;
    private static final int __COUNT4XX_ISSET_ID = 2;
    private static final int __COUNT5XX_ISSET_ID = 3;
    private static final int __REQUESTCOUNT_ISSET_ID = 4;
    private static final int __REQUESTBYTESIZE_ISSET_ID = 5;
    private static final int __RESPONSEBYTESIZE_ISSET_ID = 6;
    private static final int __GRANULARITYTYPE_ISSET_ID = 7;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.GRANULARITY_TYPE};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                               new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.TARGET_DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("targetDomain", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TARGET_URI, new org.apache.thrift.meta_data.FieldMetaData("targetUri", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                     new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.COST_TIME, new org.apache.thrift.meta_data.FieldMetaData("costTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.COUNT4XX, new org.apache.thrift.meta_data.FieldMetaData("count4xx", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.COUNT5XX, new org.apache.thrift.meta_data.FieldMetaData("count5xx", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.REQUEST_COUNT, new org.apache.thrift.meta_data.FieldMetaData("requestCount", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.REQUEST_BYTE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("requestByteSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.RESPONSE_BYTE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("responseByteSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.METHOD, new org.apache.thrift.meta_data.FieldMetaData("method", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                 new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.GRANULARITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("GranularityType", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                                                                                           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ZbrdHttpEntity.class, metaDataMap);
    }

    public ZbrdHttpEntity() {
    }

    public ZbrdHttpEntity(
        String host,
        long timestamp,
        String targetDomain,
        String targetUri,
        long costTime,
        int count4xx,
        int count5xx,
        int requestCount,
        long requestByteSize,
        long responseByteSize,
        String method,
        String appName,
        String category) {
        this();
        this.host = host;
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        this.targetDomain = targetDomain;
        this.targetUri = targetUri;
        this.costTime = costTime;
        setCostTimeIsSet(true);
        this.count4xx = count4xx;
        setCount4xxIsSet(true);
        this.count5xx = count5xx;
        setCount5xxIsSet(true);
        this.requestCount = requestCount;
        setRequestCountIsSet(true);
        this.requestByteSize = requestByteSize;
        setRequestByteSizeIsSet(true);
        this.responseByteSize = responseByteSize;
        setResponseByteSizeIsSet(true);
        this.method = method;
        this.appName = appName;
        this.category = category;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ZbrdHttpEntity(ZbrdHttpEntity other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetHost()) {
            this.host = other.host;
        }
        this.timestamp = other.timestamp;
        if (other.isSetTargetDomain()) {
            this.targetDomain = other.targetDomain;
        }
        if (other.isSetTargetUri()) {
            this.targetUri = other.targetUri;
        }
        this.costTime = other.costTime;
        this.count4xx = other.count4xx;
        this.count5xx = other.count5xx;
        this.requestCount = other.requestCount;
        this.requestByteSize = other.requestByteSize;
        this.responseByteSize = other.responseByteSize;
        if (other.isSetMethod()) {
            this.method = other.method;
        }
        if (other.isSetAppName()) {
            this.appName = other.appName;
        }
        if (other.isSetCategory()) {
            this.category = other.category;
        }
        this.GranularityType = other.GranularityType;
    }

    public ZbrdHttpEntity deepCopy() {
        return new ZbrdHttpEntity(this);
    }

    @Override
    public void clear() {
        this.host = null;
        setTimestampIsSet(false);
        this.timestamp = 0;
        this.targetDomain = null;
        this.targetUri = null;
        setCostTimeIsSet(false);
        this.costTime = 0;
        setCount4xxIsSet(false);
        this.count4xx = 0;
        setCount5xxIsSet(false);
        this.count5xx = 0;
        setRequestCountIsSet(false);
        this.requestCount = 0;
        setRequestByteSizeIsSet(false);
        this.requestByteSize = 0;
        setResponseByteSizeIsSet(false);
        this.responseByteSize = 0;
        this.method = null;
        this.appName = null;
        this.category = null;
        setGranularityTypeIsSet(false);
        this.GranularityType = 0;
    }

    public String getHost() {
        return this.host;
    }

    public ZbrdHttpEntity setHost(String host) {
        this.host = host;
        return this;
    }

    public void unsetHost() {
        this.host = null;
    }

    /** Returns true if field host is set (has been assigned a value) and false otherwise */
    public boolean isSetHost() {
        return this.host != null;
    }

    public void setHostIsSet(boolean value) {
        if (!value) {
            this.host = null;
        }
    }

    public long getTimestamp() {
        return this.timestamp;
    }

    public ZbrdHttpEntity setTimestamp(long timestamp) {
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        return this;
    }

    public void unsetTimestamp() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public String getTargetDomain() {
        return this.targetDomain;
    }

    public ZbrdHttpEntity setTargetDomain(String targetDomain) {
        this.targetDomain = targetDomain;
        return this;
    }

    public void unsetTargetDomain() {
        this.targetDomain = null;
    }

    /** Returns true if field targetDomain is set (has been assigned a value) and false otherwise */
    public boolean isSetTargetDomain() {
        return this.targetDomain != null;
    }

    public void setTargetDomainIsSet(boolean value) {
        if (!value) {
            this.targetDomain = null;
        }
    }

    public String getTargetUri() {
        return this.targetUri;
    }

    public ZbrdHttpEntity setTargetUri(String targetUri) {
        this.targetUri = targetUri;
        return this;
    }

    public void unsetTargetUri() {
        this.targetUri = null;
    }

    /** Returns true if field targetUri is set (has been assigned a value) and false otherwise */
    public boolean isSetTargetUri() {
        return this.targetUri != null;
    }

    public void setTargetUriIsSet(boolean value) {
        if (!value) {
            this.targetUri = null;
        }
    }

    public long getCostTime() {
        return this.costTime;
    }

    public ZbrdHttpEntity setCostTime(long costTime) {
        this.costTime = costTime;
        setCostTimeIsSet(true);
        return this;
    }

    public void unsetCostTime() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COSTTIME_ISSET_ID);
    }

    /** Returns true if field costTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCostTime() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COSTTIME_ISSET_ID);
    }

    public void setCostTimeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COSTTIME_ISSET_ID, value);
    }

    public int getCount4xx() {
        return this.count4xx;
    }

    public ZbrdHttpEntity setCount4xx(int count4xx) {
        this.count4xx = count4xx;
        setCount4xxIsSet(true);
        return this;
    }

    public void unsetCount4xx() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT4XX_ISSET_ID);
    }

    /** Returns true if field count4xx is set (has been assigned a value) and false otherwise */
    public boolean isSetCount4xx() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT4XX_ISSET_ID);
    }

    public void setCount4xxIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT4XX_ISSET_ID, value);
    }

    public int getCount5xx() {
        return this.count5xx;
    }

    public ZbrdHttpEntity setCount5xx(int count5xx) {
        this.count5xx = count5xx;
        setCount5xxIsSet(true);
        return this;
    }

    public void unsetCount5xx() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT5XX_ISSET_ID);
    }

    /** Returns true if field count5xx is set (has been assigned a value) and false otherwise */
    public boolean isSetCount5xx() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT5XX_ISSET_ID);
    }

    public void setCount5xxIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT5XX_ISSET_ID, value);
    }

    public int getRequestCount() {
        return this.requestCount;
    }

    public ZbrdHttpEntity setRequestCount(int requestCount) {
        this.requestCount = requestCount;
        setRequestCountIsSet(true);
        return this;
    }

    public void unsetRequestCount() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTCOUNT_ISSET_ID);
    }

    /** Returns true if field requestCount is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestCount() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTCOUNT_ISSET_ID);
    }

    public void setRequestCountIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTCOUNT_ISSET_ID, value);
    }

    public long getRequestByteSize() {
        return this.requestByteSize;
    }

    public ZbrdHttpEntity setRequestByteSize(long requestByteSize) {
        this.requestByteSize = requestByteSize;
        setRequestByteSizeIsSet(true);
        return this;
    }

    public void unsetRequestByteSize() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTBYTESIZE_ISSET_ID);
    }

    /** Returns true if field requestByteSize is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestByteSize() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTBYTESIZE_ISSET_ID);
    }

    public void setRequestByteSizeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTBYTESIZE_ISSET_ID, value);
    }

    public long getResponseByteSize() {
        return this.responseByteSize;
    }

    public ZbrdHttpEntity setResponseByteSize(long responseByteSize) {
        this.responseByteSize = responseByteSize;
        setResponseByteSizeIsSet(true);
        return this;
    }

    public void unsetResponseByteSize() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSEBYTESIZE_ISSET_ID);
    }

    /** Returns true if field responseByteSize is set (has been assigned a value) and false otherwise */
    public boolean isSetResponseByteSize() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSEBYTESIZE_ISSET_ID);
    }

    public void setResponseByteSizeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSEBYTESIZE_ISSET_ID, value);
    }

    public String getMethod() {
        return this.method;
    }

    public ZbrdHttpEntity setMethod(String method) {
        this.method = method;
        return this;
    }

    public void unsetMethod() {
        this.method = null;
    }

    /** Returns true if field method is set (has been assigned a value) and false otherwise */
    public boolean isSetMethod() {
        return this.method != null;
    }

    public void setMethodIsSet(boolean value) {
        if (!value) {
            this.method = null;
        }
    }

    public String getAppName() {
        return this.appName;
    }

    public ZbrdHttpEntity setAppName(String appName) {
        this.appName = appName;
        return this;
    }

    public void unsetAppName() {
        this.appName = null;
    }

    /** Returns true if field appName is set (has been assigned a value) and false otherwise */
    public boolean isSetAppName() {
        return this.appName != null;
    }

    public void setAppNameIsSet(boolean value) {
        if (!value) {
            this.appName = null;
        }
    }

    public String getCategory() {
        return this.category;
    }

    public ZbrdHttpEntity setCategory(String category) {
        this.category = category;
        return this;
    }

    public void unsetCategory() {
        this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
        return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
        if (!value) {
            this.category = null;
        }
    }

    public int getGranularityType() {
        return this.GranularityType;
    }

    public ZbrdHttpEntity setGranularityType(int GranularityType) {
        this.GranularityType = GranularityType;
        setGranularityTypeIsSet(true);
        return this;
    }

    public void unsetGranularityType() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID);
    }

    /** Returns true if field GranularityType is set (has been assigned a value) and false otherwise */
    public boolean isSetGranularityType() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID);
    }

    public void setGranularityTypeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case HOST:
                if (value == null) {
                    unsetHost();
                } else {
                    setHost((String) value);
                }
                break;

            case TIMESTAMP:
                if (value == null) {
                    unsetTimestamp();
                } else {
                    setTimestamp((Long) value);
                }
                break;

            case TARGET_DOMAIN:
                if (value == null) {
                    unsetTargetDomain();
                } else {
                    setTargetDomain((String) value);
                }
                break;

            case TARGET_URI:
                if (value == null) {
                    unsetTargetUri();
                } else {
                    setTargetUri((String) value);
                }
                break;

            case COST_TIME:
                if (value == null) {
                    unsetCostTime();
                } else {
                    setCostTime((Long) value);
                }
                break;

            case COUNT4XX:
                if (value == null) {
                    unsetCount4xx();
                } else {
                    setCount4xx((Integer) value);
                }
                break;

            case COUNT5XX:
                if (value == null) {
                    unsetCount5xx();
                } else {
                    setCount5xx((Integer) value);
                }
                break;

            case REQUEST_COUNT:
                if (value == null) {
                    unsetRequestCount();
                } else {
                    setRequestCount((Integer) value);
                }
                break;

            case REQUEST_BYTE_SIZE:
                if (value == null) {
                    unsetRequestByteSize();
                } else {
                    setRequestByteSize((Long) value);
                }
                break;

            case RESPONSE_BYTE_SIZE:
                if (value == null) {
                    unsetResponseByteSize();
                } else {
                    setResponseByteSize((Long) value);
                }
                break;

            case METHOD:
                if (value == null) {
                    unsetMethod();
                } else {
                    setMethod((String) value);
                }
                break;

            case APP_NAME:
                if (value == null) {
                    unsetAppName();
                } else {
                    setAppName((String) value);
                }
                break;

            case CATEGORY:
                if (value == null) {
                    unsetCategory();
                } else {
                    setCategory((String) value);
                }
                break;

            case GRANULARITY_TYPE:
                if (value == null) {
                    unsetGranularityType();
                } else {
                    setGranularityType((Integer) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case HOST:
                return getHost();

            case TIMESTAMP:
                return getTimestamp();

            case TARGET_DOMAIN:
                return getTargetDomain();

            case TARGET_URI:
                return getTargetUri();

            case COST_TIME:
                return getCostTime();

            case COUNT4XX:
                return getCount4xx();

            case COUNT5XX:
                return getCount5xx();

            case REQUEST_COUNT:
                return getRequestCount();

            case REQUEST_BYTE_SIZE:
                return getRequestByteSize();

            case RESPONSE_BYTE_SIZE:
                return getResponseByteSize();

            case METHOD:
                return getMethod();

            case APP_NAME:
                return getAppName();

            case CATEGORY:
                return getCategory();

            case GRANULARITY_TYPE:
                return getGranularityType();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case HOST:
                return isSetHost();
            case TIMESTAMP:
                return isSetTimestamp();
            case TARGET_DOMAIN:
                return isSetTargetDomain();
            case TARGET_URI:
                return isSetTargetUri();
            case COST_TIME:
                return isSetCostTime();
            case COUNT4XX:
                return isSetCount4xx();
            case COUNT5XX:
                return isSetCount5xx();
            case REQUEST_COUNT:
                return isSetRequestCount();
            case REQUEST_BYTE_SIZE:
                return isSetRequestByteSize();
            case RESPONSE_BYTE_SIZE:
                return isSetResponseByteSize();
            case METHOD:
                return isSetMethod();
            case APP_NAME:
                return isSetAppName();
            case CATEGORY:
                return isSetCategory();
            case GRANULARITY_TYPE:
                return isSetGranularityType();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof ZbrdHttpEntity)
            return this.equals((ZbrdHttpEntity) that);
        return false;
    }

    public boolean equals(ZbrdHttpEntity that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_host = true && this.isSetHost();
        boolean that_present_host = true && that.isSetHost();
        if (this_present_host || that_present_host) {
            if (!(this_present_host && that_present_host))
                return false;
            if (!this.host.equals(that.host))
                return false;
        }

        boolean this_present_timestamp = true;
        boolean that_present_timestamp = true;
        if (this_present_timestamp || that_present_timestamp) {
            if (!(this_present_timestamp && that_present_timestamp))
                return false;
            if (this.timestamp != that.timestamp)
                return false;
        }

        boolean this_present_targetDomain = true && this.isSetTargetDomain();
        boolean that_present_targetDomain = true && that.isSetTargetDomain();
        if (this_present_targetDomain || that_present_targetDomain) {
            if (!(this_present_targetDomain && that_present_targetDomain))
                return false;
            if (!this.targetDomain.equals(that.targetDomain))
                return false;
        }

        boolean this_present_targetUri = true && this.isSetTargetUri();
        boolean that_present_targetUri = true && that.isSetTargetUri();
        if (this_present_targetUri || that_present_targetUri) {
            if (!(this_present_targetUri && that_present_targetUri))
                return false;
            if (!this.targetUri.equals(that.targetUri))
                return false;
        }

        boolean this_present_costTime = true;
        boolean that_present_costTime = true;
        if (this_present_costTime || that_present_costTime) {
            if (!(this_present_costTime && that_present_costTime))
                return false;
            if (this.costTime != that.costTime)
                return false;
        }

        boolean this_present_count4xx = true;
        boolean that_present_count4xx = true;
        if (this_present_count4xx || that_present_count4xx) {
            if (!(this_present_count4xx && that_present_count4xx))
                return false;
            if (this.count4xx != that.count4xx)
                return false;
        }

        boolean this_present_count5xx = true;
        boolean that_present_count5xx = true;
        if (this_present_count5xx || that_present_count5xx) {
            if (!(this_present_count5xx && that_present_count5xx))
                return false;
            if (this.count5xx != that.count5xx)
                return false;
        }

        boolean this_present_requestCount = true;
        boolean that_present_requestCount = true;
        if (this_present_requestCount || that_present_requestCount) {
            if (!(this_present_requestCount && that_present_requestCount))
                return false;
            if (this.requestCount != that.requestCount)
                return false;
        }

        boolean this_present_requestByteSize = true;
        boolean that_present_requestByteSize = true;
        if (this_present_requestByteSize || that_present_requestByteSize) {
            if (!(this_present_requestByteSize && that_present_requestByteSize))
                return false;
            if (this.requestByteSize != that.requestByteSize)
                return false;
        }

        boolean this_present_responseByteSize = true;
        boolean that_present_responseByteSize = true;
        if (this_present_responseByteSize || that_present_responseByteSize) {
            if (!(this_present_responseByteSize && that_present_responseByteSize))
                return false;
            if (this.responseByteSize != that.responseByteSize)
                return false;
        }

        boolean this_present_method = true && this.isSetMethod();
        boolean that_present_method = true && that.isSetMethod();
        if (this_present_method || that_present_method) {
            if (!(this_present_method && that_present_method))
                return false;
            if (!this.method.equals(that.method))
                return false;
        }

        boolean this_present_appName = true && this.isSetAppName();
        boolean that_present_appName = true && that.isSetAppName();
        if (this_present_appName || that_present_appName) {
            if (!(this_present_appName && that_present_appName))
                return false;
            if (!this.appName.equals(that.appName))
                return false;
        }

        boolean this_present_category = true && this.isSetCategory();
        boolean that_present_category = true && that.isSetCategory();
        if (this_present_category || that_present_category) {
            if (!(this_present_category && that_present_category))
                return false;
            if (!this.category.equals(that.category))
                return false;
        }

        boolean this_present_GranularityType = true && this.isSetGranularityType();
        boolean that_present_GranularityType = true && that.isSetGranularityType();
        if (this_present_GranularityType || that_present_GranularityType) {
            if (!(this_present_GranularityType && that_present_GranularityType))
                return false;
            if (this.GranularityType != that.GranularityType)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
        if (isSetHost())
            hashCode = hashCode * 8191 + host.hashCode();

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

        hashCode = hashCode * 8191 + ((isSetTargetDomain()) ? 131071 : 524287);
        if (isSetTargetDomain())
            hashCode = hashCode * 8191 + targetDomain.hashCode();

        hashCode = hashCode * 8191 + ((isSetTargetUri()) ? 131071 : 524287);
        if (isSetTargetUri())
            hashCode = hashCode * 8191 + targetUri.hashCode();

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(costTime);

        hashCode = hashCode * 8191 + count4xx;

        hashCode = hashCode * 8191 + count5xx;

        hashCode = hashCode * 8191 + requestCount;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestByteSize);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseByteSize);

        hashCode = hashCode * 8191 + ((isSetMethod()) ? 131071 : 524287);
        if (isSetMethod())
            hashCode = hashCode * 8191 + method.hashCode();

        hashCode = hashCode * 8191 + ((isSetAppName()) ? 131071 : 524287);
        if (isSetAppName())
            hashCode = hashCode * 8191 + appName.hashCode();

        hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
        if (isSetCategory())
            hashCode = hashCode * 8191 + category.hashCode();

        hashCode = hashCode * 8191 + ((isSetGranularityType()) ? 131071 : 524287);
        if (isSetGranularityType())
            hashCode = hashCode * 8191 + GranularityType;

        return hashCode;
    }

    @Override
    public int compareTo(ZbrdHttpEntity other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHost()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTimestamp()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTargetDomain()).compareTo(other.isSetTargetDomain());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTargetDomain()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetDomain, other.targetDomain);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTargetUri()).compareTo(other.isSetTargetUri());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTargetUri()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetUri, other.targetUri);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCostTime()).compareTo(other.isSetCostTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCostTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costTime, other.costTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCount4xx()).compareTo(other.isSetCount4xx());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCount4xx()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count4xx, other.count4xx);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCount5xx()).compareTo(other.isSetCount5xx());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCount5xx()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count5xx, other.count5xx);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetRequestCount()).compareTo(other.isSetRequestCount());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRequestCount()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestCount, other.requestCount);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetRequestByteSize()).compareTo(other.isSetRequestByteSize());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRequestByteSize()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestByteSize, other.requestByteSize);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetResponseByteSize()).compareTo(other.isSetResponseByteSize());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetResponseByteSize()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseByteSize, other.responseByteSize);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMethod()).compareTo(other.isSetMethod());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMethod()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.method, other.method);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAppName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCategory()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetGranularityType()).compareTo(other.isSetGranularityType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGranularityType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GranularityType, other.GranularityType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ZbrdHttpEntity(");
        boolean first = true;

        sb.append("host:");
        if (this.host == null) {
            sb.append("null");
        } else {
            sb.append(this.host);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("timestamp:");
        sb.append(this.timestamp);
        first = false;
        if (!first) sb.append(", ");
        sb.append("targetDomain:");
        if (this.targetDomain == null) {
            sb.append("null");
        } else {
            sb.append(this.targetDomain);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("targetUri:");
        if (this.targetUri == null) {
            sb.append("null");
        } else {
            sb.append(this.targetUri);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("costTime:");
        sb.append(this.costTime);
        first = false;
        if (!first) sb.append(", ");
        sb.append("count4xx:");
        sb.append(this.count4xx);
        first = false;
        if (!first) sb.append(", ");
        sb.append("count5xx:");
        sb.append(this.count5xx);
        first = false;
        if (!first) sb.append(", ");
        sb.append("requestCount:");
        sb.append(this.requestCount);
        first = false;
        if (!first) sb.append(", ");
        sb.append("requestByteSize:");
        sb.append(this.requestByteSize);
        first = false;
        if (!first) sb.append(", ");
        sb.append("responseByteSize:");
        sb.append(this.responseByteSize);
        first = false;
        if (!first) sb.append(", ");
        sb.append("method:");
        if (this.method == null) {
            sb.append("null");
        } else {
            sb.append(this.method);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("appName:");
        if (this.appName == null) {
            sb.append("null");
        } else {
            sb.append(this.appName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("category:");
        if (this.category == null) {
            sb.append("null");
        } else {
            sb.append(this.category);
        }
        first = false;
        if (isSetGranularityType()) {
            if (!first) sb.append(", ");
            sb.append("GranularityType:");
            sb.append(this.GranularityType);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ZbrdHttpEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ZbrdHttpEntityStandardScheme getScheme() {
            return new ZbrdHttpEntityStandardScheme();
        }
    }

    private static class ZbrdHttpEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<ZbrdHttpEntity> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ZbrdHttpEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // HOST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.host = iprot.readString();
                            struct.setHostIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // TIMESTAMP
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.timestamp = iprot.readI64();
                            struct.setTimestampIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // TARGET_DOMAIN
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.targetDomain = iprot.readString();
                            struct.setTargetDomainIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // TARGET_URI
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.targetUri = iprot.readString();
                            struct.setTargetUriIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // COST_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.costTime = iprot.readI64();
                            struct.setCostTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // COUNT4XX
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.count4xx = iprot.readI32();
                            struct.setCount4xxIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // COUNT5XX
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.count5xx = iprot.readI32();
                            struct.setCount5xxIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // REQUEST_COUNT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.requestCount = iprot.readI32();
                            struct.setRequestCountIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // REQUEST_BYTE_SIZE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.requestByteSize = iprot.readI64();
                            struct.setRequestByteSizeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // RESPONSE_BYTE_SIZE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.responseByteSize = iprot.readI64();
                            struct.setResponseByteSizeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // METHOD
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.method = iprot.readString();
                            struct.setMethodIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 12: // APP_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.appName = iprot.readString();
                            struct.setAppNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 13: // CATEGORY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.category = iprot.readString();
                            struct.setCategoryIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 14: // GRANULARITY_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.GranularityType = iprot.readI32();
                            struct.setGranularityTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ZbrdHttpEntity struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.host != null) {
                oprot.writeFieldBegin(HOST_FIELD_DESC);
                oprot.writeString(struct.host);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
            oprot.writeI64(struct.timestamp);
            oprot.writeFieldEnd();
            if (struct.targetDomain != null) {
                oprot.writeFieldBegin(TARGET_DOMAIN_FIELD_DESC);
                oprot.writeString(struct.targetDomain);
                oprot.writeFieldEnd();
            }
            if (struct.targetUri != null) {
                oprot.writeFieldBegin(TARGET_URI_FIELD_DESC);
                oprot.writeString(struct.targetUri);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(COST_TIME_FIELD_DESC);
            oprot.writeI64(struct.costTime);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(COUNT4XX_FIELD_DESC);
            oprot.writeI32(struct.count4xx);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(COUNT5XX_FIELD_DESC);
            oprot.writeI32(struct.count5xx);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(REQUEST_COUNT_FIELD_DESC);
            oprot.writeI32(struct.requestCount);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(REQUEST_BYTE_SIZE_FIELD_DESC);
            oprot.writeI64(struct.requestByteSize);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(RESPONSE_BYTE_SIZE_FIELD_DESC);
            oprot.writeI64(struct.responseByteSize);
            oprot.writeFieldEnd();
            if (struct.method != null) {
                oprot.writeFieldBegin(METHOD_FIELD_DESC);
                oprot.writeString(struct.method);
                oprot.writeFieldEnd();
            }
            if (struct.appName != null) {
                oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
                oprot.writeString(struct.appName);
                oprot.writeFieldEnd();
            }
            if (struct.category != null) {
                oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
                oprot.writeString(struct.category);
                oprot.writeFieldEnd();
            }
            if (struct.isSetGranularityType()) {
                oprot.writeFieldBegin(GRANULARITY_TYPE_FIELD_DESC);
                oprot.writeI32(struct.GranularityType);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ZbrdHttpEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ZbrdHttpEntityTupleScheme getScheme() {
            return new ZbrdHttpEntityTupleScheme();
        }
    }

    private static class ZbrdHttpEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<ZbrdHttpEntity> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ZbrdHttpEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetHost()) {
                optionals.set(0);
            }
            if (struct.isSetTimestamp()) {
                optionals.set(1);
            }
            if (struct.isSetTargetDomain()) {
                optionals.set(2);
            }
            if (struct.isSetTargetUri()) {
                optionals.set(3);
            }
            if (struct.isSetCostTime()) {
                optionals.set(4);
            }
            if (struct.isSetCount4xx()) {
                optionals.set(5);
            }
            if (struct.isSetCount5xx()) {
                optionals.set(6);
            }
            if (struct.isSetRequestCount()) {
                optionals.set(7);
            }
            if (struct.isSetRequestByteSize()) {
                optionals.set(8);
            }
            if (struct.isSetResponseByteSize()) {
                optionals.set(9);
            }
            if (struct.isSetMethod()) {
                optionals.set(10);
            }
            if (struct.isSetAppName()) {
                optionals.set(11);
            }
            if (struct.isSetCategory()) {
                optionals.set(12);
            }
            if (struct.isSetGranularityType()) {
                optionals.set(13);
            }
            oprot.writeBitSet(optionals, 14);
            if (struct.isSetHost()) {
                oprot.writeString(struct.host);
            }
            if (struct.isSetTimestamp()) {
                oprot.writeI64(struct.timestamp);
            }
            if (struct.isSetTargetDomain()) {
                oprot.writeString(struct.targetDomain);
            }
            if (struct.isSetTargetUri()) {
                oprot.writeString(struct.targetUri);
            }
            if (struct.isSetCostTime()) {
                oprot.writeI64(struct.costTime);
            }
            if (struct.isSetCount4xx()) {
                oprot.writeI32(struct.count4xx);
            }
            if (struct.isSetCount5xx()) {
                oprot.writeI32(struct.count5xx);
            }
            if (struct.isSetRequestCount()) {
                oprot.writeI32(struct.requestCount);
            }
            if (struct.isSetRequestByteSize()) {
                oprot.writeI64(struct.requestByteSize);
            }
            if (struct.isSetResponseByteSize()) {
                oprot.writeI64(struct.responseByteSize);
            }
            if (struct.isSetMethod()) {
                oprot.writeString(struct.method);
            }
            if (struct.isSetAppName()) {
                oprot.writeString(struct.appName);
            }
            if (struct.isSetCategory()) {
                oprot.writeString(struct.category);
            }
            if (struct.isSetGranularityType()) {
                oprot.writeI32(struct.GranularityType);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ZbrdHttpEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(14);
            if (incoming.get(0)) {
                struct.host = iprot.readString();
                struct.setHostIsSet(true);
            }
            if (incoming.get(1)) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
            }
            if (incoming.get(2)) {
                struct.targetDomain = iprot.readString();
                struct.setTargetDomainIsSet(true);
            }
            if (incoming.get(3)) {
                struct.targetUri = iprot.readString();
                struct.setTargetUriIsSet(true);
            }
            if (incoming.get(4)) {
                struct.costTime = iprot.readI64();
                struct.setCostTimeIsSet(true);
            }
            if (incoming.get(5)) {
                struct.count4xx = iprot.readI32();
                struct.setCount4xxIsSet(true);
            }
            if (incoming.get(6)) {
                struct.count5xx = iprot.readI32();
                struct.setCount5xxIsSet(true);
            }
            if (incoming.get(7)) {
                struct.requestCount = iprot.readI32();
                struct.setRequestCountIsSet(true);
            }
            if (incoming.get(8)) {
                struct.requestByteSize = iprot.readI64();
                struct.setRequestByteSizeIsSet(true);
            }
            if (incoming.get(9)) {
                struct.responseByteSize = iprot.readI64();
                struct.setResponseByteSizeIsSet(true);
            }
            if (incoming.get(10)) {
                struct.method = iprot.readString();
                struct.setMethodIsSet(true);
            }
            if (incoming.get(11)) {
                struct.appName = iprot.readString();
                struct.setAppNameIsSet(true);
            }
            if (incoming.get(12)) {
                struct.category = iprot.readString();
                struct.setCategoryIsSet(true);
            }
            if (incoming.get(13)) {
                struct.GranularityType = iprot.readI32();
                struct.setGranularityTypeIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

