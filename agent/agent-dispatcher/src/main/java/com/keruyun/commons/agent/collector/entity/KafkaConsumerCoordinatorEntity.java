/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * ***************************  新Kafka Client数据采集Entity  ************************
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class KafkaConsumerCoordinatorEntity implements org.apache.thrift.TBase<KafkaConsumerCoordinatorEntity, KafkaConsumerCoordinatorEntity._Fields>, java.io.Serializable, Cloneable, Comparable<KafkaConsumerCoordinatorEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KafkaConsumerCoordinatorEntity");

  private static final org.apache.thrift.protocol.TField ASSIGNED_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("assignedPartitions", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField COMMIT_LATENCY_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("commitLatencyAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField COMMIT_LATENCY_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("commitLatencyMax", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField COMMIT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("commitRate", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField HEARTBEAT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("heartbeatRate", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField HEARTBEAT_RESPONSE_TIME_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("heartbeatResponseTimeMax", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField JOIN_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("joinRate", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField JOIN_TIME_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("joinTimeAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField JOIN_TIME_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("joinTimeMax", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField LAST_HEARTBEAT_SECONDS_AGO_FIELD_DESC = new org.apache.thrift.protocol.TField("lastHeartbeatSecondsAgo", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField SYNC_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("syncRate", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField SYNC_TIME_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("syncTimeAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField SYNC_TIME_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("syncTimeMax", org.apache.thrift.protocol.TType.DOUBLE, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KafkaConsumerCoordinatorEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KafkaConsumerCoordinatorEntityTupleSchemeFactory();

  public double assignedPartitions; // required
  public double commitLatencyAvg; // required
  public double commitLatencyMax; // required
  public double commitRate; // required
  public double heartbeatRate; // required
  public double heartbeatResponseTimeMax; // required
  public double joinRate; // required
  public double joinTimeAvg; // required
  public double joinTimeMax; // required
  public double lastHeartbeatSecondsAgo; // required
  public double syncRate; // required
  public double syncTimeAvg; // required
  public double syncTimeMax; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ASSIGNED_PARTITIONS((short)1, "assignedPartitions"),
    COMMIT_LATENCY_AVG((short)2, "commitLatencyAvg"),
    COMMIT_LATENCY_MAX((short)3, "commitLatencyMax"),
    COMMIT_RATE((short)4, "commitRate"),
    HEARTBEAT_RATE((short)5, "heartbeatRate"),
    HEARTBEAT_RESPONSE_TIME_MAX((short)6, "heartbeatResponseTimeMax"),
    JOIN_RATE((short)7, "joinRate"),
    JOIN_TIME_AVG((short)8, "joinTimeAvg"),
    JOIN_TIME_MAX((short)9, "joinTimeMax"),
    LAST_HEARTBEAT_SECONDS_AGO((short)10, "lastHeartbeatSecondsAgo"),
    SYNC_RATE((short)11, "syncRate"),
    SYNC_TIME_AVG((short)12, "syncTimeAvg"),
    SYNC_TIME_MAX((short)13, "syncTimeMax");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ASSIGNED_PARTITIONS
          return ASSIGNED_PARTITIONS;
        case 2: // COMMIT_LATENCY_AVG
          return COMMIT_LATENCY_AVG;
        case 3: // COMMIT_LATENCY_MAX
          return COMMIT_LATENCY_MAX;
        case 4: // COMMIT_RATE
          return COMMIT_RATE;
        case 5: // HEARTBEAT_RATE
          return HEARTBEAT_RATE;
        case 6: // HEARTBEAT_RESPONSE_TIME_MAX
          return HEARTBEAT_RESPONSE_TIME_MAX;
        case 7: // JOIN_RATE
          return JOIN_RATE;
        case 8: // JOIN_TIME_AVG
          return JOIN_TIME_AVG;
        case 9: // JOIN_TIME_MAX
          return JOIN_TIME_MAX;
        case 10: // LAST_HEARTBEAT_SECONDS_AGO
          return LAST_HEARTBEAT_SECONDS_AGO;
        case 11: // SYNC_RATE
          return SYNC_RATE;
        case 12: // SYNC_TIME_AVG
          return SYNC_TIME_AVG;
        case 13: // SYNC_TIME_MAX
          return SYNC_TIME_MAX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ASSIGNEDPARTITIONS_ISSET_ID = 0;
  private static final int __COMMITLATENCYAVG_ISSET_ID = 1;
  private static final int __COMMITLATENCYMAX_ISSET_ID = 2;
  private static final int __COMMITRATE_ISSET_ID = 3;
  private static final int __HEARTBEATRATE_ISSET_ID = 4;
  private static final int __HEARTBEATRESPONSETIMEMAX_ISSET_ID = 5;
  private static final int __JOINRATE_ISSET_ID = 6;
  private static final int __JOINTIMEAVG_ISSET_ID = 7;
  private static final int __JOINTIMEMAX_ISSET_ID = 8;
  private static final int __LASTHEARTBEATSECONDSAGO_ISSET_ID = 9;
  private static final int __SYNCRATE_ISSET_ID = 10;
  private static final int __SYNCTIMEAVG_ISSET_ID = 11;
  private static final int __SYNCTIMEMAX_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ASSIGNED_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("assignedPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMMIT_LATENCY_AVG, new org.apache.thrift.meta_data.FieldMetaData("commitLatencyAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMMIT_LATENCY_MAX, new org.apache.thrift.meta_data.FieldMetaData("commitLatencyMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMMIT_RATE, new org.apache.thrift.meta_data.FieldMetaData("commitRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HEARTBEAT_RATE, new org.apache.thrift.meta_data.FieldMetaData("heartbeatRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HEARTBEAT_RESPONSE_TIME_MAX, new org.apache.thrift.meta_data.FieldMetaData("heartbeatResponseTimeMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.JOIN_RATE, new org.apache.thrift.meta_data.FieldMetaData("joinRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.JOIN_TIME_AVG, new org.apache.thrift.meta_data.FieldMetaData("joinTimeAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.JOIN_TIME_MAX, new org.apache.thrift.meta_data.FieldMetaData("joinTimeMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LAST_HEARTBEAT_SECONDS_AGO, new org.apache.thrift.meta_data.FieldMetaData("lastHeartbeatSecondsAgo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SYNC_RATE, new org.apache.thrift.meta_data.FieldMetaData("syncRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SYNC_TIME_AVG, new org.apache.thrift.meta_data.FieldMetaData("syncTimeAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SYNC_TIME_MAX, new org.apache.thrift.meta_data.FieldMetaData("syncTimeMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KafkaConsumerCoordinatorEntity.class, metaDataMap);
  }

  public KafkaConsumerCoordinatorEntity() {
  }

  public KafkaConsumerCoordinatorEntity(
    double assignedPartitions,
    double commitLatencyAvg,
    double commitLatencyMax,
    double commitRate,
    double heartbeatRate,
    double heartbeatResponseTimeMax,
    double joinRate,
    double joinTimeAvg,
    double joinTimeMax,
    double lastHeartbeatSecondsAgo,
    double syncRate,
    double syncTimeAvg,
    double syncTimeMax)
  {
    this();
    this.assignedPartitions = assignedPartitions;
    setAssignedPartitionsIsSet(true);
    this.commitLatencyAvg = commitLatencyAvg;
    setCommitLatencyAvgIsSet(true);
    this.commitLatencyMax = commitLatencyMax;
    setCommitLatencyMaxIsSet(true);
    this.commitRate = commitRate;
    setCommitRateIsSet(true);
    this.heartbeatRate = heartbeatRate;
    setHeartbeatRateIsSet(true);
    this.heartbeatResponseTimeMax = heartbeatResponseTimeMax;
    setHeartbeatResponseTimeMaxIsSet(true);
    this.joinRate = joinRate;
    setJoinRateIsSet(true);
    this.joinTimeAvg = joinTimeAvg;
    setJoinTimeAvgIsSet(true);
    this.joinTimeMax = joinTimeMax;
    setJoinTimeMaxIsSet(true);
    this.lastHeartbeatSecondsAgo = lastHeartbeatSecondsAgo;
    setLastHeartbeatSecondsAgoIsSet(true);
    this.syncRate = syncRate;
    setSyncRateIsSet(true);
    this.syncTimeAvg = syncTimeAvg;
    setSyncTimeAvgIsSet(true);
    this.syncTimeMax = syncTimeMax;
    setSyncTimeMaxIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KafkaConsumerCoordinatorEntity(KafkaConsumerCoordinatorEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.assignedPartitions = other.assignedPartitions;
    this.commitLatencyAvg = other.commitLatencyAvg;
    this.commitLatencyMax = other.commitLatencyMax;
    this.commitRate = other.commitRate;
    this.heartbeatRate = other.heartbeatRate;
    this.heartbeatResponseTimeMax = other.heartbeatResponseTimeMax;
    this.joinRate = other.joinRate;
    this.joinTimeAvg = other.joinTimeAvg;
    this.joinTimeMax = other.joinTimeMax;
    this.lastHeartbeatSecondsAgo = other.lastHeartbeatSecondsAgo;
    this.syncRate = other.syncRate;
    this.syncTimeAvg = other.syncTimeAvg;
    this.syncTimeMax = other.syncTimeMax;
  }

  public KafkaConsumerCoordinatorEntity deepCopy() {
    return new KafkaConsumerCoordinatorEntity(this);
  }

  @Override
  public void clear() {
    setAssignedPartitionsIsSet(false);
    this.assignedPartitions = 0.0;
    setCommitLatencyAvgIsSet(false);
    this.commitLatencyAvg = 0.0;
    setCommitLatencyMaxIsSet(false);
    this.commitLatencyMax = 0.0;
    setCommitRateIsSet(false);
    this.commitRate = 0.0;
    setHeartbeatRateIsSet(false);
    this.heartbeatRate = 0.0;
    setHeartbeatResponseTimeMaxIsSet(false);
    this.heartbeatResponseTimeMax = 0.0;
    setJoinRateIsSet(false);
    this.joinRate = 0.0;
    setJoinTimeAvgIsSet(false);
    this.joinTimeAvg = 0.0;
    setJoinTimeMaxIsSet(false);
    this.joinTimeMax = 0.0;
    setLastHeartbeatSecondsAgoIsSet(false);
    this.lastHeartbeatSecondsAgo = 0.0;
    setSyncRateIsSet(false);
    this.syncRate = 0.0;
    setSyncTimeAvgIsSet(false);
    this.syncTimeAvg = 0.0;
    setSyncTimeMaxIsSet(false);
    this.syncTimeMax = 0.0;
  }

  public double getAssignedPartitions() {
    return this.assignedPartitions;
  }

  public KafkaConsumerCoordinatorEntity setAssignedPartitions(double assignedPartitions) {
    this.assignedPartitions = assignedPartitions;
    setAssignedPartitionsIsSet(true);
    return this;
  }

  public void unsetAssignedPartitions() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASSIGNEDPARTITIONS_ISSET_ID);
  }

  /** Returns true if field assignedPartitions is set (has been assigned a value) and false otherwise */
  public boolean isSetAssignedPartitions() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASSIGNEDPARTITIONS_ISSET_ID);
  }

  public void setAssignedPartitionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASSIGNEDPARTITIONS_ISSET_ID, value);
  }

  public double getCommitLatencyAvg() {
    return this.commitLatencyAvg;
  }

  public KafkaConsumerCoordinatorEntity setCommitLatencyAvg(double commitLatencyAvg) {
    this.commitLatencyAvg = commitLatencyAvg;
    setCommitLatencyAvgIsSet(true);
    return this;
  }

  public void unsetCommitLatencyAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMITLATENCYAVG_ISSET_ID);
  }

  /** Returns true if field commitLatencyAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitLatencyAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMITLATENCYAVG_ISSET_ID);
  }

  public void setCommitLatencyAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMITLATENCYAVG_ISSET_ID, value);
  }

  public double getCommitLatencyMax() {
    return this.commitLatencyMax;
  }

  public KafkaConsumerCoordinatorEntity setCommitLatencyMax(double commitLatencyMax) {
    this.commitLatencyMax = commitLatencyMax;
    setCommitLatencyMaxIsSet(true);
    return this;
  }

  public void unsetCommitLatencyMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMITLATENCYMAX_ISSET_ID);
  }

  /** Returns true if field commitLatencyMax is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitLatencyMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMITLATENCYMAX_ISSET_ID);
  }

  public void setCommitLatencyMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMITLATENCYMAX_ISSET_ID, value);
  }

  public double getCommitRate() {
    return this.commitRate;
  }

  public KafkaConsumerCoordinatorEntity setCommitRate(double commitRate) {
    this.commitRate = commitRate;
    setCommitRateIsSet(true);
    return this;
  }

  public void unsetCommitRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMITRATE_ISSET_ID);
  }

  /** Returns true if field commitRate is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMITRATE_ISSET_ID);
  }

  public void setCommitRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMITRATE_ISSET_ID, value);
  }

  public double getHeartbeatRate() {
    return this.heartbeatRate;
  }

  public KafkaConsumerCoordinatorEntity setHeartbeatRate(double heartbeatRate) {
    this.heartbeatRate = heartbeatRate;
    setHeartbeatRateIsSet(true);
    return this;
  }

  public void unsetHeartbeatRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEARTBEATRATE_ISSET_ID);
  }

  /** Returns true if field heartbeatRate is set (has been assigned a value) and false otherwise */
  public boolean isSetHeartbeatRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEARTBEATRATE_ISSET_ID);
  }

  public void setHeartbeatRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEARTBEATRATE_ISSET_ID, value);
  }

  public double getHeartbeatResponseTimeMax() {
    return this.heartbeatResponseTimeMax;
  }

  public KafkaConsumerCoordinatorEntity setHeartbeatResponseTimeMax(double heartbeatResponseTimeMax) {
    this.heartbeatResponseTimeMax = heartbeatResponseTimeMax;
    setHeartbeatResponseTimeMaxIsSet(true);
    return this;
  }

  public void unsetHeartbeatResponseTimeMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEARTBEATRESPONSETIMEMAX_ISSET_ID);
  }

  /** Returns true if field heartbeatResponseTimeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetHeartbeatResponseTimeMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEARTBEATRESPONSETIMEMAX_ISSET_ID);
  }

  public void setHeartbeatResponseTimeMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEARTBEATRESPONSETIMEMAX_ISSET_ID, value);
  }

  public double getJoinRate() {
    return this.joinRate;
  }

  public KafkaConsumerCoordinatorEntity setJoinRate(double joinRate) {
    this.joinRate = joinRate;
    setJoinRateIsSet(true);
    return this;
  }

  public void unsetJoinRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOINRATE_ISSET_ID);
  }

  /** Returns true if field joinRate is set (has been assigned a value) and false otherwise */
  public boolean isSetJoinRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOINRATE_ISSET_ID);
  }

  public void setJoinRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOINRATE_ISSET_ID, value);
  }

  public double getJoinTimeAvg() {
    return this.joinTimeAvg;
  }

  public KafkaConsumerCoordinatorEntity setJoinTimeAvg(double joinTimeAvg) {
    this.joinTimeAvg = joinTimeAvg;
    setJoinTimeAvgIsSet(true);
    return this;
  }

  public void unsetJoinTimeAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOINTIMEAVG_ISSET_ID);
  }

  /** Returns true if field joinTimeAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetJoinTimeAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOINTIMEAVG_ISSET_ID);
  }

  public void setJoinTimeAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOINTIMEAVG_ISSET_ID, value);
  }

  public double getJoinTimeMax() {
    return this.joinTimeMax;
  }

  public KafkaConsumerCoordinatorEntity setJoinTimeMax(double joinTimeMax) {
    this.joinTimeMax = joinTimeMax;
    setJoinTimeMaxIsSet(true);
    return this;
  }

  public void unsetJoinTimeMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOINTIMEMAX_ISSET_ID);
  }

  /** Returns true if field joinTimeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetJoinTimeMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOINTIMEMAX_ISSET_ID);
  }

  public void setJoinTimeMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOINTIMEMAX_ISSET_ID, value);
  }

  public double getLastHeartbeatSecondsAgo() {
    return this.lastHeartbeatSecondsAgo;
  }

  public KafkaConsumerCoordinatorEntity setLastHeartbeatSecondsAgo(double lastHeartbeatSecondsAgo) {
    this.lastHeartbeatSecondsAgo = lastHeartbeatSecondsAgo;
    setLastHeartbeatSecondsAgoIsSet(true);
    return this;
  }

  public void unsetLastHeartbeatSecondsAgo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTHEARTBEATSECONDSAGO_ISSET_ID);
  }

  /** Returns true if field lastHeartbeatSecondsAgo is set (has been assigned a value) and false otherwise */
  public boolean isSetLastHeartbeatSecondsAgo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTHEARTBEATSECONDSAGO_ISSET_ID);
  }

  public void setLastHeartbeatSecondsAgoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTHEARTBEATSECONDSAGO_ISSET_ID, value);
  }

  public double getSyncRate() {
    return this.syncRate;
  }

  public KafkaConsumerCoordinatorEntity setSyncRate(double syncRate) {
    this.syncRate = syncRate;
    setSyncRateIsSet(true);
    return this;
  }

  public void unsetSyncRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SYNCRATE_ISSET_ID);
  }

  /** Returns true if field syncRate is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SYNCRATE_ISSET_ID);
  }

  public void setSyncRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SYNCRATE_ISSET_ID, value);
  }

  public double getSyncTimeAvg() {
    return this.syncTimeAvg;
  }

  public KafkaConsumerCoordinatorEntity setSyncTimeAvg(double syncTimeAvg) {
    this.syncTimeAvg = syncTimeAvg;
    setSyncTimeAvgIsSet(true);
    return this;
  }

  public void unsetSyncTimeAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SYNCTIMEAVG_ISSET_ID);
  }

  /** Returns true if field syncTimeAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncTimeAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SYNCTIMEAVG_ISSET_ID);
  }

  public void setSyncTimeAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SYNCTIMEAVG_ISSET_ID, value);
  }

  public double getSyncTimeMax() {
    return this.syncTimeMax;
  }

  public KafkaConsumerCoordinatorEntity setSyncTimeMax(double syncTimeMax) {
    this.syncTimeMax = syncTimeMax;
    setSyncTimeMaxIsSet(true);
    return this;
  }

  public void unsetSyncTimeMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SYNCTIMEMAX_ISSET_ID);
  }

  /** Returns true if field syncTimeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncTimeMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SYNCTIMEMAX_ISSET_ID);
  }

  public void setSyncTimeMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SYNCTIMEMAX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ASSIGNED_PARTITIONS:
      if (value == null) {
        unsetAssignedPartitions();
      } else {
        setAssignedPartitions((Double)value);
      }
      break;

    case COMMIT_LATENCY_AVG:
      if (value == null) {
        unsetCommitLatencyAvg();
      } else {
        setCommitLatencyAvg((Double)value);
      }
      break;

    case COMMIT_LATENCY_MAX:
      if (value == null) {
        unsetCommitLatencyMax();
      } else {
        setCommitLatencyMax((Double)value);
      }
      break;

    case COMMIT_RATE:
      if (value == null) {
        unsetCommitRate();
      } else {
        setCommitRate((Double)value);
      }
      break;

    case HEARTBEAT_RATE:
      if (value == null) {
        unsetHeartbeatRate();
      } else {
        setHeartbeatRate((Double)value);
      }
      break;

    case HEARTBEAT_RESPONSE_TIME_MAX:
      if (value == null) {
        unsetHeartbeatResponseTimeMax();
      } else {
        setHeartbeatResponseTimeMax((Double)value);
      }
      break;

    case JOIN_RATE:
      if (value == null) {
        unsetJoinRate();
      } else {
        setJoinRate((Double)value);
      }
      break;

    case JOIN_TIME_AVG:
      if (value == null) {
        unsetJoinTimeAvg();
      } else {
        setJoinTimeAvg((Double)value);
      }
      break;

    case JOIN_TIME_MAX:
      if (value == null) {
        unsetJoinTimeMax();
      } else {
        setJoinTimeMax((Double)value);
      }
      break;

    case LAST_HEARTBEAT_SECONDS_AGO:
      if (value == null) {
        unsetLastHeartbeatSecondsAgo();
      } else {
        setLastHeartbeatSecondsAgo((Double)value);
      }
      break;

    case SYNC_RATE:
      if (value == null) {
        unsetSyncRate();
      } else {
        setSyncRate((Double)value);
      }
      break;

    case SYNC_TIME_AVG:
      if (value == null) {
        unsetSyncTimeAvg();
      } else {
        setSyncTimeAvg((Double)value);
      }
      break;

    case SYNC_TIME_MAX:
      if (value == null) {
        unsetSyncTimeMax();
      } else {
        setSyncTimeMax((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ASSIGNED_PARTITIONS:
      return getAssignedPartitions();

    case COMMIT_LATENCY_AVG:
      return getCommitLatencyAvg();

    case COMMIT_LATENCY_MAX:
      return getCommitLatencyMax();

    case COMMIT_RATE:
      return getCommitRate();

    case HEARTBEAT_RATE:
      return getHeartbeatRate();

    case HEARTBEAT_RESPONSE_TIME_MAX:
      return getHeartbeatResponseTimeMax();

    case JOIN_RATE:
      return getJoinRate();

    case JOIN_TIME_AVG:
      return getJoinTimeAvg();

    case JOIN_TIME_MAX:
      return getJoinTimeMax();

    case LAST_HEARTBEAT_SECONDS_AGO:
      return getLastHeartbeatSecondsAgo();

    case SYNC_RATE:
      return getSyncRate();

    case SYNC_TIME_AVG:
      return getSyncTimeAvg();

    case SYNC_TIME_MAX:
      return getSyncTimeMax();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ASSIGNED_PARTITIONS:
      return isSetAssignedPartitions();
    case COMMIT_LATENCY_AVG:
      return isSetCommitLatencyAvg();
    case COMMIT_LATENCY_MAX:
      return isSetCommitLatencyMax();
    case COMMIT_RATE:
      return isSetCommitRate();
    case HEARTBEAT_RATE:
      return isSetHeartbeatRate();
    case HEARTBEAT_RESPONSE_TIME_MAX:
      return isSetHeartbeatResponseTimeMax();
    case JOIN_RATE:
      return isSetJoinRate();
    case JOIN_TIME_AVG:
      return isSetJoinTimeAvg();
    case JOIN_TIME_MAX:
      return isSetJoinTimeMax();
    case LAST_HEARTBEAT_SECONDS_AGO:
      return isSetLastHeartbeatSecondsAgo();
    case SYNC_RATE:
      return isSetSyncRate();
    case SYNC_TIME_AVG:
      return isSetSyncTimeAvg();
    case SYNC_TIME_MAX:
      return isSetSyncTimeMax();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KafkaConsumerCoordinatorEntity)
      return this.equals((KafkaConsumerCoordinatorEntity)that);
    return false;
  }

  public boolean equals(KafkaConsumerCoordinatorEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_assignedPartitions = true;
    boolean that_present_assignedPartitions = true;
    if (this_present_assignedPartitions || that_present_assignedPartitions) {
      if (!(this_present_assignedPartitions && that_present_assignedPartitions))
        return false;
      if (this.assignedPartitions != that.assignedPartitions)
        return false;
    }

    boolean this_present_commitLatencyAvg = true;
    boolean that_present_commitLatencyAvg = true;
    if (this_present_commitLatencyAvg || that_present_commitLatencyAvg) {
      if (!(this_present_commitLatencyAvg && that_present_commitLatencyAvg))
        return false;
      if (this.commitLatencyAvg != that.commitLatencyAvg)
        return false;
    }

    boolean this_present_commitLatencyMax = true;
    boolean that_present_commitLatencyMax = true;
    if (this_present_commitLatencyMax || that_present_commitLatencyMax) {
      if (!(this_present_commitLatencyMax && that_present_commitLatencyMax))
        return false;
      if (this.commitLatencyMax != that.commitLatencyMax)
        return false;
    }

    boolean this_present_commitRate = true;
    boolean that_present_commitRate = true;
    if (this_present_commitRate || that_present_commitRate) {
      if (!(this_present_commitRate && that_present_commitRate))
        return false;
      if (this.commitRate != that.commitRate)
        return false;
    }

    boolean this_present_heartbeatRate = true;
    boolean that_present_heartbeatRate = true;
    if (this_present_heartbeatRate || that_present_heartbeatRate) {
      if (!(this_present_heartbeatRate && that_present_heartbeatRate))
        return false;
      if (this.heartbeatRate != that.heartbeatRate)
        return false;
    }

    boolean this_present_heartbeatResponseTimeMax = true;
    boolean that_present_heartbeatResponseTimeMax = true;
    if (this_present_heartbeatResponseTimeMax || that_present_heartbeatResponseTimeMax) {
      if (!(this_present_heartbeatResponseTimeMax && that_present_heartbeatResponseTimeMax))
        return false;
      if (this.heartbeatResponseTimeMax != that.heartbeatResponseTimeMax)
        return false;
    }

    boolean this_present_joinRate = true;
    boolean that_present_joinRate = true;
    if (this_present_joinRate || that_present_joinRate) {
      if (!(this_present_joinRate && that_present_joinRate))
        return false;
      if (this.joinRate != that.joinRate)
        return false;
    }

    boolean this_present_joinTimeAvg = true;
    boolean that_present_joinTimeAvg = true;
    if (this_present_joinTimeAvg || that_present_joinTimeAvg) {
      if (!(this_present_joinTimeAvg && that_present_joinTimeAvg))
        return false;
      if (this.joinTimeAvg != that.joinTimeAvg)
        return false;
    }

    boolean this_present_joinTimeMax = true;
    boolean that_present_joinTimeMax = true;
    if (this_present_joinTimeMax || that_present_joinTimeMax) {
      if (!(this_present_joinTimeMax && that_present_joinTimeMax))
        return false;
      if (this.joinTimeMax != that.joinTimeMax)
        return false;
    }

    boolean this_present_lastHeartbeatSecondsAgo = true;
    boolean that_present_lastHeartbeatSecondsAgo = true;
    if (this_present_lastHeartbeatSecondsAgo || that_present_lastHeartbeatSecondsAgo) {
      if (!(this_present_lastHeartbeatSecondsAgo && that_present_lastHeartbeatSecondsAgo))
        return false;
      if (this.lastHeartbeatSecondsAgo != that.lastHeartbeatSecondsAgo)
        return false;
    }

    boolean this_present_syncRate = true;
    boolean that_present_syncRate = true;
    if (this_present_syncRate || that_present_syncRate) {
      if (!(this_present_syncRate && that_present_syncRate))
        return false;
      if (this.syncRate != that.syncRate)
        return false;
    }

    boolean this_present_syncTimeAvg = true;
    boolean that_present_syncTimeAvg = true;
    if (this_present_syncTimeAvg || that_present_syncTimeAvg) {
      if (!(this_present_syncTimeAvg && that_present_syncTimeAvg))
        return false;
      if (this.syncTimeAvg != that.syncTimeAvg)
        return false;
    }

    boolean this_present_syncTimeMax = true;
    boolean that_present_syncTimeMax = true;
    if (this_present_syncTimeMax || that_present_syncTimeMax) {
      if (!(this_present_syncTimeMax && that_present_syncTimeMax))
        return false;
      if (this.syncTimeMax != that.syncTimeMax)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(assignedPartitions);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(commitLatencyAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(commitLatencyMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(commitRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(heartbeatRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(heartbeatResponseTimeMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(joinRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(joinTimeAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(joinTimeMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastHeartbeatSecondsAgo);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(syncRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(syncTimeAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(syncTimeMax);

    return hashCode;
  }

  @Override
  public int compareTo(KafkaConsumerCoordinatorEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAssignedPartitions()).compareTo(other.isSetAssignedPartitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssignedPartitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assignedPartitions, other.assignedPartitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommitLatencyAvg()).compareTo(other.isSetCommitLatencyAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitLatencyAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitLatencyAvg, other.commitLatencyAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommitLatencyMax()).compareTo(other.isSetCommitLatencyMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitLatencyMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitLatencyMax, other.commitLatencyMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommitRate()).compareTo(other.isSetCommitRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitRate, other.commitRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeartbeatRate()).compareTo(other.isSetHeartbeatRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeartbeatRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heartbeatRate, other.heartbeatRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeartbeatResponseTimeMax()).compareTo(other.isSetHeartbeatResponseTimeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeartbeatResponseTimeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heartbeatResponseTimeMax, other.heartbeatResponseTimeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJoinRate()).compareTo(other.isSetJoinRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoinRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.joinRate, other.joinRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJoinTimeAvg()).compareTo(other.isSetJoinTimeAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoinTimeAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.joinTimeAvg, other.joinTimeAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJoinTimeMax()).compareTo(other.isSetJoinTimeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoinTimeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.joinTimeMax, other.joinTimeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastHeartbeatSecondsAgo()).compareTo(other.isSetLastHeartbeatSecondsAgo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastHeartbeatSecondsAgo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastHeartbeatSecondsAgo, other.lastHeartbeatSecondsAgo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSyncRate()).compareTo(other.isSetSyncRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncRate, other.syncRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSyncTimeAvg()).compareTo(other.isSetSyncTimeAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncTimeAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncTimeAvg, other.syncTimeAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSyncTimeMax()).compareTo(other.isSetSyncTimeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncTimeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncTimeMax, other.syncTimeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KafkaConsumerCoordinatorEntity(");
    boolean first = true;

    sb.append("assignedPartitions:");
    sb.append(this.assignedPartitions);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commitLatencyAvg:");
    sb.append(this.commitLatencyAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commitLatencyMax:");
    sb.append(this.commitLatencyMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commitRate:");
    sb.append(this.commitRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heartbeatRate:");
    sb.append(this.heartbeatRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heartbeatResponseTimeMax:");
    sb.append(this.heartbeatResponseTimeMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("joinRate:");
    sb.append(this.joinRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("joinTimeAvg:");
    sb.append(this.joinTimeAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("joinTimeMax:");
    sb.append(this.joinTimeMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastHeartbeatSecondsAgo:");
    sb.append(this.lastHeartbeatSecondsAgo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("syncRate:");
    sb.append(this.syncRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("syncTimeAvg:");
    sb.append(this.syncTimeAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("syncTimeMax:");
    sb.append(this.syncTimeMax);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KafkaConsumerCoordinatorEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaConsumerCoordinatorEntityStandardScheme getScheme() {
      return new KafkaConsumerCoordinatorEntityStandardScheme();
    }
  }

  private static class KafkaConsumerCoordinatorEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<KafkaConsumerCoordinatorEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KafkaConsumerCoordinatorEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ASSIGNED_PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assignedPartitions = iprot.readDouble();
              struct.setAssignedPartitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMMIT_LATENCY_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.commitLatencyAvg = iprot.readDouble();
              struct.setCommitLatencyAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMIT_LATENCY_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.commitLatencyMax = iprot.readDouble();
              struct.setCommitLatencyMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMIT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.commitRate = iprot.readDouble();
              struct.setCommitRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HEARTBEAT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.heartbeatRate = iprot.readDouble();
              struct.setHeartbeatRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HEARTBEAT_RESPONSE_TIME_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.heartbeatResponseTimeMax = iprot.readDouble();
              struct.setHeartbeatResponseTimeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // JOIN_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.joinRate = iprot.readDouble();
              struct.setJoinRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JOIN_TIME_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.joinTimeAvg = iprot.readDouble();
              struct.setJoinTimeAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // JOIN_TIME_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.joinTimeMax = iprot.readDouble();
              struct.setJoinTimeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LAST_HEARTBEAT_SECONDS_AGO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lastHeartbeatSecondsAgo = iprot.readDouble();
              struct.setLastHeartbeatSecondsAgoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SYNC_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.syncRate = iprot.readDouble();
              struct.setSyncRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SYNC_TIME_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.syncTimeAvg = iprot.readDouble();
              struct.setSyncTimeAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SYNC_TIME_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.syncTimeMax = iprot.readDouble();
              struct.setSyncTimeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KafkaConsumerCoordinatorEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ASSIGNED_PARTITIONS_FIELD_DESC);
      oprot.writeDouble(struct.assignedPartitions);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMIT_LATENCY_AVG_FIELD_DESC);
      oprot.writeDouble(struct.commitLatencyAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMIT_LATENCY_MAX_FIELD_DESC);
      oprot.writeDouble(struct.commitLatencyMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMIT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.commitRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEARTBEAT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.heartbeatRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEARTBEAT_RESPONSE_TIME_MAX_FIELD_DESC);
      oprot.writeDouble(struct.heartbeatResponseTimeMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JOIN_RATE_FIELD_DESC);
      oprot.writeDouble(struct.joinRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JOIN_TIME_AVG_FIELD_DESC);
      oprot.writeDouble(struct.joinTimeAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JOIN_TIME_MAX_FIELD_DESC);
      oprot.writeDouble(struct.joinTimeMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_HEARTBEAT_SECONDS_AGO_FIELD_DESC);
      oprot.writeDouble(struct.lastHeartbeatSecondsAgo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SYNC_RATE_FIELD_DESC);
      oprot.writeDouble(struct.syncRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SYNC_TIME_AVG_FIELD_DESC);
      oprot.writeDouble(struct.syncTimeAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SYNC_TIME_MAX_FIELD_DESC);
      oprot.writeDouble(struct.syncTimeMax);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KafkaConsumerCoordinatorEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaConsumerCoordinatorEntityTupleScheme getScheme() {
      return new KafkaConsumerCoordinatorEntityTupleScheme();
    }
  }

  private static class KafkaConsumerCoordinatorEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<KafkaConsumerCoordinatorEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KafkaConsumerCoordinatorEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAssignedPartitions()) {
        optionals.set(0);
      }
      if (struct.isSetCommitLatencyAvg()) {
        optionals.set(1);
      }
      if (struct.isSetCommitLatencyMax()) {
        optionals.set(2);
      }
      if (struct.isSetCommitRate()) {
        optionals.set(3);
      }
      if (struct.isSetHeartbeatRate()) {
        optionals.set(4);
      }
      if (struct.isSetHeartbeatResponseTimeMax()) {
        optionals.set(5);
      }
      if (struct.isSetJoinRate()) {
        optionals.set(6);
      }
      if (struct.isSetJoinTimeAvg()) {
        optionals.set(7);
      }
      if (struct.isSetJoinTimeMax()) {
        optionals.set(8);
      }
      if (struct.isSetLastHeartbeatSecondsAgo()) {
        optionals.set(9);
      }
      if (struct.isSetSyncRate()) {
        optionals.set(10);
      }
      if (struct.isSetSyncTimeAvg()) {
        optionals.set(11);
      }
      if (struct.isSetSyncTimeMax()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetAssignedPartitions()) {
        oprot.writeDouble(struct.assignedPartitions);
      }
      if (struct.isSetCommitLatencyAvg()) {
        oprot.writeDouble(struct.commitLatencyAvg);
      }
      if (struct.isSetCommitLatencyMax()) {
        oprot.writeDouble(struct.commitLatencyMax);
      }
      if (struct.isSetCommitRate()) {
        oprot.writeDouble(struct.commitRate);
      }
      if (struct.isSetHeartbeatRate()) {
        oprot.writeDouble(struct.heartbeatRate);
      }
      if (struct.isSetHeartbeatResponseTimeMax()) {
        oprot.writeDouble(struct.heartbeatResponseTimeMax);
      }
      if (struct.isSetJoinRate()) {
        oprot.writeDouble(struct.joinRate);
      }
      if (struct.isSetJoinTimeAvg()) {
        oprot.writeDouble(struct.joinTimeAvg);
      }
      if (struct.isSetJoinTimeMax()) {
        oprot.writeDouble(struct.joinTimeMax);
      }
      if (struct.isSetLastHeartbeatSecondsAgo()) {
        oprot.writeDouble(struct.lastHeartbeatSecondsAgo);
      }
      if (struct.isSetSyncRate()) {
        oprot.writeDouble(struct.syncRate);
      }
      if (struct.isSetSyncTimeAvg()) {
        oprot.writeDouble(struct.syncTimeAvg);
      }
      if (struct.isSetSyncTimeMax()) {
        oprot.writeDouble(struct.syncTimeMax);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KafkaConsumerCoordinatorEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.assignedPartitions = iprot.readDouble();
        struct.setAssignedPartitionsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.commitLatencyAvg = iprot.readDouble();
        struct.setCommitLatencyAvgIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commitLatencyMax = iprot.readDouble();
        struct.setCommitLatencyMaxIsSet(true);
      }
      if (incoming.get(3)) {
        struct.commitRate = iprot.readDouble();
        struct.setCommitRateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.heartbeatRate = iprot.readDouble();
        struct.setHeartbeatRateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.heartbeatResponseTimeMax = iprot.readDouble();
        struct.setHeartbeatResponseTimeMaxIsSet(true);
      }
      if (incoming.get(6)) {
        struct.joinRate = iprot.readDouble();
        struct.setJoinRateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.joinTimeAvg = iprot.readDouble();
        struct.setJoinTimeAvgIsSet(true);
      }
      if (incoming.get(8)) {
        struct.joinTimeMax = iprot.readDouble();
        struct.setJoinTimeMaxIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lastHeartbeatSecondsAgo = iprot.readDouble();
        struct.setLastHeartbeatSecondsAgoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.syncRate = iprot.readDouble();
        struct.setSyncRateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.syncTimeAvg = iprot.readDouble();
        struct.setSyncTimeAvgIsSet(true);
      }
      if (incoming.get(12)) {
        struct.syncTimeMax = iprot.readDouble();
        struct.setSyncTimeMaxIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

