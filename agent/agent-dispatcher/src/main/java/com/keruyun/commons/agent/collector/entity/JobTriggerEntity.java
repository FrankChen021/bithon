/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class JobTriggerEntity implements org.apache.thrift.TBase<JobTriggerEntity, JobTriggerEntity._Fields>, java.io.Serializable, Cloneable, Comparable<JobTriggerEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobTriggerEntity");

  private static final org.apache.thrift.protocol.TField JOB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("jobName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("jobKey", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField JOB_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("jobDescription", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField JOB_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("jobGroup", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField JOB_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("jobClass", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TRIGGER_CRON_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerCron", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TRIGGER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerStatus", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PREV_FIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("prevFireTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField NEXT_FIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("nextFireTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField IS_DURABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isDurable", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField IS_PERSIST_JOB_DATA_AFTER_EXECUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("isPersistJobDataAfterExecution", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField IS_CONCURRENT_EXECUTION_DISALLOWED_FIELD_DESC = new org.apache.thrift.protocol.TField("isConcurrentExecutionDisallowed", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField REQUESTS_RECOVERY_FIELD_DESC = new org.apache.thrift.protocol.TField("requestsRecovery", org.apache.thrift.protocol.TType.BOOL, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JobTriggerEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JobTriggerEntityTupleSchemeFactory();

  public String jobName; // required
  public String jobKey; // required
  public String jobDescription; // required
  public String jobGroup; // required
  public String jobClass; // required
  public String triggerCron; // required
  public String triggerStatus; // required
  public long prevFireTime; // required
  public long nextFireTime; // required
  public boolean isDurable; // required
  public boolean isPersistJobDataAfterExecution; // required
  public boolean isConcurrentExecutionDisallowed; // required
  public boolean requestsRecovery; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOB_NAME((short)1, "jobName"),
    JOB_KEY((short)2, "jobKey"),
    JOB_DESCRIPTION((short)3, "jobDescription"),
    JOB_GROUP((short)4, "jobGroup"),
    JOB_CLASS((short)5, "jobClass"),
    TRIGGER_CRON((short)6, "triggerCron"),
    TRIGGER_STATUS((short)7, "triggerStatus"),
    PREV_FIRE_TIME((short)8, "prevFireTime"),
    NEXT_FIRE_TIME((short)9, "nextFireTime"),
    IS_DURABLE((short)10, "isDurable"),
    IS_PERSIST_JOB_DATA_AFTER_EXECUTION((short)11, "isPersistJobDataAfterExecution"),
    IS_CONCURRENT_EXECUTION_DISALLOWED((short)12, "isConcurrentExecutionDisallowed"),
    REQUESTS_RECOVERY((short)13, "requestsRecovery");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOB_NAME
          return JOB_NAME;
        case 2: // JOB_KEY
          return JOB_KEY;
        case 3: // JOB_DESCRIPTION
          return JOB_DESCRIPTION;
        case 4: // JOB_GROUP
          return JOB_GROUP;
        case 5: // JOB_CLASS
          return JOB_CLASS;
        case 6: // TRIGGER_CRON
          return TRIGGER_CRON;
        case 7: // TRIGGER_STATUS
          return TRIGGER_STATUS;
        case 8: // PREV_FIRE_TIME
          return PREV_FIRE_TIME;
        case 9: // NEXT_FIRE_TIME
          return NEXT_FIRE_TIME;
        case 10: // IS_DURABLE
          return IS_DURABLE;
        case 11: // IS_PERSIST_JOB_DATA_AFTER_EXECUTION
          return IS_PERSIST_JOB_DATA_AFTER_EXECUTION;
        case 12: // IS_CONCURRENT_EXECUTION_DISALLOWED
          return IS_CONCURRENT_EXECUTION_DISALLOWED;
        case 13: // REQUESTS_RECOVERY
          return REQUESTS_RECOVERY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PREVFIRETIME_ISSET_ID = 0;
  private static final int __NEXTFIRETIME_ISSET_ID = 1;
  private static final int __ISDURABLE_ISSET_ID = 2;
  private static final int __ISPERSISTJOBDATAAFTEREXECUTION_ISSET_ID = 3;
  private static final int __ISCONCURRENTEXECUTIONDISALLOWED_ISSET_ID = 4;
  private static final int __REQUESTSRECOVERY_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOB_NAME, new org.apache.thrift.meta_data.FieldMetaData("jobName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_KEY, new org.apache.thrift.meta_data.FieldMetaData("jobKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("jobDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_GROUP, new org.apache.thrift.meta_data.FieldMetaData("jobGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_CLASS, new org.apache.thrift.meta_data.FieldMetaData("jobClass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRIGGER_CRON, new org.apache.thrift.meta_data.FieldMetaData("triggerCron", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRIGGER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("triggerStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREV_FIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("prevFireTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEXT_FIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("nextFireTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_DURABLE, new org.apache.thrift.meta_data.FieldMetaData("isDurable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PERSIST_JOB_DATA_AFTER_EXECUTION, new org.apache.thrift.meta_data.FieldMetaData("isPersistJobDataAfterExecution", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_CONCURRENT_EXECUTION_DISALLOWED, new org.apache.thrift.meta_data.FieldMetaData("isConcurrentExecutionDisallowed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REQUESTS_RECOVERY, new org.apache.thrift.meta_data.FieldMetaData("requestsRecovery", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobTriggerEntity.class, metaDataMap);
  }

  public JobTriggerEntity() {
  }

  public JobTriggerEntity(
    String jobName,
    String jobKey,
    String jobDescription,
    String jobGroup,
    String jobClass,
    String triggerCron,
    String triggerStatus,
    long prevFireTime,
    long nextFireTime,
    boolean isDurable,
    boolean isPersistJobDataAfterExecution,
    boolean isConcurrentExecutionDisallowed,
    boolean requestsRecovery)
  {
    this();
    this.jobName = jobName;
    this.jobKey = jobKey;
    this.jobDescription = jobDescription;
    this.jobGroup = jobGroup;
    this.jobClass = jobClass;
    this.triggerCron = triggerCron;
    this.triggerStatus = triggerStatus;
    this.prevFireTime = prevFireTime;
    setPrevFireTimeIsSet(true);
    this.nextFireTime = nextFireTime;
    setNextFireTimeIsSet(true);
    this.isDurable = isDurable;
    setIsDurableIsSet(true);
    this.isPersistJobDataAfterExecution = isPersistJobDataAfterExecution;
    setIsPersistJobDataAfterExecutionIsSet(true);
    this.isConcurrentExecutionDisallowed = isConcurrentExecutionDisallowed;
    setIsConcurrentExecutionDisallowedIsSet(true);
    this.requestsRecovery = requestsRecovery;
    setRequestsRecoveryIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobTriggerEntity(JobTriggerEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJobName()) {
      this.jobName = other.jobName;
    }
    if (other.isSetJobKey()) {
      this.jobKey = other.jobKey;
    }
    if (other.isSetJobDescription()) {
      this.jobDescription = other.jobDescription;
    }
    if (other.isSetJobGroup()) {
      this.jobGroup = other.jobGroup;
    }
    if (other.isSetJobClass()) {
      this.jobClass = other.jobClass;
    }
    if (other.isSetTriggerCron()) {
      this.triggerCron = other.triggerCron;
    }
    if (other.isSetTriggerStatus()) {
      this.triggerStatus = other.triggerStatus;
    }
    this.prevFireTime = other.prevFireTime;
    this.nextFireTime = other.nextFireTime;
    this.isDurable = other.isDurable;
    this.isPersistJobDataAfterExecution = other.isPersistJobDataAfterExecution;
    this.isConcurrentExecutionDisallowed = other.isConcurrentExecutionDisallowed;
    this.requestsRecovery = other.requestsRecovery;
  }

  public JobTriggerEntity deepCopy() {
    return new JobTriggerEntity(this);
  }

  @Override
  public void clear() {
    this.jobName = null;
    this.jobKey = null;
    this.jobDescription = null;
    this.jobGroup = null;
    this.jobClass = null;
    this.triggerCron = null;
    this.triggerStatus = null;
    setPrevFireTimeIsSet(false);
    this.prevFireTime = 0;
    setNextFireTimeIsSet(false);
    this.nextFireTime = 0;
    setIsDurableIsSet(false);
    this.isDurable = false;
    setIsPersistJobDataAfterExecutionIsSet(false);
    this.isPersistJobDataAfterExecution = false;
    setIsConcurrentExecutionDisallowedIsSet(false);
    this.isConcurrentExecutionDisallowed = false;
    setRequestsRecoveryIsSet(false);
    this.requestsRecovery = false;
  }

  public String getJobName() {
    return this.jobName;
  }

  public JobTriggerEntity setJobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  public void unsetJobName() {
    this.jobName = null;
  }

  /** Returns true if field jobName is set (has been assigned a value) and false otherwise */
  public boolean isSetJobName() {
    return this.jobName != null;
  }

  public void setJobNameIsSet(boolean value) {
    if (!value) {
      this.jobName = null;
    }
  }

  public String getJobKey() {
    return this.jobKey;
  }

  public JobTriggerEntity setJobKey(String jobKey) {
    this.jobKey = jobKey;
    return this;
  }

  public void unsetJobKey() {
    this.jobKey = null;
  }

  /** Returns true if field jobKey is set (has been assigned a value) and false otherwise */
  public boolean isSetJobKey() {
    return this.jobKey != null;
  }

  public void setJobKeyIsSet(boolean value) {
    if (!value) {
      this.jobKey = null;
    }
  }

  public String getJobDescription() {
    return this.jobDescription;
  }

  public JobTriggerEntity setJobDescription(String jobDescription) {
    this.jobDescription = jobDescription;
    return this;
  }

  public void unsetJobDescription() {
    this.jobDescription = null;
  }

  /** Returns true if field jobDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetJobDescription() {
    return this.jobDescription != null;
  }

  public void setJobDescriptionIsSet(boolean value) {
    if (!value) {
      this.jobDescription = null;
    }
  }

  public String getJobGroup() {
    return this.jobGroup;
  }

  public JobTriggerEntity setJobGroup(String jobGroup) {
    this.jobGroup = jobGroup;
    return this;
  }

  public void unsetJobGroup() {
    this.jobGroup = null;
  }

  /** Returns true if field jobGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetJobGroup() {
    return this.jobGroup != null;
  }

  public void setJobGroupIsSet(boolean value) {
    if (!value) {
      this.jobGroup = null;
    }
  }

  public String getJobClass() {
    return this.jobClass;
  }

  public JobTriggerEntity setJobClass(String jobClass) {
    this.jobClass = jobClass;
    return this;
  }

  public void unsetJobClass() {
    this.jobClass = null;
  }

  /** Returns true if field jobClass is set (has been assigned a value) and false otherwise */
  public boolean isSetJobClass() {
    return this.jobClass != null;
  }

  public void setJobClassIsSet(boolean value) {
    if (!value) {
      this.jobClass = null;
    }
  }

  public String getTriggerCron() {
    return this.triggerCron;
  }

  public JobTriggerEntity setTriggerCron(String triggerCron) {
    this.triggerCron = triggerCron;
    return this;
  }

  public void unsetTriggerCron() {
    this.triggerCron = null;
  }

  /** Returns true if field triggerCron is set (has been assigned a value) and false otherwise */
  public boolean isSetTriggerCron() {
    return this.triggerCron != null;
  }

  public void setTriggerCronIsSet(boolean value) {
    if (!value) {
      this.triggerCron = null;
    }
  }

  public String getTriggerStatus() {
    return this.triggerStatus;
  }

  public JobTriggerEntity setTriggerStatus(String triggerStatus) {
    this.triggerStatus = triggerStatus;
    return this;
  }

  public void unsetTriggerStatus() {
    this.triggerStatus = null;
  }

  /** Returns true if field triggerStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTriggerStatus() {
    return this.triggerStatus != null;
  }

  public void setTriggerStatusIsSet(boolean value) {
    if (!value) {
      this.triggerStatus = null;
    }
  }

  public long getPrevFireTime() {
    return this.prevFireTime;
  }

  public JobTriggerEntity setPrevFireTime(long prevFireTime) {
    this.prevFireTime = prevFireTime;
    setPrevFireTimeIsSet(true);
    return this;
  }

  public void unsetPrevFireTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PREVFIRETIME_ISSET_ID);
  }

  /** Returns true if field prevFireTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPrevFireTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PREVFIRETIME_ISSET_ID);
  }

  public void setPrevFireTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PREVFIRETIME_ISSET_ID, value);
  }

  public long getNextFireTime() {
    return this.nextFireTime;
  }

  public JobTriggerEntity setNextFireTime(long nextFireTime) {
    this.nextFireTime = nextFireTime;
    setNextFireTimeIsSet(true);
    return this;
  }

  public void unsetNextFireTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEXTFIRETIME_ISSET_ID);
  }

  /** Returns true if field nextFireTime is set (has been assigned a value) and false otherwise */
  public boolean isSetNextFireTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEXTFIRETIME_ISSET_ID);
  }

  public void setNextFireTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEXTFIRETIME_ISSET_ID, value);
  }

  public boolean isIsDurable() {
    return this.isDurable;
  }

  public JobTriggerEntity setIsDurable(boolean isDurable) {
    this.isDurable = isDurable;
    setIsDurableIsSet(true);
    return this;
  }

  public void unsetIsDurable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISDURABLE_ISSET_ID);
  }

  /** Returns true if field isDurable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDurable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISDURABLE_ISSET_ID);
  }

  public void setIsDurableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISDURABLE_ISSET_ID, value);
  }

  public boolean isIsPersistJobDataAfterExecution() {
    return this.isPersistJobDataAfterExecution;
  }

  public JobTriggerEntity setIsPersistJobDataAfterExecution(boolean isPersistJobDataAfterExecution) {
    this.isPersistJobDataAfterExecution = isPersistJobDataAfterExecution;
    setIsPersistJobDataAfterExecutionIsSet(true);
    return this;
  }

  public void unsetIsPersistJobDataAfterExecution() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISPERSISTJOBDATAAFTEREXECUTION_ISSET_ID);
  }

  /** Returns true if field isPersistJobDataAfterExecution is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPersistJobDataAfterExecution() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISPERSISTJOBDATAAFTEREXECUTION_ISSET_ID);
  }

  public void setIsPersistJobDataAfterExecutionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISPERSISTJOBDATAAFTEREXECUTION_ISSET_ID, value);
  }

  public boolean isIsConcurrentExecutionDisallowed() {
    return this.isConcurrentExecutionDisallowed;
  }

  public JobTriggerEntity setIsConcurrentExecutionDisallowed(boolean isConcurrentExecutionDisallowed) {
    this.isConcurrentExecutionDisallowed = isConcurrentExecutionDisallowed;
    setIsConcurrentExecutionDisallowedIsSet(true);
    return this;
  }

  public void unsetIsConcurrentExecutionDisallowed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISCONCURRENTEXECUTIONDISALLOWED_ISSET_ID);
  }

  /** Returns true if field isConcurrentExecutionDisallowed is set (has been assigned a value) and false otherwise */
  public boolean isSetIsConcurrentExecutionDisallowed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISCONCURRENTEXECUTIONDISALLOWED_ISSET_ID);
  }

  public void setIsConcurrentExecutionDisallowedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISCONCURRENTEXECUTIONDISALLOWED_ISSET_ID, value);
  }

  public boolean isRequestsRecovery() {
    return this.requestsRecovery;
  }

  public JobTriggerEntity setRequestsRecovery(boolean requestsRecovery) {
    this.requestsRecovery = requestsRecovery;
    setRequestsRecoveryIsSet(true);
    return this;
  }

  public void unsetRequestsRecovery() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTSRECOVERY_ISSET_ID);
  }

  /** Returns true if field requestsRecovery is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestsRecovery() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTSRECOVERY_ISSET_ID);
  }

  public void setRequestsRecoveryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTSRECOVERY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JOB_NAME:
      if (value == null) {
        unsetJobName();
      } else {
        setJobName((String)value);
      }
      break;

    case JOB_KEY:
      if (value == null) {
        unsetJobKey();
      } else {
        setJobKey((String)value);
      }
      break;

    case JOB_DESCRIPTION:
      if (value == null) {
        unsetJobDescription();
      } else {
        setJobDescription((String)value);
      }
      break;

    case JOB_GROUP:
      if (value == null) {
        unsetJobGroup();
      } else {
        setJobGroup((String)value);
      }
      break;

    case JOB_CLASS:
      if (value == null) {
        unsetJobClass();
      } else {
        setJobClass((String)value);
      }
      break;

    case TRIGGER_CRON:
      if (value == null) {
        unsetTriggerCron();
      } else {
        setTriggerCron((String)value);
      }
      break;

    case TRIGGER_STATUS:
      if (value == null) {
        unsetTriggerStatus();
      } else {
        setTriggerStatus((String)value);
      }
      break;

    case PREV_FIRE_TIME:
      if (value == null) {
        unsetPrevFireTime();
      } else {
        setPrevFireTime((Long)value);
      }
      break;

    case NEXT_FIRE_TIME:
      if (value == null) {
        unsetNextFireTime();
      } else {
        setNextFireTime((Long)value);
      }
      break;

    case IS_DURABLE:
      if (value == null) {
        unsetIsDurable();
      } else {
        setIsDurable((Boolean)value);
      }
      break;

    case IS_PERSIST_JOB_DATA_AFTER_EXECUTION:
      if (value == null) {
        unsetIsPersistJobDataAfterExecution();
      } else {
        setIsPersistJobDataAfterExecution((Boolean)value);
      }
      break;

    case IS_CONCURRENT_EXECUTION_DISALLOWED:
      if (value == null) {
        unsetIsConcurrentExecutionDisallowed();
      } else {
        setIsConcurrentExecutionDisallowed((Boolean)value);
      }
      break;

    case REQUESTS_RECOVERY:
      if (value == null) {
        unsetRequestsRecovery();
      } else {
        setRequestsRecovery((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JOB_NAME:
      return getJobName();

    case JOB_KEY:
      return getJobKey();

    case JOB_DESCRIPTION:
      return getJobDescription();

    case JOB_GROUP:
      return getJobGroup();

    case JOB_CLASS:
      return getJobClass();

    case TRIGGER_CRON:
      return getTriggerCron();

    case TRIGGER_STATUS:
      return getTriggerStatus();

    case PREV_FIRE_TIME:
      return getPrevFireTime();

    case NEXT_FIRE_TIME:
      return getNextFireTime();

    case IS_DURABLE:
      return isIsDurable();

    case IS_PERSIST_JOB_DATA_AFTER_EXECUTION:
      return isIsPersistJobDataAfterExecution();

    case IS_CONCURRENT_EXECUTION_DISALLOWED:
      return isIsConcurrentExecutionDisallowed();

    case REQUESTS_RECOVERY:
      return isRequestsRecovery();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JOB_NAME:
      return isSetJobName();
    case JOB_KEY:
      return isSetJobKey();
    case JOB_DESCRIPTION:
      return isSetJobDescription();
    case JOB_GROUP:
      return isSetJobGroup();
    case JOB_CLASS:
      return isSetJobClass();
    case TRIGGER_CRON:
      return isSetTriggerCron();
    case TRIGGER_STATUS:
      return isSetTriggerStatus();
    case PREV_FIRE_TIME:
      return isSetPrevFireTime();
    case NEXT_FIRE_TIME:
      return isSetNextFireTime();
    case IS_DURABLE:
      return isSetIsDurable();
    case IS_PERSIST_JOB_DATA_AFTER_EXECUTION:
      return isSetIsPersistJobDataAfterExecution();
    case IS_CONCURRENT_EXECUTION_DISALLOWED:
      return isSetIsConcurrentExecutionDisallowed();
    case REQUESTS_RECOVERY:
      return isSetRequestsRecovery();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobTriggerEntity)
      return this.equals((JobTriggerEntity)that);
    return false;
  }

  public boolean equals(JobTriggerEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_jobName = true && this.isSetJobName();
    boolean that_present_jobName = true && that.isSetJobName();
    if (this_present_jobName || that_present_jobName) {
      if (!(this_present_jobName && that_present_jobName))
        return false;
      if (!this.jobName.equals(that.jobName))
        return false;
    }

    boolean this_present_jobKey = true && this.isSetJobKey();
    boolean that_present_jobKey = true && that.isSetJobKey();
    if (this_present_jobKey || that_present_jobKey) {
      if (!(this_present_jobKey && that_present_jobKey))
        return false;
      if (!this.jobKey.equals(that.jobKey))
        return false;
    }

    boolean this_present_jobDescription = true && this.isSetJobDescription();
    boolean that_present_jobDescription = true && that.isSetJobDescription();
    if (this_present_jobDescription || that_present_jobDescription) {
      if (!(this_present_jobDescription && that_present_jobDescription))
        return false;
      if (!this.jobDescription.equals(that.jobDescription))
        return false;
    }

    boolean this_present_jobGroup = true && this.isSetJobGroup();
    boolean that_present_jobGroup = true && that.isSetJobGroup();
    if (this_present_jobGroup || that_present_jobGroup) {
      if (!(this_present_jobGroup && that_present_jobGroup))
        return false;
      if (!this.jobGroup.equals(that.jobGroup))
        return false;
    }

    boolean this_present_jobClass = true && this.isSetJobClass();
    boolean that_present_jobClass = true && that.isSetJobClass();
    if (this_present_jobClass || that_present_jobClass) {
      if (!(this_present_jobClass && that_present_jobClass))
        return false;
      if (!this.jobClass.equals(that.jobClass))
        return false;
    }

    boolean this_present_triggerCron = true && this.isSetTriggerCron();
    boolean that_present_triggerCron = true && that.isSetTriggerCron();
    if (this_present_triggerCron || that_present_triggerCron) {
      if (!(this_present_triggerCron && that_present_triggerCron))
        return false;
      if (!this.triggerCron.equals(that.triggerCron))
        return false;
    }

    boolean this_present_triggerStatus = true && this.isSetTriggerStatus();
    boolean that_present_triggerStatus = true && that.isSetTriggerStatus();
    if (this_present_triggerStatus || that_present_triggerStatus) {
      if (!(this_present_triggerStatus && that_present_triggerStatus))
        return false;
      if (!this.triggerStatus.equals(that.triggerStatus))
        return false;
    }

    boolean this_present_prevFireTime = true;
    boolean that_present_prevFireTime = true;
    if (this_present_prevFireTime || that_present_prevFireTime) {
      if (!(this_present_prevFireTime && that_present_prevFireTime))
        return false;
      if (this.prevFireTime != that.prevFireTime)
        return false;
    }

    boolean this_present_nextFireTime = true;
    boolean that_present_nextFireTime = true;
    if (this_present_nextFireTime || that_present_nextFireTime) {
      if (!(this_present_nextFireTime && that_present_nextFireTime))
        return false;
      if (this.nextFireTime != that.nextFireTime)
        return false;
    }

    boolean this_present_isDurable = true;
    boolean that_present_isDurable = true;
    if (this_present_isDurable || that_present_isDurable) {
      if (!(this_present_isDurable && that_present_isDurable))
        return false;
      if (this.isDurable != that.isDurable)
        return false;
    }

    boolean this_present_isPersistJobDataAfterExecution = true;
    boolean that_present_isPersistJobDataAfterExecution = true;
    if (this_present_isPersistJobDataAfterExecution || that_present_isPersistJobDataAfterExecution) {
      if (!(this_present_isPersistJobDataAfterExecution && that_present_isPersistJobDataAfterExecution))
        return false;
      if (this.isPersistJobDataAfterExecution != that.isPersistJobDataAfterExecution)
        return false;
    }

    boolean this_present_isConcurrentExecutionDisallowed = true;
    boolean that_present_isConcurrentExecutionDisallowed = true;
    if (this_present_isConcurrentExecutionDisallowed || that_present_isConcurrentExecutionDisallowed) {
      if (!(this_present_isConcurrentExecutionDisallowed && that_present_isConcurrentExecutionDisallowed))
        return false;
      if (this.isConcurrentExecutionDisallowed != that.isConcurrentExecutionDisallowed)
        return false;
    }

    boolean this_present_requestsRecovery = true;
    boolean that_present_requestsRecovery = true;
    if (this_present_requestsRecovery || that_present_requestsRecovery) {
      if (!(this_present_requestsRecovery && that_present_requestsRecovery))
        return false;
      if (this.requestsRecovery != that.requestsRecovery)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetJobName()) ? 131071 : 524287);
    if (isSetJobName())
      hashCode = hashCode * 8191 + jobName.hashCode();

    hashCode = hashCode * 8191 + ((isSetJobKey()) ? 131071 : 524287);
    if (isSetJobKey())
      hashCode = hashCode * 8191 + jobKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetJobDescription()) ? 131071 : 524287);
    if (isSetJobDescription())
      hashCode = hashCode * 8191 + jobDescription.hashCode();

    hashCode = hashCode * 8191 + ((isSetJobGroup()) ? 131071 : 524287);
    if (isSetJobGroup())
      hashCode = hashCode * 8191 + jobGroup.hashCode();

    hashCode = hashCode * 8191 + ((isSetJobClass()) ? 131071 : 524287);
    if (isSetJobClass())
      hashCode = hashCode * 8191 + jobClass.hashCode();

    hashCode = hashCode * 8191 + ((isSetTriggerCron()) ? 131071 : 524287);
    if (isSetTriggerCron())
      hashCode = hashCode * 8191 + triggerCron.hashCode();

    hashCode = hashCode * 8191 + ((isSetTriggerStatus()) ? 131071 : 524287);
    if (isSetTriggerStatus())
      hashCode = hashCode * 8191 + triggerStatus.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(prevFireTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(nextFireTime);

    hashCode = hashCode * 8191 + ((isDurable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isPersistJobDataAfterExecution) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isConcurrentExecutionDisallowed) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((requestsRecovery) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(JobTriggerEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetJobName()).compareTo(other.isSetJobName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobName, other.jobName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobKey()).compareTo(other.isSetJobKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobKey, other.jobKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobDescription()).compareTo(other.isSetJobDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobDescription, other.jobDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobGroup()).compareTo(other.isSetJobGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobGroup, other.jobGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobClass()).compareTo(other.isSetJobClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobClass, other.jobClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTriggerCron()).compareTo(other.isSetTriggerCron());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriggerCron()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerCron, other.triggerCron);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTriggerStatus()).compareTo(other.isSetTriggerStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriggerStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerStatus, other.triggerStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrevFireTime()).compareTo(other.isSetPrevFireTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrevFireTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prevFireTime, other.prevFireTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextFireTime()).compareTo(other.isSetNextFireTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextFireTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextFireTime, other.nextFireTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDurable()).compareTo(other.isSetIsDurable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDurable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDurable, other.isDurable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPersistJobDataAfterExecution()).compareTo(other.isSetIsPersistJobDataAfterExecution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPersistJobDataAfterExecution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPersistJobDataAfterExecution, other.isPersistJobDataAfterExecution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsConcurrentExecutionDisallowed()).compareTo(other.isSetIsConcurrentExecutionDisallowed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsConcurrentExecutionDisallowed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isConcurrentExecutionDisallowed, other.isConcurrentExecutionDisallowed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestsRecovery()).compareTo(other.isSetRequestsRecovery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestsRecovery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestsRecovery, other.requestsRecovery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobTriggerEntity(");
    boolean first = true;

    sb.append("jobName:");
    if (this.jobName == null) {
      sb.append("null");
    } else {
      sb.append(this.jobName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobKey:");
    if (this.jobKey == null) {
      sb.append("null");
    } else {
      sb.append(this.jobKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobDescription:");
    if (this.jobDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.jobDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobGroup:");
    if (this.jobGroup == null) {
      sb.append("null");
    } else {
      sb.append(this.jobGroup);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobClass:");
    if (this.jobClass == null) {
      sb.append("null");
    } else {
      sb.append(this.jobClass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("triggerCron:");
    if (this.triggerCron == null) {
      sb.append("null");
    } else {
      sb.append(this.triggerCron);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("triggerStatus:");
    if (this.triggerStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.triggerStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("prevFireTime:");
    sb.append(this.prevFireTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nextFireTime:");
    sb.append(this.nextFireTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isDurable:");
    sb.append(this.isDurable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPersistJobDataAfterExecution:");
    sb.append(this.isPersistJobDataAfterExecution);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isConcurrentExecutionDisallowed:");
    sb.append(this.isConcurrentExecutionDisallowed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestsRecovery:");
    sb.append(this.requestsRecovery);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobTriggerEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JobTriggerEntityStandardScheme getScheme() {
      return new JobTriggerEntityStandardScheme();
    }
  }

  private static class JobTriggerEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<JobTriggerEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobTriggerEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobName = iprot.readString();
              struct.setJobNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOB_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobKey = iprot.readString();
              struct.setJobKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JOB_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobDescription = iprot.readString();
              struct.setJobDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JOB_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobGroup = iprot.readString();
              struct.setJobGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // JOB_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobClass = iprot.readString();
              struct.setJobClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRIGGER_CRON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.triggerCron = iprot.readString();
              struct.setTriggerCronIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRIGGER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.triggerStatus = iprot.readString();
              struct.setTriggerStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PREV_FIRE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.prevFireTime = iprot.readI64();
              struct.setPrevFireTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NEXT_FIRE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.nextFireTime = iprot.readI64();
              struct.setNextFireTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_DURABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isDurable = iprot.readBool();
              struct.setIsDurableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_PERSIST_JOB_DATA_AFTER_EXECUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPersistJobDataAfterExecution = iprot.readBool();
              struct.setIsPersistJobDataAfterExecutionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_CONCURRENT_EXECUTION_DISALLOWED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isConcurrentExecutionDisallowed = iprot.readBool();
              struct.setIsConcurrentExecutionDisallowedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REQUESTS_RECOVERY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.requestsRecovery = iprot.readBool();
              struct.setRequestsRecoveryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobTriggerEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.jobName != null) {
        oprot.writeFieldBegin(JOB_NAME_FIELD_DESC);
        oprot.writeString(struct.jobName);
        oprot.writeFieldEnd();
      }
      if (struct.jobKey != null) {
        oprot.writeFieldBegin(JOB_KEY_FIELD_DESC);
        oprot.writeString(struct.jobKey);
        oprot.writeFieldEnd();
      }
      if (struct.jobDescription != null) {
        oprot.writeFieldBegin(JOB_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.jobDescription);
        oprot.writeFieldEnd();
      }
      if (struct.jobGroup != null) {
        oprot.writeFieldBegin(JOB_GROUP_FIELD_DESC);
        oprot.writeString(struct.jobGroup);
        oprot.writeFieldEnd();
      }
      if (struct.jobClass != null) {
        oprot.writeFieldBegin(JOB_CLASS_FIELD_DESC);
        oprot.writeString(struct.jobClass);
        oprot.writeFieldEnd();
      }
      if (struct.triggerCron != null) {
        oprot.writeFieldBegin(TRIGGER_CRON_FIELD_DESC);
        oprot.writeString(struct.triggerCron);
        oprot.writeFieldEnd();
      }
      if (struct.triggerStatus != null) {
        oprot.writeFieldBegin(TRIGGER_STATUS_FIELD_DESC);
        oprot.writeString(struct.triggerStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PREV_FIRE_TIME_FIELD_DESC);
      oprot.writeI64(struct.prevFireTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEXT_FIRE_TIME_FIELD_DESC);
      oprot.writeI64(struct.nextFireTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_DURABLE_FIELD_DESC);
      oprot.writeBool(struct.isDurable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PERSIST_JOB_DATA_AFTER_EXECUTION_FIELD_DESC);
      oprot.writeBool(struct.isPersistJobDataAfterExecution);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CONCURRENT_EXECUTION_DISALLOWED_FIELD_DESC);
      oprot.writeBool(struct.isConcurrentExecutionDisallowed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUESTS_RECOVERY_FIELD_DESC);
      oprot.writeBool(struct.requestsRecovery);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobTriggerEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JobTriggerEntityTupleScheme getScheme() {
      return new JobTriggerEntityTupleScheme();
    }
  }

  private static class JobTriggerEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<JobTriggerEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JobTriggerEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetJobName()) {
        optionals.set(0);
      }
      if (struct.isSetJobKey()) {
        optionals.set(1);
      }
      if (struct.isSetJobDescription()) {
        optionals.set(2);
      }
      if (struct.isSetJobGroup()) {
        optionals.set(3);
      }
      if (struct.isSetJobClass()) {
        optionals.set(4);
      }
      if (struct.isSetTriggerCron()) {
        optionals.set(5);
      }
      if (struct.isSetTriggerStatus()) {
        optionals.set(6);
      }
      if (struct.isSetPrevFireTime()) {
        optionals.set(7);
      }
      if (struct.isSetNextFireTime()) {
        optionals.set(8);
      }
      if (struct.isSetIsDurable()) {
        optionals.set(9);
      }
      if (struct.isSetIsPersistJobDataAfterExecution()) {
        optionals.set(10);
      }
      if (struct.isSetIsConcurrentExecutionDisallowed()) {
        optionals.set(11);
      }
      if (struct.isSetRequestsRecovery()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetJobName()) {
        oprot.writeString(struct.jobName);
      }
      if (struct.isSetJobKey()) {
        oprot.writeString(struct.jobKey);
      }
      if (struct.isSetJobDescription()) {
        oprot.writeString(struct.jobDescription);
      }
      if (struct.isSetJobGroup()) {
        oprot.writeString(struct.jobGroup);
      }
      if (struct.isSetJobClass()) {
        oprot.writeString(struct.jobClass);
      }
      if (struct.isSetTriggerCron()) {
        oprot.writeString(struct.triggerCron);
      }
      if (struct.isSetTriggerStatus()) {
        oprot.writeString(struct.triggerStatus);
      }
      if (struct.isSetPrevFireTime()) {
        oprot.writeI64(struct.prevFireTime);
      }
      if (struct.isSetNextFireTime()) {
        oprot.writeI64(struct.nextFireTime);
      }
      if (struct.isSetIsDurable()) {
        oprot.writeBool(struct.isDurable);
      }
      if (struct.isSetIsPersistJobDataAfterExecution()) {
        oprot.writeBool(struct.isPersistJobDataAfterExecution);
      }
      if (struct.isSetIsConcurrentExecutionDisallowed()) {
        oprot.writeBool(struct.isConcurrentExecutionDisallowed);
      }
      if (struct.isSetRequestsRecovery()) {
        oprot.writeBool(struct.requestsRecovery);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JobTriggerEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.jobName = iprot.readString();
        struct.setJobNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.jobKey = iprot.readString();
        struct.setJobKeyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.jobDescription = iprot.readString();
        struct.setJobDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.jobGroup = iprot.readString();
        struct.setJobGroupIsSet(true);
      }
      if (incoming.get(4)) {
        struct.jobClass = iprot.readString();
        struct.setJobClassIsSet(true);
      }
      if (incoming.get(5)) {
        struct.triggerCron = iprot.readString();
        struct.setTriggerCronIsSet(true);
      }
      if (incoming.get(6)) {
        struct.triggerStatus = iprot.readString();
        struct.setTriggerStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.prevFireTime = iprot.readI64();
        struct.setPrevFireTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.nextFireTime = iprot.readI64();
        struct.setNextFireTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isDurable = iprot.readBool();
        struct.setIsDurableIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isPersistJobDataAfterExecution = iprot.readBool();
        struct.setIsPersistJobDataAfterExecutionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isConcurrentExecutionDisallowed = iprot.readBool();
        struct.setIsConcurrentExecutionDisallowedIsSet(true);
      }
      if (incoming.get(12)) {
        struct.requestsRecovery = iprot.readBool();
        struct.setRequestsRecoveryIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

