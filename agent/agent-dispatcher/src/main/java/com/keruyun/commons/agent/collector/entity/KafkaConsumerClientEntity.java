/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class KafkaConsumerClientEntity implements org.apache.thrift.TBase<KafkaConsumerClientEntity, KafkaConsumerClientEntity._Fields>, java.io.Serializable, Cloneable, Comparable<KafkaConsumerClientEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KafkaConsumerClientEntity");

  private static final org.apache.thrift.protocol.TField CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COORDINATOR_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinatorEntity", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField FETCHER_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("fetcherEntity", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField CONNECTION_CLOSE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("connectionCloseRate", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField CONNECTION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("connectionCount", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField CONNECTION_CREATE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("connectionCreateRate", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField INCOMING_BYTE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("incomingByteRate", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField IO_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("ioRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField IO_TIME_NS_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("ioTimeNsAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField IO_WAIT_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("ioWaitRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField IO_WAIT_TIME_NS_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("ioWaitTimeNsAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField NETWORK_IO_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("networkIoRate", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField OUTGOING_BYTE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("outgoingByteRate", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField REQUEST_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestRate", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField REQUEST_SIZE_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("requestSizeMax", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField REQUEST_SIZE_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("requestSizeAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField RESPONSE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("responseRate", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField SELECT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("selectRate", org.apache.thrift.protocol.TType.DOUBLE, (short)20);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KafkaConsumerClientEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KafkaConsumerClientEntityTupleSchemeFactory();

  public String cluster; // required
  public String clientId; // required
  public String groupName; // required
  public KafkaConsumerCoordinatorEntity coordinatorEntity; // required
  public KafkaConsumerFetcherEntity fetcherEntity; // required
  public double connectionCloseRate; // required
  public double connectionCount; // required
  public double connectionCreateRate; // required
  public double incomingByteRate; // required
  public double ioRatio; // required
  public double ioTimeNsAvg; // required
  public double ioWaitRatio; // required
  public double ioWaitTimeNsAvg; // required
  public double networkIoRate; // required
  public double outgoingByteRate; // required
  public double requestRate; // required
  public double requestSizeMax; // required
  public double requestSizeAvg; // required
  public double responseRate; // required
  public double selectRate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLUSTER((short)1, "cluster"),
    CLIENT_ID((short)2, "clientId"),
    GROUP_NAME((short)3, "groupName"),
    COORDINATOR_ENTITY((short)4, "coordinatorEntity"),
    FETCHER_ENTITY((short)5, "fetcherEntity"),
    CONNECTION_CLOSE_RATE((short)6, "connectionCloseRate"),
    CONNECTION_COUNT((short)7, "connectionCount"),
    CONNECTION_CREATE_RATE((short)8, "connectionCreateRate"),
    INCOMING_BYTE_RATE((short)9, "incomingByteRate"),
    IO_RATIO((short)10, "ioRatio"),
    IO_TIME_NS_AVG((short)11, "ioTimeNsAvg"),
    IO_WAIT_RATIO((short)12, "ioWaitRatio"),
    IO_WAIT_TIME_NS_AVG((short)13, "ioWaitTimeNsAvg"),
    NETWORK_IO_RATE((short)14, "networkIoRate"),
    OUTGOING_BYTE_RATE((short)15, "outgoingByteRate"),
    REQUEST_RATE((short)16, "requestRate"),
    REQUEST_SIZE_MAX((short)17, "requestSizeMax"),
    REQUEST_SIZE_AVG((short)18, "requestSizeAvg"),
    RESPONSE_RATE((short)19, "responseRate"),
    SELECT_RATE((short)20, "selectRate");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLUSTER
          return CLUSTER;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // GROUP_NAME
          return GROUP_NAME;
        case 4: // COORDINATOR_ENTITY
          return COORDINATOR_ENTITY;
        case 5: // FETCHER_ENTITY
          return FETCHER_ENTITY;
        case 6: // CONNECTION_CLOSE_RATE
          return CONNECTION_CLOSE_RATE;
        case 7: // CONNECTION_COUNT
          return CONNECTION_COUNT;
        case 8: // CONNECTION_CREATE_RATE
          return CONNECTION_CREATE_RATE;
        case 9: // INCOMING_BYTE_RATE
          return INCOMING_BYTE_RATE;
        case 10: // IO_RATIO
          return IO_RATIO;
        case 11: // IO_TIME_NS_AVG
          return IO_TIME_NS_AVG;
        case 12: // IO_WAIT_RATIO
          return IO_WAIT_RATIO;
        case 13: // IO_WAIT_TIME_NS_AVG
          return IO_WAIT_TIME_NS_AVG;
        case 14: // NETWORK_IO_RATE
          return NETWORK_IO_RATE;
        case 15: // OUTGOING_BYTE_RATE
          return OUTGOING_BYTE_RATE;
        case 16: // REQUEST_RATE
          return REQUEST_RATE;
        case 17: // REQUEST_SIZE_MAX
          return REQUEST_SIZE_MAX;
        case 18: // REQUEST_SIZE_AVG
          return REQUEST_SIZE_AVG;
        case 19: // RESPONSE_RATE
          return RESPONSE_RATE;
        case 20: // SELECT_RATE
          return SELECT_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONNECTIONCLOSERATE_ISSET_ID = 0;
  private static final int __CONNECTIONCOUNT_ISSET_ID = 1;
  private static final int __CONNECTIONCREATERATE_ISSET_ID = 2;
  private static final int __INCOMINGBYTERATE_ISSET_ID = 3;
  private static final int __IORATIO_ISSET_ID = 4;
  private static final int __IOTIMENSAVG_ISSET_ID = 5;
  private static final int __IOWAITRATIO_ISSET_ID = 6;
  private static final int __IOWAITTIMENSAVG_ISSET_ID = 7;
  private static final int __NETWORKIORATE_ISSET_ID = 8;
  private static final int __OUTGOINGBYTERATE_ISSET_ID = 9;
  private static final int __REQUESTRATE_ISSET_ID = 10;
  private static final int __REQUESTSIZEMAX_ISSET_ID = 11;
  private static final int __REQUESTSIZEAVG_ISSET_ID = 12;
  private static final int __RESPONSERATE_ISSET_ID = 13;
  private static final int __SELECTRATE_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("cluster", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COORDINATOR_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("coordinatorEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KafkaConsumerCoordinatorEntity.class)));
    tmpMap.put(_Fields.FETCHER_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("fetcherEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KafkaConsumerFetcherEntity.class)));
    tmpMap.put(_Fields.CONNECTION_CLOSE_RATE, new org.apache.thrift.meta_data.FieldMetaData("connectionCloseRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONNECTION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("connectionCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONNECTION_CREATE_RATE, new org.apache.thrift.meta_data.FieldMetaData("connectionCreateRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INCOMING_BYTE_RATE, new org.apache.thrift.meta_data.FieldMetaData("incomingByteRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IO_RATIO, new org.apache.thrift.meta_data.FieldMetaData("ioRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IO_TIME_NS_AVG, new org.apache.thrift.meta_data.FieldMetaData("ioTimeNsAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IO_WAIT_RATIO, new org.apache.thrift.meta_data.FieldMetaData("ioWaitRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IO_WAIT_TIME_NS_AVG, new org.apache.thrift.meta_data.FieldMetaData("ioWaitTimeNsAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NETWORK_IO_RATE, new org.apache.thrift.meta_data.FieldMetaData("networkIoRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OUTGOING_BYTE_RATE, new org.apache.thrift.meta_data.FieldMetaData("outgoingByteRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_RATE, new org.apache.thrift.meta_data.FieldMetaData("requestRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_SIZE_MAX, new org.apache.thrift.meta_data.FieldMetaData("requestSizeMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_SIZE_AVG, new org.apache.thrift.meta_data.FieldMetaData("requestSizeAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RESPONSE_RATE, new org.apache.thrift.meta_data.FieldMetaData("responseRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SELECT_RATE, new org.apache.thrift.meta_data.FieldMetaData("selectRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KafkaConsumerClientEntity.class, metaDataMap);
  }

  public KafkaConsumerClientEntity() {
  }

  public KafkaConsumerClientEntity(
    String cluster,
    String clientId,
    String groupName,
    KafkaConsumerCoordinatorEntity coordinatorEntity,
    KafkaConsumerFetcherEntity fetcherEntity,
    double connectionCloseRate,
    double connectionCount,
    double connectionCreateRate,
    double incomingByteRate,
    double ioRatio,
    double ioTimeNsAvg,
    double ioWaitRatio,
    double ioWaitTimeNsAvg,
    double networkIoRate,
    double outgoingByteRate,
    double requestRate,
    double requestSizeMax,
    double requestSizeAvg,
    double responseRate,
    double selectRate)
  {
    this();
    this.cluster = cluster;
    this.clientId = clientId;
    this.groupName = groupName;
    this.coordinatorEntity = coordinatorEntity;
    this.fetcherEntity = fetcherEntity;
    this.connectionCloseRate = connectionCloseRate;
    setConnectionCloseRateIsSet(true);
    this.connectionCount = connectionCount;
    setConnectionCountIsSet(true);
    this.connectionCreateRate = connectionCreateRate;
    setConnectionCreateRateIsSet(true);
    this.incomingByteRate = incomingByteRate;
    setIncomingByteRateIsSet(true);
    this.ioRatio = ioRatio;
    setIoRatioIsSet(true);
    this.ioTimeNsAvg = ioTimeNsAvg;
    setIoTimeNsAvgIsSet(true);
    this.ioWaitRatio = ioWaitRatio;
    setIoWaitRatioIsSet(true);
    this.ioWaitTimeNsAvg = ioWaitTimeNsAvg;
    setIoWaitTimeNsAvgIsSet(true);
    this.networkIoRate = networkIoRate;
    setNetworkIoRateIsSet(true);
    this.outgoingByteRate = outgoingByteRate;
    setOutgoingByteRateIsSet(true);
    this.requestRate = requestRate;
    setRequestRateIsSet(true);
    this.requestSizeMax = requestSizeMax;
    setRequestSizeMaxIsSet(true);
    this.requestSizeAvg = requestSizeAvg;
    setRequestSizeAvgIsSet(true);
    this.responseRate = responseRate;
    setResponseRateIsSet(true);
    this.selectRate = selectRate;
    setSelectRateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KafkaConsumerClientEntity(KafkaConsumerClientEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCluster()) {
      this.cluster = other.cluster;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetGroupName()) {
      this.groupName = other.groupName;
    }
    if (other.isSetCoordinatorEntity()) {
      this.coordinatorEntity = new KafkaConsumerCoordinatorEntity(other.coordinatorEntity);
    }
    if (other.isSetFetcherEntity()) {
      this.fetcherEntity = new KafkaConsumerFetcherEntity(other.fetcherEntity);
    }
    this.connectionCloseRate = other.connectionCloseRate;
    this.connectionCount = other.connectionCount;
    this.connectionCreateRate = other.connectionCreateRate;
    this.incomingByteRate = other.incomingByteRate;
    this.ioRatio = other.ioRatio;
    this.ioTimeNsAvg = other.ioTimeNsAvg;
    this.ioWaitRatio = other.ioWaitRatio;
    this.ioWaitTimeNsAvg = other.ioWaitTimeNsAvg;
    this.networkIoRate = other.networkIoRate;
    this.outgoingByteRate = other.outgoingByteRate;
    this.requestRate = other.requestRate;
    this.requestSizeMax = other.requestSizeMax;
    this.requestSizeAvg = other.requestSizeAvg;
    this.responseRate = other.responseRate;
    this.selectRate = other.selectRate;
  }

  public KafkaConsumerClientEntity deepCopy() {
    return new KafkaConsumerClientEntity(this);
  }

  @Override
  public void clear() {
    this.cluster = null;
    this.clientId = null;
    this.groupName = null;
    this.coordinatorEntity = null;
    this.fetcherEntity = null;
    setConnectionCloseRateIsSet(false);
    this.connectionCloseRate = 0.0;
    setConnectionCountIsSet(false);
    this.connectionCount = 0.0;
    setConnectionCreateRateIsSet(false);
    this.connectionCreateRate = 0.0;
    setIncomingByteRateIsSet(false);
    this.incomingByteRate = 0.0;
    setIoRatioIsSet(false);
    this.ioRatio = 0.0;
    setIoTimeNsAvgIsSet(false);
    this.ioTimeNsAvg = 0.0;
    setIoWaitRatioIsSet(false);
    this.ioWaitRatio = 0.0;
    setIoWaitTimeNsAvgIsSet(false);
    this.ioWaitTimeNsAvg = 0.0;
    setNetworkIoRateIsSet(false);
    this.networkIoRate = 0.0;
    setOutgoingByteRateIsSet(false);
    this.outgoingByteRate = 0.0;
    setRequestRateIsSet(false);
    this.requestRate = 0.0;
    setRequestSizeMaxIsSet(false);
    this.requestSizeMax = 0.0;
    setRequestSizeAvgIsSet(false);
    this.requestSizeAvg = 0.0;
    setResponseRateIsSet(false);
    this.responseRate = 0.0;
    setSelectRateIsSet(false);
    this.selectRate = 0.0;
  }

  public String getCluster() {
    return this.cluster;
  }

  public KafkaConsumerClientEntity setCluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

  public void unsetCluster() {
    this.cluster = null;
  }

  /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster() {
    return this.cluster != null;
  }

  public void setClusterIsSet(boolean value) {
    if (!value) {
      this.cluster = null;
    }
  }

  public String getClientId() {
    return this.clientId;
  }

  public KafkaConsumerClientEntity setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  public String getGroupName() {
    return this.groupName;
  }

  public KafkaConsumerClientEntity setGroupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  public void unsetGroupName() {
    this.groupName = null;
  }

  /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupName() {
    return this.groupName != null;
  }

  public void setGroupNameIsSet(boolean value) {
    if (!value) {
      this.groupName = null;
    }
  }

  public KafkaConsumerCoordinatorEntity getCoordinatorEntity() {
    return this.coordinatorEntity;
  }

  public KafkaConsumerClientEntity setCoordinatorEntity(KafkaConsumerCoordinatorEntity coordinatorEntity) {
    this.coordinatorEntity = coordinatorEntity;
    return this;
  }

  public void unsetCoordinatorEntity() {
    this.coordinatorEntity = null;
  }

  /** Returns true if field coordinatorEntity is set (has been assigned a value) and false otherwise */
  public boolean isSetCoordinatorEntity() {
    return this.coordinatorEntity != null;
  }

  public void setCoordinatorEntityIsSet(boolean value) {
    if (!value) {
      this.coordinatorEntity = null;
    }
  }

  public KafkaConsumerFetcherEntity getFetcherEntity() {
    return this.fetcherEntity;
  }

  public KafkaConsumerClientEntity setFetcherEntity(KafkaConsumerFetcherEntity fetcherEntity) {
    this.fetcherEntity = fetcherEntity;
    return this;
  }

  public void unsetFetcherEntity() {
    this.fetcherEntity = null;
  }

  /** Returns true if field fetcherEntity is set (has been assigned a value) and false otherwise */
  public boolean isSetFetcherEntity() {
    return this.fetcherEntity != null;
  }

  public void setFetcherEntityIsSet(boolean value) {
    if (!value) {
      this.fetcherEntity = null;
    }
  }

  public double getConnectionCloseRate() {
    return this.connectionCloseRate;
  }

  public KafkaConsumerClientEntity setConnectionCloseRate(double connectionCloseRate) {
    this.connectionCloseRate = connectionCloseRate;
    setConnectionCloseRateIsSet(true);
    return this;
  }

  public void unsetConnectionCloseRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNECTIONCLOSERATE_ISSET_ID);
  }

  /** Returns true if field connectionCloseRate is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectionCloseRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNECTIONCLOSERATE_ISSET_ID);
  }

  public void setConnectionCloseRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNECTIONCLOSERATE_ISSET_ID, value);
  }

  public double getConnectionCount() {
    return this.connectionCount;
  }

  public KafkaConsumerClientEntity setConnectionCount(double connectionCount) {
    this.connectionCount = connectionCount;
    setConnectionCountIsSet(true);
    return this;
  }

  public void unsetConnectionCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNECTIONCOUNT_ISSET_ID);
  }

  /** Returns true if field connectionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectionCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNECTIONCOUNT_ISSET_ID);
  }

  public void setConnectionCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNECTIONCOUNT_ISSET_ID, value);
  }

  public double getConnectionCreateRate() {
    return this.connectionCreateRate;
  }

  public KafkaConsumerClientEntity setConnectionCreateRate(double connectionCreateRate) {
    this.connectionCreateRate = connectionCreateRate;
    setConnectionCreateRateIsSet(true);
    return this;
  }

  public void unsetConnectionCreateRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNECTIONCREATERATE_ISSET_ID);
  }

  /** Returns true if field connectionCreateRate is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectionCreateRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNECTIONCREATERATE_ISSET_ID);
  }

  public void setConnectionCreateRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNECTIONCREATERATE_ISSET_ID, value);
  }

  public double getIncomingByteRate() {
    return this.incomingByteRate;
  }

  public KafkaConsumerClientEntity setIncomingByteRate(double incomingByteRate) {
    this.incomingByteRate = incomingByteRate;
    setIncomingByteRateIsSet(true);
    return this;
  }

  public void unsetIncomingByteRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INCOMINGBYTERATE_ISSET_ID);
  }

  /** Returns true if field incomingByteRate is set (has been assigned a value) and false otherwise */
  public boolean isSetIncomingByteRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INCOMINGBYTERATE_ISSET_ID);
  }

  public void setIncomingByteRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INCOMINGBYTERATE_ISSET_ID, value);
  }

  public double getIoRatio() {
    return this.ioRatio;
  }

  public KafkaConsumerClientEntity setIoRatio(double ioRatio) {
    this.ioRatio = ioRatio;
    setIoRatioIsSet(true);
    return this;
  }

  public void unsetIoRatio() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IORATIO_ISSET_ID);
  }

  /** Returns true if field ioRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetIoRatio() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IORATIO_ISSET_ID);
  }

  public void setIoRatioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IORATIO_ISSET_ID, value);
  }

  public double getIoTimeNsAvg() {
    return this.ioTimeNsAvg;
  }

  public KafkaConsumerClientEntity setIoTimeNsAvg(double ioTimeNsAvg) {
    this.ioTimeNsAvg = ioTimeNsAvg;
    setIoTimeNsAvgIsSet(true);
    return this;
  }

  public void unsetIoTimeNsAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IOTIMENSAVG_ISSET_ID);
  }

  /** Returns true if field ioTimeNsAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetIoTimeNsAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IOTIMENSAVG_ISSET_ID);
  }

  public void setIoTimeNsAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IOTIMENSAVG_ISSET_ID, value);
  }

  public double getIoWaitRatio() {
    return this.ioWaitRatio;
  }

  public KafkaConsumerClientEntity setIoWaitRatio(double ioWaitRatio) {
    this.ioWaitRatio = ioWaitRatio;
    setIoWaitRatioIsSet(true);
    return this;
  }

  public void unsetIoWaitRatio() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IOWAITRATIO_ISSET_ID);
  }

  /** Returns true if field ioWaitRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetIoWaitRatio() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IOWAITRATIO_ISSET_ID);
  }

  public void setIoWaitRatioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IOWAITRATIO_ISSET_ID, value);
  }

  public double getIoWaitTimeNsAvg() {
    return this.ioWaitTimeNsAvg;
  }

  public KafkaConsumerClientEntity setIoWaitTimeNsAvg(double ioWaitTimeNsAvg) {
    this.ioWaitTimeNsAvg = ioWaitTimeNsAvg;
    setIoWaitTimeNsAvgIsSet(true);
    return this;
  }

  public void unsetIoWaitTimeNsAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IOWAITTIMENSAVG_ISSET_ID);
  }

  /** Returns true if field ioWaitTimeNsAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetIoWaitTimeNsAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IOWAITTIMENSAVG_ISSET_ID);
  }

  public void setIoWaitTimeNsAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IOWAITTIMENSAVG_ISSET_ID, value);
  }

  public double getNetworkIoRate() {
    return this.networkIoRate;
  }

  public KafkaConsumerClientEntity setNetworkIoRate(double networkIoRate) {
    this.networkIoRate = networkIoRate;
    setNetworkIoRateIsSet(true);
    return this;
  }

  public void unsetNetworkIoRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NETWORKIORATE_ISSET_ID);
  }

  /** Returns true if field networkIoRate is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworkIoRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NETWORKIORATE_ISSET_ID);
  }

  public void setNetworkIoRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NETWORKIORATE_ISSET_ID, value);
  }

  public double getOutgoingByteRate() {
    return this.outgoingByteRate;
  }

  public KafkaConsumerClientEntity setOutgoingByteRate(double outgoingByteRate) {
    this.outgoingByteRate = outgoingByteRate;
    setOutgoingByteRateIsSet(true);
    return this;
  }

  public void unsetOutgoingByteRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTGOINGBYTERATE_ISSET_ID);
  }

  /** Returns true if field outgoingByteRate is set (has been assigned a value) and false otherwise */
  public boolean isSetOutgoingByteRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTGOINGBYTERATE_ISSET_ID);
  }

  public void setOutgoingByteRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTGOINGBYTERATE_ISSET_ID, value);
  }

  public double getRequestRate() {
    return this.requestRate;
  }

  public KafkaConsumerClientEntity setRequestRate(double requestRate) {
    this.requestRate = requestRate;
    setRequestRateIsSet(true);
    return this;
  }

  public void unsetRequestRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTRATE_ISSET_ID);
  }

  /** Returns true if field requestRate is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTRATE_ISSET_ID);
  }

  public void setRequestRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTRATE_ISSET_ID, value);
  }

  public double getRequestSizeMax() {
    return this.requestSizeMax;
  }

  public KafkaConsumerClientEntity setRequestSizeMax(double requestSizeMax) {
    this.requestSizeMax = requestSizeMax;
    setRequestSizeMaxIsSet(true);
    return this;
  }

  public void unsetRequestSizeMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTSIZEMAX_ISSET_ID);
  }

  /** Returns true if field requestSizeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestSizeMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTSIZEMAX_ISSET_ID);
  }

  public void setRequestSizeMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTSIZEMAX_ISSET_ID, value);
  }

  public double getRequestSizeAvg() {
    return this.requestSizeAvg;
  }

  public KafkaConsumerClientEntity setRequestSizeAvg(double requestSizeAvg) {
    this.requestSizeAvg = requestSizeAvg;
    setRequestSizeAvgIsSet(true);
    return this;
  }

  public void unsetRequestSizeAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTSIZEAVG_ISSET_ID);
  }

  /** Returns true if field requestSizeAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestSizeAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTSIZEAVG_ISSET_ID);
  }

  public void setRequestSizeAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTSIZEAVG_ISSET_ID, value);
  }

  public double getResponseRate() {
    return this.responseRate;
  }

  public KafkaConsumerClientEntity setResponseRate(double responseRate) {
    this.responseRate = responseRate;
    setResponseRateIsSet(true);
    return this;
  }

  public void unsetResponseRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSERATE_ISSET_ID);
  }

  /** Returns true if field responseRate is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSERATE_ISSET_ID);
  }

  public void setResponseRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSERATE_ISSET_ID, value);
  }

  public double getSelectRate() {
    return this.selectRate;
  }

  public KafkaConsumerClientEntity setSelectRate(double selectRate) {
    this.selectRate = selectRate;
    setSelectRateIsSet(true);
    return this;
  }

  public void unsetSelectRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SELECTRATE_ISSET_ID);
  }

  /** Returns true if field selectRate is set (has been assigned a value) and false otherwise */
  public boolean isSetSelectRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SELECTRATE_ISSET_ID);
  }

  public void setSelectRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SELECTRATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLUSTER:
      if (value == null) {
        unsetCluster();
      } else {
        setCluster((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case GROUP_NAME:
      if (value == null) {
        unsetGroupName();
      } else {
        setGroupName((String)value);
      }
      break;

    case COORDINATOR_ENTITY:
      if (value == null) {
        unsetCoordinatorEntity();
      } else {
        setCoordinatorEntity((KafkaConsumerCoordinatorEntity)value);
      }
      break;

    case FETCHER_ENTITY:
      if (value == null) {
        unsetFetcherEntity();
      } else {
        setFetcherEntity((KafkaConsumerFetcherEntity)value);
      }
      break;

    case CONNECTION_CLOSE_RATE:
      if (value == null) {
        unsetConnectionCloseRate();
      } else {
        setConnectionCloseRate((Double)value);
      }
      break;

    case CONNECTION_COUNT:
      if (value == null) {
        unsetConnectionCount();
      } else {
        setConnectionCount((Double)value);
      }
      break;

    case CONNECTION_CREATE_RATE:
      if (value == null) {
        unsetConnectionCreateRate();
      } else {
        setConnectionCreateRate((Double)value);
      }
      break;

    case INCOMING_BYTE_RATE:
      if (value == null) {
        unsetIncomingByteRate();
      } else {
        setIncomingByteRate((Double)value);
      }
      break;

    case IO_RATIO:
      if (value == null) {
        unsetIoRatio();
      } else {
        setIoRatio((Double)value);
      }
      break;

    case IO_TIME_NS_AVG:
      if (value == null) {
        unsetIoTimeNsAvg();
      } else {
        setIoTimeNsAvg((Double)value);
      }
      break;

    case IO_WAIT_RATIO:
      if (value == null) {
        unsetIoWaitRatio();
      } else {
        setIoWaitRatio((Double)value);
      }
      break;

    case IO_WAIT_TIME_NS_AVG:
      if (value == null) {
        unsetIoWaitTimeNsAvg();
      } else {
        setIoWaitTimeNsAvg((Double)value);
      }
      break;

    case NETWORK_IO_RATE:
      if (value == null) {
        unsetNetworkIoRate();
      } else {
        setNetworkIoRate((Double)value);
      }
      break;

    case OUTGOING_BYTE_RATE:
      if (value == null) {
        unsetOutgoingByteRate();
      } else {
        setOutgoingByteRate((Double)value);
      }
      break;

    case REQUEST_RATE:
      if (value == null) {
        unsetRequestRate();
      } else {
        setRequestRate((Double)value);
      }
      break;

    case REQUEST_SIZE_MAX:
      if (value == null) {
        unsetRequestSizeMax();
      } else {
        setRequestSizeMax((Double)value);
      }
      break;

    case REQUEST_SIZE_AVG:
      if (value == null) {
        unsetRequestSizeAvg();
      } else {
        setRequestSizeAvg((Double)value);
      }
      break;

    case RESPONSE_RATE:
      if (value == null) {
        unsetResponseRate();
      } else {
        setResponseRate((Double)value);
      }
      break;

    case SELECT_RATE:
      if (value == null) {
        unsetSelectRate();
      } else {
        setSelectRate((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLUSTER:
      return getCluster();

    case CLIENT_ID:
      return getClientId();

    case GROUP_NAME:
      return getGroupName();

    case COORDINATOR_ENTITY:
      return getCoordinatorEntity();

    case FETCHER_ENTITY:
      return getFetcherEntity();

    case CONNECTION_CLOSE_RATE:
      return getConnectionCloseRate();

    case CONNECTION_COUNT:
      return getConnectionCount();

    case CONNECTION_CREATE_RATE:
      return getConnectionCreateRate();

    case INCOMING_BYTE_RATE:
      return getIncomingByteRate();

    case IO_RATIO:
      return getIoRatio();

    case IO_TIME_NS_AVG:
      return getIoTimeNsAvg();

    case IO_WAIT_RATIO:
      return getIoWaitRatio();

    case IO_WAIT_TIME_NS_AVG:
      return getIoWaitTimeNsAvg();

    case NETWORK_IO_RATE:
      return getNetworkIoRate();

    case OUTGOING_BYTE_RATE:
      return getOutgoingByteRate();

    case REQUEST_RATE:
      return getRequestRate();

    case REQUEST_SIZE_MAX:
      return getRequestSizeMax();

    case REQUEST_SIZE_AVG:
      return getRequestSizeAvg();

    case RESPONSE_RATE:
      return getResponseRate();

    case SELECT_RATE:
      return getSelectRate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLUSTER:
      return isSetCluster();
    case CLIENT_ID:
      return isSetClientId();
    case GROUP_NAME:
      return isSetGroupName();
    case COORDINATOR_ENTITY:
      return isSetCoordinatorEntity();
    case FETCHER_ENTITY:
      return isSetFetcherEntity();
    case CONNECTION_CLOSE_RATE:
      return isSetConnectionCloseRate();
    case CONNECTION_COUNT:
      return isSetConnectionCount();
    case CONNECTION_CREATE_RATE:
      return isSetConnectionCreateRate();
    case INCOMING_BYTE_RATE:
      return isSetIncomingByteRate();
    case IO_RATIO:
      return isSetIoRatio();
    case IO_TIME_NS_AVG:
      return isSetIoTimeNsAvg();
    case IO_WAIT_RATIO:
      return isSetIoWaitRatio();
    case IO_WAIT_TIME_NS_AVG:
      return isSetIoWaitTimeNsAvg();
    case NETWORK_IO_RATE:
      return isSetNetworkIoRate();
    case OUTGOING_BYTE_RATE:
      return isSetOutgoingByteRate();
    case REQUEST_RATE:
      return isSetRequestRate();
    case REQUEST_SIZE_MAX:
      return isSetRequestSizeMax();
    case REQUEST_SIZE_AVG:
      return isSetRequestSizeAvg();
    case RESPONSE_RATE:
      return isSetResponseRate();
    case SELECT_RATE:
      return isSetSelectRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KafkaConsumerClientEntity)
      return this.equals((KafkaConsumerClientEntity)that);
    return false;
  }

  public boolean equals(KafkaConsumerClientEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cluster = true && this.isSetCluster();
    boolean that_present_cluster = true && that.isSetCluster();
    if (this_present_cluster || that_present_cluster) {
      if (!(this_present_cluster && that_present_cluster))
        return false;
      if (!this.cluster.equals(that.cluster))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_groupName = true && this.isSetGroupName();
    boolean that_present_groupName = true && that.isSetGroupName();
    if (this_present_groupName || that_present_groupName) {
      if (!(this_present_groupName && that_present_groupName))
        return false;
      if (!this.groupName.equals(that.groupName))
        return false;
    }

    boolean this_present_coordinatorEntity = true && this.isSetCoordinatorEntity();
    boolean that_present_coordinatorEntity = true && that.isSetCoordinatorEntity();
    if (this_present_coordinatorEntity || that_present_coordinatorEntity) {
      if (!(this_present_coordinatorEntity && that_present_coordinatorEntity))
        return false;
      if (!this.coordinatorEntity.equals(that.coordinatorEntity))
        return false;
    }

    boolean this_present_fetcherEntity = true && this.isSetFetcherEntity();
    boolean that_present_fetcherEntity = true && that.isSetFetcherEntity();
    if (this_present_fetcherEntity || that_present_fetcherEntity) {
      if (!(this_present_fetcherEntity && that_present_fetcherEntity))
        return false;
      if (!this.fetcherEntity.equals(that.fetcherEntity))
        return false;
    }

    boolean this_present_connectionCloseRate = true;
    boolean that_present_connectionCloseRate = true;
    if (this_present_connectionCloseRate || that_present_connectionCloseRate) {
      if (!(this_present_connectionCloseRate && that_present_connectionCloseRate))
        return false;
      if (this.connectionCloseRate != that.connectionCloseRate)
        return false;
    }

    boolean this_present_connectionCount = true;
    boolean that_present_connectionCount = true;
    if (this_present_connectionCount || that_present_connectionCount) {
      if (!(this_present_connectionCount && that_present_connectionCount))
        return false;
      if (this.connectionCount != that.connectionCount)
        return false;
    }

    boolean this_present_connectionCreateRate = true;
    boolean that_present_connectionCreateRate = true;
    if (this_present_connectionCreateRate || that_present_connectionCreateRate) {
      if (!(this_present_connectionCreateRate && that_present_connectionCreateRate))
        return false;
      if (this.connectionCreateRate != that.connectionCreateRate)
        return false;
    }

    boolean this_present_incomingByteRate = true;
    boolean that_present_incomingByteRate = true;
    if (this_present_incomingByteRate || that_present_incomingByteRate) {
      if (!(this_present_incomingByteRate && that_present_incomingByteRate))
        return false;
      if (this.incomingByteRate != that.incomingByteRate)
        return false;
    }

    boolean this_present_ioRatio = true;
    boolean that_present_ioRatio = true;
    if (this_present_ioRatio || that_present_ioRatio) {
      if (!(this_present_ioRatio && that_present_ioRatio))
        return false;
      if (this.ioRatio != that.ioRatio)
        return false;
    }

    boolean this_present_ioTimeNsAvg = true;
    boolean that_present_ioTimeNsAvg = true;
    if (this_present_ioTimeNsAvg || that_present_ioTimeNsAvg) {
      if (!(this_present_ioTimeNsAvg && that_present_ioTimeNsAvg))
        return false;
      if (this.ioTimeNsAvg != that.ioTimeNsAvg)
        return false;
    }

    boolean this_present_ioWaitRatio = true;
    boolean that_present_ioWaitRatio = true;
    if (this_present_ioWaitRatio || that_present_ioWaitRatio) {
      if (!(this_present_ioWaitRatio && that_present_ioWaitRatio))
        return false;
      if (this.ioWaitRatio != that.ioWaitRatio)
        return false;
    }

    boolean this_present_ioWaitTimeNsAvg = true;
    boolean that_present_ioWaitTimeNsAvg = true;
    if (this_present_ioWaitTimeNsAvg || that_present_ioWaitTimeNsAvg) {
      if (!(this_present_ioWaitTimeNsAvg && that_present_ioWaitTimeNsAvg))
        return false;
      if (this.ioWaitTimeNsAvg != that.ioWaitTimeNsAvg)
        return false;
    }

    boolean this_present_networkIoRate = true;
    boolean that_present_networkIoRate = true;
    if (this_present_networkIoRate || that_present_networkIoRate) {
      if (!(this_present_networkIoRate && that_present_networkIoRate))
        return false;
      if (this.networkIoRate != that.networkIoRate)
        return false;
    }

    boolean this_present_outgoingByteRate = true;
    boolean that_present_outgoingByteRate = true;
    if (this_present_outgoingByteRate || that_present_outgoingByteRate) {
      if (!(this_present_outgoingByteRate && that_present_outgoingByteRate))
        return false;
      if (this.outgoingByteRate != that.outgoingByteRate)
        return false;
    }

    boolean this_present_requestRate = true;
    boolean that_present_requestRate = true;
    if (this_present_requestRate || that_present_requestRate) {
      if (!(this_present_requestRate && that_present_requestRate))
        return false;
      if (this.requestRate != that.requestRate)
        return false;
    }

    boolean this_present_requestSizeMax = true;
    boolean that_present_requestSizeMax = true;
    if (this_present_requestSizeMax || that_present_requestSizeMax) {
      if (!(this_present_requestSizeMax && that_present_requestSizeMax))
        return false;
      if (this.requestSizeMax != that.requestSizeMax)
        return false;
    }

    boolean this_present_requestSizeAvg = true;
    boolean that_present_requestSizeAvg = true;
    if (this_present_requestSizeAvg || that_present_requestSizeAvg) {
      if (!(this_present_requestSizeAvg && that_present_requestSizeAvg))
        return false;
      if (this.requestSizeAvg != that.requestSizeAvg)
        return false;
    }

    boolean this_present_responseRate = true;
    boolean that_present_responseRate = true;
    if (this_present_responseRate || that_present_responseRate) {
      if (!(this_present_responseRate && that_present_responseRate))
        return false;
      if (this.responseRate != that.responseRate)
        return false;
    }

    boolean this_present_selectRate = true;
    boolean that_present_selectRate = true;
    if (this_present_selectRate || that_present_selectRate) {
      if (!(this_present_selectRate && that_present_selectRate))
        return false;
      if (this.selectRate != that.selectRate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCluster()) ? 131071 : 524287);
    if (isSetCluster())
      hashCode = hashCode * 8191 + cluster.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientId()) ? 131071 : 524287);
    if (isSetClientId())
      hashCode = hashCode * 8191 + clientId.hashCode();

    hashCode = hashCode * 8191 + ((isSetGroupName()) ? 131071 : 524287);
    if (isSetGroupName())
      hashCode = hashCode * 8191 + groupName.hashCode();

    hashCode = hashCode * 8191 + ((isSetCoordinatorEntity()) ? 131071 : 524287);
    if (isSetCoordinatorEntity())
      hashCode = hashCode * 8191 + coordinatorEntity.hashCode();

    hashCode = hashCode * 8191 + ((isSetFetcherEntity()) ? 131071 : 524287);
    if (isSetFetcherEntity())
      hashCode = hashCode * 8191 + fetcherEntity.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(connectionCloseRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(connectionCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(connectionCreateRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(incomingByteRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ioRatio);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ioTimeNsAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ioWaitRatio);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ioWaitTimeNsAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(networkIoRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outgoingByteRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestSizeMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestSizeAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(selectRate);

    return hashCode;
  }

  @Override
  public int compareTo(KafkaConsumerClientEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCluster()).compareTo(other.isSetCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster, other.cluster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(other.isSetGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, other.groupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoordinatorEntity()).compareTo(other.isSetCoordinatorEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoordinatorEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinatorEntity, other.coordinatorEntity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetcherEntity()).compareTo(other.isSetFetcherEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetcherEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetcherEntity, other.fetcherEntity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnectionCloseRate()).compareTo(other.isSetConnectionCloseRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectionCloseRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectionCloseRate, other.connectionCloseRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnectionCount()).compareTo(other.isSetConnectionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectionCount, other.connectionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnectionCreateRate()).compareTo(other.isSetConnectionCreateRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectionCreateRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectionCreateRate, other.connectionCreateRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncomingByteRate()).compareTo(other.isSetIncomingByteRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncomingByteRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomingByteRate, other.incomingByteRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIoRatio()).compareTo(other.isSetIoRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIoRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioRatio, other.ioRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIoTimeNsAvg()).compareTo(other.isSetIoTimeNsAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIoTimeNsAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioTimeNsAvg, other.ioTimeNsAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIoWaitRatio()).compareTo(other.isSetIoWaitRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIoWaitRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioWaitRatio, other.ioWaitRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIoWaitTimeNsAvg()).compareTo(other.isSetIoWaitTimeNsAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIoWaitTimeNsAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioWaitTimeNsAvg, other.ioWaitTimeNsAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetworkIoRate()).compareTo(other.isSetNetworkIoRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworkIoRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkIoRate, other.networkIoRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutgoingByteRate()).compareTo(other.isSetOutgoingByteRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutgoingByteRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outgoingByteRate, other.outgoingByteRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestRate()).compareTo(other.isSetRequestRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestRate, other.requestRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestSizeMax()).compareTo(other.isSetRequestSizeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestSizeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestSizeMax, other.requestSizeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestSizeAvg()).compareTo(other.isSetRequestSizeAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestSizeAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestSizeAvg, other.requestSizeAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseRate()).compareTo(other.isSetResponseRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseRate, other.responseRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelectRate()).compareTo(other.isSetSelectRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelectRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectRate, other.selectRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KafkaConsumerClientEntity(");
    boolean first = true;

    sb.append("cluster:");
    if (this.cluster == null) {
      sb.append("null");
    } else {
      sb.append(this.cluster);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupName:");
    if (this.groupName == null) {
      sb.append("null");
    } else {
      sb.append(this.groupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("coordinatorEntity:");
    if (this.coordinatorEntity == null) {
      sb.append("null");
    } else {
      sb.append(this.coordinatorEntity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetcherEntity:");
    if (this.fetcherEntity == null) {
      sb.append("null");
    } else {
      sb.append(this.fetcherEntity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("connectionCloseRate:");
    sb.append(this.connectionCloseRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("connectionCount:");
    sb.append(this.connectionCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("connectionCreateRate:");
    sb.append(this.connectionCreateRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("incomingByteRate:");
    sb.append(this.incomingByteRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ioRatio:");
    sb.append(this.ioRatio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ioTimeNsAvg:");
    sb.append(this.ioTimeNsAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ioWaitRatio:");
    sb.append(this.ioWaitRatio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ioWaitTimeNsAvg:");
    sb.append(this.ioWaitTimeNsAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("networkIoRate:");
    sb.append(this.networkIoRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outgoingByteRate:");
    sb.append(this.outgoingByteRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestRate:");
    sb.append(this.requestRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestSizeMax:");
    sb.append(this.requestSizeMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestSizeAvg:");
    sb.append(this.requestSizeAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseRate:");
    sb.append(this.responseRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("selectRate:");
    sb.append(this.selectRate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (coordinatorEntity != null) {
      coordinatorEntity.validate();
    }
    if (fetcherEntity != null) {
      fetcherEntity.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KafkaConsumerClientEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaConsumerClientEntityStandardScheme getScheme() {
      return new KafkaConsumerClientEntityStandardScheme();
    }
  }

  private static class KafkaConsumerClientEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<KafkaConsumerClientEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KafkaConsumerClientEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLUSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cluster = iprot.readString();
              struct.setClusterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GROUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupName = iprot.readString();
              struct.setGroupNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COORDINATOR_ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.coordinatorEntity = new KafkaConsumerCoordinatorEntity();
              struct.coordinatorEntity.read(iprot);
              struct.setCoordinatorEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FETCHER_ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fetcherEntity = new KafkaConsumerFetcherEntity();
              struct.fetcherEntity.read(iprot);
              struct.setFetcherEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONNECTION_CLOSE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.connectionCloseRate = iprot.readDouble();
              struct.setConnectionCloseRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONNECTION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.connectionCount = iprot.readDouble();
              struct.setConnectionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONNECTION_CREATE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.connectionCreateRate = iprot.readDouble();
              struct.setConnectionCreateRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INCOMING_BYTE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.incomingByteRate = iprot.readDouble();
              struct.setIncomingByteRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IO_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ioRatio = iprot.readDouble();
              struct.setIoRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IO_TIME_NS_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ioTimeNsAvg = iprot.readDouble();
              struct.setIoTimeNsAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IO_WAIT_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ioWaitRatio = iprot.readDouble();
              struct.setIoWaitRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IO_WAIT_TIME_NS_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ioWaitTimeNsAvg = iprot.readDouble();
              struct.setIoWaitTimeNsAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NETWORK_IO_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.networkIoRate = iprot.readDouble();
              struct.setNetworkIoRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OUTGOING_BYTE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.outgoingByteRate = iprot.readDouble();
              struct.setOutgoingByteRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REQUEST_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requestRate = iprot.readDouble();
              struct.setRequestRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REQUEST_SIZE_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requestSizeMax = iprot.readDouble();
              struct.setRequestSizeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REQUEST_SIZE_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requestSizeAvg = iprot.readDouble();
              struct.setRequestSizeAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // RESPONSE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.responseRate = iprot.readDouble();
              struct.setResponseRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SELECT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.selectRate = iprot.readDouble();
              struct.setSelectRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KafkaConsumerClientEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cluster != null) {
        oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
        oprot.writeString(struct.cluster);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.groupName != null) {
        oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
        oprot.writeString(struct.groupName);
        oprot.writeFieldEnd();
      }
      if (struct.coordinatorEntity != null) {
        oprot.writeFieldBegin(COORDINATOR_ENTITY_FIELD_DESC);
        struct.coordinatorEntity.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.fetcherEntity != null) {
        oprot.writeFieldBegin(FETCHER_ENTITY_FIELD_DESC);
        struct.fetcherEntity.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONNECTION_CLOSE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.connectionCloseRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONNECTION_COUNT_FIELD_DESC);
      oprot.writeDouble(struct.connectionCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONNECTION_CREATE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.connectionCreateRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCOMING_BYTE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.incomingByteRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IO_RATIO_FIELD_DESC);
      oprot.writeDouble(struct.ioRatio);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IO_TIME_NS_AVG_FIELD_DESC);
      oprot.writeDouble(struct.ioTimeNsAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IO_WAIT_RATIO_FIELD_DESC);
      oprot.writeDouble(struct.ioWaitRatio);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IO_WAIT_TIME_NS_AVG_FIELD_DESC);
      oprot.writeDouble(struct.ioWaitTimeNsAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NETWORK_IO_RATE_FIELD_DESC);
      oprot.writeDouble(struct.networkIoRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUTGOING_BYTE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.outgoingByteRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_RATE_FIELD_DESC);
      oprot.writeDouble(struct.requestRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_SIZE_MAX_FIELD_DESC);
      oprot.writeDouble(struct.requestSizeMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_SIZE_AVG_FIELD_DESC);
      oprot.writeDouble(struct.requestSizeAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESPONSE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.responseRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELECT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.selectRate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KafkaConsumerClientEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaConsumerClientEntityTupleScheme getScheme() {
      return new KafkaConsumerClientEntityTupleScheme();
    }
  }

  private static class KafkaConsumerClientEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<KafkaConsumerClientEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KafkaConsumerClientEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCluster()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetGroupName()) {
        optionals.set(2);
      }
      if (struct.isSetCoordinatorEntity()) {
        optionals.set(3);
      }
      if (struct.isSetFetcherEntity()) {
        optionals.set(4);
      }
      if (struct.isSetConnectionCloseRate()) {
        optionals.set(5);
      }
      if (struct.isSetConnectionCount()) {
        optionals.set(6);
      }
      if (struct.isSetConnectionCreateRate()) {
        optionals.set(7);
      }
      if (struct.isSetIncomingByteRate()) {
        optionals.set(8);
      }
      if (struct.isSetIoRatio()) {
        optionals.set(9);
      }
      if (struct.isSetIoTimeNsAvg()) {
        optionals.set(10);
      }
      if (struct.isSetIoWaitRatio()) {
        optionals.set(11);
      }
      if (struct.isSetIoWaitTimeNsAvg()) {
        optionals.set(12);
      }
      if (struct.isSetNetworkIoRate()) {
        optionals.set(13);
      }
      if (struct.isSetOutgoingByteRate()) {
        optionals.set(14);
      }
      if (struct.isSetRequestRate()) {
        optionals.set(15);
      }
      if (struct.isSetRequestSizeMax()) {
        optionals.set(16);
      }
      if (struct.isSetRequestSizeAvg()) {
        optionals.set(17);
      }
      if (struct.isSetResponseRate()) {
        optionals.set(18);
      }
      if (struct.isSetSelectRate()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetCluster()) {
        oprot.writeString(struct.cluster);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetGroupName()) {
        oprot.writeString(struct.groupName);
      }
      if (struct.isSetCoordinatorEntity()) {
        struct.coordinatorEntity.write(oprot);
      }
      if (struct.isSetFetcherEntity()) {
        struct.fetcherEntity.write(oprot);
      }
      if (struct.isSetConnectionCloseRate()) {
        oprot.writeDouble(struct.connectionCloseRate);
      }
      if (struct.isSetConnectionCount()) {
        oprot.writeDouble(struct.connectionCount);
      }
      if (struct.isSetConnectionCreateRate()) {
        oprot.writeDouble(struct.connectionCreateRate);
      }
      if (struct.isSetIncomingByteRate()) {
        oprot.writeDouble(struct.incomingByteRate);
      }
      if (struct.isSetIoRatio()) {
        oprot.writeDouble(struct.ioRatio);
      }
      if (struct.isSetIoTimeNsAvg()) {
        oprot.writeDouble(struct.ioTimeNsAvg);
      }
      if (struct.isSetIoWaitRatio()) {
        oprot.writeDouble(struct.ioWaitRatio);
      }
      if (struct.isSetIoWaitTimeNsAvg()) {
        oprot.writeDouble(struct.ioWaitTimeNsAvg);
      }
      if (struct.isSetNetworkIoRate()) {
        oprot.writeDouble(struct.networkIoRate);
      }
      if (struct.isSetOutgoingByteRate()) {
        oprot.writeDouble(struct.outgoingByteRate);
      }
      if (struct.isSetRequestRate()) {
        oprot.writeDouble(struct.requestRate);
      }
      if (struct.isSetRequestSizeMax()) {
        oprot.writeDouble(struct.requestSizeMax);
      }
      if (struct.isSetRequestSizeAvg()) {
        oprot.writeDouble(struct.requestSizeAvg);
      }
      if (struct.isSetResponseRate()) {
        oprot.writeDouble(struct.responseRate);
      }
      if (struct.isSetSelectRate()) {
        oprot.writeDouble(struct.selectRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KafkaConsumerClientEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.cluster = iprot.readString();
        struct.setClusterIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.groupName = iprot.readString();
        struct.setGroupNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.coordinatorEntity = new KafkaConsumerCoordinatorEntity();
        struct.coordinatorEntity.read(iprot);
        struct.setCoordinatorEntityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fetcherEntity = new KafkaConsumerFetcherEntity();
        struct.fetcherEntity.read(iprot);
        struct.setFetcherEntityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.connectionCloseRate = iprot.readDouble();
        struct.setConnectionCloseRateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.connectionCount = iprot.readDouble();
        struct.setConnectionCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.connectionCreateRate = iprot.readDouble();
        struct.setConnectionCreateRateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.incomingByteRate = iprot.readDouble();
        struct.setIncomingByteRateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ioRatio = iprot.readDouble();
        struct.setIoRatioIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ioTimeNsAvg = iprot.readDouble();
        struct.setIoTimeNsAvgIsSet(true);
      }
      if (incoming.get(11)) {
        struct.ioWaitRatio = iprot.readDouble();
        struct.setIoWaitRatioIsSet(true);
      }
      if (incoming.get(12)) {
        struct.ioWaitTimeNsAvg = iprot.readDouble();
        struct.setIoWaitTimeNsAvgIsSet(true);
      }
      if (incoming.get(13)) {
        struct.networkIoRate = iprot.readDouble();
        struct.setNetworkIoRateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.outgoingByteRate = iprot.readDouble();
        struct.setOutgoingByteRateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.requestRate = iprot.readDouble();
        struct.setRequestRateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.requestSizeMax = iprot.readDouble();
        struct.setRequestSizeMaxIsSet(true);
      }
      if (incoming.get(17)) {
        struct.requestSizeAvg = iprot.readDouble();
        struct.setRequestSizeAvgIsSet(true);
      }
      if (incoming.get(18)) {
        struct.responseRate = iprot.readDouble();
        struct.setResponseRateIsSet(true);
      }
      if (incoming.get(19)) {
        struct.selectRate = iprot.readDouble();
        struct.setSelectRateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

