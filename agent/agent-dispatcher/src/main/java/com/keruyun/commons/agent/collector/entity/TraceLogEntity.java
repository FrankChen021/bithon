/**
 * Autogenerated by Thrift Compiler (0.11.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class TraceLogEntity implements org.apache.thrift.TBase<TraceLogEntity, TraceLogEntity._Fields>, java.io.Serializable, Cloneable, Comparable<TraceLogEntity> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TraceLogEntity");

    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short) 1);
    private static final org.apache.thrift.protocol.TField COMPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("compression", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("log", org.apache.thrift.protocol.TType.STRING, (short) 3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TraceLogEntityStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TraceLogEntityTupleSchemeFactory();

    public long timestamp; // required
    /**
     *
     * @see CompressionType
     */
    public CompressionType compression; // required
    public String log; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        TIMESTAMP((short) 1, "timestamp"),
        /**
         *
         * @see CompressionType
         */
        COMPRESSION((short) 2, "compression"),
        LOG((short) 3, "log");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // TIMESTAMP
                    return TIMESTAMP;
                case 2: // COMPRESSION
                    return COMPRESSION;
                case 3: // LOG
                    return LOG;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __TIMESTAMP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.COMPRESSION, new org.apache.thrift.meta_data.FieldMetaData("compression", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                      new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CompressionType.class)));
        tmpMap.put(_Fields.LOG, new org.apache.thrift.meta_data.FieldMetaData("log", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TraceLogEntity.class, metaDataMap);
    }

    public TraceLogEntity() {
    }

    public TraceLogEntity(
        long timestamp,
        CompressionType compression,
        String log) {
        this();
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        this.compression = compression;
        this.log = log;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TraceLogEntity(TraceLogEntity other) {
        __isset_bitfield = other.__isset_bitfield;
        this.timestamp = other.timestamp;
        if (other.isSetCompression()) {
            this.compression = other.compression;
        }
        if (other.isSetLog()) {
            this.log = other.log;
        }
    }

    public TraceLogEntity deepCopy() {
        return new TraceLogEntity(this);
    }

    @Override
    public void clear() {
        setTimestampIsSet(false);
        this.timestamp = 0;
        this.compression = null;
        this.log = null;
    }

    public long getTimestamp() {
        return this.timestamp;
    }

    public TraceLogEntity setTimestamp(long timestamp) {
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        return this;
    }

    public void unsetTimestamp() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    /**
     *
     * @see CompressionType
     */
    public CompressionType getCompression() {
        return this.compression;
    }

    /**
     *
     * @see CompressionType
     */
    public TraceLogEntity setCompression(CompressionType compression) {
        this.compression = compression;
        return this;
    }

    public void unsetCompression() {
        this.compression = null;
    }

    /** Returns true if field compression is set (has been assigned a value) and false otherwise */
    public boolean isSetCompression() {
        return this.compression != null;
    }

    public void setCompressionIsSet(boolean value) {
        if (!value) {
            this.compression = null;
        }
    }

    public String getLog() {
        return this.log;
    }

    public TraceLogEntity setLog(String log) {
        this.log = log;
        return this;
    }

    public void unsetLog() {
        this.log = null;
    }

    /** Returns true if field log is set (has been assigned a value) and false otherwise */
    public boolean isSetLog() {
        return this.log != null;
    }

    public void setLogIsSet(boolean value) {
        if (!value) {
            this.log = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case TIMESTAMP:
                if (value == null) {
                    unsetTimestamp();
                } else {
                    setTimestamp((Long) value);
                }
                break;

            case COMPRESSION:
                if (value == null) {
                    unsetCompression();
                } else {
                    setCompression((CompressionType) value);
                }
                break;

            case LOG:
                if (value == null) {
                    unsetLog();
                } else {
                    setLog((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case TIMESTAMP:
                return getTimestamp();

            case COMPRESSION:
                return getCompression();

            case LOG:
                return getLog();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case TIMESTAMP:
                return isSetTimestamp();
            case COMPRESSION:
                return isSetCompression();
            case LOG:
                return isSetLog();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof TraceLogEntity)
            return this.equals((TraceLogEntity) that);
        return false;
    }

    public boolean equals(TraceLogEntity that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_timestamp = true;
        boolean that_present_timestamp = true;
        if (this_present_timestamp || that_present_timestamp) {
            if (!(this_present_timestamp && that_present_timestamp))
                return false;
            if (this.timestamp != that.timestamp)
                return false;
        }

        boolean this_present_compression = true && this.isSetCompression();
        boolean that_present_compression = true && that.isSetCompression();
        if (this_present_compression || that_present_compression) {
            if (!(this_present_compression && that_present_compression))
                return false;
            if (!this.compression.equals(that.compression))
                return false;
        }

        boolean this_present_log = true && this.isSetLog();
        boolean that_present_log = true && that.isSetLog();
        if (this_present_log || that_present_log) {
            if (!(this_present_log && that_present_log))
                return false;
            if (!this.log.equals(that.log))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

        hashCode = hashCode * 8191 + ((isSetCompression()) ? 131071 : 524287);
        if (isSetCompression())
            hashCode = hashCode * 8191 + compression.getValue();

        hashCode = hashCode * 8191 + ((isSetLog()) ? 131071 : 524287);
        if (isSetLog())
            hashCode = hashCode * 8191 + log.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(TraceLogEntity other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTimestamp()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCompression()).compareTo(other.isSetCompression());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCompression()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compression, other.compression);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetLog()).compareTo(other.isSetLog());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLog()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log, other.log);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TraceLogEntity(");
        boolean first = true;

        sb.append("timestamp:");
        sb.append(this.timestamp);
        first = false;
        if (!first) sb.append(", ");
        sb.append("compression:");
        if (this.compression == null) {
            sb.append("null");
        } else {
            sb.append(this.compression);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("log:");
        if (this.log == null) {
            sb.append("null");
        } else {
            sb.append(this.log);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class TraceLogEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public TraceLogEntityStandardScheme getScheme() {
            return new TraceLogEntityStandardScheme();
        }
    }

    private static class TraceLogEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<TraceLogEntity> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, TraceLogEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // TIMESTAMP
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.timestamp = iprot.readI64();
                            struct.setTimestampIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // COMPRESSION
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.compression = CompressionType.findByValue(iprot.readI32());
                            struct.setCompressionIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // LOG
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.log = iprot.readString();
                            struct.setLogIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, TraceLogEntity struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
            oprot.writeI64(struct.timestamp);
            oprot.writeFieldEnd();
            if (struct.compression != null) {
                oprot.writeFieldBegin(COMPRESSION_FIELD_DESC);
                oprot.writeI32(struct.compression.getValue());
                oprot.writeFieldEnd();
            }
            if (struct.log != null) {
                oprot.writeFieldBegin(LOG_FIELD_DESC);
                oprot.writeString(struct.log);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class TraceLogEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public TraceLogEntityTupleScheme getScheme() {
            return new TraceLogEntityTupleScheme();
        }
    }

    private static class TraceLogEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<TraceLogEntity> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, TraceLogEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetTimestamp()) {
                optionals.set(0);
            }
            if (struct.isSetCompression()) {
                optionals.set(1);
            }
            if (struct.isSetLog()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetTimestamp()) {
                oprot.writeI64(struct.timestamp);
            }
            if (struct.isSetCompression()) {
                oprot.writeI32(struct.compression.getValue());
            }
            if (struct.isSetLog()) {
                oprot.writeString(struct.log);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, TraceLogEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
            }
            if (incoming.get(1)) {
                struct.compression = CompressionType.findByValue(iprot.readI32());
                struct.setCompressionIsSet(true);
            }
            if (incoming.get(2)) {
                struct.log = iprot.readString();
                struct.setLogIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

