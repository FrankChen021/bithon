/**
 * Autogenerated by Thrift Compiler (0.11.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * ************************ Kafka 集群 ************************************
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class KafkaEntity implements org.apache.thrift.TBase<KafkaEntity, KafkaEntity._Fields>, java.io.Serializable, Cloneable, Comparable<KafkaEntity> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KafkaEntity");

    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField TOPIC_CONSUMER_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("topicConsumerEntity", org.apache.thrift.protocol.TType.LIST, (short) 2);
    private static final org.apache.thrift.protocol.TField KAFKA_CLUSTER_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("kafkaClusterEntity", org.apache.thrift.protocol.TType.LIST, (short) 3);
    private static final org.apache.thrift.protocol.TField GRANULARITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("GranularityType", org.apache.thrift.protocol.TType.I32, (short) 4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KafkaEntityStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KafkaEntityTupleSchemeFactory();

    public String category; // required
    public java.util.List<KafkaTopicConsumerEntity> topicConsumerEntity; // optional
    public java.util.List<KafkaClusterEntity> kafkaClusterEntity; // optional
    public int GranularityType; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        CATEGORY((short) 1, "category"),
        TOPIC_CONSUMER_ENTITY((short) 2, "topicConsumerEntity"),
        KAFKA_CLUSTER_ENTITY((short) 3, "kafkaClusterEntity"),
        GRANULARITY_TYPE((short) 4, "GranularityType");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // CATEGORY
                    return CATEGORY;
                case 2: // TOPIC_CONSUMER_ENTITY
                    return TOPIC_CONSUMER_ENTITY;
                case 3: // KAFKA_CLUSTER_ENTITY
                    return KAFKA_CLUSTER_ENTITY;
                case 4: // GRANULARITY_TYPE
                    return GRANULARITY_TYPE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __GRANULARITYTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.TOPIC_CONSUMER_ENTITY, _Fields.KAFKA_CLUSTER_ENTITY, _Fields.GRANULARITY_TYPE};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TOPIC_CONSUMER_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("topicConsumerEntity", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                                                                                                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                                                                                                                             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "KafkaTopicConsumerEntity"))));
        tmpMap.put(_Fields.KAFKA_CLUSTER_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("kafkaClusterEntity", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                                                                                               new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                                                                                                                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "KafkaClusterEntity"))));
        tmpMap.put(_Fields.GRANULARITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("GranularityType", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                                                                                           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KafkaEntity.class, metaDataMap);
    }

    public KafkaEntity() {
    }

    public KafkaEntity(
        String category) {
        this();
        this.category = category;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public KafkaEntity(KafkaEntity other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetCategory()) {
            this.category = other.category;
        }
        if (other.isSetTopicConsumerEntity()) {
            java.util.List<KafkaTopicConsumerEntity> __this__topicConsumerEntity = new java.util.ArrayList<KafkaTopicConsumerEntity>(other.topicConsumerEntity.size());
            for (KafkaTopicConsumerEntity other_element : other.topicConsumerEntity) {
                __this__topicConsumerEntity.add(new KafkaTopicConsumerEntity(other_element));
            }
            this.topicConsumerEntity = __this__topicConsumerEntity;
        }
        if (other.isSetKafkaClusterEntity()) {
            java.util.List<KafkaClusterEntity> __this__kafkaClusterEntity = new java.util.ArrayList<KafkaClusterEntity>(other.kafkaClusterEntity.size());
            for (KafkaClusterEntity other_element : other.kafkaClusterEntity) {
                __this__kafkaClusterEntity.add(new KafkaClusterEntity(other_element));
            }
            this.kafkaClusterEntity = __this__kafkaClusterEntity;
        }
        this.GranularityType = other.GranularityType;
    }

    public KafkaEntity deepCopy() {
        return new KafkaEntity(this);
    }

    @Override
    public void clear() {
        this.category = null;
        this.topicConsumerEntity = null;
        this.kafkaClusterEntity = null;
        setGranularityTypeIsSet(false);
        this.GranularityType = 0;
    }

    public String getCategory() {
        return this.category;
    }

    public KafkaEntity setCategory(String category) {
        this.category = category;
        return this;
    }

    public void unsetCategory() {
        this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
        return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
        if (!value) {
            this.category = null;
        }
    }

    public int getTopicConsumerEntitySize() {
        return (this.topicConsumerEntity == null) ? 0 : this.topicConsumerEntity.size();
    }

    public java.util.Iterator<KafkaTopicConsumerEntity> getTopicConsumerEntityIterator() {
        return (this.topicConsumerEntity == null) ? null : this.topicConsumerEntity.iterator();
    }

    public void addToTopicConsumerEntity(KafkaTopicConsumerEntity elem) {
        if (this.topicConsumerEntity == null) {
            this.topicConsumerEntity = new java.util.ArrayList<KafkaTopicConsumerEntity>();
        }
        this.topicConsumerEntity.add(elem);
    }

    public java.util.List<KafkaTopicConsumerEntity> getTopicConsumerEntity() {
        return this.topicConsumerEntity;
    }

    public KafkaEntity setTopicConsumerEntity(java.util.List<KafkaTopicConsumerEntity> topicConsumerEntity) {
        this.topicConsumerEntity = topicConsumerEntity;
        return this;
    }

    public void unsetTopicConsumerEntity() {
        this.topicConsumerEntity = null;
    }

    /** Returns true if field topicConsumerEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicConsumerEntity() {
        return this.topicConsumerEntity != null;
    }

    public void setTopicConsumerEntityIsSet(boolean value) {
        if (!value) {
            this.topicConsumerEntity = null;
        }
    }

    public int getKafkaClusterEntitySize() {
        return (this.kafkaClusterEntity == null) ? 0 : this.kafkaClusterEntity.size();
    }

    public java.util.Iterator<KafkaClusterEntity> getKafkaClusterEntityIterator() {
        return (this.kafkaClusterEntity == null) ? null : this.kafkaClusterEntity.iterator();
    }

    public void addToKafkaClusterEntity(KafkaClusterEntity elem) {
        if (this.kafkaClusterEntity == null) {
            this.kafkaClusterEntity = new java.util.ArrayList<KafkaClusterEntity>();
        }
        this.kafkaClusterEntity.add(elem);
    }

    public java.util.List<KafkaClusterEntity> getKafkaClusterEntity() {
        return this.kafkaClusterEntity;
    }

    public KafkaEntity setKafkaClusterEntity(java.util.List<KafkaClusterEntity> kafkaClusterEntity) {
        this.kafkaClusterEntity = kafkaClusterEntity;
        return this;
    }

    public void unsetKafkaClusterEntity() {
        this.kafkaClusterEntity = null;
    }

    /** Returns true if field kafkaClusterEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetKafkaClusterEntity() {
        return this.kafkaClusterEntity != null;
    }

    public void setKafkaClusterEntityIsSet(boolean value) {
        if (!value) {
            this.kafkaClusterEntity = null;
        }
    }

    public int getGranularityType() {
        return this.GranularityType;
    }

    public KafkaEntity setGranularityType(int GranularityType) {
        this.GranularityType = GranularityType;
        setGranularityTypeIsSet(true);
        return this;
    }

    public void unsetGranularityType() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID);
    }

    /** Returns true if field GranularityType is set (has been assigned a value) and false otherwise */
    public boolean isSetGranularityType() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID);
    }

    public void setGranularityTypeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case CATEGORY:
                if (value == null) {
                    unsetCategory();
                } else {
                    setCategory((String) value);
                }
                break;

            case TOPIC_CONSUMER_ENTITY:
                if (value == null) {
                    unsetTopicConsumerEntity();
                } else {
                    setTopicConsumerEntity((java.util.List<KafkaTopicConsumerEntity>) value);
                }
                break;

            case KAFKA_CLUSTER_ENTITY:
                if (value == null) {
                    unsetKafkaClusterEntity();
                } else {
                    setKafkaClusterEntity((java.util.List<KafkaClusterEntity>) value);
                }
                break;

            case GRANULARITY_TYPE:
                if (value == null) {
                    unsetGranularityType();
                } else {
                    setGranularityType((Integer) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case CATEGORY:
                return getCategory();

            case TOPIC_CONSUMER_ENTITY:
                return getTopicConsumerEntity();

            case KAFKA_CLUSTER_ENTITY:
                return getKafkaClusterEntity();

            case GRANULARITY_TYPE:
                return getGranularityType();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case CATEGORY:
                return isSetCategory();
            case TOPIC_CONSUMER_ENTITY:
                return isSetTopicConsumerEntity();
            case KAFKA_CLUSTER_ENTITY:
                return isSetKafkaClusterEntity();
            case GRANULARITY_TYPE:
                return isSetGranularityType();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof KafkaEntity)
            return this.equals((KafkaEntity) that);
        return false;
    }

    public boolean equals(KafkaEntity that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_category = true && this.isSetCategory();
        boolean that_present_category = true && that.isSetCategory();
        if (this_present_category || that_present_category) {
            if (!(this_present_category && that_present_category))
                return false;
            if (!this.category.equals(that.category))
                return false;
        }

        boolean this_present_topicConsumerEntity = true && this.isSetTopicConsumerEntity();
        boolean that_present_topicConsumerEntity = true && that.isSetTopicConsumerEntity();
        if (this_present_topicConsumerEntity || that_present_topicConsumerEntity) {
            if (!(this_present_topicConsumerEntity && that_present_topicConsumerEntity))
                return false;
            if (!this.topicConsumerEntity.equals(that.topicConsumerEntity))
                return false;
        }

        boolean this_present_kafkaClusterEntity = true && this.isSetKafkaClusterEntity();
        boolean that_present_kafkaClusterEntity = true && that.isSetKafkaClusterEntity();
        if (this_present_kafkaClusterEntity || that_present_kafkaClusterEntity) {
            if (!(this_present_kafkaClusterEntity && that_present_kafkaClusterEntity))
                return false;
            if (!this.kafkaClusterEntity.equals(that.kafkaClusterEntity))
                return false;
        }

        boolean this_present_GranularityType = true && this.isSetGranularityType();
        boolean that_present_GranularityType = true && that.isSetGranularityType();
        if (this_present_GranularityType || that_present_GranularityType) {
            if (!(this_present_GranularityType && that_present_GranularityType))
                return false;
            if (this.GranularityType != that.GranularityType)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
        if (isSetCategory())
            hashCode = hashCode * 8191 + category.hashCode();

        hashCode = hashCode * 8191 + ((isSetTopicConsumerEntity()) ? 131071 : 524287);
        if (isSetTopicConsumerEntity())
            hashCode = hashCode * 8191 + topicConsumerEntity.hashCode();

        hashCode = hashCode * 8191 + ((isSetKafkaClusterEntity()) ? 131071 : 524287);
        if (isSetKafkaClusterEntity())
            hashCode = hashCode * 8191 + kafkaClusterEntity.hashCode();

        hashCode = hashCode * 8191 + ((isSetGranularityType()) ? 131071 : 524287);
        if (isSetGranularityType())
            hashCode = hashCode * 8191 + GranularityType;

        return hashCode;
    }

    @Override
    public int compareTo(KafkaEntity other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCategory()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTopicConsumerEntity()).compareTo(other.isSetTopicConsumerEntity());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTopicConsumerEntity()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicConsumerEntity, other.topicConsumerEntity);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetKafkaClusterEntity()).compareTo(other.isSetKafkaClusterEntity());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetKafkaClusterEntity()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kafkaClusterEntity, other.kafkaClusterEntity);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetGranularityType()).compareTo(other.isSetGranularityType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGranularityType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GranularityType, other.GranularityType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("KafkaEntity(");
        boolean first = true;

        sb.append("category:");
        if (this.category == null) {
            sb.append("null");
        } else {
            sb.append(this.category);
        }
        first = false;
        if (isSetTopicConsumerEntity()) {
            if (!first) sb.append(", ");
            sb.append("topicConsumerEntity:");
            if (this.topicConsumerEntity == null) {
                sb.append("null");
            } else {
                sb.append(this.topicConsumerEntity);
            }
            first = false;
        }
        if (isSetKafkaClusterEntity()) {
            if (!first) sb.append(", ");
            sb.append("kafkaClusterEntity:");
            if (this.kafkaClusterEntity == null) {
                sb.append("null");
            } else {
                sb.append(this.kafkaClusterEntity);
            }
            first = false;
        }
        if (isSetGranularityType()) {
            if (!first) sb.append(", ");
            sb.append("GranularityType:");
            sb.append(this.GranularityType);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class KafkaEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public KafkaEntityStandardScheme getScheme() {
            return new KafkaEntityStandardScheme();
        }
    }

    private static class KafkaEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<KafkaEntity> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, KafkaEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // CATEGORY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.category = iprot.readString();
                            struct.setCategoryIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // TOPIC_CONSUMER_ENTITY
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                                struct.topicConsumerEntity = new java.util.ArrayList<KafkaTopicConsumerEntity>(_list48.size);
                                KafkaTopicConsumerEntity _elem49;
                                for (int _i50 = 0; _i50 < _list48.size; ++_i50) {
                                    _elem49 = new KafkaTopicConsumerEntity();
                                    _elem49.read(iprot);
                                    struct.topicConsumerEntity.add(_elem49);
                                }
                                iprot.readListEnd();
                            }
                            struct.setTopicConsumerEntityIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // KAFKA_CLUSTER_ENTITY
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                                struct.kafkaClusterEntity = new java.util.ArrayList<KafkaClusterEntity>(_list51.size);
                                KafkaClusterEntity _elem52;
                                for (int _i53 = 0; _i53 < _list51.size; ++_i53) {
                                    _elem52 = new KafkaClusterEntity();
                                    _elem52.read(iprot);
                                    struct.kafkaClusterEntity.add(_elem52);
                                }
                                iprot.readListEnd();
                            }
                            struct.setKafkaClusterEntityIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // GRANULARITY_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.GranularityType = iprot.readI32();
                            struct.setGranularityTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, KafkaEntity struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.category != null) {
                oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
                oprot.writeString(struct.category);
                oprot.writeFieldEnd();
            }
            if (struct.topicConsumerEntity != null) {
                if (struct.isSetTopicConsumerEntity()) {
                    oprot.writeFieldBegin(TOPIC_CONSUMER_ENTITY_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.topicConsumerEntity.size()));
                        for (KafkaTopicConsumerEntity _iter54 : struct.topicConsumerEntity) {
                            _iter54.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.kafkaClusterEntity != null) {
                if (struct.isSetKafkaClusterEntity()) {
                    oprot.writeFieldBegin(KAFKA_CLUSTER_ENTITY_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.kafkaClusterEntity.size()));
                        for (KafkaClusterEntity _iter55 : struct.kafkaClusterEntity) {
                            _iter55.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetGranularityType()) {
                oprot.writeFieldBegin(GRANULARITY_TYPE_FIELD_DESC);
                oprot.writeI32(struct.GranularityType);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class KafkaEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public KafkaEntityTupleScheme getScheme() {
            return new KafkaEntityTupleScheme();
        }
    }

    private static class KafkaEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<KafkaEntity> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, KafkaEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetCategory()) {
                optionals.set(0);
            }
            if (struct.isSetTopicConsumerEntity()) {
                optionals.set(1);
            }
            if (struct.isSetKafkaClusterEntity()) {
                optionals.set(2);
            }
            if (struct.isSetGranularityType()) {
                optionals.set(3);
            }
            oprot.writeBitSet(optionals, 4);
            if (struct.isSetCategory()) {
                oprot.writeString(struct.category);
            }
            if (struct.isSetTopicConsumerEntity()) {
                {
                    oprot.writeI32(struct.topicConsumerEntity.size());
                    for (KafkaTopicConsumerEntity _iter56 : struct.topicConsumerEntity) {
                        _iter56.write(oprot);
                    }
                }
            }
            if (struct.isSetKafkaClusterEntity()) {
                {
                    oprot.writeI32(struct.kafkaClusterEntity.size());
                    for (KafkaClusterEntity _iter57 : struct.kafkaClusterEntity) {
                        _iter57.write(oprot);
                    }
                }
            }
            if (struct.isSetGranularityType()) {
                oprot.writeI32(struct.GranularityType);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, KafkaEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(4);
            if (incoming.get(0)) {
                struct.category = iprot.readString();
                struct.setCategoryIsSet(true);
            }
            if (incoming.get(1)) {
                {
                    org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.topicConsumerEntity = new java.util.ArrayList<KafkaTopicConsumerEntity>(_list58.size);
                    KafkaTopicConsumerEntity _elem59;
                    for (int _i60 = 0; _i60 < _list58.size; ++_i60) {
                        _elem59 = new KafkaTopicConsumerEntity();
                        _elem59.read(iprot);
                        struct.topicConsumerEntity.add(_elem59);
                    }
                }
                struct.setTopicConsumerEntityIsSet(true);
            }
            if (incoming.get(2)) {
                {
                    org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.kafkaClusterEntity = new java.util.ArrayList<KafkaClusterEntity>(_list61.size);
                    KafkaClusterEntity _elem62;
                    for (int _i63 = 0; _i63 < _list61.size; ++_i63) {
                        _elem62 = new KafkaClusterEntity();
                        _elem62.read(iprot);
                        struct.kafkaClusterEntity.add(_elem62);
                    }
                }
                struct.setKafkaClusterEntityIsSet(true);
            }
            if (incoming.get(3)) {
                struct.GranularityType = iprot.readI32();
                struct.setGranularityTypeIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

