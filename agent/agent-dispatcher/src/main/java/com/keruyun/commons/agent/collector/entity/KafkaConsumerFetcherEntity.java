/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class KafkaConsumerFetcherEntity implements org.apache.thrift.TBase<KafkaConsumerFetcherEntity, KafkaConsumerFetcherEntity._Fields>, java.io.Serializable, Cloneable, Comparable<KafkaConsumerFetcherEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KafkaConsumerFetcherEntity");

  private static final org.apache.thrift.protocol.TField BYTES_CONSUMED_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("bytesConsumedRate", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField FETCH_LATENCY_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchLatencyAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField FETCH_LATENCY_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchLatencyMax", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField FETCH_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchRate", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField FETCH_SIZE_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchSizeAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField FETCH_SIZE_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchSizeMax", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField FETCH_THROTTLE_TIME_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchThrottleTimeAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField FETCH_THROTTLE_TIME_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchThrottleTimeMax", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField RECORDS_CONSUMED_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("recordsConsumedRate", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField RECORDS_LAG_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("recordsLagMax", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField RECORDS_PER_REQUEST_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("recordsPerRequestAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KafkaConsumerFetcherEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KafkaConsumerFetcherEntityTupleSchemeFactory();

  public double bytesConsumedRate; // required
  public double fetchLatencyAvg; // required
  public double fetchLatencyMax; // required
  public double fetchRate; // required
  public double fetchSizeAvg; // required
  public double fetchSizeMax; // required
  public double fetchThrottleTimeAvg; // required
  public double fetchThrottleTimeMax; // required
  public double recordsConsumedRate; // required
  public double recordsLagMax; // required
  public double recordsPerRequestAvg; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BYTES_CONSUMED_RATE((short)1, "bytesConsumedRate"),
    FETCH_LATENCY_AVG((short)2, "fetchLatencyAvg"),
    FETCH_LATENCY_MAX((short)3, "fetchLatencyMax"),
    FETCH_RATE((short)4, "fetchRate"),
    FETCH_SIZE_AVG((short)5, "fetchSizeAvg"),
    FETCH_SIZE_MAX((short)6, "fetchSizeMax"),
    FETCH_THROTTLE_TIME_AVG((short)7, "fetchThrottleTimeAvg"),
    FETCH_THROTTLE_TIME_MAX((short)8, "fetchThrottleTimeMax"),
    RECORDS_CONSUMED_RATE((short)9, "recordsConsumedRate"),
    RECORDS_LAG_MAX((short)10, "recordsLagMax"),
    RECORDS_PER_REQUEST_AVG((short)11, "recordsPerRequestAvg");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BYTES_CONSUMED_RATE
          return BYTES_CONSUMED_RATE;
        case 2: // FETCH_LATENCY_AVG
          return FETCH_LATENCY_AVG;
        case 3: // FETCH_LATENCY_MAX
          return FETCH_LATENCY_MAX;
        case 4: // FETCH_RATE
          return FETCH_RATE;
        case 5: // FETCH_SIZE_AVG
          return FETCH_SIZE_AVG;
        case 6: // FETCH_SIZE_MAX
          return FETCH_SIZE_MAX;
        case 7: // FETCH_THROTTLE_TIME_AVG
          return FETCH_THROTTLE_TIME_AVG;
        case 8: // FETCH_THROTTLE_TIME_MAX
          return FETCH_THROTTLE_TIME_MAX;
        case 9: // RECORDS_CONSUMED_RATE
          return RECORDS_CONSUMED_RATE;
        case 10: // RECORDS_LAG_MAX
          return RECORDS_LAG_MAX;
        case 11: // RECORDS_PER_REQUEST_AVG
          return RECORDS_PER_REQUEST_AVG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BYTESCONSUMEDRATE_ISSET_ID = 0;
  private static final int __FETCHLATENCYAVG_ISSET_ID = 1;
  private static final int __FETCHLATENCYMAX_ISSET_ID = 2;
  private static final int __FETCHRATE_ISSET_ID = 3;
  private static final int __FETCHSIZEAVG_ISSET_ID = 4;
  private static final int __FETCHSIZEMAX_ISSET_ID = 5;
  private static final int __FETCHTHROTTLETIMEAVG_ISSET_ID = 6;
  private static final int __FETCHTHROTTLETIMEMAX_ISSET_ID = 7;
  private static final int __RECORDSCONSUMEDRATE_ISSET_ID = 8;
  private static final int __RECORDSLAGMAX_ISSET_ID = 9;
  private static final int __RECORDSPERREQUESTAVG_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BYTES_CONSUMED_RATE, new org.apache.thrift.meta_data.FieldMetaData("bytesConsumedRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FETCH_LATENCY_AVG, new org.apache.thrift.meta_data.FieldMetaData("fetchLatencyAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FETCH_LATENCY_MAX, new org.apache.thrift.meta_data.FieldMetaData("fetchLatencyMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FETCH_RATE, new org.apache.thrift.meta_data.FieldMetaData("fetchRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FETCH_SIZE_AVG, new org.apache.thrift.meta_data.FieldMetaData("fetchSizeAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FETCH_SIZE_MAX, new org.apache.thrift.meta_data.FieldMetaData("fetchSizeMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FETCH_THROTTLE_TIME_AVG, new org.apache.thrift.meta_data.FieldMetaData("fetchThrottleTimeAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FETCH_THROTTLE_TIME_MAX, new org.apache.thrift.meta_data.FieldMetaData("fetchThrottleTimeMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECORDS_CONSUMED_RATE, new org.apache.thrift.meta_data.FieldMetaData("recordsConsumedRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECORDS_LAG_MAX, new org.apache.thrift.meta_data.FieldMetaData("recordsLagMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECORDS_PER_REQUEST_AVG, new org.apache.thrift.meta_data.FieldMetaData("recordsPerRequestAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KafkaConsumerFetcherEntity.class, metaDataMap);
  }

  public KafkaConsumerFetcherEntity() {
  }

  public KafkaConsumerFetcherEntity(
    double bytesConsumedRate,
    double fetchLatencyAvg,
    double fetchLatencyMax,
    double fetchRate,
    double fetchSizeAvg,
    double fetchSizeMax,
    double fetchThrottleTimeAvg,
    double fetchThrottleTimeMax,
    double recordsConsumedRate,
    double recordsLagMax,
    double recordsPerRequestAvg)
  {
    this();
    this.bytesConsumedRate = bytesConsumedRate;
    setBytesConsumedRateIsSet(true);
    this.fetchLatencyAvg = fetchLatencyAvg;
    setFetchLatencyAvgIsSet(true);
    this.fetchLatencyMax = fetchLatencyMax;
    setFetchLatencyMaxIsSet(true);
    this.fetchRate = fetchRate;
    setFetchRateIsSet(true);
    this.fetchSizeAvg = fetchSizeAvg;
    setFetchSizeAvgIsSet(true);
    this.fetchSizeMax = fetchSizeMax;
    setFetchSizeMaxIsSet(true);
    this.fetchThrottleTimeAvg = fetchThrottleTimeAvg;
    setFetchThrottleTimeAvgIsSet(true);
    this.fetchThrottleTimeMax = fetchThrottleTimeMax;
    setFetchThrottleTimeMaxIsSet(true);
    this.recordsConsumedRate = recordsConsumedRate;
    setRecordsConsumedRateIsSet(true);
    this.recordsLagMax = recordsLagMax;
    setRecordsLagMaxIsSet(true);
    this.recordsPerRequestAvg = recordsPerRequestAvg;
    setRecordsPerRequestAvgIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KafkaConsumerFetcherEntity(KafkaConsumerFetcherEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bytesConsumedRate = other.bytesConsumedRate;
    this.fetchLatencyAvg = other.fetchLatencyAvg;
    this.fetchLatencyMax = other.fetchLatencyMax;
    this.fetchRate = other.fetchRate;
    this.fetchSizeAvg = other.fetchSizeAvg;
    this.fetchSizeMax = other.fetchSizeMax;
    this.fetchThrottleTimeAvg = other.fetchThrottleTimeAvg;
    this.fetchThrottleTimeMax = other.fetchThrottleTimeMax;
    this.recordsConsumedRate = other.recordsConsumedRate;
    this.recordsLagMax = other.recordsLagMax;
    this.recordsPerRequestAvg = other.recordsPerRequestAvg;
  }

  public KafkaConsumerFetcherEntity deepCopy() {
    return new KafkaConsumerFetcherEntity(this);
  }

  @Override
  public void clear() {
    setBytesConsumedRateIsSet(false);
    this.bytesConsumedRate = 0.0;
    setFetchLatencyAvgIsSet(false);
    this.fetchLatencyAvg = 0.0;
    setFetchLatencyMaxIsSet(false);
    this.fetchLatencyMax = 0.0;
    setFetchRateIsSet(false);
    this.fetchRate = 0.0;
    setFetchSizeAvgIsSet(false);
    this.fetchSizeAvg = 0.0;
    setFetchSizeMaxIsSet(false);
    this.fetchSizeMax = 0.0;
    setFetchThrottleTimeAvgIsSet(false);
    this.fetchThrottleTimeAvg = 0.0;
    setFetchThrottleTimeMaxIsSet(false);
    this.fetchThrottleTimeMax = 0.0;
    setRecordsConsumedRateIsSet(false);
    this.recordsConsumedRate = 0.0;
    setRecordsLagMaxIsSet(false);
    this.recordsLagMax = 0.0;
    setRecordsPerRequestAvgIsSet(false);
    this.recordsPerRequestAvg = 0.0;
  }

  public double getBytesConsumedRate() {
    return this.bytesConsumedRate;
  }

  public KafkaConsumerFetcherEntity setBytesConsumedRate(double bytesConsumedRate) {
    this.bytesConsumedRate = bytesConsumedRate;
    setBytesConsumedRateIsSet(true);
    return this;
  }

  public void unsetBytesConsumedRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BYTESCONSUMEDRATE_ISSET_ID);
  }

  /** Returns true if field bytesConsumedRate is set (has been assigned a value) and false otherwise */
  public boolean isSetBytesConsumedRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BYTESCONSUMEDRATE_ISSET_ID);
  }

  public void setBytesConsumedRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BYTESCONSUMEDRATE_ISSET_ID, value);
  }

  public double getFetchLatencyAvg() {
    return this.fetchLatencyAvg;
  }

  public KafkaConsumerFetcherEntity setFetchLatencyAvg(double fetchLatencyAvg) {
    this.fetchLatencyAvg = fetchLatencyAvg;
    setFetchLatencyAvgIsSet(true);
    return this;
  }

  public void unsetFetchLatencyAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FETCHLATENCYAVG_ISSET_ID);
  }

  /** Returns true if field fetchLatencyAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchLatencyAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FETCHLATENCYAVG_ISSET_ID);
  }

  public void setFetchLatencyAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FETCHLATENCYAVG_ISSET_ID, value);
  }

  public double getFetchLatencyMax() {
    return this.fetchLatencyMax;
  }

  public KafkaConsumerFetcherEntity setFetchLatencyMax(double fetchLatencyMax) {
    this.fetchLatencyMax = fetchLatencyMax;
    setFetchLatencyMaxIsSet(true);
    return this;
  }

  public void unsetFetchLatencyMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FETCHLATENCYMAX_ISSET_ID);
  }

  /** Returns true if field fetchLatencyMax is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchLatencyMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FETCHLATENCYMAX_ISSET_ID);
  }

  public void setFetchLatencyMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FETCHLATENCYMAX_ISSET_ID, value);
  }

  public double getFetchRate() {
    return this.fetchRate;
  }

  public KafkaConsumerFetcherEntity setFetchRate(double fetchRate) {
    this.fetchRate = fetchRate;
    setFetchRateIsSet(true);
    return this;
  }

  public void unsetFetchRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FETCHRATE_ISSET_ID);
  }

  /** Returns true if field fetchRate is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FETCHRATE_ISSET_ID);
  }

  public void setFetchRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FETCHRATE_ISSET_ID, value);
  }

  public double getFetchSizeAvg() {
    return this.fetchSizeAvg;
  }

  public KafkaConsumerFetcherEntity setFetchSizeAvg(double fetchSizeAvg) {
    this.fetchSizeAvg = fetchSizeAvg;
    setFetchSizeAvgIsSet(true);
    return this;
  }

  public void unsetFetchSizeAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FETCHSIZEAVG_ISSET_ID);
  }

  /** Returns true if field fetchSizeAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchSizeAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FETCHSIZEAVG_ISSET_ID);
  }

  public void setFetchSizeAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FETCHSIZEAVG_ISSET_ID, value);
  }

  public double getFetchSizeMax() {
    return this.fetchSizeMax;
  }

  public KafkaConsumerFetcherEntity setFetchSizeMax(double fetchSizeMax) {
    this.fetchSizeMax = fetchSizeMax;
    setFetchSizeMaxIsSet(true);
    return this;
  }

  public void unsetFetchSizeMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FETCHSIZEMAX_ISSET_ID);
  }

  /** Returns true if field fetchSizeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchSizeMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FETCHSIZEMAX_ISSET_ID);
  }

  public void setFetchSizeMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FETCHSIZEMAX_ISSET_ID, value);
  }

  public double getFetchThrottleTimeAvg() {
    return this.fetchThrottleTimeAvg;
  }

  public KafkaConsumerFetcherEntity setFetchThrottleTimeAvg(double fetchThrottleTimeAvg) {
    this.fetchThrottleTimeAvg = fetchThrottleTimeAvg;
    setFetchThrottleTimeAvgIsSet(true);
    return this;
  }

  public void unsetFetchThrottleTimeAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FETCHTHROTTLETIMEAVG_ISSET_ID);
  }

  /** Returns true if field fetchThrottleTimeAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchThrottleTimeAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FETCHTHROTTLETIMEAVG_ISSET_ID);
  }

  public void setFetchThrottleTimeAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FETCHTHROTTLETIMEAVG_ISSET_ID, value);
  }

  public double getFetchThrottleTimeMax() {
    return this.fetchThrottleTimeMax;
  }

  public KafkaConsumerFetcherEntity setFetchThrottleTimeMax(double fetchThrottleTimeMax) {
    this.fetchThrottleTimeMax = fetchThrottleTimeMax;
    setFetchThrottleTimeMaxIsSet(true);
    return this;
  }

  public void unsetFetchThrottleTimeMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FETCHTHROTTLETIMEMAX_ISSET_ID);
  }

  /** Returns true if field fetchThrottleTimeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchThrottleTimeMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FETCHTHROTTLETIMEMAX_ISSET_ID);
  }

  public void setFetchThrottleTimeMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FETCHTHROTTLETIMEMAX_ISSET_ID, value);
  }

  public double getRecordsConsumedRate() {
    return this.recordsConsumedRate;
  }

  public KafkaConsumerFetcherEntity setRecordsConsumedRate(double recordsConsumedRate) {
    this.recordsConsumedRate = recordsConsumedRate;
    setRecordsConsumedRateIsSet(true);
    return this;
  }

  public void unsetRecordsConsumedRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORDSCONSUMEDRATE_ISSET_ID);
  }

  /** Returns true if field recordsConsumedRate is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordsConsumedRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORDSCONSUMEDRATE_ISSET_ID);
  }

  public void setRecordsConsumedRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORDSCONSUMEDRATE_ISSET_ID, value);
  }

  public double getRecordsLagMax() {
    return this.recordsLagMax;
  }

  public KafkaConsumerFetcherEntity setRecordsLagMax(double recordsLagMax) {
    this.recordsLagMax = recordsLagMax;
    setRecordsLagMaxIsSet(true);
    return this;
  }

  public void unsetRecordsLagMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORDSLAGMAX_ISSET_ID);
  }

  /** Returns true if field recordsLagMax is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordsLagMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORDSLAGMAX_ISSET_ID);
  }

  public void setRecordsLagMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORDSLAGMAX_ISSET_ID, value);
  }

  public double getRecordsPerRequestAvg() {
    return this.recordsPerRequestAvg;
  }

  public KafkaConsumerFetcherEntity setRecordsPerRequestAvg(double recordsPerRequestAvg) {
    this.recordsPerRequestAvg = recordsPerRequestAvg;
    setRecordsPerRequestAvgIsSet(true);
    return this;
  }

  public void unsetRecordsPerRequestAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORDSPERREQUESTAVG_ISSET_ID);
  }

  /** Returns true if field recordsPerRequestAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordsPerRequestAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORDSPERREQUESTAVG_ISSET_ID);
  }

  public void setRecordsPerRequestAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORDSPERREQUESTAVG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BYTES_CONSUMED_RATE:
      if (value == null) {
        unsetBytesConsumedRate();
      } else {
        setBytesConsumedRate((Double)value);
      }
      break;

    case FETCH_LATENCY_AVG:
      if (value == null) {
        unsetFetchLatencyAvg();
      } else {
        setFetchLatencyAvg((Double)value);
      }
      break;

    case FETCH_LATENCY_MAX:
      if (value == null) {
        unsetFetchLatencyMax();
      } else {
        setFetchLatencyMax((Double)value);
      }
      break;

    case FETCH_RATE:
      if (value == null) {
        unsetFetchRate();
      } else {
        setFetchRate((Double)value);
      }
      break;

    case FETCH_SIZE_AVG:
      if (value == null) {
        unsetFetchSizeAvg();
      } else {
        setFetchSizeAvg((Double)value);
      }
      break;

    case FETCH_SIZE_MAX:
      if (value == null) {
        unsetFetchSizeMax();
      } else {
        setFetchSizeMax((Double)value);
      }
      break;

    case FETCH_THROTTLE_TIME_AVG:
      if (value == null) {
        unsetFetchThrottleTimeAvg();
      } else {
        setFetchThrottleTimeAvg((Double)value);
      }
      break;

    case FETCH_THROTTLE_TIME_MAX:
      if (value == null) {
        unsetFetchThrottleTimeMax();
      } else {
        setFetchThrottleTimeMax((Double)value);
      }
      break;

    case RECORDS_CONSUMED_RATE:
      if (value == null) {
        unsetRecordsConsumedRate();
      } else {
        setRecordsConsumedRate((Double)value);
      }
      break;

    case RECORDS_LAG_MAX:
      if (value == null) {
        unsetRecordsLagMax();
      } else {
        setRecordsLagMax((Double)value);
      }
      break;

    case RECORDS_PER_REQUEST_AVG:
      if (value == null) {
        unsetRecordsPerRequestAvg();
      } else {
        setRecordsPerRequestAvg((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BYTES_CONSUMED_RATE:
      return getBytesConsumedRate();

    case FETCH_LATENCY_AVG:
      return getFetchLatencyAvg();

    case FETCH_LATENCY_MAX:
      return getFetchLatencyMax();

    case FETCH_RATE:
      return getFetchRate();

    case FETCH_SIZE_AVG:
      return getFetchSizeAvg();

    case FETCH_SIZE_MAX:
      return getFetchSizeMax();

    case FETCH_THROTTLE_TIME_AVG:
      return getFetchThrottleTimeAvg();

    case FETCH_THROTTLE_TIME_MAX:
      return getFetchThrottleTimeMax();

    case RECORDS_CONSUMED_RATE:
      return getRecordsConsumedRate();

    case RECORDS_LAG_MAX:
      return getRecordsLagMax();

    case RECORDS_PER_REQUEST_AVG:
      return getRecordsPerRequestAvg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BYTES_CONSUMED_RATE:
      return isSetBytesConsumedRate();
    case FETCH_LATENCY_AVG:
      return isSetFetchLatencyAvg();
    case FETCH_LATENCY_MAX:
      return isSetFetchLatencyMax();
    case FETCH_RATE:
      return isSetFetchRate();
    case FETCH_SIZE_AVG:
      return isSetFetchSizeAvg();
    case FETCH_SIZE_MAX:
      return isSetFetchSizeMax();
    case FETCH_THROTTLE_TIME_AVG:
      return isSetFetchThrottleTimeAvg();
    case FETCH_THROTTLE_TIME_MAX:
      return isSetFetchThrottleTimeMax();
    case RECORDS_CONSUMED_RATE:
      return isSetRecordsConsumedRate();
    case RECORDS_LAG_MAX:
      return isSetRecordsLagMax();
    case RECORDS_PER_REQUEST_AVG:
      return isSetRecordsPerRequestAvg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KafkaConsumerFetcherEntity)
      return this.equals((KafkaConsumerFetcherEntity)that);
    return false;
  }

  public boolean equals(KafkaConsumerFetcherEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_bytesConsumedRate = true;
    boolean that_present_bytesConsumedRate = true;
    if (this_present_bytesConsumedRate || that_present_bytesConsumedRate) {
      if (!(this_present_bytesConsumedRate && that_present_bytesConsumedRate))
        return false;
      if (this.bytesConsumedRate != that.bytesConsumedRate)
        return false;
    }

    boolean this_present_fetchLatencyAvg = true;
    boolean that_present_fetchLatencyAvg = true;
    if (this_present_fetchLatencyAvg || that_present_fetchLatencyAvg) {
      if (!(this_present_fetchLatencyAvg && that_present_fetchLatencyAvg))
        return false;
      if (this.fetchLatencyAvg != that.fetchLatencyAvg)
        return false;
    }

    boolean this_present_fetchLatencyMax = true;
    boolean that_present_fetchLatencyMax = true;
    if (this_present_fetchLatencyMax || that_present_fetchLatencyMax) {
      if (!(this_present_fetchLatencyMax && that_present_fetchLatencyMax))
        return false;
      if (this.fetchLatencyMax != that.fetchLatencyMax)
        return false;
    }

    boolean this_present_fetchRate = true;
    boolean that_present_fetchRate = true;
    if (this_present_fetchRate || that_present_fetchRate) {
      if (!(this_present_fetchRate && that_present_fetchRate))
        return false;
      if (this.fetchRate != that.fetchRate)
        return false;
    }

    boolean this_present_fetchSizeAvg = true;
    boolean that_present_fetchSizeAvg = true;
    if (this_present_fetchSizeAvg || that_present_fetchSizeAvg) {
      if (!(this_present_fetchSizeAvg && that_present_fetchSizeAvg))
        return false;
      if (this.fetchSizeAvg != that.fetchSizeAvg)
        return false;
    }

    boolean this_present_fetchSizeMax = true;
    boolean that_present_fetchSizeMax = true;
    if (this_present_fetchSizeMax || that_present_fetchSizeMax) {
      if (!(this_present_fetchSizeMax && that_present_fetchSizeMax))
        return false;
      if (this.fetchSizeMax != that.fetchSizeMax)
        return false;
    }

    boolean this_present_fetchThrottleTimeAvg = true;
    boolean that_present_fetchThrottleTimeAvg = true;
    if (this_present_fetchThrottleTimeAvg || that_present_fetchThrottleTimeAvg) {
      if (!(this_present_fetchThrottleTimeAvg && that_present_fetchThrottleTimeAvg))
        return false;
      if (this.fetchThrottleTimeAvg != that.fetchThrottleTimeAvg)
        return false;
    }

    boolean this_present_fetchThrottleTimeMax = true;
    boolean that_present_fetchThrottleTimeMax = true;
    if (this_present_fetchThrottleTimeMax || that_present_fetchThrottleTimeMax) {
      if (!(this_present_fetchThrottleTimeMax && that_present_fetchThrottleTimeMax))
        return false;
      if (this.fetchThrottleTimeMax != that.fetchThrottleTimeMax)
        return false;
    }

    boolean this_present_recordsConsumedRate = true;
    boolean that_present_recordsConsumedRate = true;
    if (this_present_recordsConsumedRate || that_present_recordsConsumedRate) {
      if (!(this_present_recordsConsumedRate && that_present_recordsConsumedRate))
        return false;
      if (this.recordsConsumedRate != that.recordsConsumedRate)
        return false;
    }

    boolean this_present_recordsLagMax = true;
    boolean that_present_recordsLagMax = true;
    if (this_present_recordsLagMax || that_present_recordsLagMax) {
      if (!(this_present_recordsLagMax && that_present_recordsLagMax))
        return false;
      if (this.recordsLagMax != that.recordsLagMax)
        return false;
    }

    boolean this_present_recordsPerRequestAvg = true;
    boolean that_present_recordsPerRequestAvg = true;
    if (this_present_recordsPerRequestAvg || that_present_recordsPerRequestAvg) {
      if (!(this_present_recordsPerRequestAvg && that_present_recordsPerRequestAvg))
        return false;
      if (this.recordsPerRequestAvg != that.recordsPerRequestAvg)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bytesConsumedRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fetchLatencyAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fetchLatencyMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fetchRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fetchSizeAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fetchSizeMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fetchThrottleTimeAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fetchThrottleTimeMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recordsConsumedRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recordsLagMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recordsPerRequestAvg);

    return hashCode;
  }

  @Override
  public int compareTo(KafkaConsumerFetcherEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBytesConsumedRate()).compareTo(other.isSetBytesConsumedRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBytesConsumedRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytesConsumedRate, other.bytesConsumedRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchLatencyAvg()).compareTo(other.isSetFetchLatencyAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchLatencyAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchLatencyAvg, other.fetchLatencyAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchLatencyMax()).compareTo(other.isSetFetchLatencyMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchLatencyMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchLatencyMax, other.fetchLatencyMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchRate()).compareTo(other.isSetFetchRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchRate, other.fetchRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchSizeAvg()).compareTo(other.isSetFetchSizeAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchSizeAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchSizeAvg, other.fetchSizeAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchSizeMax()).compareTo(other.isSetFetchSizeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchSizeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchSizeMax, other.fetchSizeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchThrottleTimeAvg()).compareTo(other.isSetFetchThrottleTimeAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchThrottleTimeAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchThrottleTimeAvg, other.fetchThrottleTimeAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchThrottleTimeMax()).compareTo(other.isSetFetchThrottleTimeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchThrottleTimeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchThrottleTimeMax, other.fetchThrottleTimeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordsConsumedRate()).compareTo(other.isSetRecordsConsumedRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordsConsumedRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordsConsumedRate, other.recordsConsumedRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordsLagMax()).compareTo(other.isSetRecordsLagMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordsLagMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordsLagMax, other.recordsLagMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordsPerRequestAvg()).compareTo(other.isSetRecordsPerRequestAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordsPerRequestAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordsPerRequestAvg, other.recordsPerRequestAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KafkaConsumerFetcherEntity(");
    boolean first = true;

    sb.append("bytesConsumedRate:");
    sb.append(this.bytesConsumedRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetchLatencyAvg:");
    sb.append(this.fetchLatencyAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetchLatencyMax:");
    sb.append(this.fetchLatencyMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetchRate:");
    sb.append(this.fetchRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetchSizeAvg:");
    sb.append(this.fetchSizeAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetchSizeMax:");
    sb.append(this.fetchSizeMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetchThrottleTimeAvg:");
    sb.append(this.fetchThrottleTimeAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetchThrottleTimeMax:");
    sb.append(this.fetchThrottleTimeMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordsConsumedRate:");
    sb.append(this.recordsConsumedRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordsLagMax:");
    sb.append(this.recordsLagMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordsPerRequestAvg:");
    sb.append(this.recordsPerRequestAvg);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KafkaConsumerFetcherEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaConsumerFetcherEntityStandardScheme getScheme() {
      return new KafkaConsumerFetcherEntityStandardScheme();
    }
  }

  private static class KafkaConsumerFetcherEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<KafkaConsumerFetcherEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KafkaConsumerFetcherEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BYTES_CONSUMED_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bytesConsumedRate = iprot.readDouble();
              struct.setBytesConsumedRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FETCH_LATENCY_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fetchLatencyAvg = iprot.readDouble();
              struct.setFetchLatencyAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FETCH_LATENCY_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fetchLatencyMax = iprot.readDouble();
              struct.setFetchLatencyMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FETCH_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fetchRate = iprot.readDouble();
              struct.setFetchRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FETCH_SIZE_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fetchSizeAvg = iprot.readDouble();
              struct.setFetchSizeAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FETCH_SIZE_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fetchSizeMax = iprot.readDouble();
              struct.setFetchSizeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FETCH_THROTTLE_TIME_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fetchThrottleTimeAvg = iprot.readDouble();
              struct.setFetchThrottleTimeAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FETCH_THROTTLE_TIME_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fetchThrottleTimeMax = iprot.readDouble();
              struct.setFetchThrottleTimeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RECORDS_CONSUMED_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recordsConsumedRate = iprot.readDouble();
              struct.setRecordsConsumedRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RECORDS_LAG_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recordsLagMax = iprot.readDouble();
              struct.setRecordsLagMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RECORDS_PER_REQUEST_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recordsPerRequestAvg = iprot.readDouble();
              struct.setRecordsPerRequestAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KafkaConsumerFetcherEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BYTES_CONSUMED_RATE_FIELD_DESC);
      oprot.writeDouble(struct.bytesConsumedRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FETCH_LATENCY_AVG_FIELD_DESC);
      oprot.writeDouble(struct.fetchLatencyAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FETCH_LATENCY_MAX_FIELD_DESC);
      oprot.writeDouble(struct.fetchLatencyMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FETCH_RATE_FIELD_DESC);
      oprot.writeDouble(struct.fetchRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FETCH_SIZE_AVG_FIELD_DESC);
      oprot.writeDouble(struct.fetchSizeAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FETCH_SIZE_MAX_FIELD_DESC);
      oprot.writeDouble(struct.fetchSizeMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FETCH_THROTTLE_TIME_AVG_FIELD_DESC);
      oprot.writeDouble(struct.fetchThrottleTimeAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FETCH_THROTTLE_TIME_MAX_FIELD_DESC);
      oprot.writeDouble(struct.fetchThrottleTimeMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORDS_CONSUMED_RATE_FIELD_DESC);
      oprot.writeDouble(struct.recordsConsumedRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORDS_LAG_MAX_FIELD_DESC);
      oprot.writeDouble(struct.recordsLagMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORDS_PER_REQUEST_AVG_FIELD_DESC);
      oprot.writeDouble(struct.recordsPerRequestAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KafkaConsumerFetcherEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaConsumerFetcherEntityTupleScheme getScheme() {
      return new KafkaConsumerFetcherEntityTupleScheme();
    }
  }

  private static class KafkaConsumerFetcherEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<KafkaConsumerFetcherEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KafkaConsumerFetcherEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBytesConsumedRate()) {
        optionals.set(0);
      }
      if (struct.isSetFetchLatencyAvg()) {
        optionals.set(1);
      }
      if (struct.isSetFetchLatencyMax()) {
        optionals.set(2);
      }
      if (struct.isSetFetchRate()) {
        optionals.set(3);
      }
      if (struct.isSetFetchSizeAvg()) {
        optionals.set(4);
      }
      if (struct.isSetFetchSizeMax()) {
        optionals.set(5);
      }
      if (struct.isSetFetchThrottleTimeAvg()) {
        optionals.set(6);
      }
      if (struct.isSetFetchThrottleTimeMax()) {
        optionals.set(7);
      }
      if (struct.isSetRecordsConsumedRate()) {
        optionals.set(8);
      }
      if (struct.isSetRecordsLagMax()) {
        optionals.set(9);
      }
      if (struct.isSetRecordsPerRequestAvg()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetBytesConsumedRate()) {
        oprot.writeDouble(struct.bytesConsumedRate);
      }
      if (struct.isSetFetchLatencyAvg()) {
        oprot.writeDouble(struct.fetchLatencyAvg);
      }
      if (struct.isSetFetchLatencyMax()) {
        oprot.writeDouble(struct.fetchLatencyMax);
      }
      if (struct.isSetFetchRate()) {
        oprot.writeDouble(struct.fetchRate);
      }
      if (struct.isSetFetchSizeAvg()) {
        oprot.writeDouble(struct.fetchSizeAvg);
      }
      if (struct.isSetFetchSizeMax()) {
        oprot.writeDouble(struct.fetchSizeMax);
      }
      if (struct.isSetFetchThrottleTimeAvg()) {
        oprot.writeDouble(struct.fetchThrottleTimeAvg);
      }
      if (struct.isSetFetchThrottleTimeMax()) {
        oprot.writeDouble(struct.fetchThrottleTimeMax);
      }
      if (struct.isSetRecordsConsumedRate()) {
        oprot.writeDouble(struct.recordsConsumedRate);
      }
      if (struct.isSetRecordsLagMax()) {
        oprot.writeDouble(struct.recordsLagMax);
      }
      if (struct.isSetRecordsPerRequestAvg()) {
        oprot.writeDouble(struct.recordsPerRequestAvg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KafkaConsumerFetcherEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.bytesConsumedRate = iprot.readDouble();
        struct.setBytesConsumedRateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fetchLatencyAvg = iprot.readDouble();
        struct.setFetchLatencyAvgIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fetchLatencyMax = iprot.readDouble();
        struct.setFetchLatencyMaxIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fetchRate = iprot.readDouble();
        struct.setFetchRateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fetchSizeAvg = iprot.readDouble();
        struct.setFetchSizeAvgIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fetchSizeMax = iprot.readDouble();
        struct.setFetchSizeMaxIsSet(true);
      }
      if (incoming.get(6)) {
        struct.fetchThrottleTimeAvg = iprot.readDouble();
        struct.setFetchThrottleTimeAvgIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fetchThrottleTimeMax = iprot.readDouble();
        struct.setFetchThrottleTimeMaxIsSet(true);
      }
      if (incoming.get(8)) {
        struct.recordsConsumedRate = iprot.readDouble();
        struct.setRecordsConsumedRateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.recordsLagMax = iprot.readDouble();
        struct.setRecordsLagMaxIsSet(true);
      }
      if (incoming.get(10)) {
        struct.recordsPerRequestAvg = iprot.readDouble();
        struct.setRecordsPerRequestAvgIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

