/**
 * Autogenerated by Thrift Compiler (0.11.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * ****************************  扩展指标信息  *****************************
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class ExtendEntity implements org.apache.thrift.TBase<ExtendEntity, ExtendEntity._Fields>, java.io.Serializable, Cloneable, Comparable<ExtendEntity> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExtendEntity");

    private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short) 4);
    private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short) 5);
    private static final org.apache.thrift.protocol.TField COLLECT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("collectCount", org.apache.thrift.protocol.TType.I32, (short) 6);
    private static final org.apache.thrift.protocol.TField ENTITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("entityName", org.apache.thrift.protocol.TType.STRING, (short) 7);
    private static final org.apache.thrift.protocol.TField STRING_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("stringFields", org.apache.thrift.protocol.TType.MAP, (short) 8);
    private static final org.apache.thrift.protocol.TField LONG_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("longFields", org.apache.thrift.protocol.TType.MAP, (short) 9);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExtendEntityStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExtendEntityTupleSchemeFactory();

    public String appName; // required
    public String hostName; // required
    public int port; // required
    public long timestamp; // required
    public int interval; // required
    public int collectCount; // required
    public String entityName; // required
    public java.util.Map<String, String> stringFields; // required
    public java.util.Map<String, Long> longFields; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        APP_NAME((short) 1, "appName"),
        HOST_NAME((short) 2, "hostName"),
        PORT((short) 3, "port"),
        TIMESTAMP((short) 4, "timestamp"),
        INTERVAL((short) 5, "interval"),
        COLLECT_COUNT((short) 6, "collectCount"),
        ENTITY_NAME((short) 7, "entityName"),
        STRING_FIELDS((short) 8, "stringFields"),
        LONG_FIELDS((short) 9, "longFields");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // APP_NAME
                    return APP_NAME;
                case 2: // HOST_NAME
                    return HOST_NAME;
                case 3: // PORT
                    return PORT;
                case 4: // TIMESTAMP
                    return TIMESTAMP;
                case 5: // INTERVAL
                    return INTERVAL;
                case 6: // COLLECT_COUNT
                    return COLLECT_COUNT;
                case 7: // ENTITY_NAME
                    return ENTITY_NAME;
                case 8: // STRING_FIELDS
                    return STRING_FIELDS;
                case 9: // LONG_FIELDS
                    return LONG_FIELDS;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __TIMESTAMP_ISSET_ID = 1;
    private static final int __INTERVAL_ISSET_ID = 2;
    private static final int __COLLECTCOUNT_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                               new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.COLLECT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("collectCount", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.ENTITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("entityName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.STRING_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("stringFields", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                                                                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                                                                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.LONG_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("longFields", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                      new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                                                                                                                                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                                                                                                                                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExtendEntity.class, metaDataMap);
    }

    public ExtendEntity() {
    }

    public ExtendEntity(
        String appName,
        String hostName,
        int port,
        long timestamp,
        int interval,
        int collectCount,
        String entityName,
        java.util.Map<String, String> stringFields,
        java.util.Map<String, Long> longFields) {
        this();
        this.appName = appName;
        this.hostName = hostName;
        this.port = port;
        setPortIsSet(true);
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        this.interval = interval;
        setIntervalIsSet(true);
        this.collectCount = collectCount;
        setCollectCountIsSet(true);
        this.entityName = entityName;
        this.stringFields = stringFields;
        this.longFields = longFields;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ExtendEntity(ExtendEntity other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetAppName()) {
            this.appName = other.appName;
        }
        if (other.isSetHostName()) {
            this.hostName = other.hostName;
        }
        this.port = other.port;
        this.timestamp = other.timestamp;
        this.interval = other.interval;
        this.collectCount = other.collectCount;
        if (other.isSetEntityName()) {
            this.entityName = other.entityName;
        }
        if (other.isSetStringFields()) {
            java.util.Map<String, String> __this__stringFields = new java.util.HashMap<String, String>(other.stringFields);
            this.stringFields = __this__stringFields;
        }
        if (other.isSetLongFields()) {
            java.util.Map<String, Long> __this__longFields = new java.util.HashMap<String, Long>(other.longFields);
            this.longFields = __this__longFields;
        }
    }

    public ExtendEntity deepCopy() {
        return new ExtendEntity(this);
    }

    @Override
    public void clear() {
        this.appName = null;
        this.hostName = null;
        setPortIsSet(false);
        this.port = 0;
        setTimestampIsSet(false);
        this.timestamp = 0;
        setIntervalIsSet(false);
        this.interval = 0;
        setCollectCountIsSet(false);
        this.collectCount = 0;
        this.entityName = null;
        this.stringFields = null;
        this.longFields = null;
    }

    public String getAppName() {
        return this.appName;
    }

    public ExtendEntity setAppName(String appName) {
        this.appName = appName;
        return this;
    }

    public void unsetAppName() {
        this.appName = null;
    }

    /** Returns true if field appName is set (has been assigned a value) and false otherwise */
    public boolean isSetAppName() {
        return this.appName != null;
    }

    public void setAppNameIsSet(boolean value) {
        if (!value) {
            this.appName = null;
        }
    }

    public String getHostName() {
        return this.hostName;
    }

    public ExtendEntity setHostName(String hostName) {
        this.hostName = hostName;
        return this;
    }

    public void unsetHostName() {
        this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
        return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
        if (!value) {
            this.hostName = null;
        }
    }

    public int getPort() {
        return this.port;
    }

    public ExtendEntity setPort(int port) {
        this.port = port;
        setPortIsSet(true);
        return this;
    }

    public void unsetPort() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public long getTimestamp() {
        return this.timestamp;
    }

    public ExtendEntity setTimestamp(long timestamp) {
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        return this;
    }

    public void unsetTimestamp() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public int getInterval() {
        return this.interval;
    }

    public ExtendEntity setInterval(int interval) {
        this.interval = interval;
        setIntervalIsSet(true);
        return this;
    }

    public void unsetInterval() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
    }

    /** Returns true if field interval is set (has been assigned a value) and false otherwise */
    public boolean isSetInterval() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
    }

    public void setIntervalIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
    }

    public int getCollectCount() {
        return this.collectCount;
    }

    public ExtendEntity setCollectCount(int collectCount) {
        this.collectCount = collectCount;
        setCollectCountIsSet(true);
        return this;
    }

    public void unsetCollectCount() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLLECTCOUNT_ISSET_ID);
    }

    /** Returns true if field collectCount is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectCount() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLLECTCOUNT_ISSET_ID);
    }

    public void setCollectCountIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLLECTCOUNT_ISSET_ID, value);
    }

    public String getEntityName() {
        return this.entityName;
    }

    public ExtendEntity setEntityName(String entityName) {
        this.entityName = entityName;
        return this;
    }

    public void unsetEntityName() {
        this.entityName = null;
    }

    /** Returns true if field entityName is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityName() {
        return this.entityName != null;
    }

    public void setEntityNameIsSet(boolean value) {
        if (!value) {
            this.entityName = null;
        }
    }

    public int getStringFieldsSize() {
        return (this.stringFields == null) ? 0 : this.stringFields.size();
    }

    public void putToStringFields(String key, String val) {
        if (this.stringFields == null) {
            this.stringFields = new java.util.HashMap<String, String>();
        }
        this.stringFields.put(key, val);
    }

    public java.util.Map<String, String> getStringFields() {
        return this.stringFields;
    }

    public ExtendEntity setStringFields(java.util.Map<String, String> stringFields) {
        this.stringFields = stringFields;
        return this;
    }

    public void unsetStringFields() {
        this.stringFields = null;
    }

    /** Returns true if field stringFields is set (has been assigned a value) and false otherwise */
    public boolean isSetStringFields() {
        return this.stringFields != null;
    }

    public void setStringFieldsIsSet(boolean value) {
        if (!value) {
            this.stringFields = null;
        }
    }

    public int getLongFieldsSize() {
        return (this.longFields == null) ? 0 : this.longFields.size();
    }

    public void putToLongFields(String key, long val) {
        if (this.longFields == null) {
            this.longFields = new java.util.HashMap<String, Long>();
        }
        this.longFields.put(key, val);
    }

    public java.util.Map<String, Long> getLongFields() {
        return this.longFields;
    }

    public ExtendEntity setLongFields(java.util.Map<String, Long> longFields) {
        this.longFields = longFields;
        return this;
    }

    public void unsetLongFields() {
        this.longFields = null;
    }

    /** Returns true if field longFields is set (has been assigned a value) and false otherwise */
    public boolean isSetLongFields() {
        return this.longFields != null;
    }

    public void setLongFieldsIsSet(boolean value) {
        if (!value) {
            this.longFields = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case APP_NAME:
                if (value == null) {
                    unsetAppName();
                } else {
                    setAppName((String) value);
                }
                break;

            case HOST_NAME:
                if (value == null) {
                    unsetHostName();
                } else {
                    setHostName((String) value);
                }
                break;

            case PORT:
                if (value == null) {
                    unsetPort();
                } else {
                    setPort((Integer) value);
                }
                break;

            case TIMESTAMP:
                if (value == null) {
                    unsetTimestamp();
                } else {
                    setTimestamp((Long) value);
                }
                break;

            case INTERVAL:
                if (value == null) {
                    unsetInterval();
                } else {
                    setInterval((Integer) value);
                }
                break;

            case COLLECT_COUNT:
                if (value == null) {
                    unsetCollectCount();
                } else {
                    setCollectCount((Integer) value);
                }
                break;

            case ENTITY_NAME:
                if (value == null) {
                    unsetEntityName();
                } else {
                    setEntityName((String) value);
                }
                break;

            case STRING_FIELDS:
                if (value == null) {
                    unsetStringFields();
                } else {
                    setStringFields((java.util.Map<String, String>) value);
                }
                break;

            case LONG_FIELDS:
                if (value == null) {
                    unsetLongFields();
                } else {
                    setLongFields((java.util.Map<String, Long>) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case APP_NAME:
                return getAppName();

            case HOST_NAME:
                return getHostName();

            case PORT:
                return getPort();

            case TIMESTAMP:
                return getTimestamp();

            case INTERVAL:
                return getInterval();

            case COLLECT_COUNT:
                return getCollectCount();

            case ENTITY_NAME:
                return getEntityName();

            case STRING_FIELDS:
                return getStringFields();

            case LONG_FIELDS:
                return getLongFields();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case APP_NAME:
                return isSetAppName();
            case HOST_NAME:
                return isSetHostName();
            case PORT:
                return isSetPort();
            case TIMESTAMP:
                return isSetTimestamp();
            case INTERVAL:
                return isSetInterval();
            case COLLECT_COUNT:
                return isSetCollectCount();
            case ENTITY_NAME:
                return isSetEntityName();
            case STRING_FIELDS:
                return isSetStringFields();
            case LONG_FIELDS:
                return isSetLongFields();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof ExtendEntity)
            return this.equals((ExtendEntity) that);
        return false;
    }

    public boolean equals(ExtendEntity that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_appName = true && this.isSetAppName();
        boolean that_present_appName = true && that.isSetAppName();
        if (this_present_appName || that_present_appName) {
            if (!(this_present_appName && that_present_appName))
                return false;
            if (!this.appName.equals(that.appName))
                return false;
        }

        boolean this_present_hostName = true && this.isSetHostName();
        boolean that_present_hostName = true && that.isSetHostName();
        if (this_present_hostName || that_present_hostName) {
            if (!(this_present_hostName && that_present_hostName))
                return false;
            if (!this.hostName.equals(that.hostName))
                return false;
        }

        boolean this_present_port = true;
        boolean that_present_port = true;
        if (this_present_port || that_present_port) {
            if (!(this_present_port && that_present_port))
                return false;
            if (this.port != that.port)
                return false;
        }

        boolean this_present_timestamp = true;
        boolean that_present_timestamp = true;
        if (this_present_timestamp || that_present_timestamp) {
            if (!(this_present_timestamp && that_present_timestamp))
                return false;
            if (this.timestamp != that.timestamp)
                return false;
        }

        boolean this_present_interval = true;
        boolean that_present_interval = true;
        if (this_present_interval || that_present_interval) {
            if (!(this_present_interval && that_present_interval))
                return false;
            if (this.interval != that.interval)
                return false;
        }

        boolean this_present_collectCount = true;
        boolean that_present_collectCount = true;
        if (this_present_collectCount || that_present_collectCount) {
            if (!(this_present_collectCount && that_present_collectCount))
                return false;
            if (this.collectCount != that.collectCount)
                return false;
        }

        boolean this_present_entityName = true && this.isSetEntityName();
        boolean that_present_entityName = true && that.isSetEntityName();
        if (this_present_entityName || that_present_entityName) {
            if (!(this_present_entityName && that_present_entityName))
                return false;
            if (!this.entityName.equals(that.entityName))
                return false;
        }

        boolean this_present_stringFields = true && this.isSetStringFields();
        boolean that_present_stringFields = true && that.isSetStringFields();
        if (this_present_stringFields || that_present_stringFields) {
            if (!(this_present_stringFields && that_present_stringFields))
                return false;
            if (!this.stringFields.equals(that.stringFields))
                return false;
        }

        boolean this_present_longFields = true && this.isSetLongFields();
        boolean that_present_longFields = true && that.isSetLongFields();
        if (this_present_longFields || that_present_longFields) {
            if (!(this_present_longFields && that_present_longFields))
                return false;
            if (!this.longFields.equals(that.longFields))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetAppName()) ? 131071 : 524287);
        if (isSetAppName())
            hashCode = hashCode * 8191 + appName.hashCode();

        hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
        if (isSetHostName())
            hashCode = hashCode * 8191 + hostName.hashCode();

        hashCode = hashCode * 8191 + port;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

        hashCode = hashCode * 8191 + interval;

        hashCode = hashCode * 8191 + collectCount;

        hashCode = hashCode * 8191 + ((isSetEntityName()) ? 131071 : 524287);
        if (isSetEntityName())
            hashCode = hashCode * 8191 + entityName.hashCode();

        hashCode = hashCode * 8191 + ((isSetStringFields()) ? 131071 : 524287);
        if (isSetStringFields())
            hashCode = hashCode * 8191 + stringFields.hashCode();

        hashCode = hashCode * 8191 + ((isSetLongFields()) ? 131071 : 524287);
        if (isSetLongFields())
            hashCode = hashCode * 8191 + longFields.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(ExtendEntity other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAppName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHostName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPort()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTimestamp()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetInterval()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCollectCount()).compareTo(other.isSetCollectCount());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCollectCount()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectCount, other.collectCount);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetEntityName()).compareTo(other.isSetEntityName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEntityName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityName, other.entityName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetStringFields()).compareTo(other.isSetStringFields());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStringFields()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringFields, other.stringFields);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetLongFields()).compareTo(other.isSetLongFields());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLongFields()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longFields, other.longFields);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ExtendEntity(");
        boolean first = true;

        sb.append("appName:");
        if (this.appName == null) {
            sb.append("null");
        } else {
            sb.append(this.appName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("hostName:");
        if (this.hostName == null) {
            sb.append("null");
        } else {
            sb.append(this.hostName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("port:");
        sb.append(this.port);
        first = false;
        if (!first) sb.append(", ");
        sb.append("timestamp:");
        sb.append(this.timestamp);
        first = false;
        if (!first) sb.append(", ");
        sb.append("interval:");
        sb.append(this.interval);
        first = false;
        if (!first) sb.append(", ");
        sb.append("collectCount:");
        sb.append(this.collectCount);
        first = false;
        if (!first) sb.append(", ");
        sb.append("entityName:");
        if (this.entityName == null) {
            sb.append("null");
        } else {
            sb.append(this.entityName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("stringFields:");
        if (this.stringFields == null) {
            sb.append("null");
        } else {
            sb.append(this.stringFields);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("longFields:");
        if (this.longFields == null) {
            sb.append("null");
        } else {
            sb.append(this.longFields);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ExtendEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ExtendEntityStandardScheme getScheme() {
            return new ExtendEntityStandardScheme();
        }
    }

    private static class ExtendEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExtendEntity> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ExtendEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // APP_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.appName = iprot.readString();
                            struct.setAppNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // HOST_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.hostName = iprot.readString();
                            struct.setHostNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // PORT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.port = iprot.readI32();
                            struct.setPortIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // TIMESTAMP
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.timestamp = iprot.readI64();
                            struct.setTimestampIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // INTERVAL
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.interval = iprot.readI32();
                            struct.setIntervalIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // COLLECT_COUNT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.collectCount = iprot.readI32();
                            struct.setCollectCountIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // ENTITY_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.entityName = iprot.readString();
                            struct.setEntityNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // STRING_FIELDS
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                                struct.stringFields = new java.util.HashMap<String, String>(2 * _map64.size);
                                String _key65;
                                String _val66;
                                for (int _i67 = 0; _i67 < _map64.size; ++_i67) {
                                    _key65 = iprot.readString();
                                    _val66 = iprot.readString();
                                    struct.stringFields.put(_key65, _val66);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setStringFieldsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // LONG_FIELDS
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map68 = iprot.readMapBegin();
                                struct.longFields = new java.util.HashMap<String, Long>(2 * _map68.size);
                                String _key69;
                                long _val70;
                                for (int _i71 = 0; _i71 < _map68.size; ++_i71) {
                                    _key69 = iprot.readString();
                                    _val70 = iprot.readI64();
                                    struct.longFields.put(_key69, _val70);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setLongFieldsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ExtendEntity struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.appName != null) {
                oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
                oprot.writeString(struct.appName);
                oprot.writeFieldEnd();
            }
            if (struct.hostName != null) {
                oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
                oprot.writeString(struct.hostName);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(PORT_FIELD_DESC);
            oprot.writeI32(struct.port);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
            oprot.writeI64(struct.timestamp);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
            oprot.writeI32(struct.interval);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(COLLECT_COUNT_FIELD_DESC);
            oprot.writeI32(struct.collectCount);
            oprot.writeFieldEnd();
            if (struct.entityName != null) {
                oprot.writeFieldBegin(ENTITY_NAME_FIELD_DESC);
                oprot.writeString(struct.entityName);
                oprot.writeFieldEnd();
            }
            if (struct.stringFields != null) {
                oprot.writeFieldBegin(STRING_FIELDS_FIELD_DESC);
                {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.stringFields.size()));
                    for (java.util.Map.Entry<String, String> _iter72 : struct.stringFields.entrySet()) {
                        oprot.writeString(_iter72.getKey());
                        oprot.writeString(_iter72.getValue());
                    }
                    oprot.writeMapEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.longFields != null) {
                oprot.writeFieldBegin(LONG_FIELDS_FIELD_DESC);
                {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.longFields.size()));
                    for (java.util.Map.Entry<String, Long> _iter73 : struct.longFields.entrySet()) {
                        oprot.writeString(_iter73.getKey());
                        oprot.writeI64(_iter73.getValue());
                    }
                    oprot.writeMapEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ExtendEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ExtendEntityTupleScheme getScheme() {
            return new ExtendEntityTupleScheme();
        }
    }

    private static class ExtendEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExtendEntity> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ExtendEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetAppName()) {
                optionals.set(0);
            }
            if (struct.isSetHostName()) {
                optionals.set(1);
            }
            if (struct.isSetPort()) {
                optionals.set(2);
            }
            if (struct.isSetTimestamp()) {
                optionals.set(3);
            }
            if (struct.isSetInterval()) {
                optionals.set(4);
            }
            if (struct.isSetCollectCount()) {
                optionals.set(5);
            }
            if (struct.isSetEntityName()) {
                optionals.set(6);
            }
            if (struct.isSetStringFields()) {
                optionals.set(7);
            }
            if (struct.isSetLongFields()) {
                optionals.set(8);
            }
            oprot.writeBitSet(optionals, 9);
            if (struct.isSetAppName()) {
                oprot.writeString(struct.appName);
            }
            if (struct.isSetHostName()) {
                oprot.writeString(struct.hostName);
            }
            if (struct.isSetPort()) {
                oprot.writeI32(struct.port);
            }
            if (struct.isSetTimestamp()) {
                oprot.writeI64(struct.timestamp);
            }
            if (struct.isSetInterval()) {
                oprot.writeI32(struct.interval);
            }
            if (struct.isSetCollectCount()) {
                oprot.writeI32(struct.collectCount);
            }
            if (struct.isSetEntityName()) {
                oprot.writeString(struct.entityName);
            }
            if (struct.isSetStringFields()) {
                {
                    oprot.writeI32(struct.stringFields.size());
                    for (java.util.Map.Entry<String, String> _iter74 : struct.stringFields.entrySet()) {
                        oprot.writeString(_iter74.getKey());
                        oprot.writeString(_iter74.getValue());
                    }
                }
            }
            if (struct.isSetLongFields()) {
                {
                    oprot.writeI32(struct.longFields.size());
                    for (java.util.Map.Entry<String, Long> _iter75 : struct.longFields.entrySet()) {
                        oprot.writeString(_iter75.getKey());
                        oprot.writeI64(_iter75.getValue());
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ExtendEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(9);
            if (incoming.get(0)) {
                struct.appName = iprot.readString();
                struct.setAppNameIsSet(true);
            }
            if (incoming.get(1)) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
            }
            if (incoming.get(2)) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
            }
            if (incoming.get(3)) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
            }
            if (incoming.get(4)) {
                struct.interval = iprot.readI32();
                struct.setIntervalIsSet(true);
            }
            if (incoming.get(5)) {
                struct.collectCount = iprot.readI32();
                struct.setCollectCountIsSet(true);
            }
            if (incoming.get(6)) {
                struct.entityName = iprot.readString();
                struct.setEntityNameIsSet(true);
            }
            if (incoming.get(7)) {
                {
                    org.apache.thrift.protocol.TMap _map76 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.stringFields = new java.util.HashMap<String, String>(2 * _map76.size);
                    String _key77;
                    String _val78;
                    for (int _i79 = 0; _i79 < _map76.size; ++_i79) {
                        _key77 = iprot.readString();
                        _val78 = iprot.readString();
                        struct.stringFields.put(_key77, _val78);
                    }
                }
                struct.setStringFieldsIsSet(true);
            }
            if (incoming.get(8)) {
                {
                    org.apache.thrift.protocol.TMap _map80 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
                    struct.longFields = new java.util.HashMap<String, Long>(2 * _map80.size);
                    String _key81;
                    long _val82;
                    for (int _i83 = 0; _i83 < _map80.size; ++_i83) {
                        _key81 = iprot.readString();
                        _val82 = iprot.readI64();
                        struct.longFields.put(_key81, _val82);
                    }
                }
                struct.setLongFieldsIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

