/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class MysqlClusterEntity implements org.apache.thrift.TBase<MysqlClusterEntity, MysqlClusterEntity._Fields>, java.io.Serializable, Cloneable, Comparable<MysqlClusterEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MysqlClusterEntity");

  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SELECT_THROUGH_PUT_FIELD_DESC = new org.apache.thrift.protocol.TField("selectThroughPut", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField INSERT_THROUGH_PUT_FIELD_DESC = new org.apache.thrift.protocol.TField("insertThroughPut", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATE_THROUGH_PUT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateThroughPut", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DELETE_THROUGH_PUT_FIELD_DESC = new org.apache.thrift.protocol.TField("deleteThroughPut", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CONN_USED_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("connUsedPercent", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField CACHE_USED_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheUsedPercent", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField CACHE_HITS_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheHits", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField CACHE_QUERIES_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheQueries", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField INDEX_CACHE_HITS_FIELD_DESC = new org.apache.thrift.protocol.TField("indexCacheHits", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField INDEX_READ_STATIS_FIELD_DESC = new org.apache.thrift.protocol.TField("indexReadStatis", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField CONN_THROUGH_PUT_FIELD_DESC = new org.apache.thrift.protocol.TField("connThroughPut", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField CONN_CACHE_HITS_FIELD_DESC = new org.apache.thrift.protocol.TField("connCacheHits", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField CONCURRENT_CONN_FIELD_DESC = new org.apache.thrift.protocol.TField("concurrentConn", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField TRAFFIC_STATIS_FIELD_DESC = new org.apache.thrift.protocol.TField("trafficStatis", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField LOCK_STATIS_FIELD_DESC = new org.apache.thrift.protocol.TField("lockStatis", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.STRING, (short)20);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MysqlClusterEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MysqlClusterEntityTupleSchemeFactory();

  public String hostName; // required
  public int port; // required
  public long timestamp; // required
  public int interval; // required
  public int selectThroughPut; // required
  public int insertThroughPut; // required
  public int updateThroughPut; // required
  public int deleteThroughPut; // required
  public double connUsedPercent; // required
  public double cacheUsedPercent; // required
  public double cacheHits; // required
  public int cacheQueries; // required
  public double indexCacheHits; // required
  public int indexReadStatis; // required
  public int connThroughPut; // required
  public int connCacheHits; // required
  public int concurrentConn; // required
  public long trafficStatis; // required
  public int lockStatis; // required
  public String flag; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOST_NAME((short)1, "hostName"),
    PORT((short)2, "port"),
    TIMESTAMP((short)3, "timestamp"),
    INTERVAL((short)4, "interval"),
    SELECT_THROUGH_PUT((short)5, "selectThroughPut"),
    INSERT_THROUGH_PUT((short)6, "insertThroughPut"),
    UPDATE_THROUGH_PUT((short)7, "updateThroughPut"),
    DELETE_THROUGH_PUT((short)8, "deleteThroughPut"),
    CONN_USED_PERCENT((short)9, "connUsedPercent"),
    CACHE_USED_PERCENT((short)10, "cacheUsedPercent"),
    CACHE_HITS((short)11, "cacheHits"),
    CACHE_QUERIES((short)12, "cacheQueries"),
    INDEX_CACHE_HITS((short)13, "indexCacheHits"),
    INDEX_READ_STATIS((short)14, "indexReadStatis"),
    CONN_THROUGH_PUT((short)15, "connThroughPut"),
    CONN_CACHE_HITS((short)16, "connCacheHits"),
    CONCURRENT_CONN((short)17, "concurrentConn"),
    TRAFFIC_STATIS((short)18, "trafficStatis"),
    LOCK_STATIS((short)19, "lockStatis"),
    FLAG((short)20, "flag");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOST_NAME
          return HOST_NAME;
        case 2: // PORT
          return PORT;
        case 3: // TIMESTAMP
          return TIMESTAMP;
        case 4: // INTERVAL
          return INTERVAL;
        case 5: // SELECT_THROUGH_PUT
          return SELECT_THROUGH_PUT;
        case 6: // INSERT_THROUGH_PUT
          return INSERT_THROUGH_PUT;
        case 7: // UPDATE_THROUGH_PUT
          return UPDATE_THROUGH_PUT;
        case 8: // DELETE_THROUGH_PUT
          return DELETE_THROUGH_PUT;
        case 9: // CONN_USED_PERCENT
          return CONN_USED_PERCENT;
        case 10: // CACHE_USED_PERCENT
          return CACHE_USED_PERCENT;
        case 11: // CACHE_HITS
          return CACHE_HITS;
        case 12: // CACHE_QUERIES
          return CACHE_QUERIES;
        case 13: // INDEX_CACHE_HITS
          return INDEX_CACHE_HITS;
        case 14: // INDEX_READ_STATIS
          return INDEX_READ_STATIS;
        case 15: // CONN_THROUGH_PUT
          return CONN_THROUGH_PUT;
        case 16: // CONN_CACHE_HITS
          return CONN_CACHE_HITS;
        case 17: // CONCURRENT_CONN
          return CONCURRENT_CONN;
        case 18: // TRAFFIC_STATIS
          return TRAFFIC_STATIS;
        case 19: // LOCK_STATIS
          return LOCK_STATIS;
        case 20: // FLAG
          return FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private static final int __TIMESTAMP_ISSET_ID = 1;
  private static final int __INTERVAL_ISSET_ID = 2;
  private static final int __SELECTTHROUGHPUT_ISSET_ID = 3;
  private static final int __INSERTTHROUGHPUT_ISSET_ID = 4;
  private static final int __UPDATETHROUGHPUT_ISSET_ID = 5;
  private static final int __DELETETHROUGHPUT_ISSET_ID = 6;
  private static final int __CONNUSEDPERCENT_ISSET_ID = 7;
  private static final int __CACHEUSEDPERCENT_ISSET_ID = 8;
  private static final int __CACHEHITS_ISSET_ID = 9;
  private static final int __CACHEQUERIES_ISSET_ID = 10;
  private static final int __INDEXCACHEHITS_ISSET_ID = 11;
  private static final int __INDEXREADSTATIS_ISSET_ID = 12;
  private static final int __CONNTHROUGHPUT_ISSET_ID = 13;
  private static final int __CONNCACHEHITS_ISSET_ID = 14;
  private static final int __CONCURRENTCONN_ISSET_ID = 15;
  private static final int __TRAFFICSTATIS_ISSET_ID = 16;
  private static final int __LOCKSTATIS_ISSET_ID = 17;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FLAG};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SELECT_THROUGH_PUT, new org.apache.thrift.meta_data.FieldMetaData("selectThroughPut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INSERT_THROUGH_PUT, new org.apache.thrift.meta_data.FieldMetaData("insertThroughPut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_THROUGH_PUT, new org.apache.thrift.meta_data.FieldMetaData("updateThroughPut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DELETE_THROUGH_PUT, new org.apache.thrift.meta_data.FieldMetaData("deleteThroughPut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONN_USED_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("connUsedPercent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CACHE_USED_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("cacheUsedPercent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CACHE_HITS, new org.apache.thrift.meta_data.FieldMetaData("cacheHits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CACHE_QUERIES, new org.apache.thrift.meta_data.FieldMetaData("cacheQueries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INDEX_CACHE_HITS, new org.apache.thrift.meta_data.FieldMetaData("indexCacheHits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INDEX_READ_STATIS, new org.apache.thrift.meta_data.FieldMetaData("indexReadStatis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONN_THROUGH_PUT, new org.apache.thrift.meta_data.FieldMetaData("connThroughPut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONN_CACHE_HITS, new org.apache.thrift.meta_data.FieldMetaData("connCacheHits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONCURRENT_CONN, new org.apache.thrift.meta_data.FieldMetaData("concurrentConn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRAFFIC_STATIS, new org.apache.thrift.meta_data.FieldMetaData("trafficStatis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOCK_STATIS, new org.apache.thrift.meta_data.FieldMetaData("lockStatis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MysqlClusterEntity.class, metaDataMap);
  }

  public MysqlClusterEntity() {
    this.flag = "2";

  }

  public MysqlClusterEntity(
    String hostName,
    int port,
    long timestamp,
    int interval,
    int selectThroughPut,
    int insertThroughPut,
    int updateThroughPut,
    int deleteThroughPut,
    double connUsedPercent,
    double cacheUsedPercent,
    double cacheHits,
    int cacheQueries,
    double indexCacheHits,
    int indexReadStatis,
    int connThroughPut,
    int connCacheHits,
    int concurrentConn,
    long trafficStatis,
    int lockStatis)
  {
    this();
    this.hostName = hostName;
    this.port = port;
    setPortIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.interval = interval;
    setIntervalIsSet(true);
    this.selectThroughPut = selectThroughPut;
    setSelectThroughPutIsSet(true);
    this.insertThroughPut = insertThroughPut;
    setInsertThroughPutIsSet(true);
    this.updateThroughPut = updateThroughPut;
    setUpdateThroughPutIsSet(true);
    this.deleteThroughPut = deleteThroughPut;
    setDeleteThroughPutIsSet(true);
    this.connUsedPercent = connUsedPercent;
    setConnUsedPercentIsSet(true);
    this.cacheUsedPercent = cacheUsedPercent;
    setCacheUsedPercentIsSet(true);
    this.cacheHits = cacheHits;
    setCacheHitsIsSet(true);
    this.cacheQueries = cacheQueries;
    setCacheQueriesIsSet(true);
    this.indexCacheHits = indexCacheHits;
    setIndexCacheHitsIsSet(true);
    this.indexReadStatis = indexReadStatis;
    setIndexReadStatisIsSet(true);
    this.connThroughPut = connThroughPut;
    setConnThroughPutIsSet(true);
    this.connCacheHits = connCacheHits;
    setConnCacheHitsIsSet(true);
    this.concurrentConn = concurrentConn;
    setConcurrentConnIsSet(true);
    this.trafficStatis = trafficStatis;
    setTrafficStatisIsSet(true);
    this.lockStatis = lockStatis;
    setLockStatisIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MysqlClusterEntity(MysqlClusterEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHostName()) {
      this.hostName = other.hostName;
    }
    this.port = other.port;
    this.timestamp = other.timestamp;
    this.interval = other.interval;
    this.selectThroughPut = other.selectThroughPut;
    this.insertThroughPut = other.insertThroughPut;
    this.updateThroughPut = other.updateThroughPut;
    this.deleteThroughPut = other.deleteThroughPut;
    this.connUsedPercent = other.connUsedPercent;
    this.cacheUsedPercent = other.cacheUsedPercent;
    this.cacheHits = other.cacheHits;
    this.cacheQueries = other.cacheQueries;
    this.indexCacheHits = other.indexCacheHits;
    this.indexReadStatis = other.indexReadStatis;
    this.connThroughPut = other.connThroughPut;
    this.connCacheHits = other.connCacheHits;
    this.concurrentConn = other.concurrentConn;
    this.trafficStatis = other.trafficStatis;
    this.lockStatis = other.lockStatis;
    if (other.isSetFlag()) {
      this.flag = other.flag;
    }
  }

  public MysqlClusterEntity deepCopy() {
    return new MysqlClusterEntity(this);
  }

  @Override
  public void clear() {
    this.hostName = null;
    setPortIsSet(false);
    this.port = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setIntervalIsSet(false);
    this.interval = 0;
    setSelectThroughPutIsSet(false);
    this.selectThroughPut = 0;
    setInsertThroughPutIsSet(false);
    this.insertThroughPut = 0;
    setUpdateThroughPutIsSet(false);
    this.updateThroughPut = 0;
    setDeleteThroughPutIsSet(false);
    this.deleteThroughPut = 0;
    setConnUsedPercentIsSet(false);
    this.connUsedPercent = 0.0;
    setCacheUsedPercentIsSet(false);
    this.cacheUsedPercent = 0.0;
    setCacheHitsIsSet(false);
    this.cacheHits = 0.0;
    setCacheQueriesIsSet(false);
    this.cacheQueries = 0;
    setIndexCacheHitsIsSet(false);
    this.indexCacheHits = 0.0;
    setIndexReadStatisIsSet(false);
    this.indexReadStatis = 0;
    setConnThroughPutIsSet(false);
    this.connThroughPut = 0;
    setConnCacheHitsIsSet(false);
    this.connCacheHits = 0;
    setConcurrentConnIsSet(false);
    this.concurrentConn = 0;
    setTrafficStatisIsSet(false);
    this.trafficStatis = 0;
    setLockStatisIsSet(false);
    this.lockStatis = 0;
    this.flag = "2";

  }

  public String getHostName() {
    return this.hostName;
  }

  public MysqlClusterEntity setHostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  public void unsetHostName() {
    this.hostName = null;
  }

  /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
  public boolean isSetHostName() {
    return this.hostName != null;
  }

  public void setHostNameIsSet(boolean value) {
    if (!value) {
      this.hostName = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public MysqlClusterEntity setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public MysqlClusterEntity setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getInterval() {
    return this.interval;
  }

  public MysqlClusterEntity setInterval(int interval) {
    this.interval = interval;
    setIntervalIsSet(true);
    return this;
  }

  public void unsetInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  /** Returns true if field interval is set (has been assigned a value) and false otherwise */
  public boolean isSetInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  public void setIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
  }

  public int getSelectThroughPut() {
    return this.selectThroughPut;
  }

  public MysqlClusterEntity setSelectThroughPut(int selectThroughPut) {
    this.selectThroughPut = selectThroughPut;
    setSelectThroughPutIsSet(true);
    return this;
  }

  public void unsetSelectThroughPut() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SELECTTHROUGHPUT_ISSET_ID);
  }

  /** Returns true if field selectThroughPut is set (has been assigned a value) and false otherwise */
  public boolean isSetSelectThroughPut() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SELECTTHROUGHPUT_ISSET_ID);
  }

  public void setSelectThroughPutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SELECTTHROUGHPUT_ISSET_ID, value);
  }

  public int getInsertThroughPut() {
    return this.insertThroughPut;
  }

  public MysqlClusterEntity setInsertThroughPut(int insertThroughPut) {
    this.insertThroughPut = insertThroughPut;
    setInsertThroughPutIsSet(true);
    return this;
  }

  public void unsetInsertThroughPut() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INSERTTHROUGHPUT_ISSET_ID);
  }

  /** Returns true if field insertThroughPut is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertThroughPut() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INSERTTHROUGHPUT_ISSET_ID);
  }

  public void setInsertThroughPutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INSERTTHROUGHPUT_ISSET_ID, value);
  }

  public int getUpdateThroughPut() {
    return this.updateThroughPut;
  }

  public MysqlClusterEntity setUpdateThroughPut(int updateThroughPut) {
    this.updateThroughPut = updateThroughPut;
    setUpdateThroughPutIsSet(true);
    return this;
  }

  public void unsetUpdateThroughPut() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATETHROUGHPUT_ISSET_ID);
  }

  /** Returns true if field updateThroughPut is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateThroughPut() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATETHROUGHPUT_ISSET_ID);
  }

  public void setUpdateThroughPutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATETHROUGHPUT_ISSET_ID, value);
  }

  public int getDeleteThroughPut() {
    return this.deleteThroughPut;
  }

  public MysqlClusterEntity setDeleteThroughPut(int deleteThroughPut) {
    this.deleteThroughPut = deleteThroughPut;
    setDeleteThroughPutIsSet(true);
    return this;
  }

  public void unsetDeleteThroughPut() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DELETETHROUGHPUT_ISSET_ID);
  }

  /** Returns true if field deleteThroughPut is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleteThroughPut() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DELETETHROUGHPUT_ISSET_ID);
  }

  public void setDeleteThroughPutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DELETETHROUGHPUT_ISSET_ID, value);
  }

  public double getConnUsedPercent() {
    return this.connUsedPercent;
  }

  public MysqlClusterEntity setConnUsedPercent(double connUsedPercent) {
    this.connUsedPercent = connUsedPercent;
    setConnUsedPercentIsSet(true);
    return this;
  }

  public void unsetConnUsedPercent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNUSEDPERCENT_ISSET_ID);
  }

  /** Returns true if field connUsedPercent is set (has been assigned a value) and false otherwise */
  public boolean isSetConnUsedPercent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNUSEDPERCENT_ISSET_ID);
  }

  public void setConnUsedPercentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNUSEDPERCENT_ISSET_ID, value);
  }

  public double getCacheUsedPercent() {
    return this.cacheUsedPercent;
  }

  public MysqlClusterEntity setCacheUsedPercent(double cacheUsedPercent) {
    this.cacheUsedPercent = cacheUsedPercent;
    setCacheUsedPercentIsSet(true);
    return this;
  }

  public void unsetCacheUsedPercent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CACHEUSEDPERCENT_ISSET_ID);
  }

  /** Returns true if field cacheUsedPercent is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheUsedPercent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CACHEUSEDPERCENT_ISSET_ID);
  }

  public void setCacheUsedPercentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CACHEUSEDPERCENT_ISSET_ID, value);
  }

  public double getCacheHits() {
    return this.cacheHits;
  }

  public MysqlClusterEntity setCacheHits(double cacheHits) {
    this.cacheHits = cacheHits;
    setCacheHitsIsSet(true);
    return this;
  }

  public void unsetCacheHits() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CACHEHITS_ISSET_ID);
  }

  /** Returns true if field cacheHits is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheHits() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CACHEHITS_ISSET_ID);
  }

  public void setCacheHitsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CACHEHITS_ISSET_ID, value);
  }

  public int getCacheQueries() {
    return this.cacheQueries;
  }

  public MysqlClusterEntity setCacheQueries(int cacheQueries) {
    this.cacheQueries = cacheQueries;
    setCacheQueriesIsSet(true);
    return this;
  }

  public void unsetCacheQueries() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CACHEQUERIES_ISSET_ID);
  }

  /** Returns true if field cacheQueries is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheQueries() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CACHEQUERIES_ISSET_ID);
  }

  public void setCacheQueriesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CACHEQUERIES_ISSET_ID, value);
  }

  public double getIndexCacheHits() {
    return this.indexCacheHits;
  }

  public MysqlClusterEntity setIndexCacheHits(double indexCacheHits) {
    this.indexCacheHits = indexCacheHits;
    setIndexCacheHitsIsSet(true);
    return this;
  }

  public void unsetIndexCacheHits() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEXCACHEHITS_ISSET_ID);
  }

  /** Returns true if field indexCacheHits is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexCacheHits() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEXCACHEHITS_ISSET_ID);
  }

  public void setIndexCacheHitsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEXCACHEHITS_ISSET_ID, value);
  }

  public int getIndexReadStatis() {
    return this.indexReadStatis;
  }

  public MysqlClusterEntity setIndexReadStatis(int indexReadStatis) {
    this.indexReadStatis = indexReadStatis;
    setIndexReadStatisIsSet(true);
    return this;
  }

  public void unsetIndexReadStatis() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEXREADSTATIS_ISSET_ID);
  }

  /** Returns true if field indexReadStatis is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexReadStatis() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEXREADSTATIS_ISSET_ID);
  }

  public void setIndexReadStatisIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEXREADSTATIS_ISSET_ID, value);
  }

  public int getConnThroughPut() {
    return this.connThroughPut;
  }

  public MysqlClusterEntity setConnThroughPut(int connThroughPut) {
    this.connThroughPut = connThroughPut;
    setConnThroughPutIsSet(true);
    return this;
  }

  public void unsetConnThroughPut() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNTHROUGHPUT_ISSET_ID);
  }

  /** Returns true if field connThroughPut is set (has been assigned a value) and false otherwise */
  public boolean isSetConnThroughPut() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNTHROUGHPUT_ISSET_ID);
  }

  public void setConnThroughPutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNTHROUGHPUT_ISSET_ID, value);
  }

  public int getConnCacheHits() {
    return this.connCacheHits;
  }

  public MysqlClusterEntity setConnCacheHits(int connCacheHits) {
    this.connCacheHits = connCacheHits;
    setConnCacheHitsIsSet(true);
    return this;
  }

  public void unsetConnCacheHits() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNCACHEHITS_ISSET_ID);
  }

  /** Returns true if field connCacheHits is set (has been assigned a value) and false otherwise */
  public boolean isSetConnCacheHits() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNCACHEHITS_ISSET_ID);
  }

  public void setConnCacheHitsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNCACHEHITS_ISSET_ID, value);
  }

  public int getConcurrentConn() {
    return this.concurrentConn;
  }

  public MysqlClusterEntity setConcurrentConn(int concurrentConn) {
    this.concurrentConn = concurrentConn;
    setConcurrentConnIsSet(true);
    return this;
  }

  public void unsetConcurrentConn() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONCURRENTCONN_ISSET_ID);
  }

  /** Returns true if field concurrentConn is set (has been assigned a value) and false otherwise */
  public boolean isSetConcurrentConn() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONCURRENTCONN_ISSET_ID);
  }

  public void setConcurrentConnIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONCURRENTCONN_ISSET_ID, value);
  }

  public long getTrafficStatis() {
    return this.trafficStatis;
  }

  public MysqlClusterEntity setTrafficStatis(long trafficStatis) {
    this.trafficStatis = trafficStatis;
    setTrafficStatisIsSet(true);
    return this;
  }

  public void unsetTrafficStatis() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRAFFICSTATIS_ISSET_ID);
  }

  /** Returns true if field trafficStatis is set (has been assigned a value) and false otherwise */
  public boolean isSetTrafficStatis() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRAFFICSTATIS_ISSET_ID);
  }

  public void setTrafficStatisIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRAFFICSTATIS_ISSET_ID, value);
  }

  public int getLockStatis() {
    return this.lockStatis;
  }

  public MysqlClusterEntity setLockStatis(int lockStatis) {
    this.lockStatis = lockStatis;
    setLockStatisIsSet(true);
    return this;
  }

  public void unsetLockStatis() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCKSTATIS_ISSET_ID);
  }

  /** Returns true if field lockStatis is set (has been assigned a value) and false otherwise */
  public boolean isSetLockStatis() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCKSTATIS_ISSET_ID);
  }

  public void setLockStatisIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCKSTATIS_ISSET_ID, value);
  }

  public String getFlag() {
    return this.flag;
  }

  public MysqlClusterEntity setFlag(String flag) {
    this.flag = flag;
    return this;
  }

  public void unsetFlag() {
    this.flag = null;
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return this.flag != null;
  }

  public void setFlagIsSet(boolean value) {
    if (!value) {
      this.flag = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOST_NAME:
      if (value == null) {
        unsetHostName();
      } else {
        setHostName((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((Integer)value);
      }
      break;

    case SELECT_THROUGH_PUT:
      if (value == null) {
        unsetSelectThroughPut();
      } else {
        setSelectThroughPut((Integer)value);
      }
      break;

    case INSERT_THROUGH_PUT:
      if (value == null) {
        unsetInsertThroughPut();
      } else {
        setInsertThroughPut((Integer)value);
      }
      break;

    case UPDATE_THROUGH_PUT:
      if (value == null) {
        unsetUpdateThroughPut();
      } else {
        setUpdateThroughPut((Integer)value);
      }
      break;

    case DELETE_THROUGH_PUT:
      if (value == null) {
        unsetDeleteThroughPut();
      } else {
        setDeleteThroughPut((Integer)value);
      }
      break;

    case CONN_USED_PERCENT:
      if (value == null) {
        unsetConnUsedPercent();
      } else {
        setConnUsedPercent((Double)value);
      }
      break;

    case CACHE_USED_PERCENT:
      if (value == null) {
        unsetCacheUsedPercent();
      } else {
        setCacheUsedPercent((Double)value);
      }
      break;

    case CACHE_HITS:
      if (value == null) {
        unsetCacheHits();
      } else {
        setCacheHits((Double)value);
      }
      break;

    case CACHE_QUERIES:
      if (value == null) {
        unsetCacheQueries();
      } else {
        setCacheQueries((Integer)value);
      }
      break;

    case INDEX_CACHE_HITS:
      if (value == null) {
        unsetIndexCacheHits();
      } else {
        setIndexCacheHits((Double)value);
      }
      break;

    case INDEX_READ_STATIS:
      if (value == null) {
        unsetIndexReadStatis();
      } else {
        setIndexReadStatis((Integer)value);
      }
      break;

    case CONN_THROUGH_PUT:
      if (value == null) {
        unsetConnThroughPut();
      } else {
        setConnThroughPut((Integer)value);
      }
      break;

    case CONN_CACHE_HITS:
      if (value == null) {
        unsetConnCacheHits();
      } else {
        setConnCacheHits((Integer)value);
      }
      break;

    case CONCURRENT_CONN:
      if (value == null) {
        unsetConcurrentConn();
      } else {
        setConcurrentConn((Integer)value);
      }
      break;

    case TRAFFIC_STATIS:
      if (value == null) {
        unsetTrafficStatis();
      } else {
        setTrafficStatis((Long)value);
      }
      break;

    case LOCK_STATIS:
      if (value == null) {
        unsetLockStatis();
      } else {
        setLockStatis((Integer)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOST_NAME:
      return getHostName();

    case PORT:
      return getPort();

    case TIMESTAMP:
      return getTimestamp();

    case INTERVAL:
      return getInterval();

    case SELECT_THROUGH_PUT:
      return getSelectThroughPut();

    case INSERT_THROUGH_PUT:
      return getInsertThroughPut();

    case UPDATE_THROUGH_PUT:
      return getUpdateThroughPut();

    case DELETE_THROUGH_PUT:
      return getDeleteThroughPut();

    case CONN_USED_PERCENT:
      return getConnUsedPercent();

    case CACHE_USED_PERCENT:
      return getCacheUsedPercent();

    case CACHE_HITS:
      return getCacheHits();

    case CACHE_QUERIES:
      return getCacheQueries();

    case INDEX_CACHE_HITS:
      return getIndexCacheHits();

    case INDEX_READ_STATIS:
      return getIndexReadStatis();

    case CONN_THROUGH_PUT:
      return getConnThroughPut();

    case CONN_CACHE_HITS:
      return getConnCacheHits();

    case CONCURRENT_CONN:
      return getConcurrentConn();

    case TRAFFIC_STATIS:
      return getTrafficStatis();

    case LOCK_STATIS:
      return getLockStatis();

    case FLAG:
      return getFlag();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOST_NAME:
      return isSetHostName();
    case PORT:
      return isSetPort();
    case TIMESTAMP:
      return isSetTimestamp();
    case INTERVAL:
      return isSetInterval();
    case SELECT_THROUGH_PUT:
      return isSetSelectThroughPut();
    case INSERT_THROUGH_PUT:
      return isSetInsertThroughPut();
    case UPDATE_THROUGH_PUT:
      return isSetUpdateThroughPut();
    case DELETE_THROUGH_PUT:
      return isSetDeleteThroughPut();
    case CONN_USED_PERCENT:
      return isSetConnUsedPercent();
    case CACHE_USED_PERCENT:
      return isSetCacheUsedPercent();
    case CACHE_HITS:
      return isSetCacheHits();
    case CACHE_QUERIES:
      return isSetCacheQueries();
    case INDEX_CACHE_HITS:
      return isSetIndexCacheHits();
    case INDEX_READ_STATIS:
      return isSetIndexReadStatis();
    case CONN_THROUGH_PUT:
      return isSetConnThroughPut();
    case CONN_CACHE_HITS:
      return isSetConnCacheHits();
    case CONCURRENT_CONN:
      return isSetConcurrentConn();
    case TRAFFIC_STATIS:
      return isSetTrafficStatis();
    case LOCK_STATIS:
      return isSetLockStatis();
    case FLAG:
      return isSetFlag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MysqlClusterEntity)
      return this.equals((MysqlClusterEntity)that);
    return false;
  }

  public boolean equals(MysqlClusterEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hostName = true && this.isSetHostName();
    boolean that_present_hostName = true && that.isSetHostName();
    if (this_present_hostName || that_present_hostName) {
      if (!(this_present_hostName && that_present_hostName))
        return false;
      if (!this.hostName.equals(that.hostName))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_interval = true;
    boolean that_present_interval = true;
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (this.interval != that.interval)
        return false;
    }

    boolean this_present_selectThroughPut = true;
    boolean that_present_selectThroughPut = true;
    if (this_present_selectThroughPut || that_present_selectThroughPut) {
      if (!(this_present_selectThroughPut && that_present_selectThroughPut))
        return false;
      if (this.selectThroughPut != that.selectThroughPut)
        return false;
    }

    boolean this_present_insertThroughPut = true;
    boolean that_present_insertThroughPut = true;
    if (this_present_insertThroughPut || that_present_insertThroughPut) {
      if (!(this_present_insertThroughPut && that_present_insertThroughPut))
        return false;
      if (this.insertThroughPut != that.insertThroughPut)
        return false;
    }

    boolean this_present_updateThroughPut = true;
    boolean that_present_updateThroughPut = true;
    if (this_present_updateThroughPut || that_present_updateThroughPut) {
      if (!(this_present_updateThroughPut && that_present_updateThroughPut))
        return false;
      if (this.updateThroughPut != that.updateThroughPut)
        return false;
    }

    boolean this_present_deleteThroughPut = true;
    boolean that_present_deleteThroughPut = true;
    if (this_present_deleteThroughPut || that_present_deleteThroughPut) {
      if (!(this_present_deleteThroughPut && that_present_deleteThroughPut))
        return false;
      if (this.deleteThroughPut != that.deleteThroughPut)
        return false;
    }

    boolean this_present_connUsedPercent = true;
    boolean that_present_connUsedPercent = true;
    if (this_present_connUsedPercent || that_present_connUsedPercent) {
      if (!(this_present_connUsedPercent && that_present_connUsedPercent))
        return false;
      if (this.connUsedPercent != that.connUsedPercent)
        return false;
    }

    boolean this_present_cacheUsedPercent = true;
    boolean that_present_cacheUsedPercent = true;
    if (this_present_cacheUsedPercent || that_present_cacheUsedPercent) {
      if (!(this_present_cacheUsedPercent && that_present_cacheUsedPercent))
        return false;
      if (this.cacheUsedPercent != that.cacheUsedPercent)
        return false;
    }

    boolean this_present_cacheHits = true;
    boolean that_present_cacheHits = true;
    if (this_present_cacheHits || that_present_cacheHits) {
      if (!(this_present_cacheHits && that_present_cacheHits))
        return false;
      if (this.cacheHits != that.cacheHits)
        return false;
    }

    boolean this_present_cacheQueries = true;
    boolean that_present_cacheQueries = true;
    if (this_present_cacheQueries || that_present_cacheQueries) {
      if (!(this_present_cacheQueries && that_present_cacheQueries))
        return false;
      if (this.cacheQueries != that.cacheQueries)
        return false;
    }

    boolean this_present_indexCacheHits = true;
    boolean that_present_indexCacheHits = true;
    if (this_present_indexCacheHits || that_present_indexCacheHits) {
      if (!(this_present_indexCacheHits && that_present_indexCacheHits))
        return false;
      if (this.indexCacheHits != that.indexCacheHits)
        return false;
    }

    boolean this_present_indexReadStatis = true;
    boolean that_present_indexReadStatis = true;
    if (this_present_indexReadStatis || that_present_indexReadStatis) {
      if (!(this_present_indexReadStatis && that_present_indexReadStatis))
        return false;
      if (this.indexReadStatis != that.indexReadStatis)
        return false;
    }

    boolean this_present_connThroughPut = true;
    boolean that_present_connThroughPut = true;
    if (this_present_connThroughPut || that_present_connThroughPut) {
      if (!(this_present_connThroughPut && that_present_connThroughPut))
        return false;
      if (this.connThroughPut != that.connThroughPut)
        return false;
    }

    boolean this_present_connCacheHits = true;
    boolean that_present_connCacheHits = true;
    if (this_present_connCacheHits || that_present_connCacheHits) {
      if (!(this_present_connCacheHits && that_present_connCacheHits))
        return false;
      if (this.connCacheHits != that.connCacheHits)
        return false;
    }

    boolean this_present_concurrentConn = true;
    boolean that_present_concurrentConn = true;
    if (this_present_concurrentConn || that_present_concurrentConn) {
      if (!(this_present_concurrentConn && that_present_concurrentConn))
        return false;
      if (this.concurrentConn != that.concurrentConn)
        return false;
    }

    boolean this_present_trafficStatis = true;
    boolean that_present_trafficStatis = true;
    if (this_present_trafficStatis || that_present_trafficStatis) {
      if (!(this_present_trafficStatis && that_present_trafficStatis))
        return false;
      if (this.trafficStatis != that.trafficStatis)
        return false;
    }

    boolean this_present_lockStatis = true;
    boolean that_present_lockStatis = true;
    if (this_present_lockStatis || that_present_lockStatis) {
      if (!(this_present_lockStatis && that_present_lockStatis))
        return false;
      if (this.lockStatis != that.lockStatis)
        return false;
    }

    boolean this_present_flag = true && this.isSetFlag();
    boolean that_present_flag = true && that.isSetFlag();
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (!this.flag.equals(that.flag))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
    if (isSetHostName())
      hashCode = hashCode * 8191 + hostName.hashCode();

    hashCode = hashCode * 8191 + port;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + interval;

    hashCode = hashCode * 8191 + selectThroughPut;

    hashCode = hashCode * 8191 + insertThroughPut;

    hashCode = hashCode * 8191 + updateThroughPut;

    hashCode = hashCode * 8191 + deleteThroughPut;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(connUsedPercent);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cacheUsedPercent);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cacheHits);

    hashCode = hashCode * 8191 + cacheQueries;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(indexCacheHits);

    hashCode = hashCode * 8191 + indexReadStatis;

    hashCode = hashCode * 8191 + connThroughPut;

    hashCode = hashCode * 8191 + connCacheHits;

    hashCode = hashCode * 8191 + concurrentConn;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(trafficStatis);

    hashCode = hashCode * 8191 + lockStatis;

    hashCode = hashCode * 8191 + ((isSetFlag()) ? 131071 : 524287);
    if (isSetFlag())
      hashCode = hashCode * 8191 + flag.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MysqlClusterEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelectThroughPut()).compareTo(other.isSetSelectThroughPut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelectThroughPut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectThroughPut, other.selectThroughPut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertThroughPut()).compareTo(other.isSetInsertThroughPut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertThroughPut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertThroughPut, other.insertThroughPut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateThroughPut()).compareTo(other.isSetUpdateThroughPut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateThroughPut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateThroughPut, other.updateThroughPut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleteThroughPut()).compareTo(other.isSetDeleteThroughPut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleteThroughPut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleteThroughPut, other.deleteThroughPut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnUsedPercent()).compareTo(other.isSetConnUsedPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnUsedPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connUsedPercent, other.connUsedPercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCacheUsedPercent()).compareTo(other.isSetCacheUsedPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheUsedPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheUsedPercent, other.cacheUsedPercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCacheHits()).compareTo(other.isSetCacheHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheHits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheHits, other.cacheHits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCacheQueries()).compareTo(other.isSetCacheQueries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheQueries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheQueries, other.cacheQueries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndexCacheHits()).compareTo(other.isSetIndexCacheHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexCacheHits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexCacheHits, other.indexCacheHits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndexReadStatis()).compareTo(other.isSetIndexReadStatis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexReadStatis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexReadStatis, other.indexReadStatis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnThroughPut()).compareTo(other.isSetConnThroughPut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnThroughPut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connThroughPut, other.connThroughPut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnCacheHits()).compareTo(other.isSetConnCacheHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnCacheHits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connCacheHits, other.connCacheHits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConcurrentConn()).compareTo(other.isSetConcurrentConn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConcurrentConn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.concurrentConn, other.concurrentConn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrafficStatis()).compareTo(other.isSetTrafficStatis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrafficStatis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trafficStatis, other.trafficStatis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLockStatis()).compareTo(other.isSetLockStatis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockStatis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockStatis, other.lockStatis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MysqlClusterEntity(");
    boolean first = true;

    sb.append("hostName:");
    if (this.hostName == null) {
      sb.append("null");
    } else {
      sb.append(this.hostName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interval:");
    sb.append(this.interval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("selectThroughPut:");
    sb.append(this.selectThroughPut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("insertThroughPut:");
    sb.append(this.insertThroughPut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateThroughPut:");
    sb.append(this.updateThroughPut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deleteThroughPut:");
    sb.append(this.deleteThroughPut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("connUsedPercent:");
    sb.append(this.connUsedPercent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cacheUsedPercent:");
    sb.append(this.cacheUsedPercent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cacheHits:");
    sb.append(this.cacheHits);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cacheQueries:");
    sb.append(this.cacheQueries);
    first = false;
    if (!first) sb.append(", ");
    sb.append("indexCacheHits:");
    sb.append(this.indexCacheHits);
    first = false;
    if (!first) sb.append(", ");
    sb.append("indexReadStatis:");
    sb.append(this.indexReadStatis);
    first = false;
    if (!first) sb.append(", ");
    sb.append("connThroughPut:");
    sb.append(this.connThroughPut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("connCacheHits:");
    sb.append(this.connCacheHits);
    first = false;
    if (!first) sb.append(", ");
    sb.append("concurrentConn:");
    sb.append(this.concurrentConn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("trafficStatis:");
    sb.append(this.trafficStatis);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lockStatis:");
    sb.append(this.lockStatis);
    first = false;
    if (isSetFlag()) {
      if (!first) sb.append(", ");
      sb.append("flag:");
      if (this.flag == null) {
        sb.append("null");
      } else {
        sb.append(this.flag);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MysqlClusterEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MysqlClusterEntityStandardScheme getScheme() {
      return new MysqlClusterEntityStandardScheme();
    }
  }

  private static class MysqlClusterEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<MysqlClusterEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MysqlClusterEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostName = iprot.readString();
              struct.setHostNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interval = iprot.readI32();
              struct.setIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SELECT_THROUGH_PUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.selectThroughPut = iprot.readI32();
              struct.setSelectThroughPutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INSERT_THROUGH_PUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.insertThroughPut = iprot.readI32();
              struct.setInsertThroughPutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATE_THROUGH_PUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateThroughPut = iprot.readI32();
              struct.setUpdateThroughPutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DELETE_THROUGH_PUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deleteThroughPut = iprot.readI32();
              struct.setDeleteThroughPutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CONN_USED_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.connUsedPercent = iprot.readDouble();
              struct.setConnUsedPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CACHE_USED_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cacheUsedPercent = iprot.readDouble();
              struct.setCacheUsedPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CACHE_HITS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cacheHits = iprot.readDouble();
              struct.setCacheHitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CACHE_QUERIES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cacheQueries = iprot.readI32();
              struct.setCacheQueriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // INDEX_CACHE_HITS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.indexCacheHits = iprot.readDouble();
              struct.setIndexCacheHitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // INDEX_READ_STATIS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.indexReadStatis = iprot.readI32();
              struct.setIndexReadStatisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CONN_THROUGH_PUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.connThroughPut = iprot.readI32();
              struct.setConnThroughPutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CONN_CACHE_HITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.connCacheHits = iprot.readI32();
              struct.setConnCacheHitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CONCURRENT_CONN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.concurrentConn = iprot.readI32();
              struct.setConcurrentConnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TRAFFIC_STATIS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.trafficStatis = iprot.readI64();
              struct.setTrafficStatisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LOCK_STATIS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lockStatis = iprot.readI32();
              struct.setLockStatisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flag = iprot.readString();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MysqlClusterEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hostName != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(struct.hostName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.port);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.interval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELECT_THROUGH_PUT_FIELD_DESC);
      oprot.writeI32(struct.selectThroughPut);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INSERT_THROUGH_PUT_FIELD_DESC);
      oprot.writeI32(struct.insertThroughPut);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_THROUGH_PUT_FIELD_DESC);
      oprot.writeI32(struct.updateThroughPut);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELETE_THROUGH_PUT_FIELD_DESC);
      oprot.writeI32(struct.deleteThroughPut);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONN_USED_PERCENT_FIELD_DESC);
      oprot.writeDouble(struct.connUsedPercent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CACHE_USED_PERCENT_FIELD_DESC);
      oprot.writeDouble(struct.cacheUsedPercent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CACHE_HITS_FIELD_DESC);
      oprot.writeDouble(struct.cacheHits);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CACHE_QUERIES_FIELD_DESC);
      oprot.writeI32(struct.cacheQueries);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INDEX_CACHE_HITS_FIELD_DESC);
      oprot.writeDouble(struct.indexCacheHits);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INDEX_READ_STATIS_FIELD_DESC);
      oprot.writeI32(struct.indexReadStatis);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONN_THROUGH_PUT_FIELD_DESC);
      oprot.writeI32(struct.connThroughPut);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONN_CACHE_HITS_FIELD_DESC);
      oprot.writeI32(struct.connCacheHits);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONCURRENT_CONN_FIELD_DESC);
      oprot.writeI32(struct.concurrentConn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRAFFIC_STATIS_FIELD_DESC);
      oprot.writeI64(struct.trafficStatis);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCK_STATIS_FIELD_DESC);
      oprot.writeI32(struct.lockStatis);
      oprot.writeFieldEnd();
      if (struct.flag != null) {
        if (struct.isSetFlag()) {
          oprot.writeFieldBegin(FLAG_FIELD_DESC);
          oprot.writeString(struct.flag);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MysqlClusterEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MysqlClusterEntityTupleScheme getScheme() {
      return new MysqlClusterEntityTupleScheme();
    }
  }

  private static class MysqlClusterEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<MysqlClusterEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MysqlClusterEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHostName()) {
        optionals.set(0);
      }
      if (struct.isSetPort()) {
        optionals.set(1);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetInterval()) {
        optionals.set(3);
      }
      if (struct.isSetSelectThroughPut()) {
        optionals.set(4);
      }
      if (struct.isSetInsertThroughPut()) {
        optionals.set(5);
      }
      if (struct.isSetUpdateThroughPut()) {
        optionals.set(6);
      }
      if (struct.isSetDeleteThroughPut()) {
        optionals.set(7);
      }
      if (struct.isSetConnUsedPercent()) {
        optionals.set(8);
      }
      if (struct.isSetCacheUsedPercent()) {
        optionals.set(9);
      }
      if (struct.isSetCacheHits()) {
        optionals.set(10);
      }
      if (struct.isSetCacheQueries()) {
        optionals.set(11);
      }
      if (struct.isSetIndexCacheHits()) {
        optionals.set(12);
      }
      if (struct.isSetIndexReadStatis()) {
        optionals.set(13);
      }
      if (struct.isSetConnThroughPut()) {
        optionals.set(14);
      }
      if (struct.isSetConnCacheHits()) {
        optionals.set(15);
      }
      if (struct.isSetConcurrentConn()) {
        optionals.set(16);
      }
      if (struct.isSetTrafficStatis()) {
        optionals.set(17);
      }
      if (struct.isSetLockStatis()) {
        optionals.set(18);
      }
      if (struct.isSetFlag()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetHostName()) {
        oprot.writeString(struct.hostName);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetInterval()) {
        oprot.writeI32(struct.interval);
      }
      if (struct.isSetSelectThroughPut()) {
        oprot.writeI32(struct.selectThroughPut);
      }
      if (struct.isSetInsertThroughPut()) {
        oprot.writeI32(struct.insertThroughPut);
      }
      if (struct.isSetUpdateThroughPut()) {
        oprot.writeI32(struct.updateThroughPut);
      }
      if (struct.isSetDeleteThroughPut()) {
        oprot.writeI32(struct.deleteThroughPut);
      }
      if (struct.isSetConnUsedPercent()) {
        oprot.writeDouble(struct.connUsedPercent);
      }
      if (struct.isSetCacheUsedPercent()) {
        oprot.writeDouble(struct.cacheUsedPercent);
      }
      if (struct.isSetCacheHits()) {
        oprot.writeDouble(struct.cacheHits);
      }
      if (struct.isSetCacheQueries()) {
        oprot.writeI32(struct.cacheQueries);
      }
      if (struct.isSetIndexCacheHits()) {
        oprot.writeDouble(struct.indexCacheHits);
      }
      if (struct.isSetIndexReadStatis()) {
        oprot.writeI32(struct.indexReadStatis);
      }
      if (struct.isSetConnThroughPut()) {
        oprot.writeI32(struct.connThroughPut);
      }
      if (struct.isSetConnCacheHits()) {
        oprot.writeI32(struct.connCacheHits);
      }
      if (struct.isSetConcurrentConn()) {
        oprot.writeI32(struct.concurrentConn);
      }
      if (struct.isSetTrafficStatis()) {
        oprot.writeI64(struct.trafficStatis);
      }
      if (struct.isSetLockStatis()) {
        oprot.writeI32(struct.lockStatis);
      }
      if (struct.isSetFlag()) {
        oprot.writeString(struct.flag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MysqlClusterEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.hostName = iprot.readString();
        struct.setHostNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.interval = iprot.readI32();
        struct.setIntervalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.selectThroughPut = iprot.readI32();
        struct.setSelectThroughPutIsSet(true);
      }
      if (incoming.get(5)) {
        struct.insertThroughPut = iprot.readI32();
        struct.setInsertThroughPutIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updateThroughPut = iprot.readI32();
        struct.setUpdateThroughPutIsSet(true);
      }
      if (incoming.get(7)) {
        struct.deleteThroughPut = iprot.readI32();
        struct.setDeleteThroughPutIsSet(true);
      }
      if (incoming.get(8)) {
        struct.connUsedPercent = iprot.readDouble();
        struct.setConnUsedPercentIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cacheUsedPercent = iprot.readDouble();
        struct.setCacheUsedPercentIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cacheHits = iprot.readDouble();
        struct.setCacheHitsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cacheQueries = iprot.readI32();
        struct.setCacheQueriesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.indexCacheHits = iprot.readDouble();
        struct.setIndexCacheHitsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.indexReadStatis = iprot.readI32();
        struct.setIndexReadStatisIsSet(true);
      }
      if (incoming.get(14)) {
        struct.connThroughPut = iprot.readI32();
        struct.setConnThroughPutIsSet(true);
      }
      if (incoming.get(15)) {
        struct.connCacheHits = iprot.readI32();
        struct.setConnCacheHitsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.concurrentConn = iprot.readI32();
        struct.setConcurrentConnIsSet(true);
      }
      if (incoming.get(17)) {
        struct.trafficStatis = iprot.readI64();
        struct.setTrafficStatisIsSet(true);
      }
      if (incoming.get(18)) {
        struct.lockStatis = iprot.readI32();
        struct.setLockStatisIsSet(true);
      }
      if (incoming.get(19)) {
        struct.flag = iprot.readString();
        struct.setFlagIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

