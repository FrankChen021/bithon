/**
 * Autogenerated by Thrift Compiler (0.11.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * **************************  Channel Metrics收集  ***********************
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class ChannelEntity implements org.apache.thrift.TBase<ChannelEntity, ChannelEntity._Fields>, java.io.Serializable, Cloneable, Comparable<ChannelEntity> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChannelEntity");

    private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short) 4);
    private static final org.apache.thrift.protocol.TField CHANNEL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelCode", org.apache.thrift.protocol.TType.STRING, (short) 5);
    private static final org.apache.thrift.protocol.TField STATUS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusCode", org.apache.thrift.protocol.TType.STRING, (short) 6);
    private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short) 7);
    private static final org.apache.thrift.protocol.TField REQUEST_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestCount", org.apache.thrift.protocol.TType.I64, (short) 8);
    private static final org.apache.thrift.protocol.TField FAILURE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("failureCount", org.apache.thrift.protocol.TType.I64, (short) 9);
    private static final org.apache.thrift.protocol.TField COST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("costTime", org.apache.thrift.protocol.TType.I64, (short) 10);
    private static final org.apache.thrift.protocol.TField RECHARGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("rechargeCount", org.apache.thrift.protocol.TType.I64, (short) 11);
    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short) 12);
    private static final org.apache.thrift.protocol.TField CHANNEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("channelName", org.apache.thrift.protocol.TType.STRING, (short) 13);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ChannelEntityStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ChannelEntityTupleSchemeFactory();

    public String appName; // required
    public String hostName; // required
    public int port; // required
    public long timestamp; // required
    public String channelCode; // required
    public String statusCode; // required
    public int interval; // required
    public long requestCount; // required
    public long failureCount; // required
    public long costTime; // required
    public long rechargeCount; // required
    public String category; // optional
    public String channelName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        APP_NAME((short) 1, "appName"),
        HOST_NAME((short) 2, "hostName"),
        PORT((short) 3, "port"),
        TIMESTAMP((short) 4, "timestamp"),
        CHANNEL_CODE((short) 5, "channelCode"),
        STATUS_CODE((short) 6, "statusCode"),
        INTERVAL((short) 7, "interval"),
        REQUEST_COUNT((short) 8, "requestCount"),
        FAILURE_COUNT((short) 9, "failureCount"),
        COST_TIME((short) 10, "costTime"),
        RECHARGE_COUNT((short) 11, "rechargeCount"),
        CATEGORY((short) 12, "category"),
        CHANNEL_NAME((short) 13, "channelName");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // APP_NAME
                    return APP_NAME;
                case 2: // HOST_NAME
                    return HOST_NAME;
                case 3: // PORT
                    return PORT;
                case 4: // TIMESTAMP
                    return TIMESTAMP;
                case 5: // CHANNEL_CODE
                    return CHANNEL_CODE;
                case 6: // STATUS_CODE
                    return STATUS_CODE;
                case 7: // INTERVAL
                    return INTERVAL;
                case 8: // REQUEST_COUNT
                    return REQUEST_COUNT;
                case 9: // FAILURE_COUNT
                    return FAILURE_COUNT;
                case 10: // COST_TIME
                    return COST_TIME;
                case 11: // RECHARGE_COUNT
                    return RECHARGE_COUNT;
                case 12: // CATEGORY
                    return CATEGORY;
                case 13: // CHANNEL_NAME
                    return CHANNEL_NAME;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __TIMESTAMP_ISSET_ID = 1;
    private static final int __INTERVAL_ISSET_ID = 2;
    private static final int __REQUESTCOUNT_ISSET_ID = 3;
    private static final int __FAILURECOUNT_ISSET_ID = 4;
    private static final int __COSTTIME_ISSET_ID = 5;
    private static final int __RECHARGECOUNT_ISSET_ID = 6;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.CATEGORY};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                               new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.CHANNEL_CODE, new org.apache.thrift.meta_data.FieldMetaData("channelCode", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                       new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.STATUS_CODE, new org.apache.thrift.meta_data.FieldMetaData("statusCode", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.REQUEST_COUNT, new org.apache.thrift.meta_data.FieldMetaData("requestCount", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.FAILURE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("failureCount", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.COST_TIME, new org.apache.thrift.meta_data.FieldMetaData("costTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.RECHARGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("rechargeCount", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.CHANNEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("channelName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                       new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChannelEntity.class, metaDataMap);
    }

    public ChannelEntity() {
    }

    public ChannelEntity(
        String appName,
        String hostName,
        int port,
        long timestamp,
        String channelCode,
        String statusCode,
        int interval,
        long requestCount,
        long failureCount,
        long costTime,
        long rechargeCount,
        String channelName) {
        this();
        this.appName = appName;
        this.hostName = hostName;
        this.port = port;
        setPortIsSet(true);
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        this.channelCode = channelCode;
        this.statusCode = statusCode;
        this.interval = interval;
        setIntervalIsSet(true);
        this.requestCount = requestCount;
        setRequestCountIsSet(true);
        this.failureCount = failureCount;
        setFailureCountIsSet(true);
        this.costTime = costTime;
        setCostTimeIsSet(true);
        this.rechargeCount = rechargeCount;
        setRechargeCountIsSet(true);
        this.channelName = channelName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ChannelEntity(ChannelEntity other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetAppName()) {
            this.appName = other.appName;
        }
        if (other.isSetHostName()) {
            this.hostName = other.hostName;
        }
        this.port = other.port;
        this.timestamp = other.timestamp;
        if (other.isSetChannelCode()) {
            this.channelCode = other.channelCode;
        }
        if (other.isSetStatusCode()) {
            this.statusCode = other.statusCode;
        }
        this.interval = other.interval;
        this.requestCount = other.requestCount;
        this.failureCount = other.failureCount;
        this.costTime = other.costTime;
        this.rechargeCount = other.rechargeCount;
        if (other.isSetCategory()) {
            this.category = other.category;
        }
        if (other.isSetChannelName()) {
            this.channelName = other.channelName;
        }
    }

    public ChannelEntity deepCopy() {
        return new ChannelEntity(this);
    }

    @Override
    public void clear() {
        this.appName = null;
        this.hostName = null;
        setPortIsSet(false);
        this.port = 0;
        setTimestampIsSet(false);
        this.timestamp = 0;
        this.channelCode = null;
        this.statusCode = null;
        setIntervalIsSet(false);
        this.interval = 0;
        setRequestCountIsSet(false);
        this.requestCount = 0;
        setFailureCountIsSet(false);
        this.failureCount = 0;
        setCostTimeIsSet(false);
        this.costTime = 0;
        setRechargeCountIsSet(false);
        this.rechargeCount = 0;
        this.category = null;
        this.channelName = null;
    }

    public String getAppName() {
        return this.appName;
    }

    public ChannelEntity setAppName(String appName) {
        this.appName = appName;
        return this;
    }

    public void unsetAppName() {
        this.appName = null;
    }

    /** Returns true if field appName is set (has been assigned a value) and false otherwise */
    public boolean isSetAppName() {
        return this.appName != null;
    }

    public void setAppNameIsSet(boolean value) {
        if (!value) {
            this.appName = null;
        }
    }

    public String getHostName() {
        return this.hostName;
    }

    public ChannelEntity setHostName(String hostName) {
        this.hostName = hostName;
        return this;
    }

    public void unsetHostName() {
        this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
        return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
        if (!value) {
            this.hostName = null;
        }
    }

    public int getPort() {
        return this.port;
    }

    public ChannelEntity setPort(int port) {
        this.port = port;
        setPortIsSet(true);
        return this;
    }

    public void unsetPort() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public long getTimestamp() {
        return this.timestamp;
    }

    public ChannelEntity setTimestamp(long timestamp) {
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        return this;
    }

    public void unsetTimestamp() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public String getChannelCode() {
        return this.channelCode;
    }

    public ChannelEntity setChannelCode(String channelCode) {
        this.channelCode = channelCode;
        return this;
    }

    public void unsetChannelCode() {
        this.channelCode = null;
    }

    /** Returns true if field channelCode is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelCode() {
        return this.channelCode != null;
    }

    public void setChannelCodeIsSet(boolean value) {
        if (!value) {
            this.channelCode = null;
        }
    }

    public String getStatusCode() {
        return this.statusCode;
    }

    public ChannelEntity setStatusCode(String statusCode) {
        this.statusCode = statusCode;
        return this;
    }

    public void unsetStatusCode() {
        this.statusCode = null;
    }

    /** Returns true if field statusCode is set (has been assigned a value) and false otherwise */
    public boolean isSetStatusCode() {
        return this.statusCode != null;
    }

    public void setStatusCodeIsSet(boolean value) {
        if (!value) {
            this.statusCode = null;
        }
    }

    public int getInterval() {
        return this.interval;
    }

    public ChannelEntity setInterval(int interval) {
        this.interval = interval;
        setIntervalIsSet(true);
        return this;
    }

    public void unsetInterval() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
    }

    /** Returns true if field interval is set (has been assigned a value) and false otherwise */
    public boolean isSetInterval() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
    }

    public void setIntervalIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
    }

    public long getRequestCount() {
        return this.requestCount;
    }

    public ChannelEntity setRequestCount(long requestCount) {
        this.requestCount = requestCount;
        setRequestCountIsSet(true);
        return this;
    }

    public void unsetRequestCount() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTCOUNT_ISSET_ID);
    }

    /** Returns true if field requestCount is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestCount() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTCOUNT_ISSET_ID);
    }

    public void setRequestCountIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTCOUNT_ISSET_ID, value);
    }

    public long getFailureCount() {
        return this.failureCount;
    }

    public ChannelEntity setFailureCount(long failureCount) {
        this.failureCount = failureCount;
        setFailureCountIsSet(true);
        return this;
    }

    public void unsetFailureCount() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FAILURECOUNT_ISSET_ID);
    }

    /** Returns true if field failureCount is set (has been assigned a value) and false otherwise */
    public boolean isSetFailureCount() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FAILURECOUNT_ISSET_ID);
    }

    public void setFailureCountIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FAILURECOUNT_ISSET_ID, value);
    }

    public long getCostTime() {
        return this.costTime;
    }

    public ChannelEntity setCostTime(long costTime) {
        this.costTime = costTime;
        setCostTimeIsSet(true);
        return this;
    }

    public void unsetCostTime() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COSTTIME_ISSET_ID);
    }

    /** Returns true if field costTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCostTime() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COSTTIME_ISSET_ID);
    }

    public void setCostTimeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COSTTIME_ISSET_ID, value);
    }

    public long getRechargeCount() {
        return this.rechargeCount;
    }

    public ChannelEntity setRechargeCount(long rechargeCount) {
        this.rechargeCount = rechargeCount;
        setRechargeCountIsSet(true);
        return this;
    }

    public void unsetRechargeCount() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECHARGECOUNT_ISSET_ID);
    }

    /** Returns true if field rechargeCount is set (has been assigned a value) and false otherwise */
    public boolean isSetRechargeCount() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECHARGECOUNT_ISSET_ID);
    }

    public void setRechargeCountIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECHARGECOUNT_ISSET_ID, value);
    }

    public String getCategory() {
        return this.category;
    }

    public ChannelEntity setCategory(String category) {
        this.category = category;
        return this;
    }

    public void unsetCategory() {
        this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
        return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
        if (!value) {
            this.category = null;
        }
    }

    public String getChannelName() {
        return this.channelName;
    }

    public ChannelEntity setChannelName(String channelName) {
        this.channelName = channelName;
        return this;
    }

    public void unsetChannelName() {
        this.channelName = null;
    }

    /** Returns true if field channelName is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelName() {
        return this.channelName != null;
    }

    public void setChannelNameIsSet(boolean value) {
        if (!value) {
            this.channelName = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case APP_NAME:
                if (value == null) {
                    unsetAppName();
                } else {
                    setAppName((String) value);
                }
                break;

            case HOST_NAME:
                if (value == null) {
                    unsetHostName();
                } else {
                    setHostName((String) value);
                }
                break;

            case PORT:
                if (value == null) {
                    unsetPort();
                } else {
                    setPort((Integer) value);
                }
                break;

            case TIMESTAMP:
                if (value == null) {
                    unsetTimestamp();
                } else {
                    setTimestamp((Long) value);
                }
                break;

            case CHANNEL_CODE:
                if (value == null) {
                    unsetChannelCode();
                } else {
                    setChannelCode((String) value);
                }
                break;

            case STATUS_CODE:
                if (value == null) {
                    unsetStatusCode();
                } else {
                    setStatusCode((String) value);
                }
                break;

            case INTERVAL:
                if (value == null) {
                    unsetInterval();
                } else {
                    setInterval((Integer) value);
                }
                break;

            case REQUEST_COUNT:
                if (value == null) {
                    unsetRequestCount();
                } else {
                    setRequestCount((Long) value);
                }
                break;

            case FAILURE_COUNT:
                if (value == null) {
                    unsetFailureCount();
                } else {
                    setFailureCount((Long) value);
                }
                break;

            case COST_TIME:
                if (value == null) {
                    unsetCostTime();
                } else {
                    setCostTime((Long) value);
                }
                break;

            case RECHARGE_COUNT:
                if (value == null) {
                    unsetRechargeCount();
                } else {
                    setRechargeCount((Long) value);
                }
                break;

            case CATEGORY:
                if (value == null) {
                    unsetCategory();
                } else {
                    setCategory((String) value);
                }
                break;

            case CHANNEL_NAME:
                if (value == null) {
                    unsetChannelName();
                } else {
                    setChannelName((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case APP_NAME:
                return getAppName();

            case HOST_NAME:
                return getHostName();

            case PORT:
                return getPort();

            case TIMESTAMP:
                return getTimestamp();

            case CHANNEL_CODE:
                return getChannelCode();

            case STATUS_CODE:
                return getStatusCode();

            case INTERVAL:
                return getInterval();

            case REQUEST_COUNT:
                return getRequestCount();

            case FAILURE_COUNT:
                return getFailureCount();

            case COST_TIME:
                return getCostTime();

            case RECHARGE_COUNT:
                return getRechargeCount();

            case CATEGORY:
                return getCategory();

            case CHANNEL_NAME:
                return getChannelName();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case APP_NAME:
                return isSetAppName();
            case HOST_NAME:
                return isSetHostName();
            case PORT:
                return isSetPort();
            case TIMESTAMP:
                return isSetTimestamp();
            case CHANNEL_CODE:
                return isSetChannelCode();
            case STATUS_CODE:
                return isSetStatusCode();
            case INTERVAL:
                return isSetInterval();
            case REQUEST_COUNT:
                return isSetRequestCount();
            case FAILURE_COUNT:
                return isSetFailureCount();
            case COST_TIME:
                return isSetCostTime();
            case RECHARGE_COUNT:
                return isSetRechargeCount();
            case CATEGORY:
                return isSetCategory();
            case CHANNEL_NAME:
                return isSetChannelName();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof ChannelEntity)
            return this.equals((ChannelEntity) that);
        return false;
    }

    public boolean equals(ChannelEntity that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_appName = true && this.isSetAppName();
        boolean that_present_appName = true && that.isSetAppName();
        if (this_present_appName || that_present_appName) {
            if (!(this_present_appName && that_present_appName))
                return false;
            if (!this.appName.equals(that.appName))
                return false;
        }

        boolean this_present_hostName = true && this.isSetHostName();
        boolean that_present_hostName = true && that.isSetHostName();
        if (this_present_hostName || that_present_hostName) {
            if (!(this_present_hostName && that_present_hostName))
                return false;
            if (!this.hostName.equals(that.hostName))
                return false;
        }

        boolean this_present_port = true;
        boolean that_present_port = true;
        if (this_present_port || that_present_port) {
            if (!(this_present_port && that_present_port))
                return false;
            if (this.port != that.port)
                return false;
        }

        boolean this_present_timestamp = true;
        boolean that_present_timestamp = true;
        if (this_present_timestamp || that_present_timestamp) {
            if (!(this_present_timestamp && that_present_timestamp))
                return false;
            if (this.timestamp != that.timestamp)
                return false;
        }

        boolean this_present_channelCode = true && this.isSetChannelCode();
        boolean that_present_channelCode = true && that.isSetChannelCode();
        if (this_present_channelCode || that_present_channelCode) {
            if (!(this_present_channelCode && that_present_channelCode))
                return false;
            if (!this.channelCode.equals(that.channelCode))
                return false;
        }

        boolean this_present_statusCode = true && this.isSetStatusCode();
        boolean that_present_statusCode = true && that.isSetStatusCode();
        if (this_present_statusCode || that_present_statusCode) {
            if (!(this_present_statusCode && that_present_statusCode))
                return false;
            if (!this.statusCode.equals(that.statusCode))
                return false;
        }

        boolean this_present_interval = true;
        boolean that_present_interval = true;
        if (this_present_interval || that_present_interval) {
            if (!(this_present_interval && that_present_interval))
                return false;
            if (this.interval != that.interval)
                return false;
        }

        boolean this_present_requestCount = true;
        boolean that_present_requestCount = true;
        if (this_present_requestCount || that_present_requestCount) {
            if (!(this_present_requestCount && that_present_requestCount))
                return false;
            if (this.requestCount != that.requestCount)
                return false;
        }

        boolean this_present_failureCount = true;
        boolean that_present_failureCount = true;
        if (this_present_failureCount || that_present_failureCount) {
            if (!(this_present_failureCount && that_present_failureCount))
                return false;
            if (this.failureCount != that.failureCount)
                return false;
        }

        boolean this_present_costTime = true;
        boolean that_present_costTime = true;
        if (this_present_costTime || that_present_costTime) {
            if (!(this_present_costTime && that_present_costTime))
                return false;
            if (this.costTime != that.costTime)
                return false;
        }

        boolean this_present_rechargeCount = true;
        boolean that_present_rechargeCount = true;
        if (this_present_rechargeCount || that_present_rechargeCount) {
            if (!(this_present_rechargeCount && that_present_rechargeCount))
                return false;
            if (this.rechargeCount != that.rechargeCount)
                return false;
        }

        boolean this_present_category = true && this.isSetCategory();
        boolean that_present_category = true && that.isSetCategory();
        if (this_present_category || that_present_category) {
            if (!(this_present_category && that_present_category))
                return false;
            if (!this.category.equals(that.category))
                return false;
        }

        boolean this_present_channelName = true && this.isSetChannelName();
        boolean that_present_channelName = true && that.isSetChannelName();
        if (this_present_channelName || that_present_channelName) {
            if (!(this_present_channelName && that_present_channelName))
                return false;
            if (!this.channelName.equals(that.channelName))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetAppName()) ? 131071 : 524287);
        if (isSetAppName())
            hashCode = hashCode * 8191 + appName.hashCode();

        hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
        if (isSetHostName())
            hashCode = hashCode * 8191 + hostName.hashCode();

        hashCode = hashCode * 8191 + port;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

        hashCode = hashCode * 8191 + ((isSetChannelCode()) ? 131071 : 524287);
        if (isSetChannelCode())
            hashCode = hashCode * 8191 + channelCode.hashCode();

        hashCode = hashCode * 8191 + ((isSetStatusCode()) ? 131071 : 524287);
        if (isSetStatusCode())
            hashCode = hashCode * 8191 + statusCode.hashCode();

        hashCode = hashCode * 8191 + interval;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestCount);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(failureCount);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(costTime);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rechargeCount);

        hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
        if (isSetCategory())
            hashCode = hashCode * 8191 + category.hashCode();

        hashCode = hashCode * 8191 + ((isSetChannelName()) ? 131071 : 524287);
        if (isSetChannelName())
            hashCode = hashCode * 8191 + channelName.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(ChannelEntity other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAppName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHostName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPort()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTimestamp()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetChannelCode()).compareTo(other.isSetChannelCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetChannelCode()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelCode, other.channelCode);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetStatusCode()).compareTo(other.isSetStatusCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStatusCode()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusCode, other.statusCode);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetInterval()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetRequestCount()).compareTo(other.isSetRequestCount());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRequestCount()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestCount, other.requestCount);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetFailureCount()).compareTo(other.isSetFailureCount());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFailureCount()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failureCount, other.failureCount);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCostTime()).compareTo(other.isSetCostTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCostTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costTime, other.costTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetRechargeCount()).compareTo(other.isSetRechargeCount());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRechargeCount()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rechargeCount, other.rechargeCount);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCategory()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetChannelName()).compareTo(other.isSetChannelName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetChannelName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelName, other.channelName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ChannelEntity(");
        boolean first = true;

        sb.append("appName:");
        if (this.appName == null) {
            sb.append("null");
        } else {
            sb.append(this.appName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("hostName:");
        if (this.hostName == null) {
            sb.append("null");
        } else {
            sb.append(this.hostName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("port:");
        sb.append(this.port);
        first = false;
        if (!first) sb.append(", ");
        sb.append("timestamp:");
        sb.append(this.timestamp);
        first = false;
        if (!first) sb.append(", ");
        sb.append("channelCode:");
        if (this.channelCode == null) {
            sb.append("null");
        } else {
            sb.append(this.channelCode);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("statusCode:");
        if (this.statusCode == null) {
            sb.append("null");
        } else {
            sb.append(this.statusCode);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("interval:");
        sb.append(this.interval);
        first = false;
        if (!first) sb.append(", ");
        sb.append("requestCount:");
        sb.append(this.requestCount);
        first = false;
        if (!first) sb.append(", ");
        sb.append("failureCount:");
        sb.append(this.failureCount);
        first = false;
        if (!first) sb.append(", ");
        sb.append("costTime:");
        sb.append(this.costTime);
        first = false;
        if (!first) sb.append(", ");
        sb.append("rechargeCount:");
        sb.append(this.rechargeCount);
        first = false;
        if (isSetCategory()) {
            if (!first) sb.append(", ");
            sb.append("category:");
            if (this.category == null) {
                sb.append("null");
            } else {
                sb.append(this.category);
            }
            first = false;
        }
        if (!first) sb.append(", ");
        sb.append("channelName:");
        if (this.channelName == null) {
            sb.append("null");
        } else {
            sb.append(this.channelName);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ChannelEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ChannelEntityStandardScheme getScheme() {
            return new ChannelEntityStandardScheme();
        }
    }

    private static class ChannelEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<ChannelEntity> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ChannelEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // APP_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.appName = iprot.readString();
                            struct.setAppNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // HOST_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.hostName = iprot.readString();
                            struct.setHostNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // PORT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.port = iprot.readI32();
                            struct.setPortIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // TIMESTAMP
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.timestamp = iprot.readI64();
                            struct.setTimestampIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // CHANNEL_CODE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.channelCode = iprot.readString();
                            struct.setChannelCodeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // STATUS_CODE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.statusCode = iprot.readString();
                            struct.setStatusCodeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // INTERVAL
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.interval = iprot.readI32();
                            struct.setIntervalIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // REQUEST_COUNT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.requestCount = iprot.readI64();
                            struct.setRequestCountIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // FAILURE_COUNT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.failureCount = iprot.readI64();
                            struct.setFailureCountIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // COST_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.costTime = iprot.readI64();
                            struct.setCostTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // RECHARGE_COUNT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.rechargeCount = iprot.readI64();
                            struct.setRechargeCountIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 12: // CATEGORY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.category = iprot.readString();
                            struct.setCategoryIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 13: // CHANNEL_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.channelName = iprot.readString();
                            struct.setChannelNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ChannelEntity struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.appName != null) {
                oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
                oprot.writeString(struct.appName);
                oprot.writeFieldEnd();
            }
            if (struct.hostName != null) {
                oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
                oprot.writeString(struct.hostName);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(PORT_FIELD_DESC);
            oprot.writeI32(struct.port);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
            oprot.writeI64(struct.timestamp);
            oprot.writeFieldEnd();
            if (struct.channelCode != null) {
                oprot.writeFieldBegin(CHANNEL_CODE_FIELD_DESC);
                oprot.writeString(struct.channelCode);
                oprot.writeFieldEnd();
            }
            if (struct.statusCode != null) {
                oprot.writeFieldBegin(STATUS_CODE_FIELD_DESC);
                oprot.writeString(struct.statusCode);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
            oprot.writeI32(struct.interval);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(REQUEST_COUNT_FIELD_DESC);
            oprot.writeI64(struct.requestCount);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(FAILURE_COUNT_FIELD_DESC);
            oprot.writeI64(struct.failureCount);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(COST_TIME_FIELD_DESC);
            oprot.writeI64(struct.costTime);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(RECHARGE_COUNT_FIELD_DESC);
            oprot.writeI64(struct.rechargeCount);
            oprot.writeFieldEnd();
            if (struct.category != null) {
                if (struct.isSetCategory()) {
                    oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
                    oprot.writeString(struct.category);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.channelName != null) {
                oprot.writeFieldBegin(CHANNEL_NAME_FIELD_DESC);
                oprot.writeString(struct.channelName);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ChannelEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ChannelEntityTupleScheme getScheme() {
            return new ChannelEntityTupleScheme();
        }
    }

    private static class ChannelEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<ChannelEntity> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ChannelEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetAppName()) {
                optionals.set(0);
            }
            if (struct.isSetHostName()) {
                optionals.set(1);
            }
            if (struct.isSetPort()) {
                optionals.set(2);
            }
            if (struct.isSetTimestamp()) {
                optionals.set(3);
            }
            if (struct.isSetChannelCode()) {
                optionals.set(4);
            }
            if (struct.isSetStatusCode()) {
                optionals.set(5);
            }
            if (struct.isSetInterval()) {
                optionals.set(6);
            }
            if (struct.isSetRequestCount()) {
                optionals.set(7);
            }
            if (struct.isSetFailureCount()) {
                optionals.set(8);
            }
            if (struct.isSetCostTime()) {
                optionals.set(9);
            }
            if (struct.isSetRechargeCount()) {
                optionals.set(10);
            }
            if (struct.isSetCategory()) {
                optionals.set(11);
            }
            if (struct.isSetChannelName()) {
                optionals.set(12);
            }
            oprot.writeBitSet(optionals, 13);
            if (struct.isSetAppName()) {
                oprot.writeString(struct.appName);
            }
            if (struct.isSetHostName()) {
                oprot.writeString(struct.hostName);
            }
            if (struct.isSetPort()) {
                oprot.writeI32(struct.port);
            }
            if (struct.isSetTimestamp()) {
                oprot.writeI64(struct.timestamp);
            }
            if (struct.isSetChannelCode()) {
                oprot.writeString(struct.channelCode);
            }
            if (struct.isSetStatusCode()) {
                oprot.writeString(struct.statusCode);
            }
            if (struct.isSetInterval()) {
                oprot.writeI32(struct.interval);
            }
            if (struct.isSetRequestCount()) {
                oprot.writeI64(struct.requestCount);
            }
            if (struct.isSetFailureCount()) {
                oprot.writeI64(struct.failureCount);
            }
            if (struct.isSetCostTime()) {
                oprot.writeI64(struct.costTime);
            }
            if (struct.isSetRechargeCount()) {
                oprot.writeI64(struct.rechargeCount);
            }
            if (struct.isSetCategory()) {
                oprot.writeString(struct.category);
            }
            if (struct.isSetChannelName()) {
                oprot.writeString(struct.channelName);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ChannelEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(13);
            if (incoming.get(0)) {
                struct.appName = iprot.readString();
                struct.setAppNameIsSet(true);
            }
            if (incoming.get(1)) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
            }
            if (incoming.get(2)) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
            }
            if (incoming.get(3)) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
            }
            if (incoming.get(4)) {
                struct.channelCode = iprot.readString();
                struct.setChannelCodeIsSet(true);
            }
            if (incoming.get(5)) {
                struct.statusCode = iprot.readString();
                struct.setStatusCodeIsSet(true);
            }
            if (incoming.get(6)) {
                struct.interval = iprot.readI32();
                struct.setIntervalIsSet(true);
            }
            if (incoming.get(7)) {
                struct.requestCount = iprot.readI64();
                struct.setRequestCountIsSet(true);
            }
            if (incoming.get(8)) {
                struct.failureCount = iprot.readI64();
                struct.setFailureCountIsSet(true);
            }
            if (incoming.get(9)) {
                struct.costTime = iprot.readI64();
                struct.setCostTimeIsSet(true);
            }
            if (incoming.get(10)) {
                struct.rechargeCount = iprot.readI64();
                struct.setRechargeCountIsSet(true);
            }
            if (incoming.get(11)) {
                struct.category = iprot.readString();
                struct.setCategoryIsSet(true);
            }
            if (incoming.get(12)) {
                struct.channelName = iprot.readString();
                struct.setChannelNameIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

