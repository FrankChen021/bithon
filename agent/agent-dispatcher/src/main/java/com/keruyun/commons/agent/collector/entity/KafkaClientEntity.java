/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class KafkaClientEntity implements org.apache.thrift.TBase<KafkaClientEntity, KafkaClientEntity._Fields>, java.io.Serializable, Cloneable, Comparable<KafkaClientEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KafkaClientEntity");

  private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CONSUMER_ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("consumerEntities", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CONSUMER_TOPIC_ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("consumerTopicEntities", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField CONSUMER_NETWORK_ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("consumerNetworkEntities", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField PRODUCER_ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("producerEntities", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField PRODUCER_TOPIC_ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("producerTopicEntities", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField PRODUCER_NODE_NETWORK_ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("producerNodeNetworkEntities", org.apache.thrift.protocol.TType.LIST, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KafkaClientEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KafkaClientEntityTupleSchemeFactory();

  public String appName; // required
  public String hostName; // required
  public int port; // required
  public long timestamp; // required
  public int interval; // required
  public java.util.List<KafkaConsumerClientEntity> consumerEntities; // required
  public java.util.List<KafkaConsumerTopicEntity> consumerTopicEntities; // required
  public java.util.List<KafkaClientNodeNetworkEntities> consumerNetworkEntities; // required
  public java.util.List<KafkaProducerClientEntity> producerEntities; // required
  public java.util.List<KafkaProducerTopicEntity> producerTopicEntities; // required
  public java.util.List<KafkaClientNodeNetworkEntities> producerNodeNetworkEntities; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP_NAME((short)1, "appName"),
    HOST_NAME((short)2, "hostName"),
    PORT((short)3, "port"),
    TIMESTAMP((short)4, "timestamp"),
    INTERVAL((short)5, "interval"),
    CONSUMER_ENTITIES((short)6, "consumerEntities"),
    CONSUMER_TOPIC_ENTITIES((short)7, "consumerTopicEntities"),
    CONSUMER_NETWORK_ENTITIES((short)8, "consumerNetworkEntities"),
    PRODUCER_ENTITIES((short)9, "producerEntities"),
    PRODUCER_TOPIC_ENTITIES((short)10, "producerTopicEntities"),
    PRODUCER_NODE_NETWORK_ENTITIES((short)11, "producerNodeNetworkEntities");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_NAME
          return APP_NAME;
        case 2: // HOST_NAME
          return HOST_NAME;
        case 3: // PORT
          return PORT;
        case 4: // TIMESTAMP
          return TIMESTAMP;
        case 5: // INTERVAL
          return INTERVAL;
        case 6: // CONSUMER_ENTITIES
          return CONSUMER_ENTITIES;
        case 7: // CONSUMER_TOPIC_ENTITIES
          return CONSUMER_TOPIC_ENTITIES;
        case 8: // CONSUMER_NETWORK_ENTITIES
          return CONSUMER_NETWORK_ENTITIES;
        case 9: // PRODUCER_ENTITIES
          return PRODUCER_ENTITIES;
        case 10: // PRODUCER_TOPIC_ENTITIES
          return PRODUCER_TOPIC_ENTITIES;
        case 11: // PRODUCER_NODE_NETWORK_ENTITIES
          return PRODUCER_NODE_NETWORK_ENTITIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private static final int __TIMESTAMP_ISSET_ID = 1;
  private static final int __INTERVAL_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONSUMER_ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("consumerEntities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KafkaConsumerClientEntity.class))));
    tmpMap.put(_Fields.CONSUMER_TOPIC_ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("consumerTopicEntities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KafkaConsumerTopicEntity.class))));
    tmpMap.put(_Fields.CONSUMER_NETWORK_ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("consumerNetworkEntities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KafkaClientNodeNetworkEntities.class))));
    tmpMap.put(_Fields.PRODUCER_ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("producerEntities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KafkaProducerClientEntity.class))));
    tmpMap.put(_Fields.PRODUCER_TOPIC_ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("producerTopicEntities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KafkaProducerTopicEntity.class))));
    tmpMap.put(_Fields.PRODUCER_NODE_NETWORK_ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("producerNodeNetworkEntities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KafkaClientNodeNetworkEntities.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KafkaClientEntity.class, metaDataMap);
  }

  public KafkaClientEntity() {
  }

  public KafkaClientEntity(
    String appName,
    String hostName,
    int port,
    long timestamp,
    int interval,
    java.util.List<KafkaConsumerClientEntity> consumerEntities,
    java.util.List<KafkaConsumerTopicEntity> consumerTopicEntities,
    java.util.List<KafkaClientNodeNetworkEntities> consumerNetworkEntities,
    java.util.List<KafkaProducerClientEntity> producerEntities,
    java.util.List<KafkaProducerTopicEntity> producerTopicEntities,
    java.util.List<KafkaClientNodeNetworkEntities> producerNodeNetworkEntities)
  {
    this();
    this.appName = appName;
    this.hostName = hostName;
    this.port = port;
    setPortIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.interval = interval;
    setIntervalIsSet(true);
    this.consumerEntities = consumerEntities;
    this.consumerTopicEntities = consumerTopicEntities;
    this.consumerNetworkEntities = consumerNetworkEntities;
    this.producerEntities = producerEntities;
    this.producerTopicEntities = producerTopicEntities;
    this.producerNodeNetworkEntities = producerNodeNetworkEntities;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KafkaClientEntity(KafkaClientEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAppName()) {
      this.appName = other.appName;
    }
    if (other.isSetHostName()) {
      this.hostName = other.hostName;
    }
    this.port = other.port;
    this.timestamp = other.timestamp;
    this.interval = other.interval;
    if (other.isSetConsumerEntities()) {
      java.util.List<KafkaConsumerClientEntity> __this__consumerEntities = new java.util.ArrayList<KafkaConsumerClientEntity>(other.consumerEntities.size());
      for (KafkaConsumerClientEntity other_element : other.consumerEntities) {
        __this__consumerEntities.add(new KafkaConsumerClientEntity(other_element));
      }
      this.consumerEntities = __this__consumerEntities;
    }
    if (other.isSetConsumerTopicEntities()) {
      java.util.List<KafkaConsumerTopicEntity> __this__consumerTopicEntities = new java.util.ArrayList<KafkaConsumerTopicEntity>(other.consumerTopicEntities.size());
      for (KafkaConsumerTopicEntity other_element : other.consumerTopicEntities) {
        __this__consumerTopicEntities.add(new KafkaConsumerTopicEntity(other_element));
      }
      this.consumerTopicEntities = __this__consumerTopicEntities;
    }
    if (other.isSetConsumerNetworkEntities()) {
      java.util.List<KafkaClientNodeNetworkEntities> __this__consumerNetworkEntities = new java.util.ArrayList<KafkaClientNodeNetworkEntities>(other.consumerNetworkEntities.size());
      for (KafkaClientNodeNetworkEntities other_element : other.consumerNetworkEntities) {
        __this__consumerNetworkEntities.add(new KafkaClientNodeNetworkEntities(other_element));
      }
      this.consumerNetworkEntities = __this__consumerNetworkEntities;
    }
    if (other.isSetProducerEntities()) {
      java.util.List<KafkaProducerClientEntity> __this__producerEntities = new java.util.ArrayList<KafkaProducerClientEntity>(other.producerEntities.size());
      for (KafkaProducerClientEntity other_element : other.producerEntities) {
        __this__producerEntities.add(new KafkaProducerClientEntity(other_element));
      }
      this.producerEntities = __this__producerEntities;
    }
    if (other.isSetProducerTopicEntities()) {
      java.util.List<KafkaProducerTopicEntity> __this__producerTopicEntities = new java.util.ArrayList<KafkaProducerTopicEntity>(other.producerTopicEntities.size());
      for (KafkaProducerTopicEntity other_element : other.producerTopicEntities) {
        __this__producerTopicEntities.add(new KafkaProducerTopicEntity(other_element));
      }
      this.producerTopicEntities = __this__producerTopicEntities;
    }
    if (other.isSetProducerNodeNetworkEntities()) {
      java.util.List<KafkaClientNodeNetworkEntities> __this__producerNodeNetworkEntities = new java.util.ArrayList<KafkaClientNodeNetworkEntities>(other.producerNodeNetworkEntities.size());
      for (KafkaClientNodeNetworkEntities other_element : other.producerNodeNetworkEntities) {
        __this__producerNodeNetworkEntities.add(new KafkaClientNodeNetworkEntities(other_element));
      }
      this.producerNodeNetworkEntities = __this__producerNodeNetworkEntities;
    }
  }

  public KafkaClientEntity deepCopy() {
    return new KafkaClientEntity(this);
  }

  @Override
  public void clear() {
    this.appName = null;
    this.hostName = null;
    setPortIsSet(false);
    this.port = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setIntervalIsSet(false);
    this.interval = 0;
    this.consumerEntities = null;
    this.consumerTopicEntities = null;
    this.consumerNetworkEntities = null;
    this.producerEntities = null;
    this.producerTopicEntities = null;
    this.producerNodeNetworkEntities = null;
  }

  public String getAppName() {
    return this.appName;
  }

  public KafkaClientEntity setAppName(String appName) {
    this.appName = appName;
    return this;
  }

  public void unsetAppName() {
    this.appName = null;
  }

  /** Returns true if field appName is set (has been assigned a value) and false otherwise */
  public boolean isSetAppName() {
    return this.appName != null;
  }

  public void setAppNameIsSet(boolean value) {
    if (!value) {
      this.appName = null;
    }
  }

  public String getHostName() {
    return this.hostName;
  }

  public KafkaClientEntity setHostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  public void unsetHostName() {
    this.hostName = null;
  }

  /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
  public boolean isSetHostName() {
    return this.hostName != null;
  }

  public void setHostNameIsSet(boolean value) {
    if (!value) {
      this.hostName = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public KafkaClientEntity setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public KafkaClientEntity setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getInterval() {
    return this.interval;
  }

  public KafkaClientEntity setInterval(int interval) {
    this.interval = interval;
    setIntervalIsSet(true);
    return this;
  }

  public void unsetInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  /** Returns true if field interval is set (has been assigned a value) and false otherwise */
  public boolean isSetInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  public void setIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
  }

  public int getConsumerEntitiesSize() {
    return (this.consumerEntities == null) ? 0 : this.consumerEntities.size();
  }

  public java.util.Iterator<KafkaConsumerClientEntity> getConsumerEntitiesIterator() {
    return (this.consumerEntities == null) ? null : this.consumerEntities.iterator();
  }

  public void addToConsumerEntities(KafkaConsumerClientEntity elem) {
    if (this.consumerEntities == null) {
      this.consumerEntities = new java.util.ArrayList<KafkaConsumerClientEntity>();
    }
    this.consumerEntities.add(elem);
  }

  public java.util.List<KafkaConsumerClientEntity> getConsumerEntities() {
    return this.consumerEntities;
  }

  public KafkaClientEntity setConsumerEntities(java.util.List<KafkaConsumerClientEntity> consumerEntities) {
    this.consumerEntities = consumerEntities;
    return this;
  }

  public void unsetConsumerEntities() {
    this.consumerEntities = null;
  }

  /** Returns true if field consumerEntities is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumerEntities() {
    return this.consumerEntities != null;
  }

  public void setConsumerEntitiesIsSet(boolean value) {
    if (!value) {
      this.consumerEntities = null;
    }
  }

  public int getConsumerTopicEntitiesSize() {
    return (this.consumerTopicEntities == null) ? 0 : this.consumerTopicEntities.size();
  }

  public java.util.Iterator<KafkaConsumerTopicEntity> getConsumerTopicEntitiesIterator() {
    return (this.consumerTopicEntities == null) ? null : this.consumerTopicEntities.iterator();
  }

  public void addToConsumerTopicEntities(KafkaConsumerTopicEntity elem) {
    if (this.consumerTopicEntities == null) {
      this.consumerTopicEntities = new java.util.ArrayList<KafkaConsumerTopicEntity>();
    }
    this.consumerTopicEntities.add(elem);
  }

  public java.util.List<KafkaConsumerTopicEntity> getConsumerTopicEntities() {
    return this.consumerTopicEntities;
  }

  public KafkaClientEntity setConsumerTopicEntities(java.util.List<KafkaConsumerTopicEntity> consumerTopicEntities) {
    this.consumerTopicEntities = consumerTopicEntities;
    return this;
  }

  public void unsetConsumerTopicEntities() {
    this.consumerTopicEntities = null;
  }

  /** Returns true if field consumerTopicEntities is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumerTopicEntities() {
    return this.consumerTopicEntities != null;
  }

  public void setConsumerTopicEntitiesIsSet(boolean value) {
    if (!value) {
      this.consumerTopicEntities = null;
    }
  }

  public int getConsumerNetworkEntitiesSize() {
    return (this.consumerNetworkEntities == null) ? 0 : this.consumerNetworkEntities.size();
  }

  public java.util.Iterator<KafkaClientNodeNetworkEntities> getConsumerNetworkEntitiesIterator() {
    return (this.consumerNetworkEntities == null) ? null : this.consumerNetworkEntities.iterator();
  }

  public void addToConsumerNetworkEntities(KafkaClientNodeNetworkEntities elem) {
    if (this.consumerNetworkEntities == null) {
      this.consumerNetworkEntities = new java.util.ArrayList<KafkaClientNodeNetworkEntities>();
    }
    this.consumerNetworkEntities.add(elem);
  }

  public java.util.List<KafkaClientNodeNetworkEntities> getConsumerNetworkEntities() {
    return this.consumerNetworkEntities;
  }

  public KafkaClientEntity setConsumerNetworkEntities(java.util.List<KafkaClientNodeNetworkEntities> consumerNetworkEntities) {
    this.consumerNetworkEntities = consumerNetworkEntities;
    return this;
  }

  public void unsetConsumerNetworkEntities() {
    this.consumerNetworkEntities = null;
  }

  /** Returns true if field consumerNetworkEntities is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumerNetworkEntities() {
    return this.consumerNetworkEntities != null;
  }

  public void setConsumerNetworkEntitiesIsSet(boolean value) {
    if (!value) {
      this.consumerNetworkEntities = null;
    }
  }

  public int getProducerEntitiesSize() {
    return (this.producerEntities == null) ? 0 : this.producerEntities.size();
  }

  public java.util.Iterator<KafkaProducerClientEntity> getProducerEntitiesIterator() {
    return (this.producerEntities == null) ? null : this.producerEntities.iterator();
  }

  public void addToProducerEntities(KafkaProducerClientEntity elem) {
    if (this.producerEntities == null) {
      this.producerEntities = new java.util.ArrayList<KafkaProducerClientEntity>();
    }
    this.producerEntities.add(elem);
  }

  public java.util.List<KafkaProducerClientEntity> getProducerEntities() {
    return this.producerEntities;
  }

  public KafkaClientEntity setProducerEntities(java.util.List<KafkaProducerClientEntity> producerEntities) {
    this.producerEntities = producerEntities;
    return this;
  }

  public void unsetProducerEntities() {
    this.producerEntities = null;
  }

  /** Returns true if field producerEntities is set (has been assigned a value) and false otherwise */
  public boolean isSetProducerEntities() {
    return this.producerEntities != null;
  }

  public void setProducerEntitiesIsSet(boolean value) {
    if (!value) {
      this.producerEntities = null;
    }
  }

  public int getProducerTopicEntitiesSize() {
    return (this.producerTopicEntities == null) ? 0 : this.producerTopicEntities.size();
  }

  public java.util.Iterator<KafkaProducerTopicEntity> getProducerTopicEntitiesIterator() {
    return (this.producerTopicEntities == null) ? null : this.producerTopicEntities.iterator();
  }

  public void addToProducerTopicEntities(KafkaProducerTopicEntity elem) {
    if (this.producerTopicEntities == null) {
      this.producerTopicEntities = new java.util.ArrayList<KafkaProducerTopicEntity>();
    }
    this.producerTopicEntities.add(elem);
  }

  public java.util.List<KafkaProducerTopicEntity> getProducerTopicEntities() {
    return this.producerTopicEntities;
  }

  public KafkaClientEntity setProducerTopicEntities(java.util.List<KafkaProducerTopicEntity> producerTopicEntities) {
    this.producerTopicEntities = producerTopicEntities;
    return this;
  }

  public void unsetProducerTopicEntities() {
    this.producerTopicEntities = null;
  }

  /** Returns true if field producerTopicEntities is set (has been assigned a value) and false otherwise */
  public boolean isSetProducerTopicEntities() {
    return this.producerTopicEntities != null;
  }

  public void setProducerTopicEntitiesIsSet(boolean value) {
    if (!value) {
      this.producerTopicEntities = null;
    }
  }

  public int getProducerNodeNetworkEntitiesSize() {
    return (this.producerNodeNetworkEntities == null) ? 0 : this.producerNodeNetworkEntities.size();
  }

  public java.util.Iterator<KafkaClientNodeNetworkEntities> getProducerNodeNetworkEntitiesIterator() {
    return (this.producerNodeNetworkEntities == null) ? null : this.producerNodeNetworkEntities.iterator();
  }

  public void addToProducerNodeNetworkEntities(KafkaClientNodeNetworkEntities elem) {
    if (this.producerNodeNetworkEntities == null) {
      this.producerNodeNetworkEntities = new java.util.ArrayList<KafkaClientNodeNetworkEntities>();
    }
    this.producerNodeNetworkEntities.add(elem);
  }

  public java.util.List<KafkaClientNodeNetworkEntities> getProducerNodeNetworkEntities() {
    return this.producerNodeNetworkEntities;
  }

  public KafkaClientEntity setProducerNodeNetworkEntities(java.util.List<KafkaClientNodeNetworkEntities> producerNodeNetworkEntities) {
    this.producerNodeNetworkEntities = producerNodeNetworkEntities;
    return this;
  }

  public void unsetProducerNodeNetworkEntities() {
    this.producerNodeNetworkEntities = null;
  }

  /** Returns true if field producerNodeNetworkEntities is set (has been assigned a value) and false otherwise */
  public boolean isSetProducerNodeNetworkEntities() {
    return this.producerNodeNetworkEntities != null;
  }

  public void setProducerNodeNetworkEntitiesIsSet(boolean value) {
    if (!value) {
      this.producerNodeNetworkEntities = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_NAME:
      if (value == null) {
        unsetAppName();
      } else {
        setAppName((String)value);
      }
      break;

    case HOST_NAME:
      if (value == null) {
        unsetHostName();
      } else {
        setHostName((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((Integer)value);
      }
      break;

    case CONSUMER_ENTITIES:
      if (value == null) {
        unsetConsumerEntities();
      } else {
        setConsumerEntities((java.util.List<KafkaConsumerClientEntity>)value);
      }
      break;

    case CONSUMER_TOPIC_ENTITIES:
      if (value == null) {
        unsetConsumerTopicEntities();
      } else {
        setConsumerTopicEntities((java.util.List<KafkaConsumerTopicEntity>)value);
      }
      break;

    case CONSUMER_NETWORK_ENTITIES:
      if (value == null) {
        unsetConsumerNetworkEntities();
      } else {
        setConsumerNetworkEntities((java.util.List<KafkaClientNodeNetworkEntities>)value);
      }
      break;

    case PRODUCER_ENTITIES:
      if (value == null) {
        unsetProducerEntities();
      } else {
        setProducerEntities((java.util.List<KafkaProducerClientEntity>)value);
      }
      break;

    case PRODUCER_TOPIC_ENTITIES:
      if (value == null) {
        unsetProducerTopicEntities();
      } else {
        setProducerTopicEntities((java.util.List<KafkaProducerTopicEntity>)value);
      }
      break;

    case PRODUCER_NODE_NETWORK_ENTITIES:
      if (value == null) {
        unsetProducerNodeNetworkEntities();
      } else {
        setProducerNodeNetworkEntities((java.util.List<KafkaClientNodeNetworkEntities>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_NAME:
      return getAppName();

    case HOST_NAME:
      return getHostName();

    case PORT:
      return getPort();

    case TIMESTAMP:
      return getTimestamp();

    case INTERVAL:
      return getInterval();

    case CONSUMER_ENTITIES:
      return getConsumerEntities();

    case CONSUMER_TOPIC_ENTITIES:
      return getConsumerTopicEntities();

    case CONSUMER_NETWORK_ENTITIES:
      return getConsumerNetworkEntities();

    case PRODUCER_ENTITIES:
      return getProducerEntities();

    case PRODUCER_TOPIC_ENTITIES:
      return getProducerTopicEntities();

    case PRODUCER_NODE_NETWORK_ENTITIES:
      return getProducerNodeNetworkEntities();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_NAME:
      return isSetAppName();
    case HOST_NAME:
      return isSetHostName();
    case PORT:
      return isSetPort();
    case TIMESTAMP:
      return isSetTimestamp();
    case INTERVAL:
      return isSetInterval();
    case CONSUMER_ENTITIES:
      return isSetConsumerEntities();
    case CONSUMER_TOPIC_ENTITIES:
      return isSetConsumerTopicEntities();
    case CONSUMER_NETWORK_ENTITIES:
      return isSetConsumerNetworkEntities();
    case PRODUCER_ENTITIES:
      return isSetProducerEntities();
    case PRODUCER_TOPIC_ENTITIES:
      return isSetProducerTopicEntities();
    case PRODUCER_NODE_NETWORK_ENTITIES:
      return isSetProducerNodeNetworkEntities();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KafkaClientEntity)
      return this.equals((KafkaClientEntity)that);
    return false;
  }

  public boolean equals(KafkaClientEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_appName = true && this.isSetAppName();
    boolean that_present_appName = true && that.isSetAppName();
    if (this_present_appName || that_present_appName) {
      if (!(this_present_appName && that_present_appName))
        return false;
      if (!this.appName.equals(that.appName))
        return false;
    }

    boolean this_present_hostName = true && this.isSetHostName();
    boolean that_present_hostName = true && that.isSetHostName();
    if (this_present_hostName || that_present_hostName) {
      if (!(this_present_hostName && that_present_hostName))
        return false;
      if (!this.hostName.equals(that.hostName))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_interval = true;
    boolean that_present_interval = true;
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (this.interval != that.interval)
        return false;
    }

    boolean this_present_consumerEntities = true && this.isSetConsumerEntities();
    boolean that_present_consumerEntities = true && that.isSetConsumerEntities();
    if (this_present_consumerEntities || that_present_consumerEntities) {
      if (!(this_present_consumerEntities && that_present_consumerEntities))
        return false;
      if (!this.consumerEntities.equals(that.consumerEntities))
        return false;
    }

    boolean this_present_consumerTopicEntities = true && this.isSetConsumerTopicEntities();
    boolean that_present_consumerTopicEntities = true && that.isSetConsumerTopicEntities();
    if (this_present_consumerTopicEntities || that_present_consumerTopicEntities) {
      if (!(this_present_consumerTopicEntities && that_present_consumerTopicEntities))
        return false;
      if (!this.consumerTopicEntities.equals(that.consumerTopicEntities))
        return false;
    }

    boolean this_present_consumerNetworkEntities = true && this.isSetConsumerNetworkEntities();
    boolean that_present_consumerNetworkEntities = true && that.isSetConsumerNetworkEntities();
    if (this_present_consumerNetworkEntities || that_present_consumerNetworkEntities) {
      if (!(this_present_consumerNetworkEntities && that_present_consumerNetworkEntities))
        return false;
      if (!this.consumerNetworkEntities.equals(that.consumerNetworkEntities))
        return false;
    }

    boolean this_present_producerEntities = true && this.isSetProducerEntities();
    boolean that_present_producerEntities = true && that.isSetProducerEntities();
    if (this_present_producerEntities || that_present_producerEntities) {
      if (!(this_present_producerEntities && that_present_producerEntities))
        return false;
      if (!this.producerEntities.equals(that.producerEntities))
        return false;
    }

    boolean this_present_producerTopicEntities = true && this.isSetProducerTopicEntities();
    boolean that_present_producerTopicEntities = true && that.isSetProducerTopicEntities();
    if (this_present_producerTopicEntities || that_present_producerTopicEntities) {
      if (!(this_present_producerTopicEntities && that_present_producerTopicEntities))
        return false;
      if (!this.producerTopicEntities.equals(that.producerTopicEntities))
        return false;
    }

    boolean this_present_producerNodeNetworkEntities = true && this.isSetProducerNodeNetworkEntities();
    boolean that_present_producerNodeNetworkEntities = true && that.isSetProducerNodeNetworkEntities();
    if (this_present_producerNodeNetworkEntities || that_present_producerNodeNetworkEntities) {
      if (!(this_present_producerNodeNetworkEntities && that_present_producerNodeNetworkEntities))
        return false;
      if (!this.producerNodeNetworkEntities.equals(that.producerNodeNetworkEntities))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAppName()) ? 131071 : 524287);
    if (isSetAppName())
      hashCode = hashCode * 8191 + appName.hashCode();

    hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
    if (isSetHostName())
      hashCode = hashCode * 8191 + hostName.hashCode();

    hashCode = hashCode * 8191 + port;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + interval;

    hashCode = hashCode * 8191 + ((isSetConsumerEntities()) ? 131071 : 524287);
    if (isSetConsumerEntities())
      hashCode = hashCode * 8191 + consumerEntities.hashCode();

    hashCode = hashCode * 8191 + ((isSetConsumerTopicEntities()) ? 131071 : 524287);
    if (isSetConsumerTopicEntities())
      hashCode = hashCode * 8191 + consumerTopicEntities.hashCode();

    hashCode = hashCode * 8191 + ((isSetConsumerNetworkEntities()) ? 131071 : 524287);
    if (isSetConsumerNetworkEntities())
      hashCode = hashCode * 8191 + consumerNetworkEntities.hashCode();

    hashCode = hashCode * 8191 + ((isSetProducerEntities()) ? 131071 : 524287);
    if (isSetProducerEntities())
      hashCode = hashCode * 8191 + producerEntities.hashCode();

    hashCode = hashCode * 8191 + ((isSetProducerTopicEntities()) ? 131071 : 524287);
    if (isSetProducerTopicEntities())
      hashCode = hashCode * 8191 + producerTopicEntities.hashCode();

    hashCode = hashCode * 8191 + ((isSetProducerNodeNetworkEntities()) ? 131071 : 524287);
    if (isSetProducerNodeNetworkEntities())
      hashCode = hashCode * 8191 + producerNodeNetworkEntities.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(KafkaClientEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsumerEntities()).compareTo(other.isSetConsumerEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumerEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumerEntities, other.consumerEntities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsumerTopicEntities()).compareTo(other.isSetConsumerTopicEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumerTopicEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumerTopicEntities, other.consumerTopicEntities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsumerNetworkEntities()).compareTo(other.isSetConsumerNetworkEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumerNetworkEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumerNetworkEntities, other.consumerNetworkEntities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProducerEntities()).compareTo(other.isSetProducerEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProducerEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.producerEntities, other.producerEntities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProducerTopicEntities()).compareTo(other.isSetProducerTopicEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProducerTopicEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.producerTopicEntities, other.producerTopicEntities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProducerNodeNetworkEntities()).compareTo(other.isSetProducerNodeNetworkEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProducerNodeNetworkEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.producerNodeNetworkEntities, other.producerNodeNetworkEntities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KafkaClientEntity(");
    boolean first = true;

    sb.append("appName:");
    if (this.appName == null) {
      sb.append("null");
    } else {
      sb.append(this.appName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostName:");
    if (this.hostName == null) {
      sb.append("null");
    } else {
      sb.append(this.hostName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interval:");
    sb.append(this.interval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("consumerEntities:");
    if (this.consumerEntities == null) {
      sb.append("null");
    } else {
      sb.append(this.consumerEntities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("consumerTopicEntities:");
    if (this.consumerTopicEntities == null) {
      sb.append("null");
    } else {
      sb.append(this.consumerTopicEntities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("consumerNetworkEntities:");
    if (this.consumerNetworkEntities == null) {
      sb.append("null");
    } else {
      sb.append(this.consumerNetworkEntities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("producerEntities:");
    if (this.producerEntities == null) {
      sb.append("null");
    } else {
      sb.append(this.producerEntities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("producerTopicEntities:");
    if (this.producerTopicEntities == null) {
      sb.append("null");
    } else {
      sb.append(this.producerTopicEntities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("producerNodeNetworkEntities:");
    if (this.producerNodeNetworkEntities == null) {
      sb.append("null");
    } else {
      sb.append(this.producerNodeNetworkEntities);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KafkaClientEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaClientEntityStandardScheme getScheme() {
      return new KafkaClientEntityStandardScheme();
    }
  }

  private static class KafkaClientEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<KafkaClientEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KafkaClientEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appName = iprot.readString();
              struct.setAppNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostName = iprot.readString();
              struct.setHostNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interval = iprot.readI32();
              struct.setIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONSUMER_ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list188 = iprot.readListBegin();
                struct.consumerEntities = new java.util.ArrayList<KafkaConsumerClientEntity>(_list188.size);
                KafkaConsumerClientEntity _elem189;
                for (int _i190 = 0; _i190 < _list188.size; ++_i190)
                {
                  _elem189 = new KafkaConsumerClientEntity();
                  _elem189.read(iprot);
                  struct.consumerEntities.add(_elem189);
                }
                iprot.readListEnd();
              }
              struct.setConsumerEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONSUMER_TOPIC_ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list191 = iprot.readListBegin();
                struct.consumerTopicEntities = new java.util.ArrayList<KafkaConsumerTopicEntity>(_list191.size);
                KafkaConsumerTopicEntity _elem192;
                for (int _i193 = 0; _i193 < _list191.size; ++_i193)
                {
                  _elem192 = new KafkaConsumerTopicEntity();
                  _elem192.read(iprot);
                  struct.consumerTopicEntities.add(_elem192);
                }
                iprot.readListEnd();
              }
              struct.setConsumerTopicEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONSUMER_NETWORK_ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list194 = iprot.readListBegin();
                struct.consumerNetworkEntities = new java.util.ArrayList<KafkaClientNodeNetworkEntities>(_list194.size);
                KafkaClientNodeNetworkEntities _elem195;
                for (int _i196 = 0; _i196 < _list194.size; ++_i196)
                {
                  _elem195 = new KafkaClientNodeNetworkEntities();
                  _elem195.read(iprot);
                  struct.consumerNetworkEntities.add(_elem195);
                }
                iprot.readListEnd();
              }
              struct.setConsumerNetworkEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PRODUCER_ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list197 = iprot.readListBegin();
                struct.producerEntities = new java.util.ArrayList<KafkaProducerClientEntity>(_list197.size);
                KafkaProducerClientEntity _elem198;
                for (int _i199 = 0; _i199 < _list197.size; ++_i199)
                {
                  _elem198 = new KafkaProducerClientEntity();
                  _elem198.read(iprot);
                  struct.producerEntities.add(_elem198);
                }
                iprot.readListEnd();
              }
              struct.setProducerEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRODUCER_TOPIC_ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                struct.producerTopicEntities = new java.util.ArrayList<KafkaProducerTopicEntity>(_list200.size);
                KafkaProducerTopicEntity _elem201;
                for (int _i202 = 0; _i202 < _list200.size; ++_i202)
                {
                  _elem201 = new KafkaProducerTopicEntity();
                  _elem201.read(iprot);
                  struct.producerTopicEntities.add(_elem201);
                }
                iprot.readListEnd();
              }
              struct.setProducerTopicEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PRODUCER_NODE_NETWORK_ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list203 = iprot.readListBegin();
                struct.producerNodeNetworkEntities = new java.util.ArrayList<KafkaClientNodeNetworkEntities>(_list203.size);
                KafkaClientNodeNetworkEntities _elem204;
                for (int _i205 = 0; _i205 < _list203.size; ++_i205)
                {
                  _elem204 = new KafkaClientNodeNetworkEntities();
                  _elem204.read(iprot);
                  struct.producerNodeNetworkEntities.add(_elem204);
                }
                iprot.readListEnd();
              }
              struct.setProducerNodeNetworkEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KafkaClientEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.appName != null) {
        oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
        oprot.writeString(struct.appName);
        oprot.writeFieldEnd();
      }
      if (struct.hostName != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(struct.hostName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.port);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.interval);
      oprot.writeFieldEnd();
      if (struct.consumerEntities != null) {
        oprot.writeFieldBegin(CONSUMER_ENTITIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.consumerEntities.size()));
          for (KafkaConsumerClientEntity _iter206 : struct.consumerEntities)
          {
            _iter206.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.consumerTopicEntities != null) {
        oprot.writeFieldBegin(CONSUMER_TOPIC_ENTITIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.consumerTopicEntities.size()));
          for (KafkaConsumerTopicEntity _iter207 : struct.consumerTopicEntities)
          {
            _iter207.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.consumerNetworkEntities != null) {
        oprot.writeFieldBegin(CONSUMER_NETWORK_ENTITIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.consumerNetworkEntities.size()));
          for (KafkaClientNodeNetworkEntities _iter208 : struct.consumerNetworkEntities)
          {
            _iter208.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.producerEntities != null) {
        oprot.writeFieldBegin(PRODUCER_ENTITIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.producerEntities.size()));
          for (KafkaProducerClientEntity _iter209 : struct.producerEntities)
          {
            _iter209.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.producerTopicEntities != null) {
        oprot.writeFieldBegin(PRODUCER_TOPIC_ENTITIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.producerTopicEntities.size()));
          for (KafkaProducerTopicEntity _iter210 : struct.producerTopicEntities)
          {
            _iter210.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.producerNodeNetworkEntities != null) {
        oprot.writeFieldBegin(PRODUCER_NODE_NETWORK_ENTITIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.producerNodeNetworkEntities.size()));
          for (KafkaClientNodeNetworkEntities _iter211 : struct.producerNodeNetworkEntities)
          {
            _iter211.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KafkaClientEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaClientEntityTupleScheme getScheme() {
      return new KafkaClientEntityTupleScheme();
    }
  }

  private static class KafkaClientEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<KafkaClientEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KafkaClientEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAppName()) {
        optionals.set(0);
      }
      if (struct.isSetHostName()) {
        optionals.set(1);
      }
      if (struct.isSetPort()) {
        optionals.set(2);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(3);
      }
      if (struct.isSetInterval()) {
        optionals.set(4);
      }
      if (struct.isSetConsumerEntities()) {
        optionals.set(5);
      }
      if (struct.isSetConsumerTopicEntities()) {
        optionals.set(6);
      }
      if (struct.isSetConsumerNetworkEntities()) {
        optionals.set(7);
      }
      if (struct.isSetProducerEntities()) {
        optionals.set(8);
      }
      if (struct.isSetProducerTopicEntities()) {
        optionals.set(9);
      }
      if (struct.isSetProducerNodeNetworkEntities()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetAppName()) {
        oprot.writeString(struct.appName);
      }
      if (struct.isSetHostName()) {
        oprot.writeString(struct.hostName);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetInterval()) {
        oprot.writeI32(struct.interval);
      }
      if (struct.isSetConsumerEntities()) {
        {
          oprot.writeI32(struct.consumerEntities.size());
          for (KafkaConsumerClientEntity _iter212 : struct.consumerEntities)
          {
            _iter212.write(oprot);
          }
        }
      }
      if (struct.isSetConsumerTopicEntities()) {
        {
          oprot.writeI32(struct.consumerTopicEntities.size());
          for (KafkaConsumerTopicEntity _iter213 : struct.consumerTopicEntities)
          {
            _iter213.write(oprot);
          }
        }
      }
      if (struct.isSetConsumerNetworkEntities()) {
        {
          oprot.writeI32(struct.consumerNetworkEntities.size());
          for (KafkaClientNodeNetworkEntities _iter214 : struct.consumerNetworkEntities)
          {
            _iter214.write(oprot);
          }
        }
      }
      if (struct.isSetProducerEntities()) {
        {
          oprot.writeI32(struct.producerEntities.size());
          for (KafkaProducerClientEntity _iter215 : struct.producerEntities)
          {
            _iter215.write(oprot);
          }
        }
      }
      if (struct.isSetProducerTopicEntities()) {
        {
          oprot.writeI32(struct.producerTopicEntities.size());
          for (KafkaProducerTopicEntity _iter216 : struct.producerTopicEntities)
          {
            _iter216.write(oprot);
          }
        }
      }
      if (struct.isSetProducerNodeNetworkEntities()) {
        {
          oprot.writeI32(struct.producerNodeNetworkEntities.size());
          for (KafkaClientNodeNetworkEntities _iter217 : struct.producerNodeNetworkEntities)
          {
            _iter217.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KafkaClientEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.appName = iprot.readString();
        struct.setAppNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hostName = iprot.readString();
        struct.setHostNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(3)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(4)) {
        struct.interval = iprot.readI32();
        struct.setIntervalIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list218 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.consumerEntities = new java.util.ArrayList<KafkaConsumerClientEntity>(_list218.size);
          KafkaConsumerClientEntity _elem219;
          for (int _i220 = 0; _i220 < _list218.size; ++_i220)
          {
            _elem219 = new KafkaConsumerClientEntity();
            _elem219.read(iprot);
            struct.consumerEntities.add(_elem219);
          }
        }
        struct.setConsumerEntitiesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.consumerTopicEntities = new java.util.ArrayList<KafkaConsumerTopicEntity>(_list221.size);
          KafkaConsumerTopicEntity _elem222;
          for (int _i223 = 0; _i223 < _list221.size; ++_i223)
          {
            _elem222 = new KafkaConsumerTopicEntity();
            _elem222.read(iprot);
            struct.consumerTopicEntities.add(_elem222);
          }
        }
        struct.setConsumerTopicEntitiesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list224 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.consumerNetworkEntities = new java.util.ArrayList<KafkaClientNodeNetworkEntities>(_list224.size);
          KafkaClientNodeNetworkEntities _elem225;
          for (int _i226 = 0; _i226 < _list224.size; ++_i226)
          {
            _elem225 = new KafkaClientNodeNetworkEntities();
            _elem225.read(iprot);
            struct.consumerNetworkEntities.add(_elem225);
          }
        }
        struct.setConsumerNetworkEntitiesIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list227 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.producerEntities = new java.util.ArrayList<KafkaProducerClientEntity>(_list227.size);
          KafkaProducerClientEntity _elem228;
          for (int _i229 = 0; _i229 < _list227.size; ++_i229)
          {
            _elem228 = new KafkaProducerClientEntity();
            _elem228.read(iprot);
            struct.producerEntities.add(_elem228);
          }
        }
        struct.setProducerEntitiesIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list230 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.producerTopicEntities = new java.util.ArrayList<KafkaProducerTopicEntity>(_list230.size);
          KafkaProducerTopicEntity _elem231;
          for (int _i232 = 0; _i232 < _list230.size; ++_i232)
          {
            _elem231 = new KafkaProducerTopicEntity();
            _elem231.read(iprot);
            struct.producerTopicEntities.add(_elem231);
          }
        }
        struct.setProducerTopicEntitiesIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list233 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.producerNodeNetworkEntities = new java.util.ArrayList<KafkaClientNodeNetworkEntities>(_list233.size);
          KafkaClientNodeNetworkEntities _elem234;
          for (int _i235 = 0; _i235 < _list233.size; ++_i235)
          {
            _elem234 = new KafkaClientNodeNetworkEntities();
            _elem234.read(iprot);
            struct.producerNodeNetworkEntities.add(_elem234);
          }
        }
        struct.setProducerNodeNetworkEntitiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

