/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class FailureMessageDetailEntity implements org.apache.thrift.TBase<FailureMessageDetailEntity, FailureMessageDetailEntity._Fields>, java.io.Serializable, Cloneable, Comparable<FailureMessageDetailEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FailureMessageDetailEntity");

  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ROOT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("rootException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CAUSED_BY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("causedByList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField OCCUR_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("occurTimes", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TRACE_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("traceContext", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FailureMessageDetailEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FailureMessageDetailEntityTupleSchemeFactory();

  public long time; // required
  public ExceptionEntity rootException; // required
  public java.util.List<ExceptionEntity> causedByList; // required
  public int occurTimes; // optional
  public String url; // optional
  public TraceContextEntity traceContext; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME((short)1, "time"),
    ROOT_EXCEPTION((short)2, "rootException"),
    CAUSED_BY_LIST((short)3, "causedByList"),
    OCCUR_TIMES((short)4, "occurTimes"),
    URL((short)5, "url"),
    TRACE_CONTEXT((short)6, "traceContext");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME
          return TIME;
        case 2: // ROOT_EXCEPTION
          return ROOT_EXCEPTION;
        case 3: // CAUSED_BY_LIST
          return CAUSED_BY_LIST;
        case 4: // OCCUR_TIMES
          return OCCUR_TIMES;
        case 5: // URL
          return URL;
        case 6: // TRACE_CONTEXT
          return TRACE_CONTEXT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_ISSET_ID = 0;
  private static final int __OCCURTIMES_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OCCUR_TIMES,_Fields.URL,_Fields.TRACE_CONTEXT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROOT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("rootException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ExceptionEntity")));
    tmpMap.put(_Fields.CAUSED_BY_LIST, new org.apache.thrift.meta_data.FieldMetaData("causedByList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ExceptionEntity"))));
    tmpMap.put(_Fields.OCCUR_TIMES, new org.apache.thrift.meta_data.FieldMetaData("occurTimes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACE_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("traceContext", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TraceContextEntity")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FailureMessageDetailEntity.class, metaDataMap);
  }

  public FailureMessageDetailEntity() {
  }

  public FailureMessageDetailEntity(
    long time,
    ExceptionEntity rootException,
    java.util.List<ExceptionEntity> causedByList)
  {
    this();
    this.time = time;
    setTimeIsSet(true);
    this.rootException = rootException;
    this.causedByList = causedByList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FailureMessageDetailEntity(FailureMessageDetailEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.time = other.time;
    if (other.isSetRootException()) {
      this.rootException = new ExceptionEntity(other.rootException);
    }
    if (other.isSetCausedByList()) {
      java.util.List<ExceptionEntity> __this__causedByList = new java.util.ArrayList<ExceptionEntity>(other.causedByList.size());
      for (ExceptionEntity other_element : other.causedByList) {
        __this__causedByList.add(new ExceptionEntity(other_element));
      }
      this.causedByList = __this__causedByList;
    }
    this.occurTimes = other.occurTimes;
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetTraceContext()) {
      this.traceContext = new TraceContextEntity(other.traceContext);
    }
  }

  public FailureMessageDetailEntity deepCopy() {
    return new FailureMessageDetailEntity(this);
  }

  @Override
  public void clear() {
    setTimeIsSet(false);
    this.time = 0;
    this.rootException = null;
    this.causedByList = null;
    setOccurTimesIsSet(false);
    this.occurTimes = 0;
    this.url = null;
    this.traceContext = null;
  }

  public long getTime() {
    return this.time;
  }

  public FailureMessageDetailEntity setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public ExceptionEntity getRootException() {
    return this.rootException;
  }

  public FailureMessageDetailEntity setRootException(ExceptionEntity rootException) {
    this.rootException = rootException;
    return this;
  }

  public void unsetRootException() {
    this.rootException = null;
  }

  /** Returns true if field rootException is set (has been assigned a value) and false otherwise */
  public boolean isSetRootException() {
    return this.rootException != null;
  }

  public void setRootExceptionIsSet(boolean value) {
    if (!value) {
      this.rootException = null;
    }
  }

  public int getCausedByListSize() {
    return (this.causedByList == null) ? 0 : this.causedByList.size();
  }

  public java.util.Iterator<ExceptionEntity> getCausedByListIterator() {
    return (this.causedByList == null) ? null : this.causedByList.iterator();
  }

  public void addToCausedByList(ExceptionEntity elem) {
    if (this.causedByList == null) {
      this.causedByList = new java.util.ArrayList<ExceptionEntity>();
    }
    this.causedByList.add(elem);
  }

  public java.util.List<ExceptionEntity> getCausedByList() {
    return this.causedByList;
  }

  public FailureMessageDetailEntity setCausedByList(java.util.List<ExceptionEntity> causedByList) {
    this.causedByList = causedByList;
    return this;
  }

  public void unsetCausedByList() {
    this.causedByList = null;
  }

  /** Returns true if field causedByList is set (has been assigned a value) and false otherwise */
  public boolean isSetCausedByList() {
    return this.causedByList != null;
  }

  public void setCausedByListIsSet(boolean value) {
    if (!value) {
      this.causedByList = null;
    }
  }

  public int getOccurTimes() {
    return this.occurTimes;
  }

  public FailureMessageDetailEntity setOccurTimes(int occurTimes) {
    this.occurTimes = occurTimes;
    setOccurTimesIsSet(true);
    return this;
  }

  public void unsetOccurTimes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OCCURTIMES_ISSET_ID);
  }

  /** Returns true if field occurTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetOccurTimes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OCCURTIMES_ISSET_ID);
  }

  public void setOccurTimesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OCCURTIMES_ISSET_ID, value);
  }

  public String getUrl() {
    return this.url;
  }

  public FailureMessageDetailEntity setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public TraceContextEntity getTraceContext() {
    return this.traceContext;
  }

  public FailureMessageDetailEntity setTraceContext(TraceContextEntity traceContext) {
    this.traceContext = traceContext;
    return this;
  }

  public void unsetTraceContext() {
    this.traceContext = null;
  }

  /** Returns true if field traceContext is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceContext() {
    return this.traceContext != null;
  }

  public void setTraceContextIsSet(boolean value) {
    if (!value) {
      this.traceContext = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Long)value);
      }
      break;

    case ROOT_EXCEPTION:
      if (value == null) {
        unsetRootException();
      } else {
        setRootException((ExceptionEntity)value);
      }
      break;

    case CAUSED_BY_LIST:
      if (value == null) {
        unsetCausedByList();
      } else {
        setCausedByList((java.util.List<ExceptionEntity>)value);
      }
      break;

    case OCCUR_TIMES:
      if (value == null) {
        unsetOccurTimes();
      } else {
        setOccurTimes((Integer)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case TRACE_CONTEXT:
      if (value == null) {
        unsetTraceContext();
      } else {
        setTraceContext((TraceContextEntity)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME:
      return getTime();

    case ROOT_EXCEPTION:
      return getRootException();

    case CAUSED_BY_LIST:
      return getCausedByList();

    case OCCUR_TIMES:
      return getOccurTimes();

    case URL:
      return getUrl();

    case TRACE_CONTEXT:
      return getTraceContext();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIME:
      return isSetTime();
    case ROOT_EXCEPTION:
      return isSetRootException();
    case CAUSED_BY_LIST:
      return isSetCausedByList();
    case OCCUR_TIMES:
      return isSetOccurTimes();
    case URL:
      return isSetUrl();
    case TRACE_CONTEXT:
      return isSetTraceContext();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FailureMessageDetailEntity)
      return this.equals((FailureMessageDetailEntity)that);
    return false;
  }

  public boolean equals(FailureMessageDetailEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_rootException = true && this.isSetRootException();
    boolean that_present_rootException = true && that.isSetRootException();
    if (this_present_rootException || that_present_rootException) {
      if (!(this_present_rootException && that_present_rootException))
        return false;
      if (!this.rootException.equals(that.rootException))
        return false;
    }

    boolean this_present_causedByList = true && this.isSetCausedByList();
    boolean that_present_causedByList = true && that.isSetCausedByList();
    if (this_present_causedByList || that_present_causedByList) {
      if (!(this_present_causedByList && that_present_causedByList))
        return false;
      if (!this.causedByList.equals(that.causedByList))
        return false;
    }

    boolean this_present_occurTimes = true && this.isSetOccurTimes();
    boolean that_present_occurTimes = true && that.isSetOccurTimes();
    if (this_present_occurTimes || that_present_occurTimes) {
      if (!(this_present_occurTimes && that_present_occurTimes))
        return false;
      if (this.occurTimes != that.occurTimes)
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_traceContext = true && this.isSetTraceContext();
    boolean that_present_traceContext = true && that.isSetTraceContext();
    if (this_present_traceContext || that_present_traceContext) {
      if (!(this_present_traceContext && that_present_traceContext))
        return false;
      if (!this.traceContext.equals(that.traceContext))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(time);

    hashCode = hashCode * 8191 + ((isSetRootException()) ? 131071 : 524287);
    if (isSetRootException())
      hashCode = hashCode * 8191 + rootException.hashCode();

    hashCode = hashCode * 8191 + ((isSetCausedByList()) ? 131071 : 524287);
    if (isSetCausedByList())
      hashCode = hashCode * 8191 + causedByList.hashCode();

    hashCode = hashCode * 8191 + ((isSetOccurTimes()) ? 131071 : 524287);
    if (isSetOccurTimes())
      hashCode = hashCode * 8191 + occurTimes;

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    hashCode = hashCode * 8191 + ((isSetTraceContext()) ? 131071 : 524287);
    if (isSetTraceContext())
      hashCode = hashCode * 8191 + traceContext.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(FailureMessageDetailEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRootException()).compareTo(other.isSetRootException());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRootException()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootException, other.rootException);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCausedByList()).compareTo(other.isSetCausedByList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCausedByList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.causedByList, other.causedByList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccurTimes()).compareTo(other.isSetOccurTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccurTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occurTimes, other.occurTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceContext()).compareTo(other.isSetTraceContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceContext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceContext, other.traceContext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FailureMessageDetailEntity(");
    boolean first = true;

    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rootException:");
    if (this.rootException == null) {
      sb.append("null");
    } else {
      sb.append(this.rootException);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("causedByList:");
    if (this.causedByList == null) {
      sb.append("null");
    } else {
      sb.append(this.causedByList);
    }
    first = false;
    if (isSetOccurTimes()) {
      if (!first) sb.append(", ");
      sb.append("occurTimes:");
      sb.append(this.occurTimes);
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetTraceContext()) {
      if (!first) sb.append(", ");
      sb.append("traceContext:");
      if (this.traceContext == null) {
        sb.append("null");
      } else {
        sb.append(this.traceContext);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FailureMessageDetailEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FailureMessageDetailEntityStandardScheme getScheme() {
      return new FailureMessageDetailEntityStandardScheme();
    }
  }

  private static class FailureMessageDetailEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<FailureMessageDetailEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FailureMessageDetailEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROOT_EXCEPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rootException = new ExceptionEntity();
              struct.rootException.read(iprot);
              struct.setRootExceptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CAUSED_BY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list148 = iprot.readListBegin();
                struct.causedByList = new java.util.ArrayList<ExceptionEntity>(_list148.size);
                ExceptionEntity _elem149;
                for (int _i150 = 0; _i150 < _list148.size; ++_i150)
                {
                  _elem149 = new ExceptionEntity();
                  _elem149.read(iprot);
                  struct.causedByList.add(_elem149);
                }
                iprot.readListEnd();
              }
              struct.setCausedByListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OCCUR_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.occurTimes = iprot.readI32();
              struct.setOccurTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRACE_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.traceContext = new TraceContextEntity();
              struct.traceContext.read(iprot);
              struct.setTraceContextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FailureMessageDetailEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI64(struct.time);
      oprot.writeFieldEnd();
      if (struct.rootException != null) {
        oprot.writeFieldBegin(ROOT_EXCEPTION_FIELD_DESC);
        struct.rootException.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.causedByList != null) {
        oprot.writeFieldBegin(CAUSED_BY_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.causedByList.size()));
          for (ExceptionEntity _iter151 : struct.causedByList)
          {
            _iter151.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetOccurTimes()) {
        oprot.writeFieldBegin(OCCUR_TIMES_FIELD_DESC);
        oprot.writeI32(struct.occurTimes);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.traceContext != null) {
        if (struct.isSetTraceContext()) {
          oprot.writeFieldBegin(TRACE_CONTEXT_FIELD_DESC);
          struct.traceContext.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FailureMessageDetailEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FailureMessageDetailEntityTupleScheme getScheme() {
      return new FailureMessageDetailEntityTupleScheme();
    }
  }

  private static class FailureMessageDetailEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<FailureMessageDetailEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FailureMessageDetailEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTime()) {
        optionals.set(0);
      }
      if (struct.isSetRootException()) {
        optionals.set(1);
      }
      if (struct.isSetCausedByList()) {
        optionals.set(2);
      }
      if (struct.isSetOccurTimes()) {
        optionals.set(3);
      }
      if (struct.isSetUrl()) {
        optionals.set(4);
      }
      if (struct.isSetTraceContext()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTime()) {
        oprot.writeI64(struct.time);
      }
      if (struct.isSetRootException()) {
        struct.rootException.write(oprot);
      }
      if (struct.isSetCausedByList()) {
        {
          oprot.writeI32(struct.causedByList.size());
          for (ExceptionEntity _iter152 : struct.causedByList)
          {
            _iter152.write(oprot);
          }
        }
      }
      if (struct.isSetOccurTimes()) {
        oprot.writeI32(struct.occurTimes);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetTraceContext()) {
        struct.traceContext.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FailureMessageDetailEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.time = iprot.readI64();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rootException = new ExceptionEntity();
        struct.rootException.read(iprot);
        struct.setRootExceptionIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list153 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.causedByList = new java.util.ArrayList<ExceptionEntity>(_list153.size);
          ExceptionEntity _elem154;
          for (int _i155 = 0; _i155 < _list153.size; ++_i155)
          {
            _elem154 = new ExceptionEntity();
            _elem154.read(iprot);
            struct.causedByList.add(_elem154);
          }
        }
        struct.setCausedByListIsSet(true);
      }
      if (incoming.get(3)) {
        struct.occurTimes = iprot.readI32();
        struct.setOccurTimesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.traceContext = new TraceContextEntity();
        struct.traceContext.read(iprot);
        struct.setTraceContextIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

