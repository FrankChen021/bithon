/**
 * Autogenerated by Thrift Compiler (0.11.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class ThreadEntity implements org.apache.thrift.TBase<ThreadEntity, ThreadEntity._Fields>, java.io.Serializable, Cloneable, Comparable<ThreadEntity> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThreadEntity");

    private static final org.apache.thrift.protocol.TField PEAK_FIELD_DESC = new org.apache.thrift.protocol.TField("peak", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField DAEMON_FIELD_DESC = new org.apache.thrift.protocol.TField("daemon", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField TOTAL_STARTED_FIELD_DESC = new org.apache.thrift.protocol.TField("totalStarted", org.apache.thrift.protocol.TType.I64, (short) 3);
    private static final org.apache.thrift.protocol.TField THREADS_FIELD_DESC = new org.apache.thrift.protocol.TField("threads", org.apache.thrift.protocol.TType.I32, (short) 4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThreadEntityStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThreadEntityTupleSchemeFactory();

    public int peak; // required
    public int daemon; // required
    public long totalStarted; // required
    public int threads; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        PEAK((short) 1, "peak"),
        DAEMON((short) 2, "daemon"),
        TOTAL_STARTED((short) 3, "totalStarted"),
        THREADS((short) 4, "threads");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // PEAK
                    return PEAK;
                case 2: // DAEMON
                    return DAEMON;
                case 3: // TOTAL_STARTED
                    return TOTAL_STARTED;
                case 4: // THREADS
                    return THREADS;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __PEAK_ISSET_ID = 0;
    private static final int __DAEMON_ISSET_ID = 1;
    private static final int __TOTALSTARTED_ISSET_ID = 2;
    private static final int __THREADS_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.PEAK, new org.apache.thrift.meta_data.FieldMetaData("peak", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                               new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.DAEMON, new org.apache.thrift.meta_data.FieldMetaData("daemon", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                 new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TOTAL_STARTED, new org.apache.thrift.meta_data.FieldMetaData("totalStarted", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.THREADS, new org.apache.thrift.meta_data.FieldMetaData("threads", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThreadEntity.class, metaDataMap);
    }

    public ThreadEntity() {
    }

    public ThreadEntity(
        int peak,
        int daemon,
        long totalStarted,
        int threads) {
        this();
        this.peak = peak;
        setPeakIsSet(true);
        this.daemon = daemon;
        setDaemonIsSet(true);
        this.totalStarted = totalStarted;
        setTotalStartedIsSet(true);
        this.threads = threads;
        setThreadsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ThreadEntity(ThreadEntity other) {
        __isset_bitfield = other.__isset_bitfield;
        this.peak = other.peak;
        this.daemon = other.daemon;
        this.totalStarted = other.totalStarted;
        this.threads = other.threads;
    }

    public ThreadEntity deepCopy() {
        return new ThreadEntity(this);
    }

    @Override
    public void clear() {
        setPeakIsSet(false);
        this.peak = 0;
        setDaemonIsSet(false);
        this.daemon = 0;
        setTotalStartedIsSet(false);
        this.totalStarted = 0;
        setThreadsIsSet(false);
        this.threads = 0;
    }

    public int getPeak() {
        return this.peak;
    }

    public ThreadEntity setPeak(int peak) {
        this.peak = peak;
        setPeakIsSet(true);
        return this;
    }

    public void unsetPeak() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PEAK_ISSET_ID);
    }

    /** Returns true if field peak is set (has been assigned a value) and false otherwise */
    public boolean isSetPeak() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PEAK_ISSET_ID);
    }

    public void setPeakIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PEAK_ISSET_ID, value);
    }

    public int getDaemon() {
        return this.daemon;
    }

    public ThreadEntity setDaemon(int daemon) {
        this.daemon = daemon;
        setDaemonIsSet(true);
        return this;
    }

    public void unsetDaemon() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DAEMON_ISSET_ID);
    }

    /** Returns true if field daemon is set (has been assigned a value) and false otherwise */
    public boolean isSetDaemon() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DAEMON_ISSET_ID);
    }

    public void setDaemonIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DAEMON_ISSET_ID, value);
    }

    public long getTotalStarted() {
        return this.totalStarted;
    }

    public ThreadEntity setTotalStarted(long totalStarted) {
        this.totalStarted = totalStarted;
        setTotalStartedIsSet(true);
        return this;
    }

    public void unsetTotalStarted() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALSTARTED_ISSET_ID);
    }

    /** Returns true if field totalStarted is set (has been assigned a value) and false otherwise */
    public boolean isSetTotalStarted() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALSTARTED_ISSET_ID);
    }

    public void setTotalStartedIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALSTARTED_ISSET_ID, value);
    }

    public int getThreads() {
        return this.threads;
    }

    public ThreadEntity setThreads(int threads) {
        this.threads = threads;
        setThreadsIsSet(true);
        return this;
    }

    public void unsetThreads() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THREADS_ISSET_ID);
    }

    /** Returns true if field threads is set (has been assigned a value) and false otherwise */
    public boolean isSetThreads() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THREADS_ISSET_ID);
    }

    public void setThreadsIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THREADS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case PEAK:
                if (value == null) {
                    unsetPeak();
                } else {
                    setPeak((Integer) value);
                }
                break;

            case DAEMON:
                if (value == null) {
                    unsetDaemon();
                } else {
                    setDaemon((Integer) value);
                }
                break;

            case TOTAL_STARTED:
                if (value == null) {
                    unsetTotalStarted();
                } else {
                    setTotalStarted((Long) value);
                }
                break;

            case THREADS:
                if (value == null) {
                    unsetThreads();
                } else {
                    setThreads((Integer) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case PEAK:
                return getPeak();

            case DAEMON:
                return getDaemon();

            case TOTAL_STARTED:
                return getTotalStarted();

            case THREADS:
                return getThreads();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case PEAK:
                return isSetPeak();
            case DAEMON:
                return isSetDaemon();
            case TOTAL_STARTED:
                return isSetTotalStarted();
            case THREADS:
                return isSetThreads();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof ThreadEntity)
            return this.equals((ThreadEntity) that);
        return false;
    }

    public boolean equals(ThreadEntity that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_peak = true;
        boolean that_present_peak = true;
        if (this_present_peak || that_present_peak) {
            if (!(this_present_peak && that_present_peak))
                return false;
            if (this.peak != that.peak)
                return false;
        }

        boolean this_present_daemon = true;
        boolean that_present_daemon = true;
        if (this_present_daemon || that_present_daemon) {
            if (!(this_present_daemon && that_present_daemon))
                return false;
            if (this.daemon != that.daemon)
                return false;
        }

        boolean this_present_totalStarted = true;
        boolean that_present_totalStarted = true;
        if (this_present_totalStarted || that_present_totalStarted) {
            if (!(this_present_totalStarted && that_present_totalStarted))
                return false;
            if (this.totalStarted != that.totalStarted)
                return false;
        }

        boolean this_present_threads = true;
        boolean that_present_threads = true;
        if (this_present_threads || that_present_threads) {
            if (!(this_present_threads && that_present_threads))
                return false;
            if (this.threads != that.threads)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + peak;

        hashCode = hashCode * 8191 + daemon;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalStarted);

        hashCode = hashCode * 8191 + threads;

        return hashCode;
    }

    @Override
    public int compareTo(ThreadEntity other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetPeak()).compareTo(other.isSetPeak());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPeak()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peak, other.peak);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDaemon()).compareTo(other.isSetDaemon());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDaemon()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.daemon, other.daemon);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTotalStarted()).compareTo(other.isSetTotalStarted());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTotalStarted()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalStarted, other.totalStarted);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetThreads()).compareTo(other.isSetThreads());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetThreads()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threads, other.threads);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ThreadEntity(");
        boolean first = true;

        sb.append("peak:");
        sb.append(this.peak);
        first = false;
        if (!first) sb.append(", ");
        sb.append("daemon:");
        sb.append(this.daemon);
        first = false;
        if (!first) sb.append(", ");
        sb.append("totalStarted:");
        sb.append(this.totalStarted);
        first = false;
        if (!first) sb.append(", ");
        sb.append("threads:");
        sb.append(this.threads);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ThreadEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ThreadEntityStandardScheme getScheme() {
            return new ThreadEntityStandardScheme();
        }
    }

    private static class ThreadEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThreadEntity> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ThreadEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // PEAK
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.peak = iprot.readI32();
                            struct.setPeakIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // DAEMON
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.daemon = iprot.readI32();
                            struct.setDaemonIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // TOTAL_STARTED
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.totalStarted = iprot.readI64();
                            struct.setTotalStartedIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // THREADS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.threads = iprot.readI32();
                            struct.setThreadsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ThreadEntity struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(PEAK_FIELD_DESC);
            oprot.writeI32(struct.peak);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(DAEMON_FIELD_DESC);
            oprot.writeI32(struct.daemon);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(TOTAL_STARTED_FIELD_DESC);
            oprot.writeI64(struct.totalStarted);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(THREADS_FIELD_DESC);
            oprot.writeI32(struct.threads);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ThreadEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ThreadEntityTupleScheme getScheme() {
            return new ThreadEntityTupleScheme();
        }
    }

    private static class ThreadEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThreadEntity> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ThreadEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetPeak()) {
                optionals.set(0);
            }
            if (struct.isSetDaemon()) {
                optionals.set(1);
            }
            if (struct.isSetTotalStarted()) {
                optionals.set(2);
            }
            if (struct.isSetThreads()) {
                optionals.set(3);
            }
            oprot.writeBitSet(optionals, 4);
            if (struct.isSetPeak()) {
                oprot.writeI32(struct.peak);
            }
            if (struct.isSetDaemon()) {
                oprot.writeI32(struct.daemon);
            }
            if (struct.isSetTotalStarted()) {
                oprot.writeI64(struct.totalStarted);
            }
            if (struct.isSetThreads()) {
                oprot.writeI32(struct.threads);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ThreadEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(4);
            if (incoming.get(0)) {
                struct.peak = iprot.readI32();
                struct.setPeakIsSet(true);
            }
            if (incoming.get(1)) {
                struct.daemon = iprot.readI32();
                struct.setDaemonIsSet(true);
            }
            if (incoming.get(2)) {
                struct.totalStarted = iprot.readI64();
                struct.setTotalStartedIsSet(true);
            }
            if (incoming.get(3)) {
                struct.threads = iprot.readI32();
                struct.setThreadsIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

