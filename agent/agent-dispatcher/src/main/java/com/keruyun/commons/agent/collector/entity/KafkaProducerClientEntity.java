/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class KafkaProducerClientEntity implements org.apache.thrift.TBase<KafkaProducerClientEntity, KafkaProducerClientEntity._Fields>, java.io.Serializable, Cloneable, Comparable<KafkaProducerClientEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KafkaProducerClientEntity");

  private static final org.apache.thrift.protocol.TField CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BATCH_SIZE_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("batchSizeAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField BATCH_SIZE_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("batchSizeMax", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField BUFFER_AVAILABLE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferAvailableBytes", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField BUFFER_EXHAUSTED_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferExhaustedRate", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField BUFFER_TOTAL_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferTotalBytes", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField BUFFERPOOL_WAIT_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferpoolWaitRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField COMPRESSION_RATE_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("compressionRateAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField METADATA_AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataAge", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField PRODUCE_THROTTLE_TIME_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("produceThrottleTimeAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField PRODUCE_THROTTLE_TIME_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("produceThrottleTimeMax", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField RECORD_ERROR_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("recordErrorRate", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField RECORD_QUEUE_TIME_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("recordQueueTimeAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField RECORD_QUEUE_TIME_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("recordQueueTimeMax", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField RECORD_RETRY_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("recordRetryRate", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField RECORD_SEND_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("recordSendRate", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField RECORD_SIZE_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("recordSizeAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField RECORD_SIZE_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("recordSizeMax", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField RECORDS_PER_REQUEST_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("recordsPerRequestAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField REQUEST_LATENCY_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("requestLatencyAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField REQUEST_LATENCY_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("requestLatencyMax", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField REQUESTS_IN_FLIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestsInFlight", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField WAITING_THREADS_FIELD_DESC = new org.apache.thrift.protocol.TField("waitingThreads", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField CONNECTION_CLOSE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("connectionCloseRate", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField CONNECTION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("connectionCount", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField CONNECTION_CREATION_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("connectionCreationRate", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField INCOMING_BYTE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("incomingByteRate", org.apache.thrift.protocol.TType.DOUBLE, (short)28);
  private static final org.apache.thrift.protocol.TField IO_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("ioRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)29);
  private static final org.apache.thrift.protocol.TField IO_TIME_NS_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("ioTimeNsAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField IO_WAIT_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("ioWaitRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField IO_WAIT_TIME_NS_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("ioWaitTimeNsAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)32);
  private static final org.apache.thrift.protocol.TField NETWORK_IO_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("networkIoRate", org.apache.thrift.protocol.TType.DOUBLE, (short)33);
  private static final org.apache.thrift.protocol.TField OUTGOING_BYTE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("outgoingByteRate", org.apache.thrift.protocol.TType.DOUBLE, (short)34);
  private static final org.apache.thrift.protocol.TField REQUEST_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestRate", org.apache.thrift.protocol.TType.DOUBLE, (short)35);
  private static final org.apache.thrift.protocol.TField REQUEST_SIZE_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("requestSizeMax", org.apache.thrift.protocol.TType.DOUBLE, (short)36);
  private static final org.apache.thrift.protocol.TField REQUEST_SIZE_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("requestSizeAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)37);
  private static final org.apache.thrift.protocol.TField RESPONSE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("responseRate", org.apache.thrift.protocol.TType.DOUBLE, (short)38);
  private static final org.apache.thrift.protocol.TField SELECT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("selectRate", org.apache.thrift.protocol.TType.DOUBLE, (short)39);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KafkaProducerClientEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KafkaProducerClientEntityTupleSchemeFactory();

  public String cluster; // required
  public String clientId; // required
  public double batchSizeAvg; // required
  public double batchSizeMax; // required
  public double bufferAvailableBytes; // required
  public double bufferExhaustedRate; // required
  public double bufferTotalBytes; // required
  public double bufferpoolWaitRatio; // required
  public double compressionRateAvg; // required
  public double metadataAge; // required
  public double produceThrottleTimeAvg; // required
  public double produceThrottleTimeMax; // required
  public double recordErrorRate; // required
  public double recordQueueTimeAvg; // required
  public double recordQueueTimeMax; // required
  public double recordRetryRate; // required
  public double recordSendRate; // required
  public double recordSizeAvg; // required
  public double recordSizeMax; // required
  public double recordsPerRequestAvg; // required
  public double requestLatencyAvg; // required
  public double requestLatencyMax; // required
  public double requestsInFlight; // required
  public double waitingThreads; // required
  public double connectionCloseRate; // required
  public double connectionCount; // required
  public double connectionCreationRate; // required
  public double incomingByteRate; // required
  public double ioRatio; // required
  public double ioTimeNsAvg; // required
  public double ioWaitRatio; // required
  public double ioWaitTimeNsAvg; // required
  public double networkIoRate; // required
  public double outgoingByteRate; // required
  public double requestRate; // required
  public double requestSizeMax; // required
  public double requestSizeAvg; // required
  public double responseRate; // required
  public double selectRate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLUSTER((short)1, "cluster"),
    CLIENT_ID((short)2, "clientId"),
    BATCH_SIZE_AVG((short)3, "batchSizeAvg"),
    BATCH_SIZE_MAX((short)4, "batchSizeMax"),
    BUFFER_AVAILABLE_BYTES((short)5, "bufferAvailableBytes"),
    BUFFER_EXHAUSTED_RATE((short)6, "bufferExhaustedRate"),
    BUFFER_TOTAL_BYTES((short)7, "bufferTotalBytes"),
    BUFFERPOOL_WAIT_RATIO((short)8, "bufferpoolWaitRatio"),
    COMPRESSION_RATE_AVG((short)9, "compressionRateAvg"),
    METADATA_AGE((short)10, "metadataAge"),
    PRODUCE_THROTTLE_TIME_AVG((short)11, "produceThrottleTimeAvg"),
    PRODUCE_THROTTLE_TIME_MAX((short)12, "produceThrottleTimeMax"),
    RECORD_ERROR_RATE((short)13, "recordErrorRate"),
    RECORD_QUEUE_TIME_AVG((short)14, "recordQueueTimeAvg"),
    RECORD_QUEUE_TIME_MAX((short)15, "recordQueueTimeMax"),
    RECORD_RETRY_RATE((short)16, "recordRetryRate"),
    RECORD_SEND_RATE((short)17, "recordSendRate"),
    RECORD_SIZE_AVG((short)18, "recordSizeAvg"),
    RECORD_SIZE_MAX((short)19, "recordSizeMax"),
    RECORDS_PER_REQUEST_AVG((short)20, "recordsPerRequestAvg"),
    REQUEST_LATENCY_AVG((short)21, "requestLatencyAvg"),
    REQUEST_LATENCY_MAX((short)22, "requestLatencyMax"),
    REQUESTS_IN_FLIGHT((short)23, "requestsInFlight"),
    WAITING_THREADS((short)24, "waitingThreads"),
    CONNECTION_CLOSE_RATE((short)25, "connectionCloseRate"),
    CONNECTION_COUNT((short)26, "connectionCount"),
    CONNECTION_CREATION_RATE((short)27, "connectionCreationRate"),
    INCOMING_BYTE_RATE((short)28, "incomingByteRate"),
    IO_RATIO((short)29, "ioRatio"),
    IO_TIME_NS_AVG((short)30, "ioTimeNsAvg"),
    IO_WAIT_RATIO((short)31, "ioWaitRatio"),
    IO_WAIT_TIME_NS_AVG((short)32, "ioWaitTimeNsAvg"),
    NETWORK_IO_RATE((short)33, "networkIoRate"),
    OUTGOING_BYTE_RATE((short)34, "outgoingByteRate"),
    REQUEST_RATE((short)35, "requestRate"),
    REQUEST_SIZE_MAX((short)36, "requestSizeMax"),
    REQUEST_SIZE_AVG((short)37, "requestSizeAvg"),
    RESPONSE_RATE((short)38, "responseRate"),
    SELECT_RATE((short)39, "selectRate");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLUSTER
          return CLUSTER;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // BATCH_SIZE_AVG
          return BATCH_SIZE_AVG;
        case 4: // BATCH_SIZE_MAX
          return BATCH_SIZE_MAX;
        case 5: // BUFFER_AVAILABLE_BYTES
          return BUFFER_AVAILABLE_BYTES;
        case 6: // BUFFER_EXHAUSTED_RATE
          return BUFFER_EXHAUSTED_RATE;
        case 7: // BUFFER_TOTAL_BYTES
          return BUFFER_TOTAL_BYTES;
        case 8: // BUFFERPOOL_WAIT_RATIO
          return BUFFERPOOL_WAIT_RATIO;
        case 9: // COMPRESSION_RATE_AVG
          return COMPRESSION_RATE_AVG;
        case 10: // METADATA_AGE
          return METADATA_AGE;
        case 11: // PRODUCE_THROTTLE_TIME_AVG
          return PRODUCE_THROTTLE_TIME_AVG;
        case 12: // PRODUCE_THROTTLE_TIME_MAX
          return PRODUCE_THROTTLE_TIME_MAX;
        case 13: // RECORD_ERROR_RATE
          return RECORD_ERROR_RATE;
        case 14: // RECORD_QUEUE_TIME_AVG
          return RECORD_QUEUE_TIME_AVG;
        case 15: // RECORD_QUEUE_TIME_MAX
          return RECORD_QUEUE_TIME_MAX;
        case 16: // RECORD_RETRY_RATE
          return RECORD_RETRY_RATE;
        case 17: // RECORD_SEND_RATE
          return RECORD_SEND_RATE;
        case 18: // RECORD_SIZE_AVG
          return RECORD_SIZE_AVG;
        case 19: // RECORD_SIZE_MAX
          return RECORD_SIZE_MAX;
        case 20: // RECORDS_PER_REQUEST_AVG
          return RECORDS_PER_REQUEST_AVG;
        case 21: // REQUEST_LATENCY_AVG
          return REQUEST_LATENCY_AVG;
        case 22: // REQUEST_LATENCY_MAX
          return REQUEST_LATENCY_MAX;
        case 23: // REQUESTS_IN_FLIGHT
          return REQUESTS_IN_FLIGHT;
        case 24: // WAITING_THREADS
          return WAITING_THREADS;
        case 25: // CONNECTION_CLOSE_RATE
          return CONNECTION_CLOSE_RATE;
        case 26: // CONNECTION_COUNT
          return CONNECTION_COUNT;
        case 27: // CONNECTION_CREATION_RATE
          return CONNECTION_CREATION_RATE;
        case 28: // INCOMING_BYTE_RATE
          return INCOMING_BYTE_RATE;
        case 29: // IO_RATIO
          return IO_RATIO;
        case 30: // IO_TIME_NS_AVG
          return IO_TIME_NS_AVG;
        case 31: // IO_WAIT_RATIO
          return IO_WAIT_RATIO;
        case 32: // IO_WAIT_TIME_NS_AVG
          return IO_WAIT_TIME_NS_AVG;
        case 33: // NETWORK_IO_RATE
          return NETWORK_IO_RATE;
        case 34: // OUTGOING_BYTE_RATE
          return OUTGOING_BYTE_RATE;
        case 35: // REQUEST_RATE
          return REQUEST_RATE;
        case 36: // REQUEST_SIZE_MAX
          return REQUEST_SIZE_MAX;
        case 37: // REQUEST_SIZE_AVG
          return REQUEST_SIZE_AVG;
        case 38: // RESPONSE_RATE
          return RESPONSE_RATE;
        case 39: // SELECT_RATE
          return SELECT_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BATCHSIZEAVG_ISSET_ID = 0;
  private static final int __BATCHSIZEMAX_ISSET_ID = 1;
  private static final int __BUFFERAVAILABLEBYTES_ISSET_ID = 2;
  private static final int __BUFFEREXHAUSTEDRATE_ISSET_ID = 3;
  private static final int __BUFFERTOTALBYTES_ISSET_ID = 4;
  private static final int __BUFFERPOOLWAITRATIO_ISSET_ID = 5;
  private static final int __COMPRESSIONRATEAVG_ISSET_ID = 6;
  private static final int __METADATAAGE_ISSET_ID = 7;
  private static final int __PRODUCETHROTTLETIMEAVG_ISSET_ID = 8;
  private static final int __PRODUCETHROTTLETIMEMAX_ISSET_ID = 9;
  private static final int __RECORDERRORRATE_ISSET_ID = 10;
  private static final int __RECORDQUEUETIMEAVG_ISSET_ID = 11;
  private static final int __RECORDQUEUETIMEMAX_ISSET_ID = 12;
  private static final int __RECORDRETRYRATE_ISSET_ID = 13;
  private static final int __RECORDSENDRATE_ISSET_ID = 14;
  private static final int __RECORDSIZEAVG_ISSET_ID = 15;
  private static final int __RECORDSIZEMAX_ISSET_ID = 16;
  private static final int __RECORDSPERREQUESTAVG_ISSET_ID = 17;
  private static final int __REQUESTLATENCYAVG_ISSET_ID = 18;
  private static final int __REQUESTLATENCYMAX_ISSET_ID = 19;
  private static final int __REQUESTSINFLIGHT_ISSET_ID = 20;
  private static final int __WAITINGTHREADS_ISSET_ID = 21;
  private static final int __CONNECTIONCLOSERATE_ISSET_ID = 22;
  private static final int __CONNECTIONCOUNT_ISSET_ID = 23;
  private static final int __CONNECTIONCREATIONRATE_ISSET_ID = 24;
  private static final int __INCOMINGBYTERATE_ISSET_ID = 25;
  private static final int __IORATIO_ISSET_ID = 26;
  private static final int __IOTIMENSAVG_ISSET_ID = 27;
  private static final int __IOWAITRATIO_ISSET_ID = 28;
  private static final int __IOWAITTIMENSAVG_ISSET_ID = 29;
  private static final int __NETWORKIORATE_ISSET_ID = 30;
  private static final int __OUTGOINGBYTERATE_ISSET_ID = 31;
  private static final int __REQUESTRATE_ISSET_ID = 32;
  private static final int __REQUESTSIZEMAX_ISSET_ID = 33;
  private static final int __REQUESTSIZEAVG_ISSET_ID = 34;
  private static final int __RESPONSERATE_ISSET_ID = 35;
  private static final int __SELECTRATE_ISSET_ID = 36;
  private long __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("cluster", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BATCH_SIZE_AVG, new org.apache.thrift.meta_data.FieldMetaData("batchSizeAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BATCH_SIZE_MAX, new org.apache.thrift.meta_data.FieldMetaData("batchSizeMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BUFFER_AVAILABLE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("bufferAvailableBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BUFFER_EXHAUSTED_RATE, new org.apache.thrift.meta_data.FieldMetaData("bufferExhaustedRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BUFFER_TOTAL_BYTES, new org.apache.thrift.meta_data.FieldMetaData("bufferTotalBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BUFFERPOOL_WAIT_RATIO, new org.apache.thrift.meta_data.FieldMetaData("bufferpoolWaitRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMPRESSION_RATE_AVG, new org.apache.thrift.meta_data.FieldMetaData("compressionRateAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.METADATA_AGE, new org.apache.thrift.meta_data.FieldMetaData("metadataAge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCE_THROTTLE_TIME_AVG, new org.apache.thrift.meta_data.FieldMetaData("produceThrottleTimeAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCE_THROTTLE_TIME_MAX, new org.apache.thrift.meta_data.FieldMetaData("produceThrottleTimeMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECORD_ERROR_RATE, new org.apache.thrift.meta_data.FieldMetaData("recordErrorRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECORD_QUEUE_TIME_AVG, new org.apache.thrift.meta_data.FieldMetaData("recordQueueTimeAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECORD_QUEUE_TIME_MAX, new org.apache.thrift.meta_data.FieldMetaData("recordQueueTimeMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECORD_RETRY_RATE, new org.apache.thrift.meta_data.FieldMetaData("recordRetryRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECORD_SEND_RATE, new org.apache.thrift.meta_data.FieldMetaData("recordSendRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECORD_SIZE_AVG, new org.apache.thrift.meta_data.FieldMetaData("recordSizeAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECORD_SIZE_MAX, new org.apache.thrift.meta_data.FieldMetaData("recordSizeMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECORDS_PER_REQUEST_AVG, new org.apache.thrift.meta_data.FieldMetaData("recordsPerRequestAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_LATENCY_AVG, new org.apache.thrift.meta_data.FieldMetaData("requestLatencyAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_LATENCY_MAX, new org.apache.thrift.meta_data.FieldMetaData("requestLatencyMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUESTS_IN_FLIGHT, new org.apache.thrift.meta_data.FieldMetaData("requestsInFlight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WAITING_THREADS, new org.apache.thrift.meta_data.FieldMetaData("waitingThreads", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONNECTION_CLOSE_RATE, new org.apache.thrift.meta_data.FieldMetaData("connectionCloseRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONNECTION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("connectionCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONNECTION_CREATION_RATE, new org.apache.thrift.meta_data.FieldMetaData("connectionCreationRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INCOMING_BYTE_RATE, new org.apache.thrift.meta_data.FieldMetaData("incomingByteRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IO_RATIO, new org.apache.thrift.meta_data.FieldMetaData("ioRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IO_TIME_NS_AVG, new org.apache.thrift.meta_data.FieldMetaData("ioTimeNsAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IO_WAIT_RATIO, new org.apache.thrift.meta_data.FieldMetaData("ioWaitRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IO_WAIT_TIME_NS_AVG, new org.apache.thrift.meta_data.FieldMetaData("ioWaitTimeNsAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NETWORK_IO_RATE, new org.apache.thrift.meta_data.FieldMetaData("networkIoRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OUTGOING_BYTE_RATE, new org.apache.thrift.meta_data.FieldMetaData("outgoingByteRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_RATE, new org.apache.thrift.meta_data.FieldMetaData("requestRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_SIZE_MAX, new org.apache.thrift.meta_data.FieldMetaData("requestSizeMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_SIZE_AVG, new org.apache.thrift.meta_data.FieldMetaData("requestSizeAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RESPONSE_RATE, new org.apache.thrift.meta_data.FieldMetaData("responseRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SELECT_RATE, new org.apache.thrift.meta_data.FieldMetaData("selectRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KafkaProducerClientEntity.class, metaDataMap);
  }

  public KafkaProducerClientEntity() {
  }

  public KafkaProducerClientEntity(
    String cluster,
    String clientId,
    double batchSizeAvg,
    double batchSizeMax,
    double bufferAvailableBytes,
    double bufferExhaustedRate,
    double bufferTotalBytes,
    double bufferpoolWaitRatio,
    double compressionRateAvg,
    double metadataAge,
    double produceThrottleTimeAvg,
    double produceThrottleTimeMax,
    double recordErrorRate,
    double recordQueueTimeAvg,
    double recordQueueTimeMax,
    double recordRetryRate,
    double recordSendRate,
    double recordSizeAvg,
    double recordSizeMax,
    double recordsPerRequestAvg,
    double requestLatencyAvg,
    double requestLatencyMax,
    double requestsInFlight,
    double waitingThreads,
    double connectionCloseRate,
    double connectionCount,
    double connectionCreationRate,
    double incomingByteRate,
    double ioRatio,
    double ioTimeNsAvg,
    double ioWaitRatio,
    double ioWaitTimeNsAvg,
    double networkIoRate,
    double outgoingByteRate,
    double requestRate,
    double requestSizeMax,
    double requestSizeAvg,
    double responseRate,
    double selectRate)
  {
    this();
    this.cluster = cluster;
    this.clientId = clientId;
    this.batchSizeAvg = batchSizeAvg;
    setBatchSizeAvgIsSet(true);
    this.batchSizeMax = batchSizeMax;
    setBatchSizeMaxIsSet(true);
    this.bufferAvailableBytes = bufferAvailableBytes;
    setBufferAvailableBytesIsSet(true);
    this.bufferExhaustedRate = bufferExhaustedRate;
    setBufferExhaustedRateIsSet(true);
    this.bufferTotalBytes = bufferTotalBytes;
    setBufferTotalBytesIsSet(true);
    this.bufferpoolWaitRatio = bufferpoolWaitRatio;
    setBufferpoolWaitRatioIsSet(true);
    this.compressionRateAvg = compressionRateAvg;
    setCompressionRateAvgIsSet(true);
    this.metadataAge = metadataAge;
    setMetadataAgeIsSet(true);
    this.produceThrottleTimeAvg = produceThrottleTimeAvg;
    setProduceThrottleTimeAvgIsSet(true);
    this.produceThrottleTimeMax = produceThrottleTimeMax;
    setProduceThrottleTimeMaxIsSet(true);
    this.recordErrorRate = recordErrorRate;
    setRecordErrorRateIsSet(true);
    this.recordQueueTimeAvg = recordQueueTimeAvg;
    setRecordQueueTimeAvgIsSet(true);
    this.recordQueueTimeMax = recordQueueTimeMax;
    setRecordQueueTimeMaxIsSet(true);
    this.recordRetryRate = recordRetryRate;
    setRecordRetryRateIsSet(true);
    this.recordSendRate = recordSendRate;
    setRecordSendRateIsSet(true);
    this.recordSizeAvg = recordSizeAvg;
    setRecordSizeAvgIsSet(true);
    this.recordSizeMax = recordSizeMax;
    setRecordSizeMaxIsSet(true);
    this.recordsPerRequestAvg = recordsPerRequestAvg;
    setRecordsPerRequestAvgIsSet(true);
    this.requestLatencyAvg = requestLatencyAvg;
    setRequestLatencyAvgIsSet(true);
    this.requestLatencyMax = requestLatencyMax;
    setRequestLatencyMaxIsSet(true);
    this.requestsInFlight = requestsInFlight;
    setRequestsInFlightIsSet(true);
    this.waitingThreads = waitingThreads;
    setWaitingThreadsIsSet(true);
    this.connectionCloseRate = connectionCloseRate;
    setConnectionCloseRateIsSet(true);
    this.connectionCount = connectionCount;
    setConnectionCountIsSet(true);
    this.connectionCreationRate = connectionCreationRate;
    setConnectionCreationRateIsSet(true);
    this.incomingByteRate = incomingByteRate;
    setIncomingByteRateIsSet(true);
    this.ioRatio = ioRatio;
    setIoRatioIsSet(true);
    this.ioTimeNsAvg = ioTimeNsAvg;
    setIoTimeNsAvgIsSet(true);
    this.ioWaitRatio = ioWaitRatio;
    setIoWaitRatioIsSet(true);
    this.ioWaitTimeNsAvg = ioWaitTimeNsAvg;
    setIoWaitTimeNsAvgIsSet(true);
    this.networkIoRate = networkIoRate;
    setNetworkIoRateIsSet(true);
    this.outgoingByteRate = outgoingByteRate;
    setOutgoingByteRateIsSet(true);
    this.requestRate = requestRate;
    setRequestRateIsSet(true);
    this.requestSizeMax = requestSizeMax;
    setRequestSizeMaxIsSet(true);
    this.requestSizeAvg = requestSizeAvg;
    setRequestSizeAvgIsSet(true);
    this.responseRate = responseRate;
    setResponseRateIsSet(true);
    this.selectRate = selectRate;
    setSelectRateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KafkaProducerClientEntity(KafkaProducerClientEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCluster()) {
      this.cluster = other.cluster;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    this.batchSizeAvg = other.batchSizeAvg;
    this.batchSizeMax = other.batchSizeMax;
    this.bufferAvailableBytes = other.bufferAvailableBytes;
    this.bufferExhaustedRate = other.bufferExhaustedRate;
    this.bufferTotalBytes = other.bufferTotalBytes;
    this.bufferpoolWaitRatio = other.bufferpoolWaitRatio;
    this.compressionRateAvg = other.compressionRateAvg;
    this.metadataAge = other.metadataAge;
    this.produceThrottleTimeAvg = other.produceThrottleTimeAvg;
    this.produceThrottleTimeMax = other.produceThrottleTimeMax;
    this.recordErrorRate = other.recordErrorRate;
    this.recordQueueTimeAvg = other.recordQueueTimeAvg;
    this.recordQueueTimeMax = other.recordQueueTimeMax;
    this.recordRetryRate = other.recordRetryRate;
    this.recordSendRate = other.recordSendRate;
    this.recordSizeAvg = other.recordSizeAvg;
    this.recordSizeMax = other.recordSizeMax;
    this.recordsPerRequestAvg = other.recordsPerRequestAvg;
    this.requestLatencyAvg = other.requestLatencyAvg;
    this.requestLatencyMax = other.requestLatencyMax;
    this.requestsInFlight = other.requestsInFlight;
    this.waitingThreads = other.waitingThreads;
    this.connectionCloseRate = other.connectionCloseRate;
    this.connectionCount = other.connectionCount;
    this.connectionCreationRate = other.connectionCreationRate;
    this.incomingByteRate = other.incomingByteRate;
    this.ioRatio = other.ioRatio;
    this.ioTimeNsAvg = other.ioTimeNsAvg;
    this.ioWaitRatio = other.ioWaitRatio;
    this.ioWaitTimeNsAvg = other.ioWaitTimeNsAvg;
    this.networkIoRate = other.networkIoRate;
    this.outgoingByteRate = other.outgoingByteRate;
    this.requestRate = other.requestRate;
    this.requestSizeMax = other.requestSizeMax;
    this.requestSizeAvg = other.requestSizeAvg;
    this.responseRate = other.responseRate;
    this.selectRate = other.selectRate;
  }

  public KafkaProducerClientEntity deepCopy() {
    return new KafkaProducerClientEntity(this);
  }

  @Override
  public void clear() {
    this.cluster = null;
    this.clientId = null;
    setBatchSizeAvgIsSet(false);
    this.batchSizeAvg = 0.0;
    setBatchSizeMaxIsSet(false);
    this.batchSizeMax = 0.0;
    setBufferAvailableBytesIsSet(false);
    this.bufferAvailableBytes = 0.0;
    setBufferExhaustedRateIsSet(false);
    this.bufferExhaustedRate = 0.0;
    setBufferTotalBytesIsSet(false);
    this.bufferTotalBytes = 0.0;
    setBufferpoolWaitRatioIsSet(false);
    this.bufferpoolWaitRatio = 0.0;
    setCompressionRateAvgIsSet(false);
    this.compressionRateAvg = 0.0;
    setMetadataAgeIsSet(false);
    this.metadataAge = 0.0;
    setProduceThrottleTimeAvgIsSet(false);
    this.produceThrottleTimeAvg = 0.0;
    setProduceThrottleTimeMaxIsSet(false);
    this.produceThrottleTimeMax = 0.0;
    setRecordErrorRateIsSet(false);
    this.recordErrorRate = 0.0;
    setRecordQueueTimeAvgIsSet(false);
    this.recordQueueTimeAvg = 0.0;
    setRecordQueueTimeMaxIsSet(false);
    this.recordQueueTimeMax = 0.0;
    setRecordRetryRateIsSet(false);
    this.recordRetryRate = 0.0;
    setRecordSendRateIsSet(false);
    this.recordSendRate = 0.0;
    setRecordSizeAvgIsSet(false);
    this.recordSizeAvg = 0.0;
    setRecordSizeMaxIsSet(false);
    this.recordSizeMax = 0.0;
    setRecordsPerRequestAvgIsSet(false);
    this.recordsPerRequestAvg = 0.0;
    setRequestLatencyAvgIsSet(false);
    this.requestLatencyAvg = 0.0;
    setRequestLatencyMaxIsSet(false);
    this.requestLatencyMax = 0.0;
    setRequestsInFlightIsSet(false);
    this.requestsInFlight = 0.0;
    setWaitingThreadsIsSet(false);
    this.waitingThreads = 0.0;
    setConnectionCloseRateIsSet(false);
    this.connectionCloseRate = 0.0;
    setConnectionCountIsSet(false);
    this.connectionCount = 0.0;
    setConnectionCreationRateIsSet(false);
    this.connectionCreationRate = 0.0;
    setIncomingByteRateIsSet(false);
    this.incomingByteRate = 0.0;
    setIoRatioIsSet(false);
    this.ioRatio = 0.0;
    setIoTimeNsAvgIsSet(false);
    this.ioTimeNsAvg = 0.0;
    setIoWaitRatioIsSet(false);
    this.ioWaitRatio = 0.0;
    setIoWaitTimeNsAvgIsSet(false);
    this.ioWaitTimeNsAvg = 0.0;
    setNetworkIoRateIsSet(false);
    this.networkIoRate = 0.0;
    setOutgoingByteRateIsSet(false);
    this.outgoingByteRate = 0.0;
    setRequestRateIsSet(false);
    this.requestRate = 0.0;
    setRequestSizeMaxIsSet(false);
    this.requestSizeMax = 0.0;
    setRequestSizeAvgIsSet(false);
    this.requestSizeAvg = 0.0;
    setResponseRateIsSet(false);
    this.responseRate = 0.0;
    setSelectRateIsSet(false);
    this.selectRate = 0.0;
  }

  public String getCluster() {
    return this.cluster;
  }

  public KafkaProducerClientEntity setCluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

  public void unsetCluster() {
    this.cluster = null;
  }

  /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster() {
    return this.cluster != null;
  }

  public void setClusterIsSet(boolean value) {
    if (!value) {
      this.cluster = null;
    }
  }

  public String getClientId() {
    return this.clientId;
  }

  public KafkaProducerClientEntity setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  public double getBatchSizeAvg() {
    return this.batchSizeAvg;
  }

  public KafkaProducerClientEntity setBatchSizeAvg(double batchSizeAvg) {
    this.batchSizeAvg = batchSizeAvg;
    setBatchSizeAvgIsSet(true);
    return this;
  }

  public void unsetBatchSizeAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BATCHSIZEAVG_ISSET_ID);
  }

  /** Returns true if field batchSizeAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchSizeAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BATCHSIZEAVG_ISSET_ID);
  }

  public void setBatchSizeAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BATCHSIZEAVG_ISSET_ID, value);
  }

  public double getBatchSizeMax() {
    return this.batchSizeMax;
  }

  public KafkaProducerClientEntity setBatchSizeMax(double batchSizeMax) {
    this.batchSizeMax = batchSizeMax;
    setBatchSizeMaxIsSet(true);
    return this;
  }

  public void unsetBatchSizeMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BATCHSIZEMAX_ISSET_ID);
  }

  /** Returns true if field batchSizeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchSizeMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BATCHSIZEMAX_ISSET_ID);
  }

  public void setBatchSizeMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BATCHSIZEMAX_ISSET_ID, value);
  }

  public double getBufferAvailableBytes() {
    return this.bufferAvailableBytes;
  }

  public KafkaProducerClientEntity setBufferAvailableBytes(double bufferAvailableBytes) {
    this.bufferAvailableBytes = bufferAvailableBytes;
    setBufferAvailableBytesIsSet(true);
    return this;
  }

  public void unsetBufferAvailableBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUFFERAVAILABLEBYTES_ISSET_ID);
  }

  /** Returns true if field bufferAvailableBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetBufferAvailableBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUFFERAVAILABLEBYTES_ISSET_ID);
  }

  public void setBufferAvailableBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUFFERAVAILABLEBYTES_ISSET_ID, value);
  }

  public double getBufferExhaustedRate() {
    return this.bufferExhaustedRate;
  }

  public KafkaProducerClientEntity setBufferExhaustedRate(double bufferExhaustedRate) {
    this.bufferExhaustedRate = bufferExhaustedRate;
    setBufferExhaustedRateIsSet(true);
    return this;
  }

  public void unsetBufferExhaustedRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUFFEREXHAUSTEDRATE_ISSET_ID);
  }

  /** Returns true if field bufferExhaustedRate is set (has been assigned a value) and false otherwise */
  public boolean isSetBufferExhaustedRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUFFEREXHAUSTEDRATE_ISSET_ID);
  }

  public void setBufferExhaustedRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUFFEREXHAUSTEDRATE_ISSET_ID, value);
  }

  public double getBufferTotalBytes() {
    return this.bufferTotalBytes;
  }

  public KafkaProducerClientEntity setBufferTotalBytes(double bufferTotalBytes) {
    this.bufferTotalBytes = bufferTotalBytes;
    setBufferTotalBytesIsSet(true);
    return this;
  }

  public void unsetBufferTotalBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUFFERTOTALBYTES_ISSET_ID);
  }

  /** Returns true if field bufferTotalBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetBufferTotalBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUFFERTOTALBYTES_ISSET_ID);
  }

  public void setBufferTotalBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUFFERTOTALBYTES_ISSET_ID, value);
  }

  public double getBufferpoolWaitRatio() {
    return this.bufferpoolWaitRatio;
  }

  public KafkaProducerClientEntity setBufferpoolWaitRatio(double bufferpoolWaitRatio) {
    this.bufferpoolWaitRatio = bufferpoolWaitRatio;
    setBufferpoolWaitRatioIsSet(true);
    return this;
  }

  public void unsetBufferpoolWaitRatio() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUFFERPOOLWAITRATIO_ISSET_ID);
  }

  /** Returns true if field bufferpoolWaitRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetBufferpoolWaitRatio() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUFFERPOOLWAITRATIO_ISSET_ID);
  }

  public void setBufferpoolWaitRatioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUFFERPOOLWAITRATIO_ISSET_ID, value);
  }

  public double getCompressionRateAvg() {
    return this.compressionRateAvg;
  }

  public KafkaProducerClientEntity setCompressionRateAvg(double compressionRateAvg) {
    this.compressionRateAvg = compressionRateAvg;
    setCompressionRateAvgIsSet(true);
    return this;
  }

  public void unsetCompressionRateAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPRESSIONRATEAVG_ISSET_ID);
  }

  /** Returns true if field compressionRateAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetCompressionRateAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPRESSIONRATEAVG_ISSET_ID);
  }

  public void setCompressionRateAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPRESSIONRATEAVG_ISSET_ID, value);
  }

  public double getMetadataAge() {
    return this.metadataAge;
  }

  public KafkaProducerClientEntity setMetadataAge(double metadataAge) {
    this.metadataAge = metadataAge;
    setMetadataAgeIsSet(true);
    return this;
  }

  public void unsetMetadataAge() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __METADATAAGE_ISSET_ID);
  }

  /** Returns true if field metadataAge is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadataAge() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __METADATAAGE_ISSET_ID);
  }

  public void setMetadataAgeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __METADATAAGE_ISSET_ID, value);
  }

  public double getProduceThrottleTimeAvg() {
    return this.produceThrottleTimeAvg;
  }

  public KafkaProducerClientEntity setProduceThrottleTimeAvg(double produceThrottleTimeAvg) {
    this.produceThrottleTimeAvg = produceThrottleTimeAvg;
    setProduceThrottleTimeAvgIsSet(true);
    return this;
  }

  public void unsetProduceThrottleTimeAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRODUCETHROTTLETIMEAVG_ISSET_ID);
  }

  /** Returns true if field produceThrottleTimeAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetProduceThrottleTimeAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRODUCETHROTTLETIMEAVG_ISSET_ID);
  }

  public void setProduceThrottleTimeAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRODUCETHROTTLETIMEAVG_ISSET_ID, value);
  }

  public double getProduceThrottleTimeMax() {
    return this.produceThrottleTimeMax;
  }

  public KafkaProducerClientEntity setProduceThrottleTimeMax(double produceThrottleTimeMax) {
    this.produceThrottleTimeMax = produceThrottleTimeMax;
    setProduceThrottleTimeMaxIsSet(true);
    return this;
  }

  public void unsetProduceThrottleTimeMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRODUCETHROTTLETIMEMAX_ISSET_ID);
  }

  /** Returns true if field produceThrottleTimeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetProduceThrottleTimeMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRODUCETHROTTLETIMEMAX_ISSET_ID);
  }

  public void setProduceThrottleTimeMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRODUCETHROTTLETIMEMAX_ISSET_ID, value);
  }

  public double getRecordErrorRate() {
    return this.recordErrorRate;
  }

  public KafkaProducerClientEntity setRecordErrorRate(double recordErrorRate) {
    this.recordErrorRate = recordErrorRate;
    setRecordErrorRateIsSet(true);
    return this;
  }

  public void unsetRecordErrorRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORDERRORRATE_ISSET_ID);
  }

  /** Returns true if field recordErrorRate is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordErrorRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORDERRORRATE_ISSET_ID);
  }

  public void setRecordErrorRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORDERRORRATE_ISSET_ID, value);
  }

  public double getRecordQueueTimeAvg() {
    return this.recordQueueTimeAvg;
  }

  public KafkaProducerClientEntity setRecordQueueTimeAvg(double recordQueueTimeAvg) {
    this.recordQueueTimeAvg = recordQueueTimeAvg;
    setRecordQueueTimeAvgIsSet(true);
    return this;
  }

  public void unsetRecordQueueTimeAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORDQUEUETIMEAVG_ISSET_ID);
  }

  /** Returns true if field recordQueueTimeAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordQueueTimeAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORDQUEUETIMEAVG_ISSET_ID);
  }

  public void setRecordQueueTimeAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORDQUEUETIMEAVG_ISSET_ID, value);
  }

  public double getRecordQueueTimeMax() {
    return this.recordQueueTimeMax;
  }

  public KafkaProducerClientEntity setRecordQueueTimeMax(double recordQueueTimeMax) {
    this.recordQueueTimeMax = recordQueueTimeMax;
    setRecordQueueTimeMaxIsSet(true);
    return this;
  }

  public void unsetRecordQueueTimeMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORDQUEUETIMEMAX_ISSET_ID);
  }

  /** Returns true if field recordQueueTimeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordQueueTimeMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORDQUEUETIMEMAX_ISSET_ID);
  }

  public void setRecordQueueTimeMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORDQUEUETIMEMAX_ISSET_ID, value);
  }

  public double getRecordRetryRate() {
    return this.recordRetryRate;
  }

  public KafkaProducerClientEntity setRecordRetryRate(double recordRetryRate) {
    this.recordRetryRate = recordRetryRate;
    setRecordRetryRateIsSet(true);
    return this;
  }

  public void unsetRecordRetryRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORDRETRYRATE_ISSET_ID);
  }

  /** Returns true if field recordRetryRate is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordRetryRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORDRETRYRATE_ISSET_ID);
  }

  public void setRecordRetryRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORDRETRYRATE_ISSET_ID, value);
  }

  public double getRecordSendRate() {
    return this.recordSendRate;
  }

  public KafkaProducerClientEntity setRecordSendRate(double recordSendRate) {
    this.recordSendRate = recordSendRate;
    setRecordSendRateIsSet(true);
    return this;
  }

  public void unsetRecordSendRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORDSENDRATE_ISSET_ID);
  }

  /** Returns true if field recordSendRate is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordSendRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORDSENDRATE_ISSET_ID);
  }

  public void setRecordSendRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORDSENDRATE_ISSET_ID, value);
  }

  public double getRecordSizeAvg() {
    return this.recordSizeAvg;
  }

  public KafkaProducerClientEntity setRecordSizeAvg(double recordSizeAvg) {
    this.recordSizeAvg = recordSizeAvg;
    setRecordSizeAvgIsSet(true);
    return this;
  }

  public void unsetRecordSizeAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORDSIZEAVG_ISSET_ID);
  }

  /** Returns true if field recordSizeAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordSizeAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORDSIZEAVG_ISSET_ID);
  }

  public void setRecordSizeAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORDSIZEAVG_ISSET_ID, value);
  }

  public double getRecordSizeMax() {
    return this.recordSizeMax;
  }

  public KafkaProducerClientEntity setRecordSizeMax(double recordSizeMax) {
    this.recordSizeMax = recordSizeMax;
    setRecordSizeMaxIsSet(true);
    return this;
  }

  public void unsetRecordSizeMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORDSIZEMAX_ISSET_ID);
  }

  /** Returns true if field recordSizeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordSizeMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORDSIZEMAX_ISSET_ID);
  }

  public void setRecordSizeMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORDSIZEMAX_ISSET_ID, value);
  }

  public double getRecordsPerRequestAvg() {
    return this.recordsPerRequestAvg;
  }

  public KafkaProducerClientEntity setRecordsPerRequestAvg(double recordsPerRequestAvg) {
    this.recordsPerRequestAvg = recordsPerRequestAvg;
    setRecordsPerRequestAvgIsSet(true);
    return this;
  }

  public void unsetRecordsPerRequestAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORDSPERREQUESTAVG_ISSET_ID);
  }

  /** Returns true if field recordsPerRequestAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordsPerRequestAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORDSPERREQUESTAVG_ISSET_ID);
  }

  public void setRecordsPerRequestAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORDSPERREQUESTAVG_ISSET_ID, value);
  }

  public double getRequestLatencyAvg() {
    return this.requestLatencyAvg;
  }

  public KafkaProducerClientEntity setRequestLatencyAvg(double requestLatencyAvg) {
    this.requestLatencyAvg = requestLatencyAvg;
    setRequestLatencyAvgIsSet(true);
    return this;
  }

  public void unsetRequestLatencyAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTLATENCYAVG_ISSET_ID);
  }

  /** Returns true if field requestLatencyAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestLatencyAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTLATENCYAVG_ISSET_ID);
  }

  public void setRequestLatencyAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTLATENCYAVG_ISSET_ID, value);
  }

  public double getRequestLatencyMax() {
    return this.requestLatencyMax;
  }

  public KafkaProducerClientEntity setRequestLatencyMax(double requestLatencyMax) {
    this.requestLatencyMax = requestLatencyMax;
    setRequestLatencyMaxIsSet(true);
    return this;
  }

  public void unsetRequestLatencyMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTLATENCYMAX_ISSET_ID);
  }

  /** Returns true if field requestLatencyMax is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestLatencyMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTLATENCYMAX_ISSET_ID);
  }

  public void setRequestLatencyMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTLATENCYMAX_ISSET_ID, value);
  }

  public double getRequestsInFlight() {
    return this.requestsInFlight;
  }

  public KafkaProducerClientEntity setRequestsInFlight(double requestsInFlight) {
    this.requestsInFlight = requestsInFlight;
    setRequestsInFlightIsSet(true);
    return this;
  }

  public void unsetRequestsInFlight() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTSINFLIGHT_ISSET_ID);
  }

  /** Returns true if field requestsInFlight is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestsInFlight() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTSINFLIGHT_ISSET_ID);
  }

  public void setRequestsInFlightIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTSINFLIGHT_ISSET_ID, value);
  }

  public double getWaitingThreads() {
    return this.waitingThreads;
  }

  public KafkaProducerClientEntity setWaitingThreads(double waitingThreads) {
    this.waitingThreads = waitingThreads;
    setWaitingThreadsIsSet(true);
    return this;
  }

  public void unsetWaitingThreads() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WAITINGTHREADS_ISSET_ID);
  }

  /** Returns true if field waitingThreads is set (has been assigned a value) and false otherwise */
  public boolean isSetWaitingThreads() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WAITINGTHREADS_ISSET_ID);
  }

  public void setWaitingThreadsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WAITINGTHREADS_ISSET_ID, value);
  }

  public double getConnectionCloseRate() {
    return this.connectionCloseRate;
  }

  public KafkaProducerClientEntity setConnectionCloseRate(double connectionCloseRate) {
    this.connectionCloseRate = connectionCloseRate;
    setConnectionCloseRateIsSet(true);
    return this;
  }

  public void unsetConnectionCloseRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNECTIONCLOSERATE_ISSET_ID);
  }

  /** Returns true if field connectionCloseRate is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectionCloseRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNECTIONCLOSERATE_ISSET_ID);
  }

  public void setConnectionCloseRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNECTIONCLOSERATE_ISSET_ID, value);
  }

  public double getConnectionCount() {
    return this.connectionCount;
  }

  public KafkaProducerClientEntity setConnectionCount(double connectionCount) {
    this.connectionCount = connectionCount;
    setConnectionCountIsSet(true);
    return this;
  }

  public void unsetConnectionCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNECTIONCOUNT_ISSET_ID);
  }

  /** Returns true if field connectionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectionCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNECTIONCOUNT_ISSET_ID);
  }

  public void setConnectionCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNECTIONCOUNT_ISSET_ID, value);
  }

  public double getConnectionCreationRate() {
    return this.connectionCreationRate;
  }

  public KafkaProducerClientEntity setConnectionCreationRate(double connectionCreationRate) {
    this.connectionCreationRate = connectionCreationRate;
    setConnectionCreationRateIsSet(true);
    return this;
  }

  public void unsetConnectionCreationRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNECTIONCREATIONRATE_ISSET_ID);
  }

  /** Returns true if field connectionCreationRate is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectionCreationRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNECTIONCREATIONRATE_ISSET_ID);
  }

  public void setConnectionCreationRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNECTIONCREATIONRATE_ISSET_ID, value);
  }

  public double getIncomingByteRate() {
    return this.incomingByteRate;
  }

  public KafkaProducerClientEntity setIncomingByteRate(double incomingByteRate) {
    this.incomingByteRate = incomingByteRate;
    setIncomingByteRateIsSet(true);
    return this;
  }

  public void unsetIncomingByteRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INCOMINGBYTERATE_ISSET_ID);
  }

  /** Returns true if field incomingByteRate is set (has been assigned a value) and false otherwise */
  public boolean isSetIncomingByteRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INCOMINGBYTERATE_ISSET_ID);
  }

  public void setIncomingByteRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INCOMINGBYTERATE_ISSET_ID, value);
  }

  public double getIoRatio() {
    return this.ioRatio;
  }

  public KafkaProducerClientEntity setIoRatio(double ioRatio) {
    this.ioRatio = ioRatio;
    setIoRatioIsSet(true);
    return this;
  }

  public void unsetIoRatio() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IORATIO_ISSET_ID);
  }

  /** Returns true if field ioRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetIoRatio() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IORATIO_ISSET_ID);
  }

  public void setIoRatioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IORATIO_ISSET_ID, value);
  }

  public double getIoTimeNsAvg() {
    return this.ioTimeNsAvg;
  }

  public KafkaProducerClientEntity setIoTimeNsAvg(double ioTimeNsAvg) {
    this.ioTimeNsAvg = ioTimeNsAvg;
    setIoTimeNsAvgIsSet(true);
    return this;
  }

  public void unsetIoTimeNsAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IOTIMENSAVG_ISSET_ID);
  }

  /** Returns true if field ioTimeNsAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetIoTimeNsAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IOTIMENSAVG_ISSET_ID);
  }

  public void setIoTimeNsAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IOTIMENSAVG_ISSET_ID, value);
  }

  public double getIoWaitRatio() {
    return this.ioWaitRatio;
  }

  public KafkaProducerClientEntity setIoWaitRatio(double ioWaitRatio) {
    this.ioWaitRatio = ioWaitRatio;
    setIoWaitRatioIsSet(true);
    return this;
  }

  public void unsetIoWaitRatio() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IOWAITRATIO_ISSET_ID);
  }

  /** Returns true if field ioWaitRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetIoWaitRatio() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IOWAITRATIO_ISSET_ID);
  }

  public void setIoWaitRatioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IOWAITRATIO_ISSET_ID, value);
  }

  public double getIoWaitTimeNsAvg() {
    return this.ioWaitTimeNsAvg;
  }

  public KafkaProducerClientEntity setIoWaitTimeNsAvg(double ioWaitTimeNsAvg) {
    this.ioWaitTimeNsAvg = ioWaitTimeNsAvg;
    setIoWaitTimeNsAvgIsSet(true);
    return this;
  }

  public void unsetIoWaitTimeNsAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IOWAITTIMENSAVG_ISSET_ID);
  }

  /** Returns true if field ioWaitTimeNsAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetIoWaitTimeNsAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IOWAITTIMENSAVG_ISSET_ID);
  }

  public void setIoWaitTimeNsAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IOWAITTIMENSAVG_ISSET_ID, value);
  }

  public double getNetworkIoRate() {
    return this.networkIoRate;
  }

  public KafkaProducerClientEntity setNetworkIoRate(double networkIoRate) {
    this.networkIoRate = networkIoRate;
    setNetworkIoRateIsSet(true);
    return this;
  }

  public void unsetNetworkIoRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NETWORKIORATE_ISSET_ID);
  }

  /** Returns true if field networkIoRate is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworkIoRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NETWORKIORATE_ISSET_ID);
  }

  public void setNetworkIoRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NETWORKIORATE_ISSET_ID, value);
  }

  public double getOutgoingByteRate() {
    return this.outgoingByteRate;
  }

  public KafkaProducerClientEntity setOutgoingByteRate(double outgoingByteRate) {
    this.outgoingByteRate = outgoingByteRate;
    setOutgoingByteRateIsSet(true);
    return this;
  }

  public void unsetOutgoingByteRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTGOINGBYTERATE_ISSET_ID);
  }

  /** Returns true if field outgoingByteRate is set (has been assigned a value) and false otherwise */
  public boolean isSetOutgoingByteRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTGOINGBYTERATE_ISSET_ID);
  }

  public void setOutgoingByteRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTGOINGBYTERATE_ISSET_ID, value);
  }

  public double getRequestRate() {
    return this.requestRate;
  }

  public KafkaProducerClientEntity setRequestRate(double requestRate) {
    this.requestRate = requestRate;
    setRequestRateIsSet(true);
    return this;
  }

  public void unsetRequestRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTRATE_ISSET_ID);
  }

  /** Returns true if field requestRate is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTRATE_ISSET_ID);
  }

  public void setRequestRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTRATE_ISSET_ID, value);
  }

  public double getRequestSizeMax() {
    return this.requestSizeMax;
  }

  public KafkaProducerClientEntity setRequestSizeMax(double requestSizeMax) {
    this.requestSizeMax = requestSizeMax;
    setRequestSizeMaxIsSet(true);
    return this;
  }

  public void unsetRequestSizeMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTSIZEMAX_ISSET_ID);
  }

  /** Returns true if field requestSizeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestSizeMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTSIZEMAX_ISSET_ID);
  }

  public void setRequestSizeMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTSIZEMAX_ISSET_ID, value);
  }

  public double getRequestSizeAvg() {
    return this.requestSizeAvg;
  }

  public KafkaProducerClientEntity setRequestSizeAvg(double requestSizeAvg) {
    this.requestSizeAvg = requestSizeAvg;
    setRequestSizeAvgIsSet(true);
    return this;
  }

  public void unsetRequestSizeAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTSIZEAVG_ISSET_ID);
  }

  /** Returns true if field requestSizeAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestSizeAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTSIZEAVG_ISSET_ID);
  }

  public void setRequestSizeAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTSIZEAVG_ISSET_ID, value);
  }

  public double getResponseRate() {
    return this.responseRate;
  }

  public KafkaProducerClientEntity setResponseRate(double responseRate) {
    this.responseRate = responseRate;
    setResponseRateIsSet(true);
    return this;
  }

  public void unsetResponseRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSERATE_ISSET_ID);
  }

  /** Returns true if field responseRate is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSERATE_ISSET_ID);
  }

  public void setResponseRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSERATE_ISSET_ID, value);
  }

  public double getSelectRate() {
    return this.selectRate;
  }

  public KafkaProducerClientEntity setSelectRate(double selectRate) {
    this.selectRate = selectRate;
    setSelectRateIsSet(true);
    return this;
  }

  public void unsetSelectRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SELECTRATE_ISSET_ID);
  }

  /** Returns true if field selectRate is set (has been assigned a value) and false otherwise */
  public boolean isSetSelectRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SELECTRATE_ISSET_ID);
  }

  public void setSelectRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SELECTRATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLUSTER:
      if (value == null) {
        unsetCluster();
      } else {
        setCluster((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case BATCH_SIZE_AVG:
      if (value == null) {
        unsetBatchSizeAvg();
      } else {
        setBatchSizeAvg((Double)value);
      }
      break;

    case BATCH_SIZE_MAX:
      if (value == null) {
        unsetBatchSizeMax();
      } else {
        setBatchSizeMax((Double)value);
      }
      break;

    case BUFFER_AVAILABLE_BYTES:
      if (value == null) {
        unsetBufferAvailableBytes();
      } else {
        setBufferAvailableBytes((Double)value);
      }
      break;

    case BUFFER_EXHAUSTED_RATE:
      if (value == null) {
        unsetBufferExhaustedRate();
      } else {
        setBufferExhaustedRate((Double)value);
      }
      break;

    case BUFFER_TOTAL_BYTES:
      if (value == null) {
        unsetBufferTotalBytes();
      } else {
        setBufferTotalBytes((Double)value);
      }
      break;

    case BUFFERPOOL_WAIT_RATIO:
      if (value == null) {
        unsetBufferpoolWaitRatio();
      } else {
        setBufferpoolWaitRatio((Double)value);
      }
      break;

    case COMPRESSION_RATE_AVG:
      if (value == null) {
        unsetCompressionRateAvg();
      } else {
        setCompressionRateAvg((Double)value);
      }
      break;

    case METADATA_AGE:
      if (value == null) {
        unsetMetadataAge();
      } else {
        setMetadataAge((Double)value);
      }
      break;

    case PRODUCE_THROTTLE_TIME_AVG:
      if (value == null) {
        unsetProduceThrottleTimeAvg();
      } else {
        setProduceThrottleTimeAvg((Double)value);
      }
      break;

    case PRODUCE_THROTTLE_TIME_MAX:
      if (value == null) {
        unsetProduceThrottleTimeMax();
      } else {
        setProduceThrottleTimeMax((Double)value);
      }
      break;

    case RECORD_ERROR_RATE:
      if (value == null) {
        unsetRecordErrorRate();
      } else {
        setRecordErrorRate((Double)value);
      }
      break;

    case RECORD_QUEUE_TIME_AVG:
      if (value == null) {
        unsetRecordQueueTimeAvg();
      } else {
        setRecordQueueTimeAvg((Double)value);
      }
      break;

    case RECORD_QUEUE_TIME_MAX:
      if (value == null) {
        unsetRecordQueueTimeMax();
      } else {
        setRecordQueueTimeMax((Double)value);
      }
      break;

    case RECORD_RETRY_RATE:
      if (value == null) {
        unsetRecordRetryRate();
      } else {
        setRecordRetryRate((Double)value);
      }
      break;

    case RECORD_SEND_RATE:
      if (value == null) {
        unsetRecordSendRate();
      } else {
        setRecordSendRate((Double)value);
      }
      break;

    case RECORD_SIZE_AVG:
      if (value == null) {
        unsetRecordSizeAvg();
      } else {
        setRecordSizeAvg((Double)value);
      }
      break;

    case RECORD_SIZE_MAX:
      if (value == null) {
        unsetRecordSizeMax();
      } else {
        setRecordSizeMax((Double)value);
      }
      break;

    case RECORDS_PER_REQUEST_AVG:
      if (value == null) {
        unsetRecordsPerRequestAvg();
      } else {
        setRecordsPerRequestAvg((Double)value);
      }
      break;

    case REQUEST_LATENCY_AVG:
      if (value == null) {
        unsetRequestLatencyAvg();
      } else {
        setRequestLatencyAvg((Double)value);
      }
      break;

    case REQUEST_LATENCY_MAX:
      if (value == null) {
        unsetRequestLatencyMax();
      } else {
        setRequestLatencyMax((Double)value);
      }
      break;

    case REQUESTS_IN_FLIGHT:
      if (value == null) {
        unsetRequestsInFlight();
      } else {
        setRequestsInFlight((Double)value);
      }
      break;

    case WAITING_THREADS:
      if (value == null) {
        unsetWaitingThreads();
      } else {
        setWaitingThreads((Double)value);
      }
      break;

    case CONNECTION_CLOSE_RATE:
      if (value == null) {
        unsetConnectionCloseRate();
      } else {
        setConnectionCloseRate((Double)value);
      }
      break;

    case CONNECTION_COUNT:
      if (value == null) {
        unsetConnectionCount();
      } else {
        setConnectionCount((Double)value);
      }
      break;

    case CONNECTION_CREATION_RATE:
      if (value == null) {
        unsetConnectionCreationRate();
      } else {
        setConnectionCreationRate((Double)value);
      }
      break;

    case INCOMING_BYTE_RATE:
      if (value == null) {
        unsetIncomingByteRate();
      } else {
        setIncomingByteRate((Double)value);
      }
      break;

    case IO_RATIO:
      if (value == null) {
        unsetIoRatio();
      } else {
        setIoRatio((Double)value);
      }
      break;

    case IO_TIME_NS_AVG:
      if (value == null) {
        unsetIoTimeNsAvg();
      } else {
        setIoTimeNsAvg((Double)value);
      }
      break;

    case IO_WAIT_RATIO:
      if (value == null) {
        unsetIoWaitRatio();
      } else {
        setIoWaitRatio((Double)value);
      }
      break;

    case IO_WAIT_TIME_NS_AVG:
      if (value == null) {
        unsetIoWaitTimeNsAvg();
      } else {
        setIoWaitTimeNsAvg((Double)value);
      }
      break;

    case NETWORK_IO_RATE:
      if (value == null) {
        unsetNetworkIoRate();
      } else {
        setNetworkIoRate((Double)value);
      }
      break;

    case OUTGOING_BYTE_RATE:
      if (value == null) {
        unsetOutgoingByteRate();
      } else {
        setOutgoingByteRate((Double)value);
      }
      break;

    case REQUEST_RATE:
      if (value == null) {
        unsetRequestRate();
      } else {
        setRequestRate((Double)value);
      }
      break;

    case REQUEST_SIZE_MAX:
      if (value == null) {
        unsetRequestSizeMax();
      } else {
        setRequestSizeMax((Double)value);
      }
      break;

    case REQUEST_SIZE_AVG:
      if (value == null) {
        unsetRequestSizeAvg();
      } else {
        setRequestSizeAvg((Double)value);
      }
      break;

    case RESPONSE_RATE:
      if (value == null) {
        unsetResponseRate();
      } else {
        setResponseRate((Double)value);
      }
      break;

    case SELECT_RATE:
      if (value == null) {
        unsetSelectRate();
      } else {
        setSelectRate((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLUSTER:
      return getCluster();

    case CLIENT_ID:
      return getClientId();

    case BATCH_SIZE_AVG:
      return getBatchSizeAvg();

    case BATCH_SIZE_MAX:
      return getBatchSizeMax();

    case BUFFER_AVAILABLE_BYTES:
      return getBufferAvailableBytes();

    case BUFFER_EXHAUSTED_RATE:
      return getBufferExhaustedRate();

    case BUFFER_TOTAL_BYTES:
      return getBufferTotalBytes();

    case BUFFERPOOL_WAIT_RATIO:
      return getBufferpoolWaitRatio();

    case COMPRESSION_RATE_AVG:
      return getCompressionRateAvg();

    case METADATA_AGE:
      return getMetadataAge();

    case PRODUCE_THROTTLE_TIME_AVG:
      return getProduceThrottleTimeAvg();

    case PRODUCE_THROTTLE_TIME_MAX:
      return getProduceThrottleTimeMax();

    case RECORD_ERROR_RATE:
      return getRecordErrorRate();

    case RECORD_QUEUE_TIME_AVG:
      return getRecordQueueTimeAvg();

    case RECORD_QUEUE_TIME_MAX:
      return getRecordQueueTimeMax();

    case RECORD_RETRY_RATE:
      return getRecordRetryRate();

    case RECORD_SEND_RATE:
      return getRecordSendRate();

    case RECORD_SIZE_AVG:
      return getRecordSizeAvg();

    case RECORD_SIZE_MAX:
      return getRecordSizeMax();

    case RECORDS_PER_REQUEST_AVG:
      return getRecordsPerRequestAvg();

    case REQUEST_LATENCY_AVG:
      return getRequestLatencyAvg();

    case REQUEST_LATENCY_MAX:
      return getRequestLatencyMax();

    case REQUESTS_IN_FLIGHT:
      return getRequestsInFlight();

    case WAITING_THREADS:
      return getWaitingThreads();

    case CONNECTION_CLOSE_RATE:
      return getConnectionCloseRate();

    case CONNECTION_COUNT:
      return getConnectionCount();

    case CONNECTION_CREATION_RATE:
      return getConnectionCreationRate();

    case INCOMING_BYTE_RATE:
      return getIncomingByteRate();

    case IO_RATIO:
      return getIoRatio();

    case IO_TIME_NS_AVG:
      return getIoTimeNsAvg();

    case IO_WAIT_RATIO:
      return getIoWaitRatio();

    case IO_WAIT_TIME_NS_AVG:
      return getIoWaitTimeNsAvg();

    case NETWORK_IO_RATE:
      return getNetworkIoRate();

    case OUTGOING_BYTE_RATE:
      return getOutgoingByteRate();

    case REQUEST_RATE:
      return getRequestRate();

    case REQUEST_SIZE_MAX:
      return getRequestSizeMax();

    case REQUEST_SIZE_AVG:
      return getRequestSizeAvg();

    case RESPONSE_RATE:
      return getResponseRate();

    case SELECT_RATE:
      return getSelectRate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLUSTER:
      return isSetCluster();
    case CLIENT_ID:
      return isSetClientId();
    case BATCH_SIZE_AVG:
      return isSetBatchSizeAvg();
    case BATCH_SIZE_MAX:
      return isSetBatchSizeMax();
    case BUFFER_AVAILABLE_BYTES:
      return isSetBufferAvailableBytes();
    case BUFFER_EXHAUSTED_RATE:
      return isSetBufferExhaustedRate();
    case BUFFER_TOTAL_BYTES:
      return isSetBufferTotalBytes();
    case BUFFERPOOL_WAIT_RATIO:
      return isSetBufferpoolWaitRatio();
    case COMPRESSION_RATE_AVG:
      return isSetCompressionRateAvg();
    case METADATA_AGE:
      return isSetMetadataAge();
    case PRODUCE_THROTTLE_TIME_AVG:
      return isSetProduceThrottleTimeAvg();
    case PRODUCE_THROTTLE_TIME_MAX:
      return isSetProduceThrottleTimeMax();
    case RECORD_ERROR_RATE:
      return isSetRecordErrorRate();
    case RECORD_QUEUE_TIME_AVG:
      return isSetRecordQueueTimeAvg();
    case RECORD_QUEUE_TIME_MAX:
      return isSetRecordQueueTimeMax();
    case RECORD_RETRY_RATE:
      return isSetRecordRetryRate();
    case RECORD_SEND_RATE:
      return isSetRecordSendRate();
    case RECORD_SIZE_AVG:
      return isSetRecordSizeAvg();
    case RECORD_SIZE_MAX:
      return isSetRecordSizeMax();
    case RECORDS_PER_REQUEST_AVG:
      return isSetRecordsPerRequestAvg();
    case REQUEST_LATENCY_AVG:
      return isSetRequestLatencyAvg();
    case REQUEST_LATENCY_MAX:
      return isSetRequestLatencyMax();
    case REQUESTS_IN_FLIGHT:
      return isSetRequestsInFlight();
    case WAITING_THREADS:
      return isSetWaitingThreads();
    case CONNECTION_CLOSE_RATE:
      return isSetConnectionCloseRate();
    case CONNECTION_COUNT:
      return isSetConnectionCount();
    case CONNECTION_CREATION_RATE:
      return isSetConnectionCreationRate();
    case INCOMING_BYTE_RATE:
      return isSetIncomingByteRate();
    case IO_RATIO:
      return isSetIoRatio();
    case IO_TIME_NS_AVG:
      return isSetIoTimeNsAvg();
    case IO_WAIT_RATIO:
      return isSetIoWaitRatio();
    case IO_WAIT_TIME_NS_AVG:
      return isSetIoWaitTimeNsAvg();
    case NETWORK_IO_RATE:
      return isSetNetworkIoRate();
    case OUTGOING_BYTE_RATE:
      return isSetOutgoingByteRate();
    case REQUEST_RATE:
      return isSetRequestRate();
    case REQUEST_SIZE_MAX:
      return isSetRequestSizeMax();
    case REQUEST_SIZE_AVG:
      return isSetRequestSizeAvg();
    case RESPONSE_RATE:
      return isSetResponseRate();
    case SELECT_RATE:
      return isSetSelectRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KafkaProducerClientEntity)
      return this.equals((KafkaProducerClientEntity)that);
    return false;
  }

  public boolean equals(KafkaProducerClientEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cluster = true && this.isSetCluster();
    boolean that_present_cluster = true && that.isSetCluster();
    if (this_present_cluster || that_present_cluster) {
      if (!(this_present_cluster && that_present_cluster))
        return false;
      if (!this.cluster.equals(that.cluster))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_batchSizeAvg = true;
    boolean that_present_batchSizeAvg = true;
    if (this_present_batchSizeAvg || that_present_batchSizeAvg) {
      if (!(this_present_batchSizeAvg && that_present_batchSizeAvg))
        return false;
      if (this.batchSizeAvg != that.batchSizeAvg)
        return false;
    }

    boolean this_present_batchSizeMax = true;
    boolean that_present_batchSizeMax = true;
    if (this_present_batchSizeMax || that_present_batchSizeMax) {
      if (!(this_present_batchSizeMax && that_present_batchSizeMax))
        return false;
      if (this.batchSizeMax != that.batchSizeMax)
        return false;
    }

    boolean this_present_bufferAvailableBytes = true;
    boolean that_present_bufferAvailableBytes = true;
    if (this_present_bufferAvailableBytes || that_present_bufferAvailableBytes) {
      if (!(this_present_bufferAvailableBytes && that_present_bufferAvailableBytes))
        return false;
      if (this.bufferAvailableBytes != that.bufferAvailableBytes)
        return false;
    }

    boolean this_present_bufferExhaustedRate = true;
    boolean that_present_bufferExhaustedRate = true;
    if (this_present_bufferExhaustedRate || that_present_bufferExhaustedRate) {
      if (!(this_present_bufferExhaustedRate && that_present_bufferExhaustedRate))
        return false;
      if (this.bufferExhaustedRate != that.bufferExhaustedRate)
        return false;
    }

    boolean this_present_bufferTotalBytes = true;
    boolean that_present_bufferTotalBytes = true;
    if (this_present_bufferTotalBytes || that_present_bufferTotalBytes) {
      if (!(this_present_bufferTotalBytes && that_present_bufferTotalBytes))
        return false;
      if (this.bufferTotalBytes != that.bufferTotalBytes)
        return false;
    }

    boolean this_present_bufferpoolWaitRatio = true;
    boolean that_present_bufferpoolWaitRatio = true;
    if (this_present_bufferpoolWaitRatio || that_present_bufferpoolWaitRatio) {
      if (!(this_present_bufferpoolWaitRatio && that_present_bufferpoolWaitRatio))
        return false;
      if (this.bufferpoolWaitRatio != that.bufferpoolWaitRatio)
        return false;
    }

    boolean this_present_compressionRateAvg = true;
    boolean that_present_compressionRateAvg = true;
    if (this_present_compressionRateAvg || that_present_compressionRateAvg) {
      if (!(this_present_compressionRateAvg && that_present_compressionRateAvg))
        return false;
      if (this.compressionRateAvg != that.compressionRateAvg)
        return false;
    }

    boolean this_present_metadataAge = true;
    boolean that_present_metadataAge = true;
    if (this_present_metadataAge || that_present_metadataAge) {
      if (!(this_present_metadataAge && that_present_metadataAge))
        return false;
      if (this.metadataAge != that.metadataAge)
        return false;
    }

    boolean this_present_produceThrottleTimeAvg = true;
    boolean that_present_produceThrottleTimeAvg = true;
    if (this_present_produceThrottleTimeAvg || that_present_produceThrottleTimeAvg) {
      if (!(this_present_produceThrottleTimeAvg && that_present_produceThrottleTimeAvg))
        return false;
      if (this.produceThrottleTimeAvg != that.produceThrottleTimeAvg)
        return false;
    }

    boolean this_present_produceThrottleTimeMax = true;
    boolean that_present_produceThrottleTimeMax = true;
    if (this_present_produceThrottleTimeMax || that_present_produceThrottleTimeMax) {
      if (!(this_present_produceThrottleTimeMax && that_present_produceThrottleTimeMax))
        return false;
      if (this.produceThrottleTimeMax != that.produceThrottleTimeMax)
        return false;
    }

    boolean this_present_recordErrorRate = true;
    boolean that_present_recordErrorRate = true;
    if (this_present_recordErrorRate || that_present_recordErrorRate) {
      if (!(this_present_recordErrorRate && that_present_recordErrorRate))
        return false;
      if (this.recordErrorRate != that.recordErrorRate)
        return false;
    }

    boolean this_present_recordQueueTimeAvg = true;
    boolean that_present_recordQueueTimeAvg = true;
    if (this_present_recordQueueTimeAvg || that_present_recordQueueTimeAvg) {
      if (!(this_present_recordQueueTimeAvg && that_present_recordQueueTimeAvg))
        return false;
      if (this.recordQueueTimeAvg != that.recordQueueTimeAvg)
        return false;
    }

    boolean this_present_recordQueueTimeMax = true;
    boolean that_present_recordQueueTimeMax = true;
    if (this_present_recordQueueTimeMax || that_present_recordQueueTimeMax) {
      if (!(this_present_recordQueueTimeMax && that_present_recordQueueTimeMax))
        return false;
      if (this.recordQueueTimeMax != that.recordQueueTimeMax)
        return false;
    }

    boolean this_present_recordRetryRate = true;
    boolean that_present_recordRetryRate = true;
    if (this_present_recordRetryRate || that_present_recordRetryRate) {
      if (!(this_present_recordRetryRate && that_present_recordRetryRate))
        return false;
      if (this.recordRetryRate != that.recordRetryRate)
        return false;
    }

    boolean this_present_recordSendRate = true;
    boolean that_present_recordSendRate = true;
    if (this_present_recordSendRate || that_present_recordSendRate) {
      if (!(this_present_recordSendRate && that_present_recordSendRate))
        return false;
      if (this.recordSendRate != that.recordSendRate)
        return false;
    }

    boolean this_present_recordSizeAvg = true;
    boolean that_present_recordSizeAvg = true;
    if (this_present_recordSizeAvg || that_present_recordSizeAvg) {
      if (!(this_present_recordSizeAvg && that_present_recordSizeAvg))
        return false;
      if (this.recordSizeAvg != that.recordSizeAvg)
        return false;
    }

    boolean this_present_recordSizeMax = true;
    boolean that_present_recordSizeMax = true;
    if (this_present_recordSizeMax || that_present_recordSizeMax) {
      if (!(this_present_recordSizeMax && that_present_recordSizeMax))
        return false;
      if (this.recordSizeMax != that.recordSizeMax)
        return false;
    }

    boolean this_present_recordsPerRequestAvg = true;
    boolean that_present_recordsPerRequestAvg = true;
    if (this_present_recordsPerRequestAvg || that_present_recordsPerRequestAvg) {
      if (!(this_present_recordsPerRequestAvg && that_present_recordsPerRequestAvg))
        return false;
      if (this.recordsPerRequestAvg != that.recordsPerRequestAvg)
        return false;
    }

    boolean this_present_requestLatencyAvg = true;
    boolean that_present_requestLatencyAvg = true;
    if (this_present_requestLatencyAvg || that_present_requestLatencyAvg) {
      if (!(this_present_requestLatencyAvg && that_present_requestLatencyAvg))
        return false;
      if (this.requestLatencyAvg != that.requestLatencyAvg)
        return false;
    }

    boolean this_present_requestLatencyMax = true;
    boolean that_present_requestLatencyMax = true;
    if (this_present_requestLatencyMax || that_present_requestLatencyMax) {
      if (!(this_present_requestLatencyMax && that_present_requestLatencyMax))
        return false;
      if (this.requestLatencyMax != that.requestLatencyMax)
        return false;
    }

    boolean this_present_requestsInFlight = true;
    boolean that_present_requestsInFlight = true;
    if (this_present_requestsInFlight || that_present_requestsInFlight) {
      if (!(this_present_requestsInFlight && that_present_requestsInFlight))
        return false;
      if (this.requestsInFlight != that.requestsInFlight)
        return false;
    }

    boolean this_present_waitingThreads = true;
    boolean that_present_waitingThreads = true;
    if (this_present_waitingThreads || that_present_waitingThreads) {
      if (!(this_present_waitingThreads && that_present_waitingThreads))
        return false;
      if (this.waitingThreads != that.waitingThreads)
        return false;
    }

    boolean this_present_connectionCloseRate = true;
    boolean that_present_connectionCloseRate = true;
    if (this_present_connectionCloseRate || that_present_connectionCloseRate) {
      if (!(this_present_connectionCloseRate && that_present_connectionCloseRate))
        return false;
      if (this.connectionCloseRate != that.connectionCloseRate)
        return false;
    }

    boolean this_present_connectionCount = true;
    boolean that_present_connectionCount = true;
    if (this_present_connectionCount || that_present_connectionCount) {
      if (!(this_present_connectionCount && that_present_connectionCount))
        return false;
      if (this.connectionCount != that.connectionCount)
        return false;
    }

    boolean this_present_connectionCreationRate = true;
    boolean that_present_connectionCreationRate = true;
    if (this_present_connectionCreationRate || that_present_connectionCreationRate) {
      if (!(this_present_connectionCreationRate && that_present_connectionCreationRate))
        return false;
      if (this.connectionCreationRate != that.connectionCreationRate)
        return false;
    }

    boolean this_present_incomingByteRate = true;
    boolean that_present_incomingByteRate = true;
    if (this_present_incomingByteRate || that_present_incomingByteRate) {
      if (!(this_present_incomingByteRate && that_present_incomingByteRate))
        return false;
      if (this.incomingByteRate != that.incomingByteRate)
        return false;
    }

    boolean this_present_ioRatio = true;
    boolean that_present_ioRatio = true;
    if (this_present_ioRatio || that_present_ioRatio) {
      if (!(this_present_ioRatio && that_present_ioRatio))
        return false;
      if (this.ioRatio != that.ioRatio)
        return false;
    }

    boolean this_present_ioTimeNsAvg = true;
    boolean that_present_ioTimeNsAvg = true;
    if (this_present_ioTimeNsAvg || that_present_ioTimeNsAvg) {
      if (!(this_present_ioTimeNsAvg && that_present_ioTimeNsAvg))
        return false;
      if (this.ioTimeNsAvg != that.ioTimeNsAvg)
        return false;
    }

    boolean this_present_ioWaitRatio = true;
    boolean that_present_ioWaitRatio = true;
    if (this_present_ioWaitRatio || that_present_ioWaitRatio) {
      if (!(this_present_ioWaitRatio && that_present_ioWaitRatio))
        return false;
      if (this.ioWaitRatio != that.ioWaitRatio)
        return false;
    }

    boolean this_present_ioWaitTimeNsAvg = true;
    boolean that_present_ioWaitTimeNsAvg = true;
    if (this_present_ioWaitTimeNsAvg || that_present_ioWaitTimeNsAvg) {
      if (!(this_present_ioWaitTimeNsAvg && that_present_ioWaitTimeNsAvg))
        return false;
      if (this.ioWaitTimeNsAvg != that.ioWaitTimeNsAvg)
        return false;
    }

    boolean this_present_networkIoRate = true;
    boolean that_present_networkIoRate = true;
    if (this_present_networkIoRate || that_present_networkIoRate) {
      if (!(this_present_networkIoRate && that_present_networkIoRate))
        return false;
      if (this.networkIoRate != that.networkIoRate)
        return false;
    }

    boolean this_present_outgoingByteRate = true;
    boolean that_present_outgoingByteRate = true;
    if (this_present_outgoingByteRate || that_present_outgoingByteRate) {
      if (!(this_present_outgoingByteRate && that_present_outgoingByteRate))
        return false;
      if (this.outgoingByteRate != that.outgoingByteRate)
        return false;
    }

    boolean this_present_requestRate = true;
    boolean that_present_requestRate = true;
    if (this_present_requestRate || that_present_requestRate) {
      if (!(this_present_requestRate && that_present_requestRate))
        return false;
      if (this.requestRate != that.requestRate)
        return false;
    }

    boolean this_present_requestSizeMax = true;
    boolean that_present_requestSizeMax = true;
    if (this_present_requestSizeMax || that_present_requestSizeMax) {
      if (!(this_present_requestSizeMax && that_present_requestSizeMax))
        return false;
      if (this.requestSizeMax != that.requestSizeMax)
        return false;
    }

    boolean this_present_requestSizeAvg = true;
    boolean that_present_requestSizeAvg = true;
    if (this_present_requestSizeAvg || that_present_requestSizeAvg) {
      if (!(this_present_requestSizeAvg && that_present_requestSizeAvg))
        return false;
      if (this.requestSizeAvg != that.requestSizeAvg)
        return false;
    }

    boolean this_present_responseRate = true;
    boolean that_present_responseRate = true;
    if (this_present_responseRate || that_present_responseRate) {
      if (!(this_present_responseRate && that_present_responseRate))
        return false;
      if (this.responseRate != that.responseRate)
        return false;
    }

    boolean this_present_selectRate = true;
    boolean that_present_selectRate = true;
    if (this_present_selectRate || that_present_selectRate) {
      if (!(this_present_selectRate && that_present_selectRate))
        return false;
      if (this.selectRate != that.selectRate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCluster()) ? 131071 : 524287);
    if (isSetCluster())
      hashCode = hashCode * 8191 + cluster.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientId()) ? 131071 : 524287);
    if (isSetClientId())
      hashCode = hashCode * 8191 + clientId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(batchSizeAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(batchSizeMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bufferAvailableBytes);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bufferExhaustedRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bufferTotalBytes);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bufferpoolWaitRatio);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(compressionRateAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(metadataAge);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(produceThrottleTimeAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(produceThrottleTimeMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recordErrorRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recordQueueTimeAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recordQueueTimeMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recordRetryRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recordSendRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recordSizeAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recordSizeMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recordsPerRequestAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestLatencyAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestLatencyMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestsInFlight);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(waitingThreads);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(connectionCloseRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(connectionCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(connectionCreationRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(incomingByteRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ioRatio);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ioTimeNsAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ioWaitRatio);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ioWaitTimeNsAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(networkIoRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outgoingByteRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestSizeMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestSizeAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(selectRate);

    return hashCode;
  }

  @Override
  public int compareTo(KafkaProducerClientEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCluster()).compareTo(other.isSetCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster, other.cluster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchSizeAvg()).compareTo(other.isSetBatchSizeAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchSizeAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchSizeAvg, other.batchSizeAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchSizeMax()).compareTo(other.isSetBatchSizeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchSizeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchSizeMax, other.batchSizeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBufferAvailableBytes()).compareTo(other.isSetBufferAvailableBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBufferAvailableBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferAvailableBytes, other.bufferAvailableBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBufferExhaustedRate()).compareTo(other.isSetBufferExhaustedRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBufferExhaustedRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferExhaustedRate, other.bufferExhaustedRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBufferTotalBytes()).compareTo(other.isSetBufferTotalBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBufferTotalBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferTotalBytes, other.bufferTotalBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBufferpoolWaitRatio()).compareTo(other.isSetBufferpoolWaitRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBufferpoolWaitRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferpoolWaitRatio, other.bufferpoolWaitRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompressionRateAvg()).compareTo(other.isSetCompressionRateAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompressionRateAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compressionRateAvg, other.compressionRateAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadataAge()).compareTo(other.isSetMetadataAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadataAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataAge, other.metadataAge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProduceThrottleTimeAvg()).compareTo(other.isSetProduceThrottleTimeAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProduceThrottleTimeAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.produceThrottleTimeAvg, other.produceThrottleTimeAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProduceThrottleTimeMax()).compareTo(other.isSetProduceThrottleTimeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProduceThrottleTimeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.produceThrottleTimeMax, other.produceThrottleTimeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordErrorRate()).compareTo(other.isSetRecordErrorRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordErrorRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordErrorRate, other.recordErrorRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordQueueTimeAvg()).compareTo(other.isSetRecordQueueTimeAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordQueueTimeAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordQueueTimeAvg, other.recordQueueTimeAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordQueueTimeMax()).compareTo(other.isSetRecordQueueTimeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordQueueTimeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordQueueTimeMax, other.recordQueueTimeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordRetryRate()).compareTo(other.isSetRecordRetryRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordRetryRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordRetryRate, other.recordRetryRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordSendRate()).compareTo(other.isSetRecordSendRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordSendRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordSendRate, other.recordSendRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordSizeAvg()).compareTo(other.isSetRecordSizeAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordSizeAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordSizeAvg, other.recordSizeAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordSizeMax()).compareTo(other.isSetRecordSizeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordSizeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordSizeMax, other.recordSizeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordsPerRequestAvg()).compareTo(other.isSetRecordsPerRequestAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordsPerRequestAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordsPerRequestAvg, other.recordsPerRequestAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestLatencyAvg()).compareTo(other.isSetRequestLatencyAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestLatencyAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestLatencyAvg, other.requestLatencyAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestLatencyMax()).compareTo(other.isSetRequestLatencyMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestLatencyMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestLatencyMax, other.requestLatencyMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestsInFlight()).compareTo(other.isSetRequestsInFlight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestsInFlight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestsInFlight, other.requestsInFlight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWaitingThreads()).compareTo(other.isSetWaitingThreads());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaitingThreads()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waitingThreads, other.waitingThreads);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnectionCloseRate()).compareTo(other.isSetConnectionCloseRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectionCloseRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectionCloseRate, other.connectionCloseRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnectionCount()).compareTo(other.isSetConnectionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectionCount, other.connectionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnectionCreationRate()).compareTo(other.isSetConnectionCreationRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectionCreationRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectionCreationRate, other.connectionCreationRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncomingByteRate()).compareTo(other.isSetIncomingByteRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncomingByteRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomingByteRate, other.incomingByteRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIoRatio()).compareTo(other.isSetIoRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIoRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioRatio, other.ioRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIoTimeNsAvg()).compareTo(other.isSetIoTimeNsAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIoTimeNsAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioTimeNsAvg, other.ioTimeNsAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIoWaitRatio()).compareTo(other.isSetIoWaitRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIoWaitRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioWaitRatio, other.ioWaitRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIoWaitTimeNsAvg()).compareTo(other.isSetIoWaitTimeNsAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIoWaitTimeNsAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioWaitTimeNsAvg, other.ioWaitTimeNsAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetworkIoRate()).compareTo(other.isSetNetworkIoRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworkIoRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkIoRate, other.networkIoRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutgoingByteRate()).compareTo(other.isSetOutgoingByteRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutgoingByteRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outgoingByteRate, other.outgoingByteRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestRate()).compareTo(other.isSetRequestRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestRate, other.requestRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestSizeMax()).compareTo(other.isSetRequestSizeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestSizeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestSizeMax, other.requestSizeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestSizeAvg()).compareTo(other.isSetRequestSizeAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestSizeAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestSizeAvg, other.requestSizeAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseRate()).compareTo(other.isSetResponseRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseRate, other.responseRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelectRate()).compareTo(other.isSetSelectRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelectRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectRate, other.selectRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KafkaProducerClientEntity(");
    boolean first = true;

    sb.append("cluster:");
    if (this.cluster == null) {
      sb.append("null");
    } else {
      sb.append(this.cluster);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("batchSizeAvg:");
    sb.append(this.batchSizeAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("batchSizeMax:");
    sb.append(this.batchSizeMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bufferAvailableBytes:");
    sb.append(this.bufferAvailableBytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bufferExhaustedRate:");
    sb.append(this.bufferExhaustedRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bufferTotalBytes:");
    sb.append(this.bufferTotalBytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bufferpoolWaitRatio:");
    sb.append(this.bufferpoolWaitRatio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("compressionRateAvg:");
    sb.append(this.compressionRateAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadataAge:");
    sb.append(this.metadataAge);
    first = false;
    if (!first) sb.append(", ");
    sb.append("produceThrottleTimeAvg:");
    sb.append(this.produceThrottleTimeAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("produceThrottleTimeMax:");
    sb.append(this.produceThrottleTimeMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordErrorRate:");
    sb.append(this.recordErrorRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordQueueTimeAvg:");
    sb.append(this.recordQueueTimeAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordQueueTimeMax:");
    sb.append(this.recordQueueTimeMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordRetryRate:");
    sb.append(this.recordRetryRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordSendRate:");
    sb.append(this.recordSendRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordSizeAvg:");
    sb.append(this.recordSizeAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordSizeMax:");
    sb.append(this.recordSizeMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordsPerRequestAvg:");
    sb.append(this.recordsPerRequestAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestLatencyAvg:");
    sb.append(this.requestLatencyAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestLatencyMax:");
    sb.append(this.requestLatencyMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestsInFlight:");
    sb.append(this.requestsInFlight);
    first = false;
    if (!first) sb.append(", ");
    sb.append("waitingThreads:");
    sb.append(this.waitingThreads);
    first = false;
    if (!first) sb.append(", ");
    sb.append("connectionCloseRate:");
    sb.append(this.connectionCloseRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("connectionCount:");
    sb.append(this.connectionCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("connectionCreationRate:");
    sb.append(this.connectionCreationRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("incomingByteRate:");
    sb.append(this.incomingByteRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ioRatio:");
    sb.append(this.ioRatio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ioTimeNsAvg:");
    sb.append(this.ioTimeNsAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ioWaitRatio:");
    sb.append(this.ioWaitRatio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ioWaitTimeNsAvg:");
    sb.append(this.ioWaitTimeNsAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("networkIoRate:");
    sb.append(this.networkIoRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outgoingByteRate:");
    sb.append(this.outgoingByteRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestRate:");
    sb.append(this.requestRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestSizeMax:");
    sb.append(this.requestSizeMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestSizeAvg:");
    sb.append(this.requestSizeAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseRate:");
    sb.append(this.responseRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("selectRate:");
    sb.append(this.selectRate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KafkaProducerClientEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaProducerClientEntityStandardScheme getScheme() {
      return new KafkaProducerClientEntityStandardScheme();
    }
  }

  private static class KafkaProducerClientEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<KafkaProducerClientEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KafkaProducerClientEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLUSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cluster = iprot.readString();
              struct.setClusterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BATCH_SIZE_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.batchSizeAvg = iprot.readDouble();
              struct.setBatchSizeAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BATCH_SIZE_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.batchSizeMax = iprot.readDouble();
              struct.setBatchSizeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BUFFER_AVAILABLE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bufferAvailableBytes = iprot.readDouble();
              struct.setBufferAvailableBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BUFFER_EXHAUSTED_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bufferExhaustedRate = iprot.readDouble();
              struct.setBufferExhaustedRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BUFFER_TOTAL_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bufferTotalBytes = iprot.readDouble();
              struct.setBufferTotalBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BUFFERPOOL_WAIT_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bufferpoolWaitRatio = iprot.readDouble();
              struct.setBufferpoolWaitRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMPRESSION_RATE_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.compressionRateAvg = iprot.readDouble();
              struct.setCompressionRateAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // METADATA_AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.metadataAge = iprot.readDouble();
              struct.setMetadataAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PRODUCE_THROTTLE_TIME_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.produceThrottleTimeAvg = iprot.readDouble();
              struct.setProduceThrottleTimeAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PRODUCE_THROTTLE_TIME_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.produceThrottleTimeMax = iprot.readDouble();
              struct.setProduceThrottleTimeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // RECORD_ERROR_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recordErrorRate = iprot.readDouble();
              struct.setRecordErrorRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RECORD_QUEUE_TIME_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recordQueueTimeAvg = iprot.readDouble();
              struct.setRecordQueueTimeAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RECORD_QUEUE_TIME_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recordQueueTimeMax = iprot.readDouble();
              struct.setRecordQueueTimeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RECORD_RETRY_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recordRetryRate = iprot.readDouble();
              struct.setRecordRetryRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RECORD_SEND_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recordSendRate = iprot.readDouble();
              struct.setRecordSendRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RECORD_SIZE_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recordSizeAvg = iprot.readDouble();
              struct.setRecordSizeAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // RECORD_SIZE_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recordSizeMax = iprot.readDouble();
              struct.setRecordSizeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RECORDS_PER_REQUEST_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recordsPerRequestAvg = iprot.readDouble();
              struct.setRecordsPerRequestAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // REQUEST_LATENCY_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requestLatencyAvg = iprot.readDouble();
              struct.setRequestLatencyAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // REQUEST_LATENCY_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requestLatencyMax = iprot.readDouble();
              struct.setRequestLatencyMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // REQUESTS_IN_FLIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requestsInFlight = iprot.readDouble();
              struct.setRequestsInFlightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // WAITING_THREADS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.waitingThreads = iprot.readDouble();
              struct.setWaitingThreadsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CONNECTION_CLOSE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.connectionCloseRate = iprot.readDouble();
              struct.setConnectionCloseRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // CONNECTION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.connectionCount = iprot.readDouble();
              struct.setConnectionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // CONNECTION_CREATION_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.connectionCreationRate = iprot.readDouble();
              struct.setConnectionCreationRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // INCOMING_BYTE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.incomingByteRate = iprot.readDouble();
              struct.setIncomingByteRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // IO_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ioRatio = iprot.readDouble();
              struct.setIoRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // IO_TIME_NS_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ioTimeNsAvg = iprot.readDouble();
              struct.setIoTimeNsAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // IO_WAIT_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ioWaitRatio = iprot.readDouble();
              struct.setIoWaitRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // IO_WAIT_TIME_NS_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ioWaitTimeNsAvg = iprot.readDouble();
              struct.setIoWaitTimeNsAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // NETWORK_IO_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.networkIoRate = iprot.readDouble();
              struct.setNetworkIoRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // OUTGOING_BYTE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.outgoingByteRate = iprot.readDouble();
              struct.setOutgoingByteRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // REQUEST_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requestRate = iprot.readDouble();
              struct.setRequestRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // REQUEST_SIZE_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requestSizeMax = iprot.readDouble();
              struct.setRequestSizeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // REQUEST_SIZE_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requestSizeAvg = iprot.readDouble();
              struct.setRequestSizeAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // RESPONSE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.responseRate = iprot.readDouble();
              struct.setResponseRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // SELECT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.selectRate = iprot.readDouble();
              struct.setSelectRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KafkaProducerClientEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cluster != null) {
        oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
        oprot.writeString(struct.cluster);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BATCH_SIZE_AVG_FIELD_DESC);
      oprot.writeDouble(struct.batchSizeAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BATCH_SIZE_MAX_FIELD_DESC);
      oprot.writeDouble(struct.batchSizeMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUFFER_AVAILABLE_BYTES_FIELD_DESC);
      oprot.writeDouble(struct.bufferAvailableBytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUFFER_EXHAUSTED_RATE_FIELD_DESC);
      oprot.writeDouble(struct.bufferExhaustedRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUFFER_TOTAL_BYTES_FIELD_DESC);
      oprot.writeDouble(struct.bufferTotalBytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUFFERPOOL_WAIT_RATIO_FIELD_DESC);
      oprot.writeDouble(struct.bufferpoolWaitRatio);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPRESSION_RATE_AVG_FIELD_DESC);
      oprot.writeDouble(struct.compressionRateAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(METADATA_AGE_FIELD_DESC);
      oprot.writeDouble(struct.metadataAge);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCE_THROTTLE_TIME_AVG_FIELD_DESC);
      oprot.writeDouble(struct.produceThrottleTimeAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCE_THROTTLE_TIME_MAX_FIELD_DESC);
      oprot.writeDouble(struct.produceThrottleTimeMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORD_ERROR_RATE_FIELD_DESC);
      oprot.writeDouble(struct.recordErrorRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORD_QUEUE_TIME_AVG_FIELD_DESC);
      oprot.writeDouble(struct.recordQueueTimeAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORD_QUEUE_TIME_MAX_FIELD_DESC);
      oprot.writeDouble(struct.recordQueueTimeMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORD_RETRY_RATE_FIELD_DESC);
      oprot.writeDouble(struct.recordRetryRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORD_SEND_RATE_FIELD_DESC);
      oprot.writeDouble(struct.recordSendRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORD_SIZE_AVG_FIELD_DESC);
      oprot.writeDouble(struct.recordSizeAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORD_SIZE_MAX_FIELD_DESC);
      oprot.writeDouble(struct.recordSizeMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORDS_PER_REQUEST_AVG_FIELD_DESC);
      oprot.writeDouble(struct.recordsPerRequestAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_LATENCY_AVG_FIELD_DESC);
      oprot.writeDouble(struct.requestLatencyAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_LATENCY_MAX_FIELD_DESC);
      oprot.writeDouble(struct.requestLatencyMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUESTS_IN_FLIGHT_FIELD_DESC);
      oprot.writeDouble(struct.requestsInFlight);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WAITING_THREADS_FIELD_DESC);
      oprot.writeDouble(struct.waitingThreads);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONNECTION_CLOSE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.connectionCloseRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONNECTION_COUNT_FIELD_DESC);
      oprot.writeDouble(struct.connectionCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONNECTION_CREATION_RATE_FIELD_DESC);
      oprot.writeDouble(struct.connectionCreationRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCOMING_BYTE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.incomingByteRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IO_RATIO_FIELD_DESC);
      oprot.writeDouble(struct.ioRatio);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IO_TIME_NS_AVG_FIELD_DESC);
      oprot.writeDouble(struct.ioTimeNsAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IO_WAIT_RATIO_FIELD_DESC);
      oprot.writeDouble(struct.ioWaitRatio);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IO_WAIT_TIME_NS_AVG_FIELD_DESC);
      oprot.writeDouble(struct.ioWaitTimeNsAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NETWORK_IO_RATE_FIELD_DESC);
      oprot.writeDouble(struct.networkIoRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUTGOING_BYTE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.outgoingByteRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_RATE_FIELD_DESC);
      oprot.writeDouble(struct.requestRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_SIZE_MAX_FIELD_DESC);
      oprot.writeDouble(struct.requestSizeMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_SIZE_AVG_FIELD_DESC);
      oprot.writeDouble(struct.requestSizeAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESPONSE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.responseRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELECT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.selectRate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KafkaProducerClientEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaProducerClientEntityTupleScheme getScheme() {
      return new KafkaProducerClientEntityTupleScheme();
    }
  }

  private static class KafkaProducerClientEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<KafkaProducerClientEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KafkaProducerClientEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCluster()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetBatchSizeAvg()) {
        optionals.set(2);
      }
      if (struct.isSetBatchSizeMax()) {
        optionals.set(3);
      }
      if (struct.isSetBufferAvailableBytes()) {
        optionals.set(4);
      }
      if (struct.isSetBufferExhaustedRate()) {
        optionals.set(5);
      }
      if (struct.isSetBufferTotalBytes()) {
        optionals.set(6);
      }
      if (struct.isSetBufferpoolWaitRatio()) {
        optionals.set(7);
      }
      if (struct.isSetCompressionRateAvg()) {
        optionals.set(8);
      }
      if (struct.isSetMetadataAge()) {
        optionals.set(9);
      }
      if (struct.isSetProduceThrottleTimeAvg()) {
        optionals.set(10);
      }
      if (struct.isSetProduceThrottleTimeMax()) {
        optionals.set(11);
      }
      if (struct.isSetRecordErrorRate()) {
        optionals.set(12);
      }
      if (struct.isSetRecordQueueTimeAvg()) {
        optionals.set(13);
      }
      if (struct.isSetRecordQueueTimeMax()) {
        optionals.set(14);
      }
      if (struct.isSetRecordRetryRate()) {
        optionals.set(15);
      }
      if (struct.isSetRecordSendRate()) {
        optionals.set(16);
      }
      if (struct.isSetRecordSizeAvg()) {
        optionals.set(17);
      }
      if (struct.isSetRecordSizeMax()) {
        optionals.set(18);
      }
      if (struct.isSetRecordsPerRequestAvg()) {
        optionals.set(19);
      }
      if (struct.isSetRequestLatencyAvg()) {
        optionals.set(20);
      }
      if (struct.isSetRequestLatencyMax()) {
        optionals.set(21);
      }
      if (struct.isSetRequestsInFlight()) {
        optionals.set(22);
      }
      if (struct.isSetWaitingThreads()) {
        optionals.set(23);
      }
      if (struct.isSetConnectionCloseRate()) {
        optionals.set(24);
      }
      if (struct.isSetConnectionCount()) {
        optionals.set(25);
      }
      if (struct.isSetConnectionCreationRate()) {
        optionals.set(26);
      }
      if (struct.isSetIncomingByteRate()) {
        optionals.set(27);
      }
      if (struct.isSetIoRatio()) {
        optionals.set(28);
      }
      if (struct.isSetIoTimeNsAvg()) {
        optionals.set(29);
      }
      if (struct.isSetIoWaitRatio()) {
        optionals.set(30);
      }
      if (struct.isSetIoWaitTimeNsAvg()) {
        optionals.set(31);
      }
      if (struct.isSetNetworkIoRate()) {
        optionals.set(32);
      }
      if (struct.isSetOutgoingByteRate()) {
        optionals.set(33);
      }
      if (struct.isSetRequestRate()) {
        optionals.set(34);
      }
      if (struct.isSetRequestSizeMax()) {
        optionals.set(35);
      }
      if (struct.isSetRequestSizeAvg()) {
        optionals.set(36);
      }
      if (struct.isSetResponseRate()) {
        optionals.set(37);
      }
      if (struct.isSetSelectRate()) {
        optionals.set(38);
      }
      oprot.writeBitSet(optionals, 39);
      if (struct.isSetCluster()) {
        oprot.writeString(struct.cluster);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetBatchSizeAvg()) {
        oprot.writeDouble(struct.batchSizeAvg);
      }
      if (struct.isSetBatchSizeMax()) {
        oprot.writeDouble(struct.batchSizeMax);
      }
      if (struct.isSetBufferAvailableBytes()) {
        oprot.writeDouble(struct.bufferAvailableBytes);
      }
      if (struct.isSetBufferExhaustedRate()) {
        oprot.writeDouble(struct.bufferExhaustedRate);
      }
      if (struct.isSetBufferTotalBytes()) {
        oprot.writeDouble(struct.bufferTotalBytes);
      }
      if (struct.isSetBufferpoolWaitRatio()) {
        oprot.writeDouble(struct.bufferpoolWaitRatio);
      }
      if (struct.isSetCompressionRateAvg()) {
        oprot.writeDouble(struct.compressionRateAvg);
      }
      if (struct.isSetMetadataAge()) {
        oprot.writeDouble(struct.metadataAge);
      }
      if (struct.isSetProduceThrottleTimeAvg()) {
        oprot.writeDouble(struct.produceThrottleTimeAvg);
      }
      if (struct.isSetProduceThrottleTimeMax()) {
        oprot.writeDouble(struct.produceThrottleTimeMax);
      }
      if (struct.isSetRecordErrorRate()) {
        oprot.writeDouble(struct.recordErrorRate);
      }
      if (struct.isSetRecordQueueTimeAvg()) {
        oprot.writeDouble(struct.recordQueueTimeAvg);
      }
      if (struct.isSetRecordQueueTimeMax()) {
        oprot.writeDouble(struct.recordQueueTimeMax);
      }
      if (struct.isSetRecordRetryRate()) {
        oprot.writeDouble(struct.recordRetryRate);
      }
      if (struct.isSetRecordSendRate()) {
        oprot.writeDouble(struct.recordSendRate);
      }
      if (struct.isSetRecordSizeAvg()) {
        oprot.writeDouble(struct.recordSizeAvg);
      }
      if (struct.isSetRecordSizeMax()) {
        oprot.writeDouble(struct.recordSizeMax);
      }
      if (struct.isSetRecordsPerRequestAvg()) {
        oprot.writeDouble(struct.recordsPerRequestAvg);
      }
      if (struct.isSetRequestLatencyAvg()) {
        oprot.writeDouble(struct.requestLatencyAvg);
      }
      if (struct.isSetRequestLatencyMax()) {
        oprot.writeDouble(struct.requestLatencyMax);
      }
      if (struct.isSetRequestsInFlight()) {
        oprot.writeDouble(struct.requestsInFlight);
      }
      if (struct.isSetWaitingThreads()) {
        oprot.writeDouble(struct.waitingThreads);
      }
      if (struct.isSetConnectionCloseRate()) {
        oprot.writeDouble(struct.connectionCloseRate);
      }
      if (struct.isSetConnectionCount()) {
        oprot.writeDouble(struct.connectionCount);
      }
      if (struct.isSetConnectionCreationRate()) {
        oprot.writeDouble(struct.connectionCreationRate);
      }
      if (struct.isSetIncomingByteRate()) {
        oprot.writeDouble(struct.incomingByteRate);
      }
      if (struct.isSetIoRatio()) {
        oprot.writeDouble(struct.ioRatio);
      }
      if (struct.isSetIoTimeNsAvg()) {
        oprot.writeDouble(struct.ioTimeNsAvg);
      }
      if (struct.isSetIoWaitRatio()) {
        oprot.writeDouble(struct.ioWaitRatio);
      }
      if (struct.isSetIoWaitTimeNsAvg()) {
        oprot.writeDouble(struct.ioWaitTimeNsAvg);
      }
      if (struct.isSetNetworkIoRate()) {
        oprot.writeDouble(struct.networkIoRate);
      }
      if (struct.isSetOutgoingByteRate()) {
        oprot.writeDouble(struct.outgoingByteRate);
      }
      if (struct.isSetRequestRate()) {
        oprot.writeDouble(struct.requestRate);
      }
      if (struct.isSetRequestSizeMax()) {
        oprot.writeDouble(struct.requestSizeMax);
      }
      if (struct.isSetRequestSizeAvg()) {
        oprot.writeDouble(struct.requestSizeAvg);
      }
      if (struct.isSetResponseRate()) {
        oprot.writeDouble(struct.responseRate);
      }
      if (struct.isSetSelectRate()) {
        oprot.writeDouble(struct.selectRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KafkaProducerClientEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(39);
      if (incoming.get(0)) {
        struct.cluster = iprot.readString();
        struct.setClusterIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.batchSizeAvg = iprot.readDouble();
        struct.setBatchSizeAvgIsSet(true);
      }
      if (incoming.get(3)) {
        struct.batchSizeMax = iprot.readDouble();
        struct.setBatchSizeMaxIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bufferAvailableBytes = iprot.readDouble();
        struct.setBufferAvailableBytesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.bufferExhaustedRate = iprot.readDouble();
        struct.setBufferExhaustedRateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bufferTotalBytes = iprot.readDouble();
        struct.setBufferTotalBytesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bufferpoolWaitRatio = iprot.readDouble();
        struct.setBufferpoolWaitRatioIsSet(true);
      }
      if (incoming.get(8)) {
        struct.compressionRateAvg = iprot.readDouble();
        struct.setCompressionRateAvgIsSet(true);
      }
      if (incoming.get(9)) {
        struct.metadataAge = iprot.readDouble();
        struct.setMetadataAgeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.produceThrottleTimeAvg = iprot.readDouble();
        struct.setProduceThrottleTimeAvgIsSet(true);
      }
      if (incoming.get(11)) {
        struct.produceThrottleTimeMax = iprot.readDouble();
        struct.setProduceThrottleTimeMaxIsSet(true);
      }
      if (incoming.get(12)) {
        struct.recordErrorRate = iprot.readDouble();
        struct.setRecordErrorRateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.recordQueueTimeAvg = iprot.readDouble();
        struct.setRecordQueueTimeAvgIsSet(true);
      }
      if (incoming.get(14)) {
        struct.recordQueueTimeMax = iprot.readDouble();
        struct.setRecordQueueTimeMaxIsSet(true);
      }
      if (incoming.get(15)) {
        struct.recordRetryRate = iprot.readDouble();
        struct.setRecordRetryRateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.recordSendRate = iprot.readDouble();
        struct.setRecordSendRateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.recordSizeAvg = iprot.readDouble();
        struct.setRecordSizeAvgIsSet(true);
      }
      if (incoming.get(18)) {
        struct.recordSizeMax = iprot.readDouble();
        struct.setRecordSizeMaxIsSet(true);
      }
      if (incoming.get(19)) {
        struct.recordsPerRequestAvg = iprot.readDouble();
        struct.setRecordsPerRequestAvgIsSet(true);
      }
      if (incoming.get(20)) {
        struct.requestLatencyAvg = iprot.readDouble();
        struct.setRequestLatencyAvgIsSet(true);
      }
      if (incoming.get(21)) {
        struct.requestLatencyMax = iprot.readDouble();
        struct.setRequestLatencyMaxIsSet(true);
      }
      if (incoming.get(22)) {
        struct.requestsInFlight = iprot.readDouble();
        struct.setRequestsInFlightIsSet(true);
      }
      if (incoming.get(23)) {
        struct.waitingThreads = iprot.readDouble();
        struct.setWaitingThreadsIsSet(true);
      }
      if (incoming.get(24)) {
        struct.connectionCloseRate = iprot.readDouble();
        struct.setConnectionCloseRateIsSet(true);
      }
      if (incoming.get(25)) {
        struct.connectionCount = iprot.readDouble();
        struct.setConnectionCountIsSet(true);
      }
      if (incoming.get(26)) {
        struct.connectionCreationRate = iprot.readDouble();
        struct.setConnectionCreationRateIsSet(true);
      }
      if (incoming.get(27)) {
        struct.incomingByteRate = iprot.readDouble();
        struct.setIncomingByteRateIsSet(true);
      }
      if (incoming.get(28)) {
        struct.ioRatio = iprot.readDouble();
        struct.setIoRatioIsSet(true);
      }
      if (incoming.get(29)) {
        struct.ioTimeNsAvg = iprot.readDouble();
        struct.setIoTimeNsAvgIsSet(true);
      }
      if (incoming.get(30)) {
        struct.ioWaitRatio = iprot.readDouble();
        struct.setIoWaitRatioIsSet(true);
      }
      if (incoming.get(31)) {
        struct.ioWaitTimeNsAvg = iprot.readDouble();
        struct.setIoWaitTimeNsAvgIsSet(true);
      }
      if (incoming.get(32)) {
        struct.networkIoRate = iprot.readDouble();
        struct.setNetworkIoRateIsSet(true);
      }
      if (incoming.get(33)) {
        struct.outgoingByteRate = iprot.readDouble();
        struct.setOutgoingByteRateIsSet(true);
      }
      if (incoming.get(34)) {
        struct.requestRate = iprot.readDouble();
        struct.setRequestRateIsSet(true);
      }
      if (incoming.get(35)) {
        struct.requestSizeMax = iprot.readDouble();
        struct.setRequestSizeMaxIsSet(true);
      }
      if (incoming.get(36)) {
        struct.requestSizeAvg = iprot.readDouble();
        struct.setRequestSizeAvgIsSet(true);
      }
      if (incoming.get(37)) {
        struct.responseRate = iprot.readDouble();
        struct.setResponseRateIsSet(true);
      }
      if (incoming.get(38)) {
        struct.selectRate = iprot.readDouble();
        struct.setSelectRateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

