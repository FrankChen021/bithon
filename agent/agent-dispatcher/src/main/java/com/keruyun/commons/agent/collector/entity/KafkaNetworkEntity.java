/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class KafkaNetworkEntity implements org.apache.thrift.TBase<KafkaNetworkEntity, KafkaNetworkEntity._Fields>, java.io.Serializable, Cloneable, Comparable<KafkaNetworkEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KafkaNetworkEntity");

  private static final org.apache.thrift.protocol.TField REQUEST_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestCount", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RESPONSE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("responseCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("costTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField BYTES_SENT_FIELD_DESC = new org.apache.thrift.protocol.TField("bytesSent", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField BYTES_RECEIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("bytesReceive", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField POLL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pollCount", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KafkaNetworkEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KafkaNetworkEntityTupleSchemeFactory();

  public int requestCount; // required
  public int responseCount; // required
  public long costTime; // required
  public long bytesSent; // required
  public long bytesReceive; // required
  public int pollCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUEST_COUNT((short)1, "requestCount"),
    RESPONSE_COUNT((short)2, "responseCount"),
    COST_TIME((short)3, "costTime"),
    BYTES_SENT((short)4, "bytesSent"),
    BYTES_RECEIVE((short)5, "bytesReceive"),
    POLL_COUNT((short)6, "pollCount");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST_COUNT
          return REQUEST_COUNT;
        case 2: // RESPONSE_COUNT
          return RESPONSE_COUNT;
        case 3: // COST_TIME
          return COST_TIME;
        case 4: // BYTES_SENT
          return BYTES_SENT;
        case 5: // BYTES_RECEIVE
          return BYTES_RECEIVE;
        case 6: // POLL_COUNT
          return POLL_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REQUESTCOUNT_ISSET_ID = 0;
  private static final int __RESPONSECOUNT_ISSET_ID = 1;
  private static final int __COSTTIME_ISSET_ID = 2;
  private static final int __BYTESSENT_ISSET_ID = 3;
  private static final int __BYTESRECEIVE_ISSET_ID = 4;
  private static final int __POLLCOUNT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUEST_COUNT, new org.apache.thrift.meta_data.FieldMetaData("requestCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESPONSE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("responseCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COST_TIME, new org.apache.thrift.meta_data.FieldMetaData("costTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BYTES_SENT, new org.apache.thrift.meta_data.FieldMetaData("bytesSent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BYTES_RECEIVE, new org.apache.thrift.meta_data.FieldMetaData("bytesReceive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POLL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("pollCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KafkaNetworkEntity.class, metaDataMap);
  }

  public KafkaNetworkEntity() {
  }

  public KafkaNetworkEntity(
    int requestCount,
    int responseCount,
    long costTime,
    long bytesSent,
    long bytesReceive,
    int pollCount)
  {
    this();
    this.requestCount = requestCount;
    setRequestCountIsSet(true);
    this.responseCount = responseCount;
    setResponseCountIsSet(true);
    this.costTime = costTime;
    setCostTimeIsSet(true);
    this.bytesSent = bytesSent;
    setBytesSentIsSet(true);
    this.bytesReceive = bytesReceive;
    setBytesReceiveIsSet(true);
    this.pollCount = pollCount;
    setPollCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KafkaNetworkEntity(KafkaNetworkEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.requestCount = other.requestCount;
    this.responseCount = other.responseCount;
    this.costTime = other.costTime;
    this.bytesSent = other.bytesSent;
    this.bytesReceive = other.bytesReceive;
    this.pollCount = other.pollCount;
  }

  public KafkaNetworkEntity deepCopy() {
    return new KafkaNetworkEntity(this);
  }

  @Override
  public void clear() {
    setRequestCountIsSet(false);
    this.requestCount = 0;
    setResponseCountIsSet(false);
    this.responseCount = 0;
    setCostTimeIsSet(false);
    this.costTime = 0;
    setBytesSentIsSet(false);
    this.bytesSent = 0;
    setBytesReceiveIsSet(false);
    this.bytesReceive = 0;
    setPollCountIsSet(false);
    this.pollCount = 0;
  }

  public int getRequestCount() {
    return this.requestCount;
  }

  public KafkaNetworkEntity setRequestCount(int requestCount) {
    this.requestCount = requestCount;
    setRequestCountIsSet(true);
    return this;
  }

  public void unsetRequestCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTCOUNT_ISSET_ID);
  }

  /** Returns true if field requestCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTCOUNT_ISSET_ID);
  }

  public void setRequestCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTCOUNT_ISSET_ID, value);
  }

  public int getResponseCount() {
    return this.responseCount;
  }

  public KafkaNetworkEntity setResponseCount(int responseCount) {
    this.responseCount = responseCount;
    setResponseCountIsSet(true);
    return this;
  }

  public void unsetResponseCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSECOUNT_ISSET_ID);
  }

  /** Returns true if field responseCount is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSECOUNT_ISSET_ID);
  }

  public void setResponseCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSECOUNT_ISSET_ID, value);
  }

  public long getCostTime() {
    return this.costTime;
  }

  public KafkaNetworkEntity setCostTime(long costTime) {
    this.costTime = costTime;
    setCostTimeIsSet(true);
    return this;
  }

  public void unsetCostTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COSTTIME_ISSET_ID);
  }

  /** Returns true if field costTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCostTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COSTTIME_ISSET_ID);
  }

  public void setCostTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COSTTIME_ISSET_ID, value);
  }

  public long getBytesSent() {
    return this.bytesSent;
  }

  public KafkaNetworkEntity setBytesSent(long bytesSent) {
    this.bytesSent = bytesSent;
    setBytesSentIsSet(true);
    return this;
  }

  public void unsetBytesSent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BYTESSENT_ISSET_ID);
  }

  /** Returns true if field bytesSent is set (has been assigned a value) and false otherwise */
  public boolean isSetBytesSent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BYTESSENT_ISSET_ID);
  }

  public void setBytesSentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BYTESSENT_ISSET_ID, value);
  }

  public long getBytesReceive() {
    return this.bytesReceive;
  }

  public KafkaNetworkEntity setBytesReceive(long bytesReceive) {
    this.bytesReceive = bytesReceive;
    setBytesReceiveIsSet(true);
    return this;
  }

  public void unsetBytesReceive() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BYTESRECEIVE_ISSET_ID);
  }

  /** Returns true if field bytesReceive is set (has been assigned a value) and false otherwise */
  public boolean isSetBytesReceive() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BYTESRECEIVE_ISSET_ID);
  }

  public void setBytesReceiveIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BYTESRECEIVE_ISSET_ID, value);
  }

  public int getPollCount() {
    return this.pollCount;
  }

  public KafkaNetworkEntity setPollCount(int pollCount) {
    this.pollCount = pollCount;
    setPollCountIsSet(true);
    return this;
  }

  public void unsetPollCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POLLCOUNT_ISSET_ID);
  }

  /** Returns true if field pollCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPollCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POLLCOUNT_ISSET_ID);
  }

  public void setPollCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POLLCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUEST_COUNT:
      if (value == null) {
        unsetRequestCount();
      } else {
        setRequestCount((Integer)value);
      }
      break;

    case RESPONSE_COUNT:
      if (value == null) {
        unsetResponseCount();
      } else {
        setResponseCount((Integer)value);
      }
      break;

    case COST_TIME:
      if (value == null) {
        unsetCostTime();
      } else {
        setCostTime((Long)value);
      }
      break;

    case BYTES_SENT:
      if (value == null) {
        unsetBytesSent();
      } else {
        setBytesSent((Long)value);
      }
      break;

    case BYTES_RECEIVE:
      if (value == null) {
        unsetBytesReceive();
      } else {
        setBytesReceive((Long)value);
      }
      break;

    case POLL_COUNT:
      if (value == null) {
        unsetPollCount();
      } else {
        setPollCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST_COUNT:
      return getRequestCount();

    case RESPONSE_COUNT:
      return getResponseCount();

    case COST_TIME:
      return getCostTime();

    case BYTES_SENT:
      return getBytesSent();

    case BYTES_RECEIVE:
      return getBytesReceive();

    case POLL_COUNT:
      return getPollCount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUEST_COUNT:
      return isSetRequestCount();
    case RESPONSE_COUNT:
      return isSetResponseCount();
    case COST_TIME:
      return isSetCostTime();
    case BYTES_SENT:
      return isSetBytesSent();
    case BYTES_RECEIVE:
      return isSetBytesReceive();
    case POLL_COUNT:
      return isSetPollCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KafkaNetworkEntity)
      return this.equals((KafkaNetworkEntity)that);
    return false;
  }

  public boolean equals(KafkaNetworkEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_requestCount = true;
    boolean that_present_requestCount = true;
    if (this_present_requestCount || that_present_requestCount) {
      if (!(this_present_requestCount && that_present_requestCount))
        return false;
      if (this.requestCount != that.requestCount)
        return false;
    }

    boolean this_present_responseCount = true;
    boolean that_present_responseCount = true;
    if (this_present_responseCount || that_present_responseCount) {
      if (!(this_present_responseCount && that_present_responseCount))
        return false;
      if (this.responseCount != that.responseCount)
        return false;
    }

    boolean this_present_costTime = true;
    boolean that_present_costTime = true;
    if (this_present_costTime || that_present_costTime) {
      if (!(this_present_costTime && that_present_costTime))
        return false;
      if (this.costTime != that.costTime)
        return false;
    }

    boolean this_present_bytesSent = true;
    boolean that_present_bytesSent = true;
    if (this_present_bytesSent || that_present_bytesSent) {
      if (!(this_present_bytesSent && that_present_bytesSent))
        return false;
      if (this.bytesSent != that.bytesSent)
        return false;
    }

    boolean this_present_bytesReceive = true;
    boolean that_present_bytesReceive = true;
    if (this_present_bytesReceive || that_present_bytesReceive) {
      if (!(this_present_bytesReceive && that_present_bytesReceive))
        return false;
      if (this.bytesReceive != that.bytesReceive)
        return false;
    }

    boolean this_present_pollCount = true;
    boolean that_present_pollCount = true;
    if (this_present_pollCount || that_present_pollCount) {
      if (!(this_present_pollCount && that_present_pollCount))
        return false;
      if (this.pollCount != that.pollCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + requestCount;

    hashCode = hashCode * 8191 + responseCount;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(costTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bytesSent);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bytesReceive);

    hashCode = hashCode * 8191 + pollCount;

    return hashCode;
  }

  @Override
  public int compareTo(KafkaNetworkEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRequestCount()).compareTo(other.isSetRequestCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestCount, other.requestCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseCount()).compareTo(other.isSetResponseCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseCount, other.responseCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCostTime()).compareTo(other.isSetCostTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costTime, other.costTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBytesSent()).compareTo(other.isSetBytesSent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBytesSent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytesSent, other.bytesSent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBytesReceive()).compareTo(other.isSetBytesReceive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBytesReceive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytesReceive, other.bytesReceive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPollCount()).compareTo(other.isSetPollCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPollCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pollCount, other.pollCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KafkaNetworkEntity(");
    boolean first = true;

    sb.append("requestCount:");
    sb.append(this.requestCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseCount:");
    sb.append(this.responseCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("costTime:");
    sb.append(this.costTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bytesSent:");
    sb.append(this.bytesSent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bytesReceive:");
    sb.append(this.bytesReceive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pollCount:");
    sb.append(this.pollCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KafkaNetworkEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaNetworkEntityStandardScheme getScheme() {
      return new KafkaNetworkEntityStandardScheme();
    }
  }

  private static class KafkaNetworkEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<KafkaNetworkEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KafkaNetworkEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUEST_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestCount = iprot.readI32();
              struct.setRequestCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESPONSE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.responseCount = iprot.readI32();
              struct.setResponseCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.costTime = iprot.readI64();
              struct.setCostTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BYTES_SENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bytesSent = iprot.readI64();
              struct.setBytesSentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BYTES_RECEIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bytesReceive = iprot.readI64();
              struct.setBytesReceiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POLL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pollCount = iprot.readI32();
              struct.setPollCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KafkaNetworkEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQUEST_COUNT_FIELD_DESC);
      oprot.writeI32(struct.requestCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESPONSE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.responseCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COST_TIME_FIELD_DESC);
      oprot.writeI64(struct.costTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BYTES_SENT_FIELD_DESC);
      oprot.writeI64(struct.bytesSent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BYTES_RECEIVE_FIELD_DESC);
      oprot.writeI64(struct.bytesReceive);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POLL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.pollCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KafkaNetworkEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaNetworkEntityTupleScheme getScheme() {
      return new KafkaNetworkEntityTupleScheme();
    }
  }

  private static class KafkaNetworkEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<KafkaNetworkEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KafkaNetworkEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRequestCount()) {
        optionals.set(0);
      }
      if (struct.isSetResponseCount()) {
        optionals.set(1);
      }
      if (struct.isSetCostTime()) {
        optionals.set(2);
      }
      if (struct.isSetBytesSent()) {
        optionals.set(3);
      }
      if (struct.isSetBytesReceive()) {
        optionals.set(4);
      }
      if (struct.isSetPollCount()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetRequestCount()) {
        oprot.writeI32(struct.requestCount);
      }
      if (struct.isSetResponseCount()) {
        oprot.writeI32(struct.responseCount);
      }
      if (struct.isSetCostTime()) {
        oprot.writeI64(struct.costTime);
      }
      if (struct.isSetBytesSent()) {
        oprot.writeI64(struct.bytesSent);
      }
      if (struct.isSetBytesReceive()) {
        oprot.writeI64(struct.bytesReceive);
      }
      if (struct.isSetPollCount()) {
        oprot.writeI32(struct.pollCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KafkaNetworkEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.requestCount = iprot.readI32();
        struct.setRequestCountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.responseCount = iprot.readI32();
        struct.setResponseCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.costTime = iprot.readI64();
        struct.setCostTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bytesSent = iprot.readI64();
        struct.setBytesSentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bytesReceive = iprot.readI64();
        struct.setBytesReceiveIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pollCount = iprot.readI32();
        struct.setPollCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

