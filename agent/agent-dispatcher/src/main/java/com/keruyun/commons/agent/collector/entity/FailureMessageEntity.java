/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * *************************  Client错误信息收集  **************************
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class FailureMessageEntity implements org.apache.thrift.TBase<FailureMessageEntity, FailureMessageEntity._Fields>, java.io.Serializable, Cloneable, Comparable<FailureMessageEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FailureMessageEntity");

  private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FAILURE_MESSAGE_DETAIL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("failureMessageDetailList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField OCCUR_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("occurTimes", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CLASSIFIED_OCCUR_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("classifiedOccurTimes", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField SOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceType", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FailureMessageEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FailureMessageEntityTupleSchemeFactory();

  public String appName; // required
  public String hostName; // required
  public int port; // required
  public java.util.List<FailureMessageDetailEntity> failureMessageDetailList; // required
  public int occurTimes; // required
  public java.util.Map<String, Integer> classifiedOccurTimes; // required
  public int sourceType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP_NAME((short)1, "appName"),
    HOST_NAME((short)2, "hostName"),
    PORT((short)3, "port"),
    FAILURE_MESSAGE_DETAIL_LIST((short)4, "failureMessageDetailList"),
    OCCUR_TIMES((short)5, "occurTimes"),
    CLASSIFIED_OCCUR_TIMES((short)6, "classifiedOccurTimes"),
    SOURCE_TYPE((short)7, "sourceType");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_NAME
          return APP_NAME;
        case 2: // HOST_NAME
          return HOST_NAME;
        case 3: // PORT
          return PORT;
        case 4: // FAILURE_MESSAGE_DETAIL_LIST
          return FAILURE_MESSAGE_DETAIL_LIST;
        case 5: // OCCUR_TIMES
          return OCCUR_TIMES;
        case 6: // CLASSIFIED_OCCUR_TIMES
          return CLASSIFIED_OCCUR_TIMES;
        case 7: // SOURCE_TYPE
          return SOURCE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private static final int __OCCURTIMES_ISSET_ID = 1;
  private static final int __SOURCETYPE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAILURE_MESSAGE_DETAIL_LIST, new org.apache.thrift.meta_data.FieldMetaData("failureMessageDetailList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "FailureMessageDetailEntity"))));
    tmpMap.put(_Fields.OCCUR_TIMES, new org.apache.thrift.meta_data.FieldMetaData("occurTimes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLASSIFIED_OCCUR_TIMES, new org.apache.thrift.meta_data.FieldMetaData("classifiedOccurTimes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sourceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FailureMessageEntity.class, metaDataMap);
  }

  public FailureMessageEntity() {
  }

  public FailureMessageEntity(
    String appName,
    String hostName,
    int port,
    java.util.List<FailureMessageDetailEntity> failureMessageDetailList,
    int occurTimes,
    java.util.Map<String, Integer> classifiedOccurTimes,
    int sourceType)
  {
    this();
    this.appName = appName;
    this.hostName = hostName;
    this.port = port;
    setPortIsSet(true);
    this.failureMessageDetailList = failureMessageDetailList;
    this.occurTimes = occurTimes;
    setOccurTimesIsSet(true);
    this.classifiedOccurTimes = classifiedOccurTimes;
    this.sourceType = sourceType;
    setSourceTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FailureMessageEntity(FailureMessageEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAppName()) {
      this.appName = other.appName;
    }
    if (other.isSetHostName()) {
      this.hostName = other.hostName;
    }
    this.port = other.port;
    if (other.isSetFailureMessageDetailList()) {
      java.util.List<FailureMessageDetailEntity> __this__failureMessageDetailList = new java.util.ArrayList<FailureMessageDetailEntity>(other.failureMessageDetailList.size());
      for (FailureMessageDetailEntity other_element : other.failureMessageDetailList) {
        __this__failureMessageDetailList.add(new FailureMessageDetailEntity(other_element));
      }
      this.failureMessageDetailList = __this__failureMessageDetailList;
    }
    this.occurTimes = other.occurTimes;
    if (other.isSetClassifiedOccurTimes()) {
      java.util.Map<String, Integer> __this__classifiedOccurTimes = new java.util.HashMap<String, Integer>(other.classifiedOccurTimes);
      this.classifiedOccurTimes = __this__classifiedOccurTimes;
    }
    this.sourceType = other.sourceType;
  }

  public FailureMessageEntity deepCopy() {
    return new FailureMessageEntity(this);
  }

  @Override
  public void clear() {
    this.appName = null;
    this.hostName = null;
    setPortIsSet(false);
    this.port = 0;
    this.failureMessageDetailList = null;
    setOccurTimesIsSet(false);
    this.occurTimes = 0;
    this.classifiedOccurTimes = null;
    setSourceTypeIsSet(false);
    this.sourceType = 0;
  }

  public String getAppName() {
    return this.appName;
  }

  public FailureMessageEntity setAppName(String appName) {
    this.appName = appName;
    return this;
  }

  public void unsetAppName() {
    this.appName = null;
  }

  /** Returns true if field appName is set (has been assigned a value) and false otherwise */
  public boolean isSetAppName() {
    return this.appName != null;
  }

  public void setAppNameIsSet(boolean value) {
    if (!value) {
      this.appName = null;
    }
  }

  public String getHostName() {
    return this.hostName;
  }

  public FailureMessageEntity setHostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  public void unsetHostName() {
    this.hostName = null;
  }

  /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
  public boolean isSetHostName() {
    return this.hostName != null;
  }

  public void setHostNameIsSet(boolean value) {
    if (!value) {
      this.hostName = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public FailureMessageEntity setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public int getFailureMessageDetailListSize() {
    return (this.failureMessageDetailList == null) ? 0 : this.failureMessageDetailList.size();
  }

  public java.util.Iterator<FailureMessageDetailEntity> getFailureMessageDetailListIterator() {
    return (this.failureMessageDetailList == null) ? null : this.failureMessageDetailList.iterator();
  }

  public void addToFailureMessageDetailList(FailureMessageDetailEntity elem) {
    if (this.failureMessageDetailList == null) {
      this.failureMessageDetailList = new java.util.ArrayList<FailureMessageDetailEntity>();
    }
    this.failureMessageDetailList.add(elem);
  }

  public java.util.List<FailureMessageDetailEntity> getFailureMessageDetailList() {
    return this.failureMessageDetailList;
  }

  public FailureMessageEntity setFailureMessageDetailList(java.util.List<FailureMessageDetailEntity> failureMessageDetailList) {
    this.failureMessageDetailList = failureMessageDetailList;
    return this;
  }

  public void unsetFailureMessageDetailList() {
    this.failureMessageDetailList = null;
  }

  /** Returns true if field failureMessageDetailList is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureMessageDetailList() {
    return this.failureMessageDetailList != null;
  }

  public void setFailureMessageDetailListIsSet(boolean value) {
    if (!value) {
      this.failureMessageDetailList = null;
    }
  }

  public int getOccurTimes() {
    return this.occurTimes;
  }

  public FailureMessageEntity setOccurTimes(int occurTimes) {
    this.occurTimes = occurTimes;
    setOccurTimesIsSet(true);
    return this;
  }

  public void unsetOccurTimes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OCCURTIMES_ISSET_ID);
  }

  /** Returns true if field occurTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetOccurTimes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OCCURTIMES_ISSET_ID);
  }

  public void setOccurTimesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OCCURTIMES_ISSET_ID, value);
  }

  public int getClassifiedOccurTimesSize() {
    return (this.classifiedOccurTimes == null) ? 0 : this.classifiedOccurTimes.size();
  }

  public void putToClassifiedOccurTimes(String key, int val) {
    if (this.classifiedOccurTimes == null) {
      this.classifiedOccurTimes = new java.util.HashMap<String, Integer>();
    }
    this.classifiedOccurTimes.put(key, val);
  }

  public java.util.Map<String, Integer> getClassifiedOccurTimes() {
    return this.classifiedOccurTimes;
  }

  public FailureMessageEntity setClassifiedOccurTimes(java.util.Map<String, Integer> classifiedOccurTimes) {
    this.classifiedOccurTimes = classifiedOccurTimes;
    return this;
  }

  public void unsetClassifiedOccurTimes() {
    this.classifiedOccurTimes = null;
  }

  /** Returns true if field classifiedOccurTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetClassifiedOccurTimes() {
    return this.classifiedOccurTimes != null;
  }

  public void setClassifiedOccurTimesIsSet(boolean value) {
    if (!value) {
      this.classifiedOccurTimes = null;
    }
  }

  public int getSourceType() {
    return this.sourceType;
  }

  public FailureMessageEntity setSourceType(int sourceType) {
    this.sourceType = sourceType;
    setSourceTypeIsSet(true);
    return this;
  }

  public void unsetSourceType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCETYPE_ISSET_ID);
  }

  /** Returns true if field sourceType is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCETYPE_ISSET_ID);
  }

  public void setSourceTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCETYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_NAME:
      if (value == null) {
        unsetAppName();
      } else {
        setAppName((String)value);
      }
      break;

    case HOST_NAME:
      if (value == null) {
        unsetHostName();
      } else {
        setHostName((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    case FAILURE_MESSAGE_DETAIL_LIST:
      if (value == null) {
        unsetFailureMessageDetailList();
      } else {
        setFailureMessageDetailList((java.util.List<FailureMessageDetailEntity>)value);
      }
      break;

    case OCCUR_TIMES:
      if (value == null) {
        unsetOccurTimes();
      } else {
        setOccurTimes((Integer)value);
      }
      break;

    case CLASSIFIED_OCCUR_TIMES:
      if (value == null) {
        unsetClassifiedOccurTimes();
      } else {
        setClassifiedOccurTimes((java.util.Map<String, Integer>)value);
      }
      break;

    case SOURCE_TYPE:
      if (value == null) {
        unsetSourceType();
      } else {
        setSourceType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_NAME:
      return getAppName();

    case HOST_NAME:
      return getHostName();

    case PORT:
      return getPort();

    case FAILURE_MESSAGE_DETAIL_LIST:
      return getFailureMessageDetailList();

    case OCCUR_TIMES:
      return getOccurTimes();

    case CLASSIFIED_OCCUR_TIMES:
      return getClassifiedOccurTimes();

    case SOURCE_TYPE:
      return getSourceType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_NAME:
      return isSetAppName();
    case HOST_NAME:
      return isSetHostName();
    case PORT:
      return isSetPort();
    case FAILURE_MESSAGE_DETAIL_LIST:
      return isSetFailureMessageDetailList();
    case OCCUR_TIMES:
      return isSetOccurTimes();
    case CLASSIFIED_OCCUR_TIMES:
      return isSetClassifiedOccurTimes();
    case SOURCE_TYPE:
      return isSetSourceType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FailureMessageEntity)
      return this.equals((FailureMessageEntity)that);
    return false;
  }

  public boolean equals(FailureMessageEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_appName = true && this.isSetAppName();
    boolean that_present_appName = true && that.isSetAppName();
    if (this_present_appName || that_present_appName) {
      if (!(this_present_appName && that_present_appName))
        return false;
      if (!this.appName.equals(that.appName))
        return false;
    }

    boolean this_present_hostName = true && this.isSetHostName();
    boolean that_present_hostName = true && that.isSetHostName();
    if (this_present_hostName || that_present_hostName) {
      if (!(this_present_hostName && that_present_hostName))
        return false;
      if (!this.hostName.equals(that.hostName))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_failureMessageDetailList = true && this.isSetFailureMessageDetailList();
    boolean that_present_failureMessageDetailList = true && that.isSetFailureMessageDetailList();
    if (this_present_failureMessageDetailList || that_present_failureMessageDetailList) {
      if (!(this_present_failureMessageDetailList && that_present_failureMessageDetailList))
        return false;
      if (!this.failureMessageDetailList.equals(that.failureMessageDetailList))
        return false;
    }

    boolean this_present_occurTimes = true;
    boolean that_present_occurTimes = true;
    if (this_present_occurTimes || that_present_occurTimes) {
      if (!(this_present_occurTimes && that_present_occurTimes))
        return false;
      if (this.occurTimes != that.occurTimes)
        return false;
    }

    boolean this_present_classifiedOccurTimes = true && this.isSetClassifiedOccurTimes();
    boolean that_present_classifiedOccurTimes = true && that.isSetClassifiedOccurTimes();
    if (this_present_classifiedOccurTimes || that_present_classifiedOccurTimes) {
      if (!(this_present_classifiedOccurTimes && that_present_classifiedOccurTimes))
        return false;
      if (!this.classifiedOccurTimes.equals(that.classifiedOccurTimes))
        return false;
    }

    boolean this_present_sourceType = true;
    boolean that_present_sourceType = true;
    if (this_present_sourceType || that_present_sourceType) {
      if (!(this_present_sourceType && that_present_sourceType))
        return false;
      if (this.sourceType != that.sourceType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAppName()) ? 131071 : 524287);
    if (isSetAppName())
      hashCode = hashCode * 8191 + appName.hashCode();

    hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
    if (isSetHostName())
      hashCode = hashCode * 8191 + hostName.hashCode();

    hashCode = hashCode * 8191 + port;

    hashCode = hashCode * 8191 + ((isSetFailureMessageDetailList()) ? 131071 : 524287);
    if (isSetFailureMessageDetailList())
      hashCode = hashCode * 8191 + failureMessageDetailList.hashCode();

    hashCode = hashCode * 8191 + occurTimes;

    hashCode = hashCode * 8191 + ((isSetClassifiedOccurTimes()) ? 131071 : 524287);
    if (isSetClassifiedOccurTimes())
      hashCode = hashCode * 8191 + classifiedOccurTimes.hashCode();

    hashCode = hashCode * 8191 + sourceType;

    return hashCode;
  }

  @Override
  public int compareTo(FailureMessageEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailureMessageDetailList()).compareTo(other.isSetFailureMessageDetailList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureMessageDetailList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failureMessageDetailList, other.failureMessageDetailList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccurTimes()).compareTo(other.isSetOccurTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccurTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occurTimes, other.occurTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClassifiedOccurTimes()).compareTo(other.isSetClassifiedOccurTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassifiedOccurTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classifiedOccurTimes, other.classifiedOccurTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceType()).compareTo(other.isSetSourceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceType, other.sourceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FailureMessageEntity(");
    boolean first = true;

    sb.append("appName:");
    if (this.appName == null) {
      sb.append("null");
    } else {
      sb.append(this.appName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostName:");
    if (this.hostName == null) {
      sb.append("null");
    } else {
      sb.append(this.hostName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failureMessageDetailList:");
    if (this.failureMessageDetailList == null) {
      sb.append("null");
    } else {
      sb.append(this.failureMessageDetailList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("occurTimes:");
    sb.append(this.occurTimes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("classifiedOccurTimes:");
    if (this.classifiedOccurTimes == null) {
      sb.append("null");
    } else {
      sb.append(this.classifiedOccurTimes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceType:");
    sb.append(this.sourceType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FailureMessageEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FailureMessageEntityStandardScheme getScheme() {
      return new FailureMessageEntityStandardScheme();
    }
  }

  private static class FailureMessageEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<FailureMessageEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FailureMessageEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appName = iprot.readString();
              struct.setAppNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostName = iprot.readString();
              struct.setHostNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FAILURE_MESSAGE_DETAIL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                struct.failureMessageDetailList = new java.util.ArrayList<FailureMessageDetailEntity>(_list130.size);
                FailureMessageDetailEntity _elem131;
                for (int _i132 = 0; _i132 < _list130.size; ++_i132)
                {
                  _elem131 = new FailureMessageDetailEntity();
                  _elem131.read(iprot);
                  struct.failureMessageDetailList.add(_elem131);
                }
                iprot.readListEnd();
              }
              struct.setFailureMessageDetailListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OCCUR_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.occurTimes = iprot.readI32();
              struct.setOccurTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CLASSIFIED_OCCUR_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map133 = iprot.readMapBegin();
                struct.classifiedOccurTimes = new java.util.HashMap<String, Integer>(2*_map133.size);
                String _key134;
                int _val135;
                for (int _i136 = 0; _i136 < _map133.size; ++_i136)
                {
                  _key134 = iprot.readString();
                  _val135 = iprot.readI32();
                  struct.classifiedOccurTimes.put(_key134, _val135);
                }
                iprot.readMapEnd();
              }
              struct.setClassifiedOccurTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sourceType = iprot.readI32();
              struct.setSourceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FailureMessageEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.appName != null) {
        oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
        oprot.writeString(struct.appName);
        oprot.writeFieldEnd();
      }
      if (struct.hostName != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(struct.hostName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.port);
      oprot.writeFieldEnd();
      if (struct.failureMessageDetailList != null) {
        oprot.writeFieldBegin(FAILURE_MESSAGE_DETAIL_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.failureMessageDetailList.size()));
          for (FailureMessageDetailEntity _iter137 : struct.failureMessageDetailList)
          {
            _iter137.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OCCUR_TIMES_FIELD_DESC);
      oprot.writeI32(struct.occurTimes);
      oprot.writeFieldEnd();
      if (struct.classifiedOccurTimes != null) {
        oprot.writeFieldBegin(CLASSIFIED_OCCUR_TIMES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.classifiedOccurTimes.size()));
          for (java.util.Map.Entry<String, Integer> _iter138 : struct.classifiedOccurTimes.entrySet())
          {
            oprot.writeString(_iter138.getKey());
            oprot.writeI32(_iter138.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SOURCE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.sourceType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FailureMessageEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FailureMessageEntityTupleScheme getScheme() {
      return new FailureMessageEntityTupleScheme();
    }
  }

  private static class FailureMessageEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<FailureMessageEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FailureMessageEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAppName()) {
        optionals.set(0);
      }
      if (struct.isSetHostName()) {
        optionals.set(1);
      }
      if (struct.isSetPort()) {
        optionals.set(2);
      }
      if (struct.isSetFailureMessageDetailList()) {
        optionals.set(3);
      }
      if (struct.isSetOccurTimes()) {
        optionals.set(4);
      }
      if (struct.isSetClassifiedOccurTimes()) {
        optionals.set(5);
      }
      if (struct.isSetSourceType()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetAppName()) {
        oprot.writeString(struct.appName);
      }
      if (struct.isSetHostName()) {
        oprot.writeString(struct.hostName);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetFailureMessageDetailList()) {
        {
          oprot.writeI32(struct.failureMessageDetailList.size());
          for (FailureMessageDetailEntity _iter139 : struct.failureMessageDetailList)
          {
            _iter139.write(oprot);
          }
        }
      }
      if (struct.isSetOccurTimes()) {
        oprot.writeI32(struct.occurTimes);
      }
      if (struct.isSetClassifiedOccurTimes()) {
        {
          oprot.writeI32(struct.classifiedOccurTimes.size());
          for (java.util.Map.Entry<String, Integer> _iter140 : struct.classifiedOccurTimes.entrySet())
          {
            oprot.writeString(_iter140.getKey());
            oprot.writeI32(_iter140.getValue());
          }
        }
      }
      if (struct.isSetSourceType()) {
        oprot.writeI32(struct.sourceType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FailureMessageEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.appName = iprot.readString();
        struct.setAppNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hostName = iprot.readString();
        struct.setHostNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.failureMessageDetailList = new java.util.ArrayList<FailureMessageDetailEntity>(_list141.size);
          FailureMessageDetailEntity _elem142;
          for (int _i143 = 0; _i143 < _list141.size; ++_i143)
          {
            _elem142 = new FailureMessageDetailEntity();
            _elem142.read(iprot);
            struct.failureMessageDetailList.add(_elem142);
          }
        }
        struct.setFailureMessageDetailListIsSet(true);
      }
      if (incoming.get(4)) {
        struct.occurTimes = iprot.readI32();
        struct.setOccurTimesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map144 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.classifiedOccurTimes = new java.util.HashMap<String, Integer>(2*_map144.size);
          String _key145;
          int _val146;
          for (int _i147 = 0; _i147 < _map144.size; ++_i147)
          {
            _key145 = iprot.readString();
            _val146 = iprot.readI32();
            struct.classifiedOccurTimes.put(_key145, _val146);
          }
        }
        struct.setClassifiedOccurTimesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sourceType = iprot.readI32();
        struct.setSourceTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

