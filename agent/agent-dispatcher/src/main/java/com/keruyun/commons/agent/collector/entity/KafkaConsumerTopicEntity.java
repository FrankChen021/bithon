/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class KafkaConsumerTopicEntity implements org.apache.thrift.TBase<KafkaConsumerTopicEntity, KafkaConsumerTopicEntity._Fields>, java.io.Serializable, Cloneable, Comparable<KafkaConsumerTopicEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KafkaConsumerTopicEntity");

  private static final org.apache.thrift.protocol.TField CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FETCH_SIZE_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchSizeAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField FETCH_SIZE_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchSizeMax", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField BYTES_CONSUMED_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("bytesConsumedRate", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField RECORDS_PER_REQUEST_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("recordsPerRequestAvg", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField RECORDS_CONSUMED_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("recordsConsumedRate", org.apache.thrift.protocol.TType.DOUBLE, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KafkaConsumerTopicEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KafkaConsumerTopicEntityTupleSchemeFactory();

  public String cluster; // required
  public String clientId; // required
  public String groupName; // required
  public String topic; // required
  public double fetchSizeAvg; // required
  public double fetchSizeMax; // required
  public double bytesConsumedRate; // required
  public double recordsPerRequestAvg; // required
  public double recordsConsumedRate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLUSTER((short)1, "cluster"),
    CLIENT_ID((short)2, "clientId"),
    GROUP_NAME((short)3, "groupName"),
    TOPIC((short)4, "topic"),
    FETCH_SIZE_AVG((short)5, "fetchSizeAvg"),
    FETCH_SIZE_MAX((short)6, "fetchSizeMax"),
    BYTES_CONSUMED_RATE((short)7, "bytesConsumedRate"),
    RECORDS_PER_REQUEST_AVG((short)8, "recordsPerRequestAvg"),
    RECORDS_CONSUMED_RATE((short)9, "recordsConsumedRate");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLUSTER
          return CLUSTER;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // GROUP_NAME
          return GROUP_NAME;
        case 4: // TOPIC
          return TOPIC;
        case 5: // FETCH_SIZE_AVG
          return FETCH_SIZE_AVG;
        case 6: // FETCH_SIZE_MAX
          return FETCH_SIZE_MAX;
        case 7: // BYTES_CONSUMED_RATE
          return BYTES_CONSUMED_RATE;
        case 8: // RECORDS_PER_REQUEST_AVG
          return RECORDS_PER_REQUEST_AVG;
        case 9: // RECORDS_CONSUMED_RATE
          return RECORDS_CONSUMED_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FETCHSIZEAVG_ISSET_ID = 0;
  private static final int __FETCHSIZEMAX_ISSET_ID = 1;
  private static final int __BYTESCONSUMEDRATE_ISSET_ID = 2;
  private static final int __RECORDSPERREQUESTAVG_ISSET_ID = 3;
  private static final int __RECORDSCONSUMEDRATE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("cluster", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FETCH_SIZE_AVG, new org.apache.thrift.meta_data.FieldMetaData("fetchSizeAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FETCH_SIZE_MAX, new org.apache.thrift.meta_data.FieldMetaData("fetchSizeMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BYTES_CONSUMED_RATE, new org.apache.thrift.meta_data.FieldMetaData("bytesConsumedRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECORDS_PER_REQUEST_AVG, new org.apache.thrift.meta_data.FieldMetaData("recordsPerRequestAvg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECORDS_CONSUMED_RATE, new org.apache.thrift.meta_data.FieldMetaData("recordsConsumedRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KafkaConsumerTopicEntity.class, metaDataMap);
  }

  public KafkaConsumerTopicEntity() {
  }

  public KafkaConsumerTopicEntity(
    String cluster,
    String clientId,
    String groupName,
    String topic,
    double fetchSizeAvg,
    double fetchSizeMax,
    double bytesConsumedRate,
    double recordsPerRequestAvg,
    double recordsConsumedRate)
  {
    this();
    this.cluster = cluster;
    this.clientId = clientId;
    this.groupName = groupName;
    this.topic = topic;
    this.fetchSizeAvg = fetchSizeAvg;
    setFetchSizeAvgIsSet(true);
    this.fetchSizeMax = fetchSizeMax;
    setFetchSizeMaxIsSet(true);
    this.bytesConsumedRate = bytesConsumedRate;
    setBytesConsumedRateIsSet(true);
    this.recordsPerRequestAvg = recordsPerRequestAvg;
    setRecordsPerRequestAvgIsSet(true);
    this.recordsConsumedRate = recordsConsumedRate;
    setRecordsConsumedRateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KafkaConsumerTopicEntity(KafkaConsumerTopicEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCluster()) {
      this.cluster = other.cluster;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetGroupName()) {
      this.groupName = other.groupName;
    }
    if (other.isSetTopic()) {
      this.topic = other.topic;
    }
    this.fetchSizeAvg = other.fetchSizeAvg;
    this.fetchSizeMax = other.fetchSizeMax;
    this.bytesConsumedRate = other.bytesConsumedRate;
    this.recordsPerRequestAvg = other.recordsPerRequestAvg;
    this.recordsConsumedRate = other.recordsConsumedRate;
  }

  public KafkaConsumerTopicEntity deepCopy() {
    return new KafkaConsumerTopicEntity(this);
  }

  @Override
  public void clear() {
    this.cluster = null;
    this.clientId = null;
    this.groupName = null;
    this.topic = null;
    setFetchSizeAvgIsSet(false);
    this.fetchSizeAvg = 0.0;
    setFetchSizeMaxIsSet(false);
    this.fetchSizeMax = 0.0;
    setBytesConsumedRateIsSet(false);
    this.bytesConsumedRate = 0.0;
    setRecordsPerRequestAvgIsSet(false);
    this.recordsPerRequestAvg = 0.0;
    setRecordsConsumedRateIsSet(false);
    this.recordsConsumedRate = 0.0;
  }

  public String getCluster() {
    return this.cluster;
  }

  public KafkaConsumerTopicEntity setCluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

  public void unsetCluster() {
    this.cluster = null;
  }

  /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster() {
    return this.cluster != null;
  }

  public void setClusterIsSet(boolean value) {
    if (!value) {
      this.cluster = null;
    }
  }

  public String getClientId() {
    return this.clientId;
  }

  public KafkaConsumerTopicEntity setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  public String getGroupName() {
    return this.groupName;
  }

  public KafkaConsumerTopicEntity setGroupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  public void unsetGroupName() {
    this.groupName = null;
  }

  /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupName() {
    return this.groupName != null;
  }

  public void setGroupNameIsSet(boolean value) {
    if (!value) {
      this.groupName = null;
    }
  }

  public String getTopic() {
    return this.topic;
  }

  public KafkaConsumerTopicEntity setTopic(String topic) {
    this.topic = topic;
    return this;
  }

  public void unsetTopic() {
    this.topic = null;
  }

  /** Returns true if field topic is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic() {
    return this.topic != null;
  }

  public void setTopicIsSet(boolean value) {
    if (!value) {
      this.topic = null;
    }
  }

  public double getFetchSizeAvg() {
    return this.fetchSizeAvg;
  }

  public KafkaConsumerTopicEntity setFetchSizeAvg(double fetchSizeAvg) {
    this.fetchSizeAvg = fetchSizeAvg;
    setFetchSizeAvgIsSet(true);
    return this;
  }

  public void unsetFetchSizeAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FETCHSIZEAVG_ISSET_ID);
  }

  /** Returns true if field fetchSizeAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchSizeAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FETCHSIZEAVG_ISSET_ID);
  }

  public void setFetchSizeAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FETCHSIZEAVG_ISSET_ID, value);
  }

  public double getFetchSizeMax() {
    return this.fetchSizeMax;
  }

  public KafkaConsumerTopicEntity setFetchSizeMax(double fetchSizeMax) {
    this.fetchSizeMax = fetchSizeMax;
    setFetchSizeMaxIsSet(true);
    return this;
  }

  public void unsetFetchSizeMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FETCHSIZEMAX_ISSET_ID);
  }

  /** Returns true if field fetchSizeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchSizeMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FETCHSIZEMAX_ISSET_ID);
  }

  public void setFetchSizeMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FETCHSIZEMAX_ISSET_ID, value);
  }

  public double getBytesConsumedRate() {
    return this.bytesConsumedRate;
  }

  public KafkaConsumerTopicEntity setBytesConsumedRate(double bytesConsumedRate) {
    this.bytesConsumedRate = bytesConsumedRate;
    setBytesConsumedRateIsSet(true);
    return this;
  }

  public void unsetBytesConsumedRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BYTESCONSUMEDRATE_ISSET_ID);
  }

  /** Returns true if field bytesConsumedRate is set (has been assigned a value) and false otherwise */
  public boolean isSetBytesConsumedRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BYTESCONSUMEDRATE_ISSET_ID);
  }

  public void setBytesConsumedRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BYTESCONSUMEDRATE_ISSET_ID, value);
  }

  public double getRecordsPerRequestAvg() {
    return this.recordsPerRequestAvg;
  }

  public KafkaConsumerTopicEntity setRecordsPerRequestAvg(double recordsPerRequestAvg) {
    this.recordsPerRequestAvg = recordsPerRequestAvg;
    setRecordsPerRequestAvgIsSet(true);
    return this;
  }

  public void unsetRecordsPerRequestAvg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORDSPERREQUESTAVG_ISSET_ID);
  }

  /** Returns true if field recordsPerRequestAvg is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordsPerRequestAvg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORDSPERREQUESTAVG_ISSET_ID);
  }

  public void setRecordsPerRequestAvgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORDSPERREQUESTAVG_ISSET_ID, value);
  }

  public double getRecordsConsumedRate() {
    return this.recordsConsumedRate;
  }

  public KafkaConsumerTopicEntity setRecordsConsumedRate(double recordsConsumedRate) {
    this.recordsConsumedRate = recordsConsumedRate;
    setRecordsConsumedRateIsSet(true);
    return this;
  }

  public void unsetRecordsConsumedRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORDSCONSUMEDRATE_ISSET_ID);
  }

  /** Returns true if field recordsConsumedRate is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordsConsumedRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORDSCONSUMEDRATE_ISSET_ID);
  }

  public void setRecordsConsumedRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORDSCONSUMEDRATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLUSTER:
      if (value == null) {
        unsetCluster();
      } else {
        setCluster((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case GROUP_NAME:
      if (value == null) {
        unsetGroupName();
      } else {
        setGroupName((String)value);
      }
      break;

    case TOPIC:
      if (value == null) {
        unsetTopic();
      } else {
        setTopic((String)value);
      }
      break;

    case FETCH_SIZE_AVG:
      if (value == null) {
        unsetFetchSizeAvg();
      } else {
        setFetchSizeAvg((Double)value);
      }
      break;

    case FETCH_SIZE_MAX:
      if (value == null) {
        unsetFetchSizeMax();
      } else {
        setFetchSizeMax((Double)value);
      }
      break;

    case BYTES_CONSUMED_RATE:
      if (value == null) {
        unsetBytesConsumedRate();
      } else {
        setBytesConsumedRate((Double)value);
      }
      break;

    case RECORDS_PER_REQUEST_AVG:
      if (value == null) {
        unsetRecordsPerRequestAvg();
      } else {
        setRecordsPerRequestAvg((Double)value);
      }
      break;

    case RECORDS_CONSUMED_RATE:
      if (value == null) {
        unsetRecordsConsumedRate();
      } else {
        setRecordsConsumedRate((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLUSTER:
      return getCluster();

    case CLIENT_ID:
      return getClientId();

    case GROUP_NAME:
      return getGroupName();

    case TOPIC:
      return getTopic();

    case FETCH_SIZE_AVG:
      return getFetchSizeAvg();

    case FETCH_SIZE_MAX:
      return getFetchSizeMax();

    case BYTES_CONSUMED_RATE:
      return getBytesConsumedRate();

    case RECORDS_PER_REQUEST_AVG:
      return getRecordsPerRequestAvg();

    case RECORDS_CONSUMED_RATE:
      return getRecordsConsumedRate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLUSTER:
      return isSetCluster();
    case CLIENT_ID:
      return isSetClientId();
    case GROUP_NAME:
      return isSetGroupName();
    case TOPIC:
      return isSetTopic();
    case FETCH_SIZE_AVG:
      return isSetFetchSizeAvg();
    case FETCH_SIZE_MAX:
      return isSetFetchSizeMax();
    case BYTES_CONSUMED_RATE:
      return isSetBytesConsumedRate();
    case RECORDS_PER_REQUEST_AVG:
      return isSetRecordsPerRequestAvg();
    case RECORDS_CONSUMED_RATE:
      return isSetRecordsConsumedRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KafkaConsumerTopicEntity)
      return this.equals((KafkaConsumerTopicEntity)that);
    return false;
  }

  public boolean equals(KafkaConsumerTopicEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cluster = true && this.isSetCluster();
    boolean that_present_cluster = true && that.isSetCluster();
    if (this_present_cluster || that_present_cluster) {
      if (!(this_present_cluster && that_present_cluster))
        return false;
      if (!this.cluster.equals(that.cluster))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_groupName = true && this.isSetGroupName();
    boolean that_present_groupName = true && that.isSetGroupName();
    if (this_present_groupName || that_present_groupName) {
      if (!(this_present_groupName && that_present_groupName))
        return false;
      if (!this.groupName.equals(that.groupName))
        return false;
    }

    boolean this_present_topic = true && this.isSetTopic();
    boolean that_present_topic = true && that.isSetTopic();
    if (this_present_topic || that_present_topic) {
      if (!(this_present_topic && that_present_topic))
        return false;
      if (!this.topic.equals(that.topic))
        return false;
    }

    boolean this_present_fetchSizeAvg = true;
    boolean that_present_fetchSizeAvg = true;
    if (this_present_fetchSizeAvg || that_present_fetchSizeAvg) {
      if (!(this_present_fetchSizeAvg && that_present_fetchSizeAvg))
        return false;
      if (this.fetchSizeAvg != that.fetchSizeAvg)
        return false;
    }

    boolean this_present_fetchSizeMax = true;
    boolean that_present_fetchSizeMax = true;
    if (this_present_fetchSizeMax || that_present_fetchSizeMax) {
      if (!(this_present_fetchSizeMax && that_present_fetchSizeMax))
        return false;
      if (this.fetchSizeMax != that.fetchSizeMax)
        return false;
    }

    boolean this_present_bytesConsumedRate = true;
    boolean that_present_bytesConsumedRate = true;
    if (this_present_bytesConsumedRate || that_present_bytesConsumedRate) {
      if (!(this_present_bytesConsumedRate && that_present_bytesConsumedRate))
        return false;
      if (this.bytesConsumedRate != that.bytesConsumedRate)
        return false;
    }

    boolean this_present_recordsPerRequestAvg = true;
    boolean that_present_recordsPerRequestAvg = true;
    if (this_present_recordsPerRequestAvg || that_present_recordsPerRequestAvg) {
      if (!(this_present_recordsPerRequestAvg && that_present_recordsPerRequestAvg))
        return false;
      if (this.recordsPerRequestAvg != that.recordsPerRequestAvg)
        return false;
    }

    boolean this_present_recordsConsumedRate = true;
    boolean that_present_recordsConsumedRate = true;
    if (this_present_recordsConsumedRate || that_present_recordsConsumedRate) {
      if (!(this_present_recordsConsumedRate && that_present_recordsConsumedRate))
        return false;
      if (this.recordsConsumedRate != that.recordsConsumedRate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCluster()) ? 131071 : 524287);
    if (isSetCluster())
      hashCode = hashCode * 8191 + cluster.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientId()) ? 131071 : 524287);
    if (isSetClientId())
      hashCode = hashCode * 8191 + clientId.hashCode();

    hashCode = hashCode * 8191 + ((isSetGroupName()) ? 131071 : 524287);
    if (isSetGroupName())
      hashCode = hashCode * 8191 + groupName.hashCode();

    hashCode = hashCode * 8191 + ((isSetTopic()) ? 131071 : 524287);
    if (isSetTopic())
      hashCode = hashCode * 8191 + topic.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fetchSizeAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fetchSizeMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bytesConsumedRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recordsPerRequestAvg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recordsConsumedRate);

    return hashCode;
  }

  @Override
  public int compareTo(KafkaConsumerTopicEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCluster()).compareTo(other.isSetCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster, other.cluster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(other.isSetGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, other.groupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchSizeAvg()).compareTo(other.isSetFetchSizeAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchSizeAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchSizeAvg, other.fetchSizeAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchSizeMax()).compareTo(other.isSetFetchSizeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchSizeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchSizeMax, other.fetchSizeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBytesConsumedRate()).compareTo(other.isSetBytesConsumedRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBytesConsumedRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytesConsumedRate, other.bytesConsumedRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordsPerRequestAvg()).compareTo(other.isSetRecordsPerRequestAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordsPerRequestAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordsPerRequestAvg, other.recordsPerRequestAvg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordsConsumedRate()).compareTo(other.isSetRecordsConsumedRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordsConsumedRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordsConsumedRate, other.recordsConsumedRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KafkaConsumerTopicEntity(");
    boolean first = true;

    sb.append("cluster:");
    if (this.cluster == null) {
      sb.append("null");
    } else {
      sb.append(this.cluster);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupName:");
    if (this.groupName == null) {
      sb.append("null");
    } else {
      sb.append(this.groupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic:");
    if (this.topic == null) {
      sb.append("null");
    } else {
      sb.append(this.topic);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetchSizeAvg:");
    sb.append(this.fetchSizeAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetchSizeMax:");
    sb.append(this.fetchSizeMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bytesConsumedRate:");
    sb.append(this.bytesConsumedRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordsPerRequestAvg:");
    sb.append(this.recordsPerRequestAvg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordsConsumedRate:");
    sb.append(this.recordsConsumedRate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KafkaConsumerTopicEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaConsumerTopicEntityStandardScheme getScheme() {
      return new KafkaConsumerTopicEntityStandardScheme();
    }
  }

  private static class KafkaConsumerTopicEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<KafkaConsumerTopicEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KafkaConsumerTopicEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLUSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cluster = iprot.readString();
              struct.setClusterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GROUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupName = iprot.readString();
              struct.setGroupNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOPIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topic = iprot.readString();
              struct.setTopicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FETCH_SIZE_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fetchSizeAvg = iprot.readDouble();
              struct.setFetchSizeAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FETCH_SIZE_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fetchSizeMax = iprot.readDouble();
              struct.setFetchSizeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BYTES_CONSUMED_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bytesConsumedRate = iprot.readDouble();
              struct.setBytesConsumedRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RECORDS_PER_REQUEST_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recordsPerRequestAvg = iprot.readDouble();
              struct.setRecordsPerRequestAvgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RECORDS_CONSUMED_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recordsConsumedRate = iprot.readDouble();
              struct.setRecordsConsumedRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KafkaConsumerTopicEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cluster != null) {
        oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
        oprot.writeString(struct.cluster);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.groupName != null) {
        oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
        oprot.writeString(struct.groupName);
        oprot.writeFieldEnd();
      }
      if (struct.topic != null) {
        oprot.writeFieldBegin(TOPIC_FIELD_DESC);
        oprot.writeString(struct.topic);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FETCH_SIZE_AVG_FIELD_DESC);
      oprot.writeDouble(struct.fetchSizeAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FETCH_SIZE_MAX_FIELD_DESC);
      oprot.writeDouble(struct.fetchSizeMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BYTES_CONSUMED_RATE_FIELD_DESC);
      oprot.writeDouble(struct.bytesConsumedRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORDS_PER_REQUEST_AVG_FIELD_DESC);
      oprot.writeDouble(struct.recordsPerRequestAvg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORDS_CONSUMED_RATE_FIELD_DESC);
      oprot.writeDouble(struct.recordsConsumedRate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KafkaConsumerTopicEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaConsumerTopicEntityTupleScheme getScheme() {
      return new KafkaConsumerTopicEntityTupleScheme();
    }
  }

  private static class KafkaConsumerTopicEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<KafkaConsumerTopicEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KafkaConsumerTopicEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCluster()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetGroupName()) {
        optionals.set(2);
      }
      if (struct.isSetTopic()) {
        optionals.set(3);
      }
      if (struct.isSetFetchSizeAvg()) {
        optionals.set(4);
      }
      if (struct.isSetFetchSizeMax()) {
        optionals.set(5);
      }
      if (struct.isSetBytesConsumedRate()) {
        optionals.set(6);
      }
      if (struct.isSetRecordsPerRequestAvg()) {
        optionals.set(7);
      }
      if (struct.isSetRecordsConsumedRate()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetCluster()) {
        oprot.writeString(struct.cluster);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetGroupName()) {
        oprot.writeString(struct.groupName);
      }
      if (struct.isSetTopic()) {
        oprot.writeString(struct.topic);
      }
      if (struct.isSetFetchSizeAvg()) {
        oprot.writeDouble(struct.fetchSizeAvg);
      }
      if (struct.isSetFetchSizeMax()) {
        oprot.writeDouble(struct.fetchSizeMax);
      }
      if (struct.isSetBytesConsumedRate()) {
        oprot.writeDouble(struct.bytesConsumedRate);
      }
      if (struct.isSetRecordsPerRequestAvg()) {
        oprot.writeDouble(struct.recordsPerRequestAvg);
      }
      if (struct.isSetRecordsConsumedRate()) {
        oprot.writeDouble(struct.recordsConsumedRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KafkaConsumerTopicEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.cluster = iprot.readString();
        struct.setClusterIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.groupName = iprot.readString();
        struct.setGroupNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.topic = iprot.readString();
        struct.setTopicIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fetchSizeAvg = iprot.readDouble();
        struct.setFetchSizeAvgIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fetchSizeMax = iprot.readDouble();
        struct.setFetchSizeMaxIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bytesConsumedRate = iprot.readDouble();
        struct.setBytesConsumedRateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.recordsPerRequestAvg = iprot.readDouble();
        struct.setRecordsPerRequestAvgIsSet(true);
      }
      if (incoming.get(8)) {
        struct.recordsConsumedRate = iprot.readDouble();
        struct.setRecordsConsumedRateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

