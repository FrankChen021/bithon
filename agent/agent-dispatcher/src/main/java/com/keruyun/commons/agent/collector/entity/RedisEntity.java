/**
 * Autogenerated by Thrift Compiler (0.11.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class RedisEntity implements org.apache.thrift.TBase<RedisEntity, RedisEntity._Fields>, java.io.Serializable, Cloneable, Comparable<RedisEntity> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RedisEntity");

    private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField HOST_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPort", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short) 5);
    private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short) 6);
    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.I32, (short) 7);
    private static final org.apache.thrift.protocol.TField COMMANDS_FIELD_DESC = new org.apache.thrift.protocol.TField("commands", org.apache.thrift.protocol.TType.I32, (short) 8);
    private static final org.apache.thrift.protocol.TField FAILURE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("failureCount", org.apache.thrift.protocol.TType.I32, (short) 9);
    private static final org.apache.thrift.protocol.TField READ_COST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("readCostTime", org.apache.thrift.protocol.TType.I64, (short) 10);
    private static final org.apache.thrift.protocol.TField WRITE_COST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("writeCostTime", org.apache.thrift.protocol.TType.I64, (short) 11);
    private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.STRING, (short) 12);
    private static final org.apache.thrift.protocol.TField REQUEST_BYTE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestByteSize", org.apache.thrift.protocol.TType.I64, (short) 13);
    private static final org.apache.thrift.protocol.TField RESPONSE_BYTE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("responseByteSize", org.apache.thrift.protocol.TType.I64, (short) 14);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RedisEntityStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RedisEntityTupleSchemeFactory();

    public String appName; // required
    public String hostName; // required
    public int port; // required
    public String hostPort; // required
    public long timestamp; // required
    public int interval; // required
    public int db; // required
    public int commands; // required
    public int failureCount; // required
    public long readCostTime; // required
    public long writeCostTime; // required
    public String flag; // optional
    public long requestByteSize; // required
    public long responseByteSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        APP_NAME((short) 1, "appName"),
        HOST_NAME((short) 2, "hostName"),
        PORT((short) 3, "port"),
        HOST_PORT((short) 4, "hostPort"),
        TIMESTAMP((short) 5, "timestamp"),
        INTERVAL((short) 6, "interval"),
        DB((short) 7, "db"),
        COMMANDS((short) 8, "commands"),
        FAILURE_COUNT((short) 9, "failureCount"),
        READ_COST_TIME((short) 10, "readCostTime"),
        WRITE_COST_TIME((short) 11, "writeCostTime"),
        FLAG((short) 12, "flag"),
        REQUEST_BYTE_SIZE((short) 13, "requestByteSize"),
        RESPONSE_BYTE_SIZE((short) 14, "responseByteSize");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // APP_NAME
                    return APP_NAME;
                case 2: // HOST_NAME
                    return HOST_NAME;
                case 3: // PORT
                    return PORT;
                case 4: // HOST_PORT
                    return HOST_PORT;
                case 5: // TIMESTAMP
                    return TIMESTAMP;
                case 6: // INTERVAL
                    return INTERVAL;
                case 7: // DB
                    return DB;
                case 8: // COMMANDS
                    return COMMANDS;
                case 9: // FAILURE_COUNT
                    return FAILURE_COUNT;
                case 10: // READ_COST_TIME
                    return READ_COST_TIME;
                case 11: // WRITE_COST_TIME
                    return WRITE_COST_TIME;
                case 12: // FLAG
                    return FLAG;
                case 13: // REQUEST_BYTE_SIZE
                    return REQUEST_BYTE_SIZE;
                case 14: // RESPONSE_BYTE_SIZE
                    return RESPONSE_BYTE_SIZE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __TIMESTAMP_ISSET_ID = 1;
    private static final int __INTERVAL_ISSET_ID = 2;
    private static final int __DB_ISSET_ID = 3;
    private static final int __COMMANDS_ISSET_ID = 4;
    private static final int __FAILURECOUNT_ISSET_ID = 5;
    private static final int __READCOSTTIME_ISSET_ID = 6;
    private static final int __WRITECOSTTIME_ISSET_ID = 7;
    private static final int __REQUESTBYTESIZE_ISSET_ID = 8;
    private static final int __RESPONSEBYTESIZE_ISSET_ID = 9;
    private short __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.FLAG};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                               new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.HOST_PORT, new org.apache.thrift.meta_data.FieldMetaData("hostPort", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.COMMANDS, new org.apache.thrift.meta_data.FieldMetaData("commands", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.FAILURE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("failureCount", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.READ_COST_TIME, new org.apache.thrift.meta_data.FieldMetaData("readCostTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.WRITE_COST_TIME, new org.apache.thrift.meta_data.FieldMetaData("writeCostTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                                                                               new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.REQUEST_BYTE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("requestByteSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.RESPONSE_BYTE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("responseByteSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RedisEntity.class, metaDataMap);
    }

    public RedisEntity() {
        this.flag = "0";

    }

    public RedisEntity(
        String appName,
        String hostName,
        int port,
        String hostPort,
        long timestamp,
        int interval,
        int db,
        int commands,
        int failureCount,
        long readCostTime,
        long writeCostTime,
        long requestByteSize,
        long responseByteSize) {
        this();
        this.appName = appName;
        this.hostName = hostName;
        this.port = port;
        setPortIsSet(true);
        this.hostPort = hostPort;
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        this.interval = interval;
        setIntervalIsSet(true);
        this.db = db;
        setDbIsSet(true);
        this.commands = commands;
        setCommandsIsSet(true);
        this.failureCount = failureCount;
        setFailureCountIsSet(true);
        this.readCostTime = readCostTime;
        setReadCostTimeIsSet(true);
        this.writeCostTime = writeCostTime;
        setWriteCostTimeIsSet(true);
        this.requestByteSize = requestByteSize;
        setRequestByteSizeIsSet(true);
        this.responseByteSize = responseByteSize;
        setResponseByteSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RedisEntity(RedisEntity other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetAppName()) {
            this.appName = other.appName;
        }
        if (other.isSetHostName()) {
            this.hostName = other.hostName;
        }
        this.port = other.port;
        if (other.isSetHostPort()) {
            this.hostPort = other.hostPort;
        }
        this.timestamp = other.timestamp;
        this.interval = other.interval;
        this.db = other.db;
        this.commands = other.commands;
        this.failureCount = other.failureCount;
        this.readCostTime = other.readCostTime;
        this.writeCostTime = other.writeCostTime;
        if (other.isSetFlag()) {
            this.flag = other.flag;
        }
        this.requestByteSize = other.requestByteSize;
        this.responseByteSize = other.responseByteSize;
    }

    public RedisEntity deepCopy() {
        return new RedisEntity(this);
    }

    @Override
    public void clear() {
        this.appName = null;
        this.hostName = null;
        setPortIsSet(false);
        this.port = 0;
        this.hostPort = null;
        setTimestampIsSet(false);
        this.timestamp = 0;
        setIntervalIsSet(false);
        this.interval = 0;
        setDbIsSet(false);
        this.db = 0;
        setCommandsIsSet(false);
        this.commands = 0;
        setFailureCountIsSet(false);
        this.failureCount = 0;
        setReadCostTimeIsSet(false);
        this.readCostTime = 0;
        setWriteCostTimeIsSet(false);
        this.writeCostTime = 0;
        this.flag = "0";

        setRequestByteSizeIsSet(false);
        this.requestByteSize = 0;
        setResponseByteSizeIsSet(false);
        this.responseByteSize = 0;
    }

    public String getAppName() {
        return this.appName;
    }

    public RedisEntity setAppName(String appName) {
        this.appName = appName;
        return this;
    }

    public void unsetAppName() {
        this.appName = null;
    }

    /** Returns true if field appName is set (has been assigned a value) and false otherwise */
    public boolean isSetAppName() {
        return this.appName != null;
    }

    public void setAppNameIsSet(boolean value) {
        if (!value) {
            this.appName = null;
        }
    }

    public String getHostName() {
        return this.hostName;
    }

    public RedisEntity setHostName(String hostName) {
        this.hostName = hostName;
        return this;
    }

    public void unsetHostName() {
        this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
        return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
        if (!value) {
            this.hostName = null;
        }
    }

    public int getPort() {
        return this.port;
    }

    public RedisEntity setPort(int port) {
        this.port = port;
        setPortIsSet(true);
        return this;
    }

    public void unsetPort() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public String getHostPort() {
        return this.hostPort;
    }

    public RedisEntity setHostPort(String hostPort) {
        this.hostPort = hostPort;
        return this;
    }

    public void unsetHostPort() {
        this.hostPort = null;
    }

    /** Returns true if field hostPort is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPort() {
        return this.hostPort != null;
    }

    public void setHostPortIsSet(boolean value) {
        if (!value) {
            this.hostPort = null;
        }
    }

    public long getTimestamp() {
        return this.timestamp;
    }

    public RedisEntity setTimestamp(long timestamp) {
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        return this;
    }

    public void unsetTimestamp() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public int getInterval() {
        return this.interval;
    }

    public RedisEntity setInterval(int interval) {
        this.interval = interval;
        setIntervalIsSet(true);
        return this;
    }

    public void unsetInterval() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
    }

    /** Returns true if field interval is set (has been assigned a value) and false otherwise */
    public boolean isSetInterval() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
    }

    public void setIntervalIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
    }

    public int getDb() {
        return this.db;
    }

    public RedisEntity setDb(int db) {
        this.db = db;
        setDbIsSet(true);
        return this;
    }

    public void unsetDb() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DB_ISSET_ID);
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DB_ISSET_ID);
    }

    public void setDbIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DB_ISSET_ID, value);
    }

    public int getCommands() {
        return this.commands;
    }

    public RedisEntity setCommands(int commands) {
        this.commands = commands;
        setCommandsIsSet(true);
        return this;
    }

    public void unsetCommands() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMANDS_ISSET_ID);
    }

    /** Returns true if field commands is set (has been assigned a value) and false otherwise */
    public boolean isSetCommands() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMANDS_ISSET_ID);
    }

    public void setCommandsIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMANDS_ISSET_ID, value);
    }

    public int getFailureCount() {
        return this.failureCount;
    }

    public RedisEntity setFailureCount(int failureCount) {
        this.failureCount = failureCount;
        setFailureCountIsSet(true);
        return this;
    }

    public void unsetFailureCount() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FAILURECOUNT_ISSET_ID);
    }

    /** Returns true if field failureCount is set (has been assigned a value) and false otherwise */
    public boolean isSetFailureCount() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FAILURECOUNT_ISSET_ID);
    }

    public void setFailureCountIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FAILURECOUNT_ISSET_ID, value);
    }

    public long getReadCostTime() {
        return this.readCostTime;
    }

    public RedisEntity setReadCostTime(long readCostTime) {
        this.readCostTime = readCostTime;
        setReadCostTimeIsSet(true);
        return this;
    }

    public void unsetReadCostTime() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __READCOSTTIME_ISSET_ID);
    }

    /** Returns true if field readCostTime is set (has been assigned a value) and false otherwise */
    public boolean isSetReadCostTime() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __READCOSTTIME_ISSET_ID);
    }

    public void setReadCostTimeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __READCOSTTIME_ISSET_ID, value);
    }

    public long getWriteCostTime() {
        return this.writeCostTime;
    }

    public RedisEntity setWriteCostTime(long writeCostTime) {
        this.writeCostTime = writeCostTime;
        setWriteCostTimeIsSet(true);
        return this;
    }

    public void unsetWriteCostTime() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WRITECOSTTIME_ISSET_ID);
    }

    /** Returns true if field writeCostTime is set (has been assigned a value) and false otherwise */
    public boolean isSetWriteCostTime() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WRITECOSTTIME_ISSET_ID);
    }

    public void setWriteCostTimeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WRITECOSTTIME_ISSET_ID, value);
    }

    public String getFlag() {
        return this.flag;
    }

    public RedisEntity setFlag(String flag) {
        this.flag = flag;
        return this;
    }

    public void unsetFlag() {
        this.flag = null;
    }

    /** Returns true if field flag is set (has been assigned a value) and false otherwise */
    public boolean isSetFlag() {
        return this.flag != null;
    }

    public void setFlagIsSet(boolean value) {
        if (!value) {
            this.flag = null;
        }
    }

    public long getRequestByteSize() {
        return this.requestByteSize;
    }

    public RedisEntity setRequestByteSize(long requestByteSize) {
        this.requestByteSize = requestByteSize;
        setRequestByteSizeIsSet(true);
        return this;
    }

    public void unsetRequestByteSize() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTBYTESIZE_ISSET_ID);
    }

    /** Returns true if field requestByteSize is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestByteSize() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTBYTESIZE_ISSET_ID);
    }

    public void setRequestByteSizeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTBYTESIZE_ISSET_ID, value);
    }

    public long getResponseByteSize() {
        return this.responseByteSize;
    }

    public RedisEntity setResponseByteSize(long responseByteSize) {
        this.responseByteSize = responseByteSize;
        setResponseByteSizeIsSet(true);
        return this;
    }

    public void unsetResponseByteSize() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSEBYTESIZE_ISSET_ID);
    }

    /** Returns true if field responseByteSize is set (has been assigned a value) and false otherwise */
    public boolean isSetResponseByteSize() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSEBYTESIZE_ISSET_ID);
    }

    public void setResponseByteSizeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSEBYTESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case APP_NAME:
                if (value == null) {
                    unsetAppName();
                } else {
                    setAppName((String) value);
                }
                break;

            case HOST_NAME:
                if (value == null) {
                    unsetHostName();
                } else {
                    setHostName((String) value);
                }
                break;

            case PORT:
                if (value == null) {
                    unsetPort();
                } else {
                    setPort((Integer) value);
                }
                break;

            case HOST_PORT:
                if (value == null) {
                    unsetHostPort();
                } else {
                    setHostPort((String) value);
                }
                break;

            case TIMESTAMP:
                if (value == null) {
                    unsetTimestamp();
                } else {
                    setTimestamp((Long) value);
                }
                break;

            case INTERVAL:
                if (value == null) {
                    unsetInterval();
                } else {
                    setInterval((Integer) value);
                }
                break;

            case DB:
                if (value == null) {
                    unsetDb();
                } else {
                    setDb((Integer) value);
                }
                break;

            case COMMANDS:
                if (value == null) {
                    unsetCommands();
                } else {
                    setCommands((Integer) value);
                }
                break;

            case FAILURE_COUNT:
                if (value == null) {
                    unsetFailureCount();
                } else {
                    setFailureCount((Integer) value);
                }
                break;

            case READ_COST_TIME:
                if (value == null) {
                    unsetReadCostTime();
                } else {
                    setReadCostTime((Long) value);
                }
                break;

            case WRITE_COST_TIME:
                if (value == null) {
                    unsetWriteCostTime();
                } else {
                    setWriteCostTime((Long) value);
                }
                break;

            case FLAG:
                if (value == null) {
                    unsetFlag();
                } else {
                    setFlag((String) value);
                }
                break;

            case REQUEST_BYTE_SIZE:
                if (value == null) {
                    unsetRequestByteSize();
                } else {
                    setRequestByteSize((Long) value);
                }
                break;

            case RESPONSE_BYTE_SIZE:
                if (value == null) {
                    unsetResponseByteSize();
                } else {
                    setResponseByteSize((Long) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case APP_NAME:
                return getAppName();

            case HOST_NAME:
                return getHostName();

            case PORT:
                return getPort();

            case HOST_PORT:
                return getHostPort();

            case TIMESTAMP:
                return getTimestamp();

            case INTERVAL:
                return getInterval();

            case DB:
                return getDb();

            case COMMANDS:
                return getCommands();

            case FAILURE_COUNT:
                return getFailureCount();

            case READ_COST_TIME:
                return getReadCostTime();

            case WRITE_COST_TIME:
                return getWriteCostTime();

            case FLAG:
                return getFlag();

            case REQUEST_BYTE_SIZE:
                return getRequestByteSize();

            case RESPONSE_BYTE_SIZE:
                return getResponseByteSize();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case APP_NAME:
                return isSetAppName();
            case HOST_NAME:
                return isSetHostName();
            case PORT:
                return isSetPort();
            case HOST_PORT:
                return isSetHostPort();
            case TIMESTAMP:
                return isSetTimestamp();
            case INTERVAL:
                return isSetInterval();
            case DB:
                return isSetDb();
            case COMMANDS:
                return isSetCommands();
            case FAILURE_COUNT:
                return isSetFailureCount();
            case READ_COST_TIME:
                return isSetReadCostTime();
            case WRITE_COST_TIME:
                return isSetWriteCostTime();
            case FLAG:
                return isSetFlag();
            case REQUEST_BYTE_SIZE:
                return isSetRequestByteSize();
            case RESPONSE_BYTE_SIZE:
                return isSetResponseByteSize();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof RedisEntity)
            return this.equals((RedisEntity) that);
        return false;
    }

    public boolean equals(RedisEntity that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_appName = true && this.isSetAppName();
        boolean that_present_appName = true && that.isSetAppName();
        if (this_present_appName || that_present_appName) {
            if (!(this_present_appName && that_present_appName))
                return false;
            if (!this.appName.equals(that.appName))
                return false;
        }

        boolean this_present_hostName = true && this.isSetHostName();
        boolean that_present_hostName = true && that.isSetHostName();
        if (this_present_hostName || that_present_hostName) {
            if (!(this_present_hostName && that_present_hostName))
                return false;
            if (!this.hostName.equals(that.hostName))
                return false;
        }

        boolean this_present_port = true;
        boolean that_present_port = true;
        if (this_present_port || that_present_port) {
            if (!(this_present_port && that_present_port))
                return false;
            if (this.port != that.port)
                return false;
        }

        boolean this_present_hostPort = true && this.isSetHostPort();
        boolean that_present_hostPort = true && that.isSetHostPort();
        if (this_present_hostPort || that_present_hostPort) {
            if (!(this_present_hostPort && that_present_hostPort))
                return false;
            if (!this.hostPort.equals(that.hostPort))
                return false;
        }

        boolean this_present_timestamp = true;
        boolean that_present_timestamp = true;
        if (this_present_timestamp || that_present_timestamp) {
            if (!(this_present_timestamp && that_present_timestamp))
                return false;
            if (this.timestamp != that.timestamp)
                return false;
        }

        boolean this_present_interval = true;
        boolean that_present_interval = true;
        if (this_present_interval || that_present_interval) {
            if (!(this_present_interval && that_present_interval))
                return false;
            if (this.interval != that.interval)
                return false;
        }

        boolean this_present_db = true;
        boolean that_present_db = true;
        if (this_present_db || that_present_db) {
            if (!(this_present_db && that_present_db))
                return false;
            if (this.db != that.db)
                return false;
        }

        boolean this_present_commands = true;
        boolean that_present_commands = true;
        if (this_present_commands || that_present_commands) {
            if (!(this_present_commands && that_present_commands))
                return false;
            if (this.commands != that.commands)
                return false;
        }

        boolean this_present_failureCount = true;
        boolean that_present_failureCount = true;
        if (this_present_failureCount || that_present_failureCount) {
            if (!(this_present_failureCount && that_present_failureCount))
                return false;
            if (this.failureCount != that.failureCount)
                return false;
        }

        boolean this_present_readCostTime = true;
        boolean that_present_readCostTime = true;
        if (this_present_readCostTime || that_present_readCostTime) {
            if (!(this_present_readCostTime && that_present_readCostTime))
                return false;
            if (this.readCostTime != that.readCostTime)
                return false;
        }

        boolean this_present_writeCostTime = true;
        boolean that_present_writeCostTime = true;
        if (this_present_writeCostTime || that_present_writeCostTime) {
            if (!(this_present_writeCostTime && that_present_writeCostTime))
                return false;
            if (this.writeCostTime != that.writeCostTime)
                return false;
        }

        boolean this_present_flag = true && this.isSetFlag();
        boolean that_present_flag = true && that.isSetFlag();
        if (this_present_flag || that_present_flag) {
            if (!(this_present_flag && that_present_flag))
                return false;
            if (!this.flag.equals(that.flag))
                return false;
        }

        boolean this_present_requestByteSize = true;
        boolean that_present_requestByteSize = true;
        if (this_present_requestByteSize || that_present_requestByteSize) {
            if (!(this_present_requestByteSize && that_present_requestByteSize))
                return false;
            if (this.requestByteSize != that.requestByteSize)
                return false;
        }

        boolean this_present_responseByteSize = true;
        boolean that_present_responseByteSize = true;
        if (this_present_responseByteSize || that_present_responseByteSize) {
            if (!(this_present_responseByteSize && that_present_responseByteSize))
                return false;
            if (this.responseByteSize != that.responseByteSize)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetAppName()) ? 131071 : 524287);
        if (isSetAppName())
            hashCode = hashCode * 8191 + appName.hashCode();

        hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
        if (isSetHostName())
            hashCode = hashCode * 8191 + hostName.hashCode();

        hashCode = hashCode * 8191 + port;

        hashCode = hashCode * 8191 + ((isSetHostPort()) ? 131071 : 524287);
        if (isSetHostPort())
            hashCode = hashCode * 8191 + hostPort.hashCode();

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

        hashCode = hashCode * 8191 + interval;

        hashCode = hashCode * 8191 + db;

        hashCode = hashCode * 8191 + commands;

        hashCode = hashCode * 8191 + failureCount;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(readCostTime);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(writeCostTime);

        hashCode = hashCode * 8191 + ((isSetFlag()) ? 131071 : 524287);
        if (isSetFlag())
            hashCode = hashCode * 8191 + flag.hashCode();

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestByteSize);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseByteSize);

        return hashCode;
    }

    @Override
    public int compareTo(RedisEntity other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAppName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHostName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPort()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetHostPort()).compareTo(other.isSetHostPort());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHostPort()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPort, other.hostPort);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTimestamp()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetInterval()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDb()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCommands()).compareTo(other.isSetCommands());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCommands()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commands, other.commands);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetFailureCount()).compareTo(other.isSetFailureCount());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFailureCount()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failureCount, other.failureCount);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetReadCostTime()).compareTo(other.isSetReadCostTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetReadCostTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readCostTime, other.readCostTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetWriteCostTime()).compareTo(other.isSetWriteCostTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetWriteCostTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeCostTime, other.writeCostTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFlag()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetRequestByteSize()).compareTo(other.isSetRequestByteSize());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRequestByteSize()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestByteSize, other.requestByteSize);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetResponseByteSize()).compareTo(other.isSetResponseByteSize());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetResponseByteSize()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseByteSize, other.responseByteSize);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("RedisEntity(");
        boolean first = true;

        sb.append("appName:");
        if (this.appName == null) {
            sb.append("null");
        } else {
            sb.append(this.appName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("hostName:");
        if (this.hostName == null) {
            sb.append("null");
        } else {
            sb.append(this.hostName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("port:");
        sb.append(this.port);
        first = false;
        if (!first) sb.append(", ");
        sb.append("hostPort:");
        if (this.hostPort == null) {
            sb.append("null");
        } else {
            sb.append(this.hostPort);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("timestamp:");
        sb.append(this.timestamp);
        first = false;
        if (!first) sb.append(", ");
        sb.append("interval:");
        sb.append(this.interval);
        first = false;
        if (!first) sb.append(", ");
        sb.append("db:");
        sb.append(this.db);
        first = false;
        if (!first) sb.append(", ");
        sb.append("commands:");
        sb.append(this.commands);
        first = false;
        if (!first) sb.append(", ");
        sb.append("failureCount:");
        sb.append(this.failureCount);
        first = false;
        if (!first) sb.append(", ");
        sb.append("readCostTime:");
        sb.append(this.readCostTime);
        first = false;
        if (!first) sb.append(", ");
        sb.append("writeCostTime:");
        sb.append(this.writeCostTime);
        first = false;
        if (isSetFlag()) {
            if (!first) sb.append(", ");
            sb.append("flag:");
            if (this.flag == null) {
                sb.append("null");
            } else {
                sb.append(this.flag);
            }
            first = false;
        }
        if (!first) sb.append(", ");
        sb.append("requestByteSize:");
        sb.append(this.requestByteSize);
        first = false;
        if (!first) sb.append(", ");
        sb.append("responseByteSize:");
        sb.append(this.responseByteSize);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class RedisEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public RedisEntityStandardScheme getScheme() {
            return new RedisEntityStandardScheme();
        }
    }

    private static class RedisEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<RedisEntity> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, RedisEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // APP_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.appName = iprot.readString();
                            struct.setAppNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // HOST_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.hostName = iprot.readString();
                            struct.setHostNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // PORT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.port = iprot.readI32();
                            struct.setPortIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // HOST_PORT
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.hostPort = iprot.readString();
                            struct.setHostPortIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // TIMESTAMP
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.timestamp = iprot.readI64();
                            struct.setTimestampIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // INTERVAL
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.interval = iprot.readI32();
                            struct.setIntervalIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // DB
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.db = iprot.readI32();
                            struct.setDbIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // COMMANDS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.commands = iprot.readI32();
                            struct.setCommandsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // FAILURE_COUNT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.failureCount = iprot.readI32();
                            struct.setFailureCountIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // READ_COST_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.readCostTime = iprot.readI64();
                            struct.setReadCostTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // WRITE_COST_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.writeCostTime = iprot.readI64();
                            struct.setWriteCostTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 12: // FLAG
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.flag = iprot.readString();
                            struct.setFlagIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 13: // REQUEST_BYTE_SIZE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.requestByteSize = iprot.readI64();
                            struct.setRequestByteSizeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 14: // RESPONSE_BYTE_SIZE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.responseByteSize = iprot.readI64();
                            struct.setResponseByteSizeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, RedisEntity struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.appName != null) {
                oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
                oprot.writeString(struct.appName);
                oprot.writeFieldEnd();
            }
            if (struct.hostName != null) {
                oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
                oprot.writeString(struct.hostName);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(PORT_FIELD_DESC);
            oprot.writeI32(struct.port);
            oprot.writeFieldEnd();
            if (struct.hostPort != null) {
                oprot.writeFieldBegin(HOST_PORT_FIELD_DESC);
                oprot.writeString(struct.hostPort);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
            oprot.writeI64(struct.timestamp);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
            oprot.writeI32(struct.interval);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(DB_FIELD_DESC);
            oprot.writeI32(struct.db);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(COMMANDS_FIELD_DESC);
            oprot.writeI32(struct.commands);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(FAILURE_COUNT_FIELD_DESC);
            oprot.writeI32(struct.failureCount);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(READ_COST_TIME_FIELD_DESC);
            oprot.writeI64(struct.readCostTime);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(WRITE_COST_TIME_FIELD_DESC);
            oprot.writeI64(struct.writeCostTime);
            oprot.writeFieldEnd();
            if (struct.flag != null) {
                if (struct.isSetFlag()) {
                    oprot.writeFieldBegin(FLAG_FIELD_DESC);
                    oprot.writeString(struct.flag);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldBegin(REQUEST_BYTE_SIZE_FIELD_DESC);
            oprot.writeI64(struct.requestByteSize);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(RESPONSE_BYTE_SIZE_FIELD_DESC);
            oprot.writeI64(struct.responseByteSize);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class RedisEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public RedisEntityTupleScheme getScheme() {
            return new RedisEntityTupleScheme();
        }
    }

    private static class RedisEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<RedisEntity> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, RedisEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetAppName()) {
                optionals.set(0);
            }
            if (struct.isSetHostName()) {
                optionals.set(1);
            }
            if (struct.isSetPort()) {
                optionals.set(2);
            }
            if (struct.isSetHostPort()) {
                optionals.set(3);
            }
            if (struct.isSetTimestamp()) {
                optionals.set(4);
            }
            if (struct.isSetInterval()) {
                optionals.set(5);
            }
            if (struct.isSetDb()) {
                optionals.set(6);
            }
            if (struct.isSetCommands()) {
                optionals.set(7);
            }
            if (struct.isSetFailureCount()) {
                optionals.set(8);
            }
            if (struct.isSetReadCostTime()) {
                optionals.set(9);
            }
            if (struct.isSetWriteCostTime()) {
                optionals.set(10);
            }
            if (struct.isSetFlag()) {
                optionals.set(11);
            }
            if (struct.isSetRequestByteSize()) {
                optionals.set(12);
            }
            if (struct.isSetResponseByteSize()) {
                optionals.set(13);
            }
            oprot.writeBitSet(optionals, 14);
            if (struct.isSetAppName()) {
                oprot.writeString(struct.appName);
            }
            if (struct.isSetHostName()) {
                oprot.writeString(struct.hostName);
            }
            if (struct.isSetPort()) {
                oprot.writeI32(struct.port);
            }
            if (struct.isSetHostPort()) {
                oprot.writeString(struct.hostPort);
            }
            if (struct.isSetTimestamp()) {
                oprot.writeI64(struct.timestamp);
            }
            if (struct.isSetInterval()) {
                oprot.writeI32(struct.interval);
            }
            if (struct.isSetDb()) {
                oprot.writeI32(struct.db);
            }
            if (struct.isSetCommands()) {
                oprot.writeI32(struct.commands);
            }
            if (struct.isSetFailureCount()) {
                oprot.writeI32(struct.failureCount);
            }
            if (struct.isSetReadCostTime()) {
                oprot.writeI64(struct.readCostTime);
            }
            if (struct.isSetWriteCostTime()) {
                oprot.writeI64(struct.writeCostTime);
            }
            if (struct.isSetFlag()) {
                oprot.writeString(struct.flag);
            }
            if (struct.isSetRequestByteSize()) {
                oprot.writeI64(struct.requestByteSize);
            }
            if (struct.isSetResponseByteSize()) {
                oprot.writeI64(struct.responseByteSize);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, RedisEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(14);
            if (incoming.get(0)) {
                struct.appName = iprot.readString();
                struct.setAppNameIsSet(true);
            }
            if (incoming.get(1)) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
            }
            if (incoming.get(2)) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
            }
            if (incoming.get(3)) {
                struct.hostPort = iprot.readString();
                struct.setHostPortIsSet(true);
            }
            if (incoming.get(4)) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
            }
            if (incoming.get(5)) {
                struct.interval = iprot.readI32();
                struct.setIntervalIsSet(true);
            }
            if (incoming.get(6)) {
                struct.db = iprot.readI32();
                struct.setDbIsSet(true);
            }
            if (incoming.get(7)) {
                struct.commands = iprot.readI32();
                struct.setCommandsIsSet(true);
            }
            if (incoming.get(8)) {
                struct.failureCount = iprot.readI32();
                struct.setFailureCountIsSet(true);
            }
            if (incoming.get(9)) {
                struct.readCostTime = iprot.readI64();
                struct.setReadCostTimeIsSet(true);
            }
            if (incoming.get(10)) {
                struct.writeCostTime = iprot.readI64();
                struct.setWriteCostTimeIsSet(true);
            }
            if (incoming.get(11)) {
                struct.flag = iprot.readString();
                struct.setFlagIsSet(true);
            }
            if (incoming.get(12)) {
                struct.requestByteSize = iprot.readI64();
                struct.setRequestByteSizeIsSet(true);
            }
            if (incoming.get(13)) {
                struct.responseByteSize = iprot.readI64();
                struct.setResponseByteSizeIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

