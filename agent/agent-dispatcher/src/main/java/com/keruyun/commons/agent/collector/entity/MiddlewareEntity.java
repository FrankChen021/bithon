/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * ****************************  中间件Database信息  ***********************
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class MiddlewareEntity implements org.apache.thrift.TBase<MiddlewareEntity, MiddlewareEntity._Fields>, java.io.Serializable, Cloneable, Comparable<MiddlewareEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MiddlewareEntity");

  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REDIS_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("redisEntity", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField MONGO_DBENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("mongoDBEntity", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField MYSQL_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("mysqlEntity", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField GRANULARITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("GranularityType", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MiddlewareEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MiddlewareEntityTupleSchemeFactory();

  public String category; // required
  public RedisEntity redisEntity; // required
  public MongoDBEntity mongoDBEntity; // required
  public MysqlEntity mysqlEntity; // required
  public int GranularityType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CATEGORY((short)1, "category"),
    REDIS_ENTITY((short)2, "redisEntity"),
    MONGO_DBENTITY((short)3, "mongoDBEntity"),
    MYSQL_ENTITY((short)4, "mysqlEntity"),
    GRANULARITY_TYPE((short)5, "GranularityType");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CATEGORY
          return CATEGORY;
        case 2: // REDIS_ENTITY
          return REDIS_ENTITY;
        case 3: // MONGO_DBENTITY
          return MONGO_DBENTITY;
        case 4: // MYSQL_ENTITY
          return MYSQL_ENTITY;
        case 5: // GRANULARITY_TYPE
          return GRANULARITY_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GRANULARITYTYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GRANULARITY_TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REDIS_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("redisEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "RedisEntity")));
    tmpMap.put(_Fields.MONGO_DBENTITY, new org.apache.thrift.meta_data.FieldMetaData("mongoDBEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "MongoDBEntity")));
    tmpMap.put(_Fields.MYSQL_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("mysqlEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "MysqlEntity")));
    tmpMap.put(_Fields.GRANULARITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("GranularityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MiddlewareEntity.class, metaDataMap);
  }

  public MiddlewareEntity() {
  }

  public MiddlewareEntity(
    String category,
    RedisEntity redisEntity,
    MongoDBEntity mongoDBEntity,
    MysqlEntity mysqlEntity)
  {
    this();
    this.category = category;
    this.redisEntity = redisEntity;
    this.mongoDBEntity = mongoDBEntity;
    this.mysqlEntity = mysqlEntity;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MiddlewareEntity(MiddlewareEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetRedisEntity()) {
      this.redisEntity = new RedisEntity(other.redisEntity);
    }
    if (other.isSetMongoDBEntity()) {
      this.mongoDBEntity = new MongoDBEntity(other.mongoDBEntity);
    }
    if (other.isSetMysqlEntity()) {
      this.mysqlEntity = new MysqlEntity(other.mysqlEntity);
    }
    this.GranularityType = other.GranularityType;
  }

  public MiddlewareEntity deepCopy() {
    return new MiddlewareEntity(this);
  }

  @Override
  public void clear() {
    this.category = null;
    this.redisEntity = null;
    this.mongoDBEntity = null;
    this.mysqlEntity = null;
    setGranularityTypeIsSet(false);
    this.GranularityType = 0;
  }

  public String getCategory() {
    return this.category;
  }

  public MiddlewareEntity setCategory(String category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public RedisEntity getRedisEntity() {
    return this.redisEntity;
  }

  public MiddlewareEntity setRedisEntity(RedisEntity redisEntity) {
    this.redisEntity = redisEntity;
    return this;
  }

  public void unsetRedisEntity() {
    this.redisEntity = null;
  }

  /** Returns true if field redisEntity is set (has been assigned a value) and false otherwise */
  public boolean isSetRedisEntity() {
    return this.redisEntity != null;
  }

  public void setRedisEntityIsSet(boolean value) {
    if (!value) {
      this.redisEntity = null;
    }
  }

  public MongoDBEntity getMongoDBEntity() {
    return this.mongoDBEntity;
  }

  public MiddlewareEntity setMongoDBEntity(MongoDBEntity mongoDBEntity) {
    this.mongoDBEntity = mongoDBEntity;
    return this;
  }

  public void unsetMongoDBEntity() {
    this.mongoDBEntity = null;
  }

  /** Returns true if field mongoDBEntity is set (has been assigned a value) and false otherwise */
  public boolean isSetMongoDBEntity() {
    return this.mongoDBEntity != null;
  }

  public void setMongoDBEntityIsSet(boolean value) {
    if (!value) {
      this.mongoDBEntity = null;
    }
  }

  public MysqlEntity getMysqlEntity() {
    return this.mysqlEntity;
  }

  public MiddlewareEntity setMysqlEntity(MysqlEntity mysqlEntity) {
    this.mysqlEntity = mysqlEntity;
    return this;
  }

  public void unsetMysqlEntity() {
    this.mysqlEntity = null;
  }

  /** Returns true if field mysqlEntity is set (has been assigned a value) and false otherwise */
  public boolean isSetMysqlEntity() {
    return this.mysqlEntity != null;
  }

  public void setMysqlEntityIsSet(boolean value) {
    if (!value) {
      this.mysqlEntity = null;
    }
  }

  public int getGranularityType() {
    return this.GranularityType;
  }

  public MiddlewareEntity setGranularityType(int GranularityType) {
    this.GranularityType = GranularityType;
    setGranularityTypeIsSet(true);
    return this;
  }

  public void unsetGranularityType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID);
  }

  /** Returns true if field GranularityType is set (has been assigned a value) and false otherwise */
  public boolean isSetGranularityType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID);
  }

  public void setGranularityTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((String)value);
      }
      break;

    case REDIS_ENTITY:
      if (value == null) {
        unsetRedisEntity();
      } else {
        setRedisEntity((RedisEntity)value);
      }
      break;

    case MONGO_DBENTITY:
      if (value == null) {
        unsetMongoDBEntity();
      } else {
        setMongoDBEntity((MongoDBEntity)value);
      }
      break;

    case MYSQL_ENTITY:
      if (value == null) {
        unsetMysqlEntity();
      } else {
        setMysqlEntity((MysqlEntity)value);
      }
      break;

    case GRANULARITY_TYPE:
      if (value == null) {
        unsetGranularityType();
      } else {
        setGranularityType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CATEGORY:
      return getCategory();

    case REDIS_ENTITY:
      return getRedisEntity();

    case MONGO_DBENTITY:
      return getMongoDBEntity();

    case MYSQL_ENTITY:
      return getMysqlEntity();

    case GRANULARITY_TYPE:
      return getGranularityType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CATEGORY:
      return isSetCategory();
    case REDIS_ENTITY:
      return isSetRedisEntity();
    case MONGO_DBENTITY:
      return isSetMongoDBEntity();
    case MYSQL_ENTITY:
      return isSetMysqlEntity();
    case GRANULARITY_TYPE:
      return isSetGranularityType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MiddlewareEntity)
      return this.equals((MiddlewareEntity)that);
    return false;
  }

  public boolean equals(MiddlewareEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_redisEntity = true && this.isSetRedisEntity();
    boolean that_present_redisEntity = true && that.isSetRedisEntity();
    if (this_present_redisEntity || that_present_redisEntity) {
      if (!(this_present_redisEntity && that_present_redisEntity))
        return false;
      if (!this.redisEntity.equals(that.redisEntity))
        return false;
    }

    boolean this_present_mongoDBEntity = true && this.isSetMongoDBEntity();
    boolean that_present_mongoDBEntity = true && that.isSetMongoDBEntity();
    if (this_present_mongoDBEntity || that_present_mongoDBEntity) {
      if (!(this_present_mongoDBEntity && that_present_mongoDBEntity))
        return false;
      if (!this.mongoDBEntity.equals(that.mongoDBEntity))
        return false;
    }

    boolean this_present_mysqlEntity = true && this.isSetMysqlEntity();
    boolean that_present_mysqlEntity = true && that.isSetMysqlEntity();
    if (this_present_mysqlEntity || that_present_mysqlEntity) {
      if (!(this_present_mysqlEntity && that_present_mysqlEntity))
        return false;
      if (!this.mysqlEntity.equals(that.mysqlEntity))
        return false;
    }

    boolean this_present_GranularityType = true && this.isSetGranularityType();
    boolean that_present_GranularityType = true && that.isSetGranularityType();
    if (this_present_GranularityType || that_present_GranularityType) {
      if (!(this_present_GranularityType && that_present_GranularityType))
        return false;
      if (this.GranularityType != that.GranularityType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
    if (isSetCategory())
      hashCode = hashCode * 8191 + category.hashCode();

    hashCode = hashCode * 8191 + ((isSetRedisEntity()) ? 131071 : 524287);
    if (isSetRedisEntity())
      hashCode = hashCode * 8191 + redisEntity.hashCode();

    hashCode = hashCode * 8191 + ((isSetMongoDBEntity()) ? 131071 : 524287);
    if (isSetMongoDBEntity())
      hashCode = hashCode * 8191 + mongoDBEntity.hashCode();

    hashCode = hashCode * 8191 + ((isSetMysqlEntity()) ? 131071 : 524287);
    if (isSetMysqlEntity())
      hashCode = hashCode * 8191 + mysqlEntity.hashCode();

    hashCode = hashCode * 8191 + ((isSetGranularityType()) ? 131071 : 524287);
    if (isSetGranularityType())
      hashCode = hashCode * 8191 + GranularityType;

    return hashCode;
  }

  @Override
  public int compareTo(MiddlewareEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRedisEntity()).compareTo(other.isSetRedisEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedisEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redisEntity, other.redisEntity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMongoDBEntity()).compareTo(other.isSetMongoDBEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMongoDBEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mongoDBEntity, other.mongoDBEntity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMysqlEntity()).compareTo(other.isSetMysqlEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMysqlEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mysqlEntity, other.mysqlEntity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGranularityType()).compareTo(other.isSetGranularityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGranularityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GranularityType, other.GranularityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MiddlewareEntity(");
    boolean first = true;

    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("redisEntity:");
    if (this.redisEntity == null) {
      sb.append("null");
    } else {
      sb.append(this.redisEntity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mongoDBEntity:");
    if (this.mongoDBEntity == null) {
      sb.append("null");
    } else {
      sb.append(this.mongoDBEntity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mysqlEntity:");
    if (this.mysqlEntity == null) {
      sb.append("null");
    } else {
      sb.append(this.mysqlEntity);
    }
    first = false;
    if (isSetGranularityType()) {
      if (!first) sb.append(", ");
      sb.append("GranularityType:");
      sb.append(this.GranularityType);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MiddlewareEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MiddlewareEntityStandardScheme getScheme() {
      return new MiddlewareEntityStandardScheme();
    }
  }

  private static class MiddlewareEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<MiddlewareEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MiddlewareEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.category = iprot.readString();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REDIS_ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.redisEntity = new RedisEntity();
              struct.redisEntity.read(iprot);
              struct.setRedisEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MONGO_DBENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.mongoDBEntity = new MongoDBEntity();
              struct.mongoDBEntity.read(iprot);
              struct.setMongoDBEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MYSQL_ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.mysqlEntity = new MysqlEntity();
              struct.mysqlEntity.read(iprot);
              struct.setMysqlEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GRANULARITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.GranularityType = iprot.readI32();
              struct.setGranularityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MiddlewareEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(struct.category);
        oprot.writeFieldEnd();
      }
      if (struct.redisEntity != null) {
        oprot.writeFieldBegin(REDIS_ENTITY_FIELD_DESC);
        struct.redisEntity.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.mongoDBEntity != null) {
        oprot.writeFieldBegin(MONGO_DBENTITY_FIELD_DESC);
        struct.mongoDBEntity.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.mysqlEntity != null) {
        oprot.writeFieldBegin(MYSQL_ENTITY_FIELD_DESC);
        struct.mysqlEntity.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGranularityType()) {
        oprot.writeFieldBegin(GRANULARITY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.GranularityType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MiddlewareEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MiddlewareEntityTupleScheme getScheme() {
      return new MiddlewareEntityTupleScheme();
    }
  }

  private static class MiddlewareEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<MiddlewareEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MiddlewareEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCategory()) {
        optionals.set(0);
      }
      if (struct.isSetRedisEntity()) {
        optionals.set(1);
      }
      if (struct.isSetMongoDBEntity()) {
        optionals.set(2);
      }
      if (struct.isSetMysqlEntity()) {
        optionals.set(3);
      }
      if (struct.isSetGranularityType()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCategory()) {
        oprot.writeString(struct.category);
      }
      if (struct.isSetRedisEntity()) {
        struct.redisEntity.write(oprot);
      }
      if (struct.isSetMongoDBEntity()) {
        struct.mongoDBEntity.write(oprot);
      }
      if (struct.isSetMysqlEntity()) {
        struct.mysqlEntity.write(oprot);
      }
      if (struct.isSetGranularityType()) {
        oprot.writeI32(struct.GranularityType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MiddlewareEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.category = iprot.readString();
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.redisEntity = new RedisEntity();
        struct.redisEntity.read(iprot);
        struct.setRedisEntityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mongoDBEntity = new MongoDBEntity();
        struct.mongoDBEntity.read(iprot);
        struct.setMongoDBEntityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mysqlEntity = new MysqlEntity();
        struct.mysqlEntity.read(iprot);
        struct.setMysqlEntityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.GranularityType = iprot.readI32();
        struct.setGranularityTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

