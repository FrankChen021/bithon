/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class ServerMetricEntity implements org.apache.thrift.TBase<ServerMetricEntity, ServerMetricEntity._Fields>, java.io.Serializable, Cloneable, Comparable<ServerMetricEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServerMetricEntity");

  private static final org.apache.thrift.protocol.TField CONNECTION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("connectionCount", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_CONNECTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxConnections", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENT_THREAD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("currentThreadCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MAX_THREADS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxThreads", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField BRAND_FIELD_DESC = new org.apache.thrift.protocol.TField("brand", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ServerMetricEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ServerMetricEntityTupleSchemeFactory();

  public int connectionCount; // required
  public int maxConnections; // required
  public int currentThreadCount; // required
  public int maxThreads; // required
  public String brand; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONNECTION_COUNT((short)1, "connectionCount"),
    MAX_CONNECTIONS((short)2, "maxConnections"),
    CURRENT_THREAD_COUNT((short)3, "currentThreadCount"),
    MAX_THREADS((short)4, "maxThreads"),
    BRAND((short)5, "brand");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONNECTION_COUNT
          return CONNECTION_COUNT;
        case 2: // MAX_CONNECTIONS
          return MAX_CONNECTIONS;
        case 3: // CURRENT_THREAD_COUNT
          return CURRENT_THREAD_COUNT;
        case 4: // MAX_THREADS
          return MAX_THREADS;
        case 5: // BRAND
          return BRAND;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONNECTIONCOUNT_ISSET_ID = 0;
  private static final int __MAXCONNECTIONS_ISSET_ID = 1;
  private static final int __CURRENTTHREADCOUNT_ISSET_ID = 2;
  private static final int __MAXTHREADS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONNECTION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("connectionCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_CONNECTIONS, new org.apache.thrift.meta_data.FieldMetaData("maxConnections", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_THREAD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("currentThreadCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_THREADS, new org.apache.thrift.meta_data.FieldMetaData("maxThreads", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BRAND, new org.apache.thrift.meta_data.FieldMetaData("brand", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServerMetricEntity.class, metaDataMap);
  }

  public ServerMetricEntity() {
  }

  public ServerMetricEntity(
    int connectionCount,
    int maxConnections,
    int currentThreadCount,
    int maxThreads,
    String brand)
  {
    this();
    this.connectionCount = connectionCount;
    setConnectionCountIsSet(true);
    this.maxConnections = maxConnections;
    setMaxConnectionsIsSet(true);
    this.currentThreadCount = currentThreadCount;
    setCurrentThreadCountIsSet(true);
    this.maxThreads = maxThreads;
    setMaxThreadsIsSet(true);
    this.brand = brand;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServerMetricEntity(ServerMetricEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.connectionCount = other.connectionCount;
    this.maxConnections = other.maxConnections;
    this.currentThreadCount = other.currentThreadCount;
    this.maxThreads = other.maxThreads;
    if (other.isSetBrand()) {
      this.brand = other.brand;
    }
  }

  public ServerMetricEntity deepCopy() {
    return new ServerMetricEntity(this);
  }

  @Override
  public void clear() {
    setConnectionCountIsSet(false);
    this.connectionCount = 0;
    setMaxConnectionsIsSet(false);
    this.maxConnections = 0;
    setCurrentThreadCountIsSet(false);
    this.currentThreadCount = 0;
    setMaxThreadsIsSet(false);
    this.maxThreads = 0;
    this.brand = null;
  }

  public int getConnectionCount() {
    return this.connectionCount;
  }

  public ServerMetricEntity setConnectionCount(int connectionCount) {
    this.connectionCount = connectionCount;
    setConnectionCountIsSet(true);
    return this;
  }

  public void unsetConnectionCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNECTIONCOUNT_ISSET_ID);
  }

  /** Returns true if field connectionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectionCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNECTIONCOUNT_ISSET_ID);
  }

  public void setConnectionCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNECTIONCOUNT_ISSET_ID, value);
  }

  public int getMaxConnections() {
    return this.maxConnections;
  }

  public ServerMetricEntity setMaxConnections(int maxConnections) {
    this.maxConnections = maxConnections;
    setMaxConnectionsIsSet(true);
    return this;
  }

  public void unsetMaxConnections() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXCONNECTIONS_ISSET_ID);
  }

  /** Returns true if field maxConnections is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxConnections() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXCONNECTIONS_ISSET_ID);
  }

  public void setMaxConnectionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXCONNECTIONS_ISSET_ID, value);
  }

  public int getCurrentThreadCount() {
    return this.currentThreadCount;
  }

  public ServerMetricEntity setCurrentThreadCount(int currentThreadCount) {
    this.currentThreadCount = currentThreadCount;
    setCurrentThreadCountIsSet(true);
    return this;
  }

  public void unsetCurrentThreadCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURRENTTHREADCOUNT_ISSET_ID);
  }

  /** Returns true if field currentThreadCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentThreadCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRENTTHREADCOUNT_ISSET_ID);
  }

  public void setCurrentThreadCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURRENTTHREADCOUNT_ISSET_ID, value);
  }

  public int getMaxThreads() {
    return this.maxThreads;
  }

  public ServerMetricEntity setMaxThreads(int maxThreads) {
    this.maxThreads = maxThreads;
    setMaxThreadsIsSet(true);
    return this;
  }

  public void unsetMaxThreads() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXTHREADS_ISSET_ID);
  }

  /** Returns true if field maxThreads is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxThreads() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXTHREADS_ISSET_ID);
  }

  public void setMaxThreadsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXTHREADS_ISSET_ID, value);
  }

  public String getBrand() {
    return this.brand;
  }

  public ServerMetricEntity setBrand(String brand) {
    this.brand = brand;
    return this;
  }

  public void unsetBrand() {
    this.brand = null;
  }

  /** Returns true if field brand is set (has been assigned a value) and false otherwise */
  public boolean isSetBrand() {
    return this.brand != null;
  }

  public void setBrandIsSet(boolean value) {
    if (!value) {
      this.brand = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONNECTION_COUNT:
      if (value == null) {
        unsetConnectionCount();
      } else {
        setConnectionCount((Integer)value);
      }
      break;

    case MAX_CONNECTIONS:
      if (value == null) {
        unsetMaxConnections();
      } else {
        setMaxConnections((Integer)value);
      }
      break;

    case CURRENT_THREAD_COUNT:
      if (value == null) {
        unsetCurrentThreadCount();
      } else {
        setCurrentThreadCount((Integer)value);
      }
      break;

    case MAX_THREADS:
      if (value == null) {
        unsetMaxThreads();
      } else {
        setMaxThreads((Integer)value);
      }
      break;

    case BRAND:
      if (value == null) {
        unsetBrand();
      } else {
        setBrand((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONNECTION_COUNT:
      return getConnectionCount();

    case MAX_CONNECTIONS:
      return getMaxConnections();

    case CURRENT_THREAD_COUNT:
      return getCurrentThreadCount();

    case MAX_THREADS:
      return getMaxThreads();

    case BRAND:
      return getBrand();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONNECTION_COUNT:
      return isSetConnectionCount();
    case MAX_CONNECTIONS:
      return isSetMaxConnections();
    case CURRENT_THREAD_COUNT:
      return isSetCurrentThreadCount();
    case MAX_THREADS:
      return isSetMaxThreads();
    case BRAND:
      return isSetBrand();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServerMetricEntity)
      return this.equals((ServerMetricEntity)that);
    return false;
  }

  public boolean equals(ServerMetricEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_connectionCount = true;
    boolean that_present_connectionCount = true;
    if (this_present_connectionCount || that_present_connectionCount) {
      if (!(this_present_connectionCount && that_present_connectionCount))
        return false;
      if (this.connectionCount != that.connectionCount)
        return false;
    }

    boolean this_present_maxConnections = true;
    boolean that_present_maxConnections = true;
    if (this_present_maxConnections || that_present_maxConnections) {
      if (!(this_present_maxConnections && that_present_maxConnections))
        return false;
      if (this.maxConnections != that.maxConnections)
        return false;
    }

    boolean this_present_currentThreadCount = true;
    boolean that_present_currentThreadCount = true;
    if (this_present_currentThreadCount || that_present_currentThreadCount) {
      if (!(this_present_currentThreadCount && that_present_currentThreadCount))
        return false;
      if (this.currentThreadCount != that.currentThreadCount)
        return false;
    }

    boolean this_present_maxThreads = true;
    boolean that_present_maxThreads = true;
    if (this_present_maxThreads || that_present_maxThreads) {
      if (!(this_present_maxThreads && that_present_maxThreads))
        return false;
      if (this.maxThreads != that.maxThreads)
        return false;
    }

    boolean this_present_brand = true && this.isSetBrand();
    boolean that_present_brand = true && that.isSetBrand();
    if (this_present_brand || that_present_brand) {
      if (!(this_present_brand && that_present_brand))
        return false;
      if (!this.brand.equals(that.brand))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + connectionCount;

    hashCode = hashCode * 8191 + maxConnections;

    hashCode = hashCode * 8191 + currentThreadCount;

    hashCode = hashCode * 8191 + maxThreads;

    hashCode = hashCode * 8191 + ((isSetBrand()) ? 131071 : 524287);
    if (isSetBrand())
      hashCode = hashCode * 8191 + brand.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ServerMetricEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConnectionCount()).compareTo(other.isSetConnectionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectionCount, other.connectionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxConnections()).compareTo(other.isSetMaxConnections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxConnections()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxConnections, other.maxConnections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentThreadCount()).compareTo(other.isSetCurrentThreadCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentThreadCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentThreadCount, other.currentThreadCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxThreads()).compareTo(other.isSetMaxThreads());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxThreads()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxThreads, other.maxThreads);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrand()).compareTo(other.isSetBrand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brand, other.brand);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServerMetricEntity(");
    boolean first = true;

    sb.append("connectionCount:");
    sb.append(this.connectionCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxConnections:");
    sb.append(this.maxConnections);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentThreadCount:");
    sb.append(this.currentThreadCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxThreads:");
    sb.append(this.maxThreads);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brand:");
    if (this.brand == null) {
      sb.append("null");
    } else {
      sb.append(this.brand);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServerMetricEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ServerMetricEntityStandardScheme getScheme() {
      return new ServerMetricEntityStandardScheme();
    }
  }

  private static class ServerMetricEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<ServerMetricEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServerMetricEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONNECTION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.connectionCount = iprot.readI32();
              struct.setConnectionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_CONNECTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxConnections = iprot.readI32();
              struct.setMaxConnectionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENT_THREAD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currentThreadCount = iprot.readI32();
              struct.setCurrentThreadCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAX_THREADS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxThreads = iprot.readI32();
              struct.setMaxThreadsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BRAND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brand = iprot.readString();
              struct.setBrandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServerMetricEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CONNECTION_COUNT_FIELD_DESC);
      oprot.writeI32(struct.connectionCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_CONNECTIONS_FIELD_DESC);
      oprot.writeI32(struct.maxConnections);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_THREAD_COUNT_FIELD_DESC);
      oprot.writeI32(struct.currentThreadCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_THREADS_FIELD_DESC);
      oprot.writeI32(struct.maxThreads);
      oprot.writeFieldEnd();
      if (struct.brand != null) {
        oprot.writeFieldBegin(BRAND_FIELD_DESC);
        oprot.writeString(struct.brand);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServerMetricEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ServerMetricEntityTupleScheme getScheme() {
      return new ServerMetricEntityTupleScheme();
    }
  }

  private static class ServerMetricEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<ServerMetricEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServerMetricEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetConnectionCount()) {
        optionals.set(0);
      }
      if (struct.isSetMaxConnections()) {
        optionals.set(1);
      }
      if (struct.isSetCurrentThreadCount()) {
        optionals.set(2);
      }
      if (struct.isSetMaxThreads()) {
        optionals.set(3);
      }
      if (struct.isSetBrand()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetConnectionCount()) {
        oprot.writeI32(struct.connectionCount);
      }
      if (struct.isSetMaxConnections()) {
        oprot.writeI32(struct.maxConnections);
      }
      if (struct.isSetCurrentThreadCount()) {
        oprot.writeI32(struct.currentThreadCount);
      }
      if (struct.isSetMaxThreads()) {
        oprot.writeI32(struct.maxThreads);
      }
      if (struct.isSetBrand()) {
        oprot.writeString(struct.brand);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServerMetricEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.connectionCount = iprot.readI32();
        struct.setConnectionCountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.maxConnections = iprot.readI32();
        struct.setMaxConnectionsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.currentThreadCount = iprot.readI32();
        struct.setCurrentThreadCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.maxThreads = iprot.readI32();
        struct.setMaxThreadsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.brand = iprot.readString();
        struct.setBrandIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

