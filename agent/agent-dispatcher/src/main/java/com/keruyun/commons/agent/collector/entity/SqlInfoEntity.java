/**
 * Autogenerated by Thrift Compiler (0.11.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class SqlInfoEntity implements org.apache.thrift.TBase<SqlInfoEntity, SqlInfoEntity._Fields>, java.io.Serializable, Cloneable, Comparable<SqlInfoEntity> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SqlInfoEntity");

    private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short) 4);
    private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short) 5);
    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short) 6);
    private static final org.apache.thrift.protocol.TField SQL_PERFORMANCE_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlPerformanceEntity", org.apache.thrift.protocol.TType.STRUCT, (short) 7);
    private static final org.apache.thrift.protocol.TField REQUEST_BYTE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestByteSize", org.apache.thrift.protocol.TType.I64, (short) 8);
    private static final org.apache.thrift.protocol.TField RESPONSE_BYTE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("responseByteSize", org.apache.thrift.protocol.TType.I64, (short) 9);
    private static final org.apache.thrift.protocol.TField GRANULARITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("GranularityType", org.apache.thrift.protocol.TType.I32, (short) 10);
    private static final org.apache.thrift.protocol.TField DRIVER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("driverType", org.apache.thrift.protocol.TType.STRING, (short) 11);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SqlInfoEntityStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SqlInfoEntityTupleSchemeFactory();

    public String appName; // required
    public String hostName; // required
    public int port; // required
    public long timestamp; // required
    public int interval; // required
    public String category; // required
    public SqlPerformanceEntity sqlPerformanceEntity; // required
    public long requestByteSize; // optional
    public long responseByteSize; // optional
    public int GranularityType; // optional
    public String driverType; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        APP_NAME((short) 1, "appName"),
        HOST_NAME((short) 2, "hostName"),
        PORT((short) 3, "port"),
        TIMESTAMP((short) 4, "timestamp"),
        INTERVAL((short) 5, "interval"),
        CATEGORY((short) 6, "category"),
        SQL_PERFORMANCE_ENTITY((short) 7, "sqlPerformanceEntity"),
        REQUEST_BYTE_SIZE((short) 8, "requestByteSize"),
        RESPONSE_BYTE_SIZE((short) 9, "responseByteSize"),
        GRANULARITY_TYPE((short) 10, "GranularityType"),
        DRIVER_TYPE((short) 11, "driverType");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // APP_NAME
                    return APP_NAME;
                case 2: // HOST_NAME
                    return HOST_NAME;
                case 3: // PORT
                    return PORT;
                case 4: // TIMESTAMP
                    return TIMESTAMP;
                case 5: // INTERVAL
                    return INTERVAL;
                case 6: // CATEGORY
                    return CATEGORY;
                case 7: // SQL_PERFORMANCE_ENTITY
                    return SQL_PERFORMANCE_ENTITY;
                case 8: // REQUEST_BYTE_SIZE
                    return REQUEST_BYTE_SIZE;
                case 9: // RESPONSE_BYTE_SIZE
                    return RESPONSE_BYTE_SIZE;
                case 10: // GRANULARITY_TYPE
                    return GRANULARITY_TYPE;
                case 11: // DRIVER_TYPE
                    return DRIVER_TYPE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __TIMESTAMP_ISSET_ID = 1;
    private static final int __INTERVAL_ISSET_ID = 2;
    private static final int __REQUESTBYTESIZE_ISSET_ID = 3;
    private static final int __RESPONSEBYTESIZE_ISSET_ID = 4;
    private static final int __GRANULARITYTYPE_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.REQUEST_BYTE_SIZE, _Fields.RESPONSE_BYTE_SIZE, _Fields.GRANULARITY_TYPE, _Fields.DRIVER_TYPE};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                               new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SQL_PERFORMANCE_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("sqlPerformanceEntity", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                                 new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "SqlPerformanceEntity")));
        tmpMap.put(_Fields.REQUEST_BYTE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("requestByteSize", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                                                                                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.RESPONSE_BYTE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("responseByteSize", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                                                                                             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.GRANULARITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("GranularityType", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                                                                                           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.DRIVER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("driverType", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                                                                                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SqlInfoEntity.class, metaDataMap);
    }

    public SqlInfoEntity() {
    }

    public SqlInfoEntity(
        String appName,
        String hostName,
        int port,
        long timestamp,
        int interval,
        String category,
        SqlPerformanceEntity sqlPerformanceEntity) {
        this();
        this.appName = appName;
        this.hostName = hostName;
        this.port = port;
        setPortIsSet(true);
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        this.interval = interval;
        setIntervalIsSet(true);
        this.category = category;
        this.sqlPerformanceEntity = sqlPerformanceEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SqlInfoEntity(SqlInfoEntity other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetAppName()) {
            this.appName = other.appName;
        }
        if (other.isSetHostName()) {
            this.hostName = other.hostName;
        }
        this.port = other.port;
        this.timestamp = other.timestamp;
        this.interval = other.interval;
        if (other.isSetCategory()) {
            this.category = other.category;
        }
        if (other.isSetSqlPerformanceEntity()) {
            this.sqlPerformanceEntity = new SqlPerformanceEntity(other.sqlPerformanceEntity);
        }
        this.requestByteSize = other.requestByteSize;
        this.responseByteSize = other.responseByteSize;
        this.GranularityType = other.GranularityType;
        if (other.isSetDriverType()) {
            this.driverType = other.driverType;
        }
    }

    public SqlInfoEntity deepCopy() {
        return new SqlInfoEntity(this);
    }

    @Override
    public void clear() {
        this.appName = null;
        this.hostName = null;
        setPortIsSet(false);
        this.port = 0;
        setTimestampIsSet(false);
        this.timestamp = 0;
        setIntervalIsSet(false);
        this.interval = 0;
        this.category = null;
        this.sqlPerformanceEntity = null;
        setRequestByteSizeIsSet(false);
        this.requestByteSize = 0;
        setResponseByteSizeIsSet(false);
        this.responseByteSize = 0;
        setGranularityTypeIsSet(false);
        this.GranularityType = 0;
        this.driverType = null;
    }

    public String getAppName() {
        return this.appName;
    }

    public SqlInfoEntity setAppName(String appName) {
        this.appName = appName;
        return this;
    }

    public void unsetAppName() {
        this.appName = null;
    }

    /** Returns true if field appName is set (has been assigned a value) and false otherwise */
    public boolean isSetAppName() {
        return this.appName != null;
    }

    public void setAppNameIsSet(boolean value) {
        if (!value) {
            this.appName = null;
        }
    }

    public String getHostName() {
        return this.hostName;
    }

    public SqlInfoEntity setHostName(String hostName) {
        this.hostName = hostName;
        return this;
    }

    public void unsetHostName() {
        this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
        return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
        if (!value) {
            this.hostName = null;
        }
    }

    public int getPort() {
        return this.port;
    }

    public SqlInfoEntity setPort(int port) {
        this.port = port;
        setPortIsSet(true);
        return this;
    }

    public void unsetPort() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public long getTimestamp() {
        return this.timestamp;
    }

    public SqlInfoEntity setTimestamp(long timestamp) {
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        return this;
    }

    public void unsetTimestamp() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public int getInterval() {
        return this.interval;
    }

    public SqlInfoEntity setInterval(int interval) {
        this.interval = interval;
        setIntervalIsSet(true);
        return this;
    }

    public void unsetInterval() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
    }

    /** Returns true if field interval is set (has been assigned a value) and false otherwise */
    public boolean isSetInterval() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
    }

    public void setIntervalIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
    }

    public String getCategory() {
        return this.category;
    }

    public SqlInfoEntity setCategory(String category) {
        this.category = category;
        return this;
    }

    public void unsetCategory() {
        this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
        return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
        if (!value) {
            this.category = null;
        }
    }

    public SqlPerformanceEntity getSqlPerformanceEntity() {
        return this.sqlPerformanceEntity;
    }

    public SqlInfoEntity setSqlPerformanceEntity(SqlPerformanceEntity sqlPerformanceEntity) {
        this.sqlPerformanceEntity = sqlPerformanceEntity;
        return this;
    }

    public void unsetSqlPerformanceEntity() {
        this.sqlPerformanceEntity = null;
    }

    /** Returns true if field sqlPerformanceEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlPerformanceEntity() {
        return this.sqlPerformanceEntity != null;
    }

    public void setSqlPerformanceEntityIsSet(boolean value) {
        if (!value) {
            this.sqlPerformanceEntity = null;
        }
    }

    public long getRequestByteSize() {
        return this.requestByteSize;
    }

    public SqlInfoEntity setRequestByteSize(long requestByteSize) {
        this.requestByteSize = requestByteSize;
        setRequestByteSizeIsSet(true);
        return this;
    }

    public void unsetRequestByteSize() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTBYTESIZE_ISSET_ID);
    }

    /** Returns true if field requestByteSize is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestByteSize() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTBYTESIZE_ISSET_ID);
    }

    public void setRequestByteSizeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTBYTESIZE_ISSET_ID, value);
    }

    public long getResponseByteSize() {
        return this.responseByteSize;
    }

    public SqlInfoEntity setResponseByteSize(long responseByteSize) {
        this.responseByteSize = responseByteSize;
        setResponseByteSizeIsSet(true);
        return this;
    }

    public void unsetResponseByteSize() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSEBYTESIZE_ISSET_ID);
    }

    /** Returns true if field responseByteSize is set (has been assigned a value) and false otherwise */
    public boolean isSetResponseByteSize() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSEBYTESIZE_ISSET_ID);
    }

    public void setResponseByteSizeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSEBYTESIZE_ISSET_ID, value);
    }

    public int getGranularityType() {
        return this.GranularityType;
    }

    public SqlInfoEntity setGranularityType(int GranularityType) {
        this.GranularityType = GranularityType;
        setGranularityTypeIsSet(true);
        return this;
    }

    public void unsetGranularityType() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID);
    }

    /** Returns true if field GranularityType is set (has been assigned a value) and false otherwise */
    public boolean isSetGranularityType() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID);
    }

    public void setGranularityTypeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID, value);
    }

    public String getDriverType() {
        return this.driverType;
    }

    public SqlInfoEntity setDriverType(String driverType) {
        this.driverType = driverType;
        return this;
    }

    public void unsetDriverType() {
        this.driverType = null;
    }

    /** Returns true if field driverType is set (has been assigned a value) and false otherwise */
    public boolean isSetDriverType() {
        return this.driverType != null;
    }

    public void setDriverTypeIsSet(boolean value) {
        if (!value) {
            this.driverType = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case APP_NAME:
                if (value == null) {
                    unsetAppName();
                } else {
                    setAppName((String) value);
                }
                break;

            case HOST_NAME:
                if (value == null) {
                    unsetHostName();
                } else {
                    setHostName((String) value);
                }
                break;

            case PORT:
                if (value == null) {
                    unsetPort();
                } else {
                    setPort((Integer) value);
                }
                break;

            case TIMESTAMP:
                if (value == null) {
                    unsetTimestamp();
                } else {
                    setTimestamp((Long) value);
                }
                break;

            case INTERVAL:
                if (value == null) {
                    unsetInterval();
                } else {
                    setInterval((Integer) value);
                }
                break;

            case CATEGORY:
                if (value == null) {
                    unsetCategory();
                } else {
                    setCategory((String) value);
                }
                break;

            case SQL_PERFORMANCE_ENTITY:
                if (value == null) {
                    unsetSqlPerformanceEntity();
                } else {
                    setSqlPerformanceEntity((SqlPerformanceEntity) value);
                }
                break;

            case REQUEST_BYTE_SIZE:
                if (value == null) {
                    unsetRequestByteSize();
                } else {
                    setRequestByteSize((Long) value);
                }
                break;

            case RESPONSE_BYTE_SIZE:
                if (value == null) {
                    unsetResponseByteSize();
                } else {
                    setResponseByteSize((Long) value);
                }
                break;

            case GRANULARITY_TYPE:
                if (value == null) {
                    unsetGranularityType();
                } else {
                    setGranularityType((Integer) value);
                }
                break;

            case DRIVER_TYPE:
                if (value == null) {
                    unsetDriverType();
                } else {
                    setDriverType((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case APP_NAME:
                return getAppName();

            case HOST_NAME:
                return getHostName();

            case PORT:
                return getPort();

            case TIMESTAMP:
                return getTimestamp();

            case INTERVAL:
                return getInterval();

            case CATEGORY:
                return getCategory();

            case SQL_PERFORMANCE_ENTITY:
                return getSqlPerformanceEntity();

            case REQUEST_BYTE_SIZE:
                return getRequestByteSize();

            case RESPONSE_BYTE_SIZE:
                return getResponseByteSize();

            case GRANULARITY_TYPE:
                return getGranularityType();

            case DRIVER_TYPE:
                return getDriverType();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case APP_NAME:
                return isSetAppName();
            case HOST_NAME:
                return isSetHostName();
            case PORT:
                return isSetPort();
            case TIMESTAMP:
                return isSetTimestamp();
            case INTERVAL:
                return isSetInterval();
            case CATEGORY:
                return isSetCategory();
            case SQL_PERFORMANCE_ENTITY:
                return isSetSqlPerformanceEntity();
            case REQUEST_BYTE_SIZE:
                return isSetRequestByteSize();
            case RESPONSE_BYTE_SIZE:
                return isSetResponseByteSize();
            case GRANULARITY_TYPE:
                return isSetGranularityType();
            case DRIVER_TYPE:
                return isSetDriverType();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof SqlInfoEntity)
            return this.equals((SqlInfoEntity) that);
        return false;
    }

    public boolean equals(SqlInfoEntity that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_appName = true && this.isSetAppName();
        boolean that_present_appName = true && that.isSetAppName();
        if (this_present_appName || that_present_appName) {
            if (!(this_present_appName && that_present_appName))
                return false;
            if (!this.appName.equals(that.appName))
                return false;
        }

        boolean this_present_hostName = true && this.isSetHostName();
        boolean that_present_hostName = true && that.isSetHostName();
        if (this_present_hostName || that_present_hostName) {
            if (!(this_present_hostName && that_present_hostName))
                return false;
            if (!this.hostName.equals(that.hostName))
                return false;
        }

        boolean this_present_port = true;
        boolean that_present_port = true;
        if (this_present_port || that_present_port) {
            if (!(this_present_port && that_present_port))
                return false;
            if (this.port != that.port)
                return false;
        }

        boolean this_present_timestamp = true;
        boolean that_present_timestamp = true;
        if (this_present_timestamp || that_present_timestamp) {
            if (!(this_present_timestamp && that_present_timestamp))
                return false;
            if (this.timestamp != that.timestamp)
                return false;
        }

        boolean this_present_interval = true;
        boolean that_present_interval = true;
        if (this_present_interval || that_present_interval) {
            if (!(this_present_interval && that_present_interval))
                return false;
            if (this.interval != that.interval)
                return false;
        }

        boolean this_present_category = true && this.isSetCategory();
        boolean that_present_category = true && that.isSetCategory();
        if (this_present_category || that_present_category) {
            if (!(this_present_category && that_present_category))
                return false;
            if (!this.category.equals(that.category))
                return false;
        }

        boolean this_present_sqlPerformanceEntity = true && this.isSetSqlPerformanceEntity();
        boolean that_present_sqlPerformanceEntity = true && that.isSetSqlPerformanceEntity();
        if (this_present_sqlPerformanceEntity || that_present_sqlPerformanceEntity) {
            if (!(this_present_sqlPerformanceEntity && that_present_sqlPerformanceEntity))
                return false;
            if (!this.sqlPerformanceEntity.equals(that.sqlPerformanceEntity))
                return false;
        }

        boolean this_present_requestByteSize = true && this.isSetRequestByteSize();
        boolean that_present_requestByteSize = true && that.isSetRequestByteSize();
        if (this_present_requestByteSize || that_present_requestByteSize) {
            if (!(this_present_requestByteSize && that_present_requestByteSize))
                return false;
            if (this.requestByteSize != that.requestByteSize)
                return false;
        }

        boolean this_present_responseByteSize = true && this.isSetResponseByteSize();
        boolean that_present_responseByteSize = true && that.isSetResponseByteSize();
        if (this_present_responseByteSize || that_present_responseByteSize) {
            if (!(this_present_responseByteSize && that_present_responseByteSize))
                return false;
            if (this.responseByteSize != that.responseByteSize)
                return false;
        }

        boolean this_present_GranularityType = true && this.isSetGranularityType();
        boolean that_present_GranularityType = true && that.isSetGranularityType();
        if (this_present_GranularityType || that_present_GranularityType) {
            if (!(this_present_GranularityType && that_present_GranularityType))
                return false;
            if (this.GranularityType != that.GranularityType)
                return false;
        }

        boolean this_present_driverType = true && this.isSetDriverType();
        boolean that_present_driverType = true && that.isSetDriverType();
        if (this_present_driverType || that_present_driverType) {
            if (!(this_present_driverType && that_present_driverType))
                return false;
            if (!this.driverType.equals(that.driverType))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetAppName()) ? 131071 : 524287);
        if (isSetAppName())
            hashCode = hashCode * 8191 + appName.hashCode();

        hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
        if (isSetHostName())
            hashCode = hashCode * 8191 + hostName.hashCode();

        hashCode = hashCode * 8191 + port;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

        hashCode = hashCode * 8191 + interval;

        hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
        if (isSetCategory())
            hashCode = hashCode * 8191 + category.hashCode();

        hashCode = hashCode * 8191 + ((isSetSqlPerformanceEntity()) ? 131071 : 524287);
        if (isSetSqlPerformanceEntity())
            hashCode = hashCode * 8191 + sqlPerformanceEntity.hashCode();

        hashCode = hashCode * 8191 + ((isSetRequestByteSize()) ? 131071 : 524287);
        if (isSetRequestByteSize())
            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestByteSize);

        hashCode = hashCode * 8191 + ((isSetResponseByteSize()) ? 131071 : 524287);
        if (isSetResponseByteSize())
            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseByteSize);

        hashCode = hashCode * 8191 + ((isSetGranularityType()) ? 131071 : 524287);
        if (isSetGranularityType())
            hashCode = hashCode * 8191 + GranularityType;

        hashCode = hashCode * 8191 + ((isSetDriverType()) ? 131071 : 524287);
        if (isSetDriverType())
            hashCode = hashCode * 8191 + driverType.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(SqlInfoEntity other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAppName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHostName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPort()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTimestamp()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetInterval()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCategory()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSqlPerformanceEntity()).compareTo(other.isSetSqlPerformanceEntity());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSqlPerformanceEntity()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlPerformanceEntity, other.sqlPerformanceEntity);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetRequestByteSize()).compareTo(other.isSetRequestByteSize());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRequestByteSize()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestByteSize, other.requestByteSize);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetResponseByteSize()).compareTo(other.isSetResponseByteSize());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetResponseByteSize()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseByteSize, other.responseByteSize);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetGranularityType()).compareTo(other.isSetGranularityType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGranularityType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GranularityType, other.GranularityType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDriverType()).compareTo(other.isSetDriverType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDriverType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driverType, other.driverType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SqlInfoEntity(");
        boolean first = true;

        sb.append("appName:");
        if (this.appName == null) {
            sb.append("null");
        } else {
            sb.append(this.appName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("hostName:");
        if (this.hostName == null) {
            sb.append("null");
        } else {
            sb.append(this.hostName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("port:");
        sb.append(this.port);
        first = false;
        if (!first) sb.append(", ");
        sb.append("timestamp:");
        sb.append(this.timestamp);
        first = false;
        if (!first) sb.append(", ");
        sb.append("interval:");
        sb.append(this.interval);
        first = false;
        if (!first) sb.append(", ");
        sb.append("category:");
        if (this.category == null) {
            sb.append("null");
        } else {
            sb.append(this.category);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("sqlPerformanceEntity:");
        if (this.sqlPerformanceEntity == null) {
            sb.append("null");
        } else {
            sb.append(this.sqlPerformanceEntity);
        }
        first = false;
        if (isSetRequestByteSize()) {
            if (!first) sb.append(", ");
            sb.append("requestByteSize:");
            sb.append(this.requestByteSize);
            first = false;
        }
        if (isSetResponseByteSize()) {
            if (!first) sb.append(", ");
            sb.append("responseByteSize:");
            sb.append(this.responseByteSize);
            first = false;
        }
        if (isSetGranularityType()) {
            if (!first) sb.append(", ");
            sb.append("GranularityType:");
            sb.append(this.GranularityType);
            first = false;
        }
        if (isSetDriverType()) {
            if (!first) sb.append(", ");
            sb.append("driverType:");
            if (this.driverType == null) {
                sb.append("null");
            } else {
                sb.append(this.driverType);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class SqlInfoEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public SqlInfoEntityStandardScheme getScheme() {
            return new SqlInfoEntityStandardScheme();
        }
    }

    private static class SqlInfoEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<SqlInfoEntity> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, SqlInfoEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // APP_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.appName = iprot.readString();
                            struct.setAppNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // HOST_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.hostName = iprot.readString();
                            struct.setHostNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // PORT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.port = iprot.readI32();
                            struct.setPortIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // TIMESTAMP
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.timestamp = iprot.readI64();
                            struct.setTimestampIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // INTERVAL
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.interval = iprot.readI32();
                            struct.setIntervalIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // CATEGORY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.category = iprot.readString();
                            struct.setCategoryIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // SQL_PERFORMANCE_ENTITY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.sqlPerformanceEntity = new SqlPerformanceEntity();
                            struct.sqlPerformanceEntity.read(iprot);
                            struct.setSqlPerformanceEntityIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // REQUEST_BYTE_SIZE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.requestByteSize = iprot.readI64();
                            struct.setRequestByteSizeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // RESPONSE_BYTE_SIZE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.responseByteSize = iprot.readI64();
                            struct.setResponseByteSizeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // GRANULARITY_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.GranularityType = iprot.readI32();
                            struct.setGranularityTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // DRIVER_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.driverType = iprot.readString();
                            struct.setDriverTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, SqlInfoEntity struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.appName != null) {
                oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
                oprot.writeString(struct.appName);
                oprot.writeFieldEnd();
            }
            if (struct.hostName != null) {
                oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
                oprot.writeString(struct.hostName);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(PORT_FIELD_DESC);
            oprot.writeI32(struct.port);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
            oprot.writeI64(struct.timestamp);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
            oprot.writeI32(struct.interval);
            oprot.writeFieldEnd();
            if (struct.category != null) {
                oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
                oprot.writeString(struct.category);
                oprot.writeFieldEnd();
            }
            if (struct.sqlPerformanceEntity != null) {
                oprot.writeFieldBegin(SQL_PERFORMANCE_ENTITY_FIELD_DESC);
                struct.sqlPerformanceEntity.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.isSetRequestByteSize()) {
                oprot.writeFieldBegin(REQUEST_BYTE_SIZE_FIELD_DESC);
                oprot.writeI64(struct.requestByteSize);
                oprot.writeFieldEnd();
            }
            if (struct.isSetResponseByteSize()) {
                oprot.writeFieldBegin(RESPONSE_BYTE_SIZE_FIELD_DESC);
                oprot.writeI64(struct.responseByteSize);
                oprot.writeFieldEnd();
            }
            if (struct.isSetGranularityType()) {
                oprot.writeFieldBegin(GRANULARITY_TYPE_FIELD_DESC);
                oprot.writeI32(struct.GranularityType);
                oprot.writeFieldEnd();
            }
            if (struct.driverType != null) {
                if (struct.isSetDriverType()) {
                    oprot.writeFieldBegin(DRIVER_TYPE_FIELD_DESC);
                    oprot.writeString(struct.driverType);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class SqlInfoEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public SqlInfoEntityTupleScheme getScheme() {
            return new SqlInfoEntityTupleScheme();
        }
    }

    private static class SqlInfoEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<SqlInfoEntity> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, SqlInfoEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetAppName()) {
                optionals.set(0);
            }
            if (struct.isSetHostName()) {
                optionals.set(1);
            }
            if (struct.isSetPort()) {
                optionals.set(2);
            }
            if (struct.isSetTimestamp()) {
                optionals.set(3);
            }
            if (struct.isSetInterval()) {
                optionals.set(4);
            }
            if (struct.isSetCategory()) {
                optionals.set(5);
            }
            if (struct.isSetSqlPerformanceEntity()) {
                optionals.set(6);
            }
            if (struct.isSetRequestByteSize()) {
                optionals.set(7);
            }
            if (struct.isSetResponseByteSize()) {
                optionals.set(8);
            }
            if (struct.isSetGranularityType()) {
                optionals.set(9);
            }
            if (struct.isSetDriverType()) {
                optionals.set(10);
            }
            oprot.writeBitSet(optionals, 11);
            if (struct.isSetAppName()) {
                oprot.writeString(struct.appName);
            }
            if (struct.isSetHostName()) {
                oprot.writeString(struct.hostName);
            }
            if (struct.isSetPort()) {
                oprot.writeI32(struct.port);
            }
            if (struct.isSetTimestamp()) {
                oprot.writeI64(struct.timestamp);
            }
            if (struct.isSetInterval()) {
                oprot.writeI32(struct.interval);
            }
            if (struct.isSetCategory()) {
                oprot.writeString(struct.category);
            }
            if (struct.isSetSqlPerformanceEntity()) {
                struct.sqlPerformanceEntity.write(oprot);
            }
            if (struct.isSetRequestByteSize()) {
                oprot.writeI64(struct.requestByteSize);
            }
            if (struct.isSetResponseByteSize()) {
                oprot.writeI64(struct.responseByteSize);
            }
            if (struct.isSetGranularityType()) {
                oprot.writeI32(struct.GranularityType);
            }
            if (struct.isSetDriverType()) {
                oprot.writeString(struct.driverType);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, SqlInfoEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(11);
            if (incoming.get(0)) {
                struct.appName = iprot.readString();
                struct.setAppNameIsSet(true);
            }
            if (incoming.get(1)) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
            }
            if (incoming.get(2)) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
            }
            if (incoming.get(3)) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
            }
            if (incoming.get(4)) {
                struct.interval = iprot.readI32();
                struct.setIntervalIsSet(true);
            }
            if (incoming.get(5)) {
                struct.category = iprot.readString();
                struct.setCategoryIsSet(true);
            }
            if (incoming.get(6)) {
                struct.sqlPerformanceEntity = new SqlPerformanceEntity();
                struct.sqlPerformanceEntity.read(iprot);
                struct.setSqlPerformanceEntityIsSet(true);
            }
            if (incoming.get(7)) {
                struct.requestByteSize = iprot.readI64();
                struct.setRequestByteSizeIsSet(true);
            }
            if (incoming.get(8)) {
                struct.responseByteSize = iprot.readI64();
                struct.setResponseByteSizeIsSet(true);
            }
            if (incoming.get(9)) {
                struct.GranularityType = iprot.readI32();
                struct.setGranularityTypeIsSet(true);
            }
            if (incoming.get(10)) {
                struct.driverType = iprot.readString();
                struct.setDriverTypeIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

