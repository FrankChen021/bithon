/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class NettyPerformanceEntity implements org.apache.thrift.TBase<NettyPerformanceEntity, NettyPerformanceEntity._Fields>, java.io.Serializable, Cloneable, Comparable<NettyPerformanceEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NettyPerformanceEntity");

  private static final org.apache.thrift.protocol.TField CONNECTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("connections", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TARGET_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("targetAddress", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMPLETED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("completedCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SUCCESS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("successCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CANCELLED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelledCount", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SEND_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("sendCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField WRITTEN_EXCEPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("writtenExceptions", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField RECEIVED_EXCEPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("receivedExceptions", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField WRITTEN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("writtenBytes", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField RECEIVED_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("receivedBytes", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField COST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("costTime", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NettyPerformanceEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NettyPerformanceEntityTupleSchemeFactory();

  public int connections; // required
  public String targetAddress; // required
  public int completedCount; // required
  public int successCount; // required
  public int cancelledCount; // required
  public int sendCount; // required
  public int writtenExceptions; // required
  public int receivedExceptions; // required
  public long writtenBytes; // required
  public long receivedBytes; // required
  public long costTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONNECTIONS((short)1, "connections"),
    TARGET_ADDRESS((short)2, "targetAddress"),
    COMPLETED_COUNT((short)3, "completedCount"),
    SUCCESS_COUNT((short)4, "successCount"),
    CANCELLED_COUNT((short)5, "cancelledCount"),
    SEND_COUNT((short)6, "sendCount"),
    WRITTEN_EXCEPTIONS((short)7, "writtenExceptions"),
    RECEIVED_EXCEPTIONS((short)8, "receivedExceptions"),
    WRITTEN_BYTES((short)9, "writtenBytes"),
    RECEIVED_BYTES((short)10, "receivedBytes"),
    COST_TIME((short)11, "costTime");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONNECTIONS
          return CONNECTIONS;
        case 2: // TARGET_ADDRESS
          return TARGET_ADDRESS;
        case 3: // COMPLETED_COUNT
          return COMPLETED_COUNT;
        case 4: // SUCCESS_COUNT
          return SUCCESS_COUNT;
        case 5: // CANCELLED_COUNT
          return CANCELLED_COUNT;
        case 6: // SEND_COUNT
          return SEND_COUNT;
        case 7: // WRITTEN_EXCEPTIONS
          return WRITTEN_EXCEPTIONS;
        case 8: // RECEIVED_EXCEPTIONS
          return RECEIVED_EXCEPTIONS;
        case 9: // WRITTEN_BYTES
          return WRITTEN_BYTES;
        case 10: // RECEIVED_BYTES
          return RECEIVED_BYTES;
        case 11: // COST_TIME
          return COST_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONNECTIONS_ISSET_ID = 0;
  private static final int __COMPLETEDCOUNT_ISSET_ID = 1;
  private static final int __SUCCESSCOUNT_ISSET_ID = 2;
  private static final int __CANCELLEDCOUNT_ISSET_ID = 3;
  private static final int __SENDCOUNT_ISSET_ID = 4;
  private static final int __WRITTENEXCEPTIONS_ISSET_ID = 5;
  private static final int __RECEIVEDEXCEPTIONS_ISSET_ID = 6;
  private static final int __WRITTENBYTES_ISSET_ID = 7;
  private static final int __RECEIVEDBYTES_ISSET_ID = 8;
  private static final int __COSTTIME_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONNECTIONS, new org.apache.thrift.meta_data.FieldMetaData("connections", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TARGET_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("targetAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPLETED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("completedCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUCCESS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("successCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CANCELLED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("cancelledCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEND_COUNT, new org.apache.thrift.meta_data.FieldMetaData("sendCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WRITTEN_EXCEPTIONS, new org.apache.thrift.meta_data.FieldMetaData("writtenExceptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECEIVED_EXCEPTIONS, new org.apache.thrift.meta_data.FieldMetaData("receivedExceptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WRITTEN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("writtenBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RECEIVED_BYTES, new org.apache.thrift.meta_data.FieldMetaData("receivedBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COST_TIME, new org.apache.thrift.meta_data.FieldMetaData("costTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NettyPerformanceEntity.class, metaDataMap);
  }

  public NettyPerformanceEntity() {
  }

  public NettyPerformanceEntity(
    int connections,
    String targetAddress,
    int completedCount,
    int successCount,
    int cancelledCount,
    int sendCount,
    int writtenExceptions,
    int receivedExceptions,
    long writtenBytes,
    long receivedBytes,
    long costTime)
  {
    this();
    this.connections = connections;
    setConnectionsIsSet(true);
    this.targetAddress = targetAddress;
    this.completedCount = completedCount;
    setCompletedCountIsSet(true);
    this.successCount = successCount;
    setSuccessCountIsSet(true);
    this.cancelledCount = cancelledCount;
    setCancelledCountIsSet(true);
    this.sendCount = sendCount;
    setSendCountIsSet(true);
    this.writtenExceptions = writtenExceptions;
    setWrittenExceptionsIsSet(true);
    this.receivedExceptions = receivedExceptions;
    setReceivedExceptionsIsSet(true);
    this.writtenBytes = writtenBytes;
    setWrittenBytesIsSet(true);
    this.receivedBytes = receivedBytes;
    setReceivedBytesIsSet(true);
    this.costTime = costTime;
    setCostTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NettyPerformanceEntity(NettyPerformanceEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.connections = other.connections;
    if (other.isSetTargetAddress()) {
      this.targetAddress = other.targetAddress;
    }
    this.completedCount = other.completedCount;
    this.successCount = other.successCount;
    this.cancelledCount = other.cancelledCount;
    this.sendCount = other.sendCount;
    this.writtenExceptions = other.writtenExceptions;
    this.receivedExceptions = other.receivedExceptions;
    this.writtenBytes = other.writtenBytes;
    this.receivedBytes = other.receivedBytes;
    this.costTime = other.costTime;
  }

  public NettyPerformanceEntity deepCopy() {
    return new NettyPerformanceEntity(this);
  }

  @Override
  public void clear() {
    setConnectionsIsSet(false);
    this.connections = 0;
    this.targetAddress = null;
    setCompletedCountIsSet(false);
    this.completedCount = 0;
    setSuccessCountIsSet(false);
    this.successCount = 0;
    setCancelledCountIsSet(false);
    this.cancelledCount = 0;
    setSendCountIsSet(false);
    this.sendCount = 0;
    setWrittenExceptionsIsSet(false);
    this.writtenExceptions = 0;
    setReceivedExceptionsIsSet(false);
    this.receivedExceptions = 0;
    setWrittenBytesIsSet(false);
    this.writtenBytes = 0;
    setReceivedBytesIsSet(false);
    this.receivedBytes = 0;
    setCostTimeIsSet(false);
    this.costTime = 0;
  }

  public int getConnections() {
    return this.connections;
  }

  public NettyPerformanceEntity setConnections(int connections) {
    this.connections = connections;
    setConnectionsIsSet(true);
    return this;
  }

  public void unsetConnections() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNECTIONS_ISSET_ID);
  }

  /** Returns true if field connections is set (has been assigned a value) and false otherwise */
  public boolean isSetConnections() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNECTIONS_ISSET_ID);
  }

  public void setConnectionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNECTIONS_ISSET_ID, value);
  }

  public String getTargetAddress() {
    return this.targetAddress;
  }

  public NettyPerformanceEntity setTargetAddress(String targetAddress) {
    this.targetAddress = targetAddress;
    return this;
  }

  public void unsetTargetAddress() {
    this.targetAddress = null;
  }

  /** Returns true if field targetAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetAddress() {
    return this.targetAddress != null;
  }

  public void setTargetAddressIsSet(boolean value) {
    if (!value) {
      this.targetAddress = null;
    }
  }

  public int getCompletedCount() {
    return this.completedCount;
  }

  public NettyPerformanceEntity setCompletedCount(int completedCount) {
    this.completedCount = completedCount;
    setCompletedCountIsSet(true);
    return this;
  }

  public void unsetCompletedCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPLETEDCOUNT_ISSET_ID);
  }

  /** Returns true if field completedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCompletedCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPLETEDCOUNT_ISSET_ID);
  }

  public void setCompletedCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPLETEDCOUNT_ISSET_ID, value);
  }

  public int getSuccessCount() {
    return this.successCount;
  }

  public NettyPerformanceEntity setSuccessCount(int successCount) {
    this.successCount = successCount;
    setSuccessCountIsSet(true);
    return this;
  }

  public void unsetSuccessCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESSCOUNT_ISSET_ID);
  }

  /** Returns true if field successCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESSCOUNT_ISSET_ID);
  }

  public void setSuccessCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESSCOUNT_ISSET_ID, value);
  }

  public int getCancelledCount() {
    return this.cancelledCount;
  }

  public NettyPerformanceEntity setCancelledCount(int cancelledCount) {
    this.cancelledCount = cancelledCount;
    setCancelledCountIsSet(true);
    return this;
  }

  public void unsetCancelledCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CANCELLEDCOUNT_ISSET_ID);
  }

  /** Returns true if field cancelledCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelledCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CANCELLEDCOUNT_ISSET_ID);
  }

  public void setCancelledCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CANCELLEDCOUNT_ISSET_ID, value);
  }

  public int getSendCount() {
    return this.sendCount;
  }

  public NettyPerformanceEntity setSendCount(int sendCount) {
    this.sendCount = sendCount;
    setSendCountIsSet(true);
    return this;
  }

  public void unsetSendCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SENDCOUNT_ISSET_ID);
  }

  /** Returns true if field sendCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSendCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SENDCOUNT_ISSET_ID);
  }

  public void setSendCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SENDCOUNT_ISSET_ID, value);
  }

  public int getWrittenExceptions() {
    return this.writtenExceptions;
  }

  public NettyPerformanceEntity setWrittenExceptions(int writtenExceptions) {
    this.writtenExceptions = writtenExceptions;
    setWrittenExceptionsIsSet(true);
    return this;
  }

  public void unsetWrittenExceptions() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WRITTENEXCEPTIONS_ISSET_ID);
  }

  /** Returns true if field writtenExceptions is set (has been assigned a value) and false otherwise */
  public boolean isSetWrittenExceptions() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WRITTENEXCEPTIONS_ISSET_ID);
  }

  public void setWrittenExceptionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WRITTENEXCEPTIONS_ISSET_ID, value);
  }

  public int getReceivedExceptions() {
    return this.receivedExceptions;
  }

  public NettyPerformanceEntity setReceivedExceptions(int receivedExceptions) {
    this.receivedExceptions = receivedExceptions;
    setReceivedExceptionsIsSet(true);
    return this;
  }

  public void unsetReceivedExceptions() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDEXCEPTIONS_ISSET_ID);
  }

  /** Returns true if field receivedExceptions is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivedExceptions() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECEIVEDEXCEPTIONS_ISSET_ID);
  }

  public void setReceivedExceptionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECEIVEDEXCEPTIONS_ISSET_ID, value);
  }

  public long getWrittenBytes() {
    return this.writtenBytes;
  }

  public NettyPerformanceEntity setWrittenBytes(long writtenBytes) {
    this.writtenBytes = writtenBytes;
    setWrittenBytesIsSet(true);
    return this;
  }

  public void unsetWrittenBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WRITTENBYTES_ISSET_ID);
  }

  /** Returns true if field writtenBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetWrittenBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WRITTENBYTES_ISSET_ID);
  }

  public void setWrittenBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WRITTENBYTES_ISSET_ID, value);
  }

  public long getReceivedBytes() {
    return this.receivedBytes;
  }

  public NettyPerformanceEntity setReceivedBytes(long receivedBytes) {
    this.receivedBytes = receivedBytes;
    setReceivedBytesIsSet(true);
    return this;
  }

  public void unsetReceivedBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDBYTES_ISSET_ID);
  }

  /** Returns true if field receivedBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivedBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECEIVEDBYTES_ISSET_ID);
  }

  public void setReceivedBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECEIVEDBYTES_ISSET_ID, value);
  }

  public long getCostTime() {
    return this.costTime;
  }

  public NettyPerformanceEntity setCostTime(long costTime) {
    this.costTime = costTime;
    setCostTimeIsSet(true);
    return this;
  }

  public void unsetCostTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COSTTIME_ISSET_ID);
  }

  /** Returns true if field costTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCostTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COSTTIME_ISSET_ID);
  }

  public void setCostTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COSTTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONNECTIONS:
      if (value == null) {
        unsetConnections();
      } else {
        setConnections((Integer)value);
      }
      break;

    case TARGET_ADDRESS:
      if (value == null) {
        unsetTargetAddress();
      } else {
        setTargetAddress((String)value);
      }
      break;

    case COMPLETED_COUNT:
      if (value == null) {
        unsetCompletedCount();
      } else {
        setCompletedCount((Integer)value);
      }
      break;

    case SUCCESS_COUNT:
      if (value == null) {
        unsetSuccessCount();
      } else {
        setSuccessCount((Integer)value);
      }
      break;

    case CANCELLED_COUNT:
      if (value == null) {
        unsetCancelledCount();
      } else {
        setCancelledCount((Integer)value);
      }
      break;

    case SEND_COUNT:
      if (value == null) {
        unsetSendCount();
      } else {
        setSendCount((Integer)value);
      }
      break;

    case WRITTEN_EXCEPTIONS:
      if (value == null) {
        unsetWrittenExceptions();
      } else {
        setWrittenExceptions((Integer)value);
      }
      break;

    case RECEIVED_EXCEPTIONS:
      if (value == null) {
        unsetReceivedExceptions();
      } else {
        setReceivedExceptions((Integer)value);
      }
      break;

    case WRITTEN_BYTES:
      if (value == null) {
        unsetWrittenBytes();
      } else {
        setWrittenBytes((Long)value);
      }
      break;

    case RECEIVED_BYTES:
      if (value == null) {
        unsetReceivedBytes();
      } else {
        setReceivedBytes((Long)value);
      }
      break;

    case COST_TIME:
      if (value == null) {
        unsetCostTime();
      } else {
        setCostTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONNECTIONS:
      return getConnections();

    case TARGET_ADDRESS:
      return getTargetAddress();

    case COMPLETED_COUNT:
      return getCompletedCount();

    case SUCCESS_COUNT:
      return getSuccessCount();

    case CANCELLED_COUNT:
      return getCancelledCount();

    case SEND_COUNT:
      return getSendCount();

    case WRITTEN_EXCEPTIONS:
      return getWrittenExceptions();

    case RECEIVED_EXCEPTIONS:
      return getReceivedExceptions();

    case WRITTEN_BYTES:
      return getWrittenBytes();

    case RECEIVED_BYTES:
      return getReceivedBytes();

    case COST_TIME:
      return getCostTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONNECTIONS:
      return isSetConnections();
    case TARGET_ADDRESS:
      return isSetTargetAddress();
    case COMPLETED_COUNT:
      return isSetCompletedCount();
    case SUCCESS_COUNT:
      return isSetSuccessCount();
    case CANCELLED_COUNT:
      return isSetCancelledCount();
    case SEND_COUNT:
      return isSetSendCount();
    case WRITTEN_EXCEPTIONS:
      return isSetWrittenExceptions();
    case RECEIVED_EXCEPTIONS:
      return isSetReceivedExceptions();
    case WRITTEN_BYTES:
      return isSetWrittenBytes();
    case RECEIVED_BYTES:
      return isSetReceivedBytes();
    case COST_TIME:
      return isSetCostTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NettyPerformanceEntity)
      return this.equals((NettyPerformanceEntity)that);
    return false;
  }

  public boolean equals(NettyPerformanceEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_connections = true;
    boolean that_present_connections = true;
    if (this_present_connections || that_present_connections) {
      if (!(this_present_connections && that_present_connections))
        return false;
      if (this.connections != that.connections)
        return false;
    }

    boolean this_present_targetAddress = true && this.isSetTargetAddress();
    boolean that_present_targetAddress = true && that.isSetTargetAddress();
    if (this_present_targetAddress || that_present_targetAddress) {
      if (!(this_present_targetAddress && that_present_targetAddress))
        return false;
      if (!this.targetAddress.equals(that.targetAddress))
        return false;
    }

    boolean this_present_completedCount = true;
    boolean that_present_completedCount = true;
    if (this_present_completedCount || that_present_completedCount) {
      if (!(this_present_completedCount && that_present_completedCount))
        return false;
      if (this.completedCount != that.completedCount)
        return false;
    }

    boolean this_present_successCount = true;
    boolean that_present_successCount = true;
    if (this_present_successCount || that_present_successCount) {
      if (!(this_present_successCount && that_present_successCount))
        return false;
      if (this.successCount != that.successCount)
        return false;
    }

    boolean this_present_cancelledCount = true;
    boolean that_present_cancelledCount = true;
    if (this_present_cancelledCount || that_present_cancelledCount) {
      if (!(this_present_cancelledCount && that_present_cancelledCount))
        return false;
      if (this.cancelledCount != that.cancelledCount)
        return false;
    }

    boolean this_present_sendCount = true;
    boolean that_present_sendCount = true;
    if (this_present_sendCount || that_present_sendCount) {
      if (!(this_present_sendCount && that_present_sendCount))
        return false;
      if (this.sendCount != that.sendCount)
        return false;
    }

    boolean this_present_writtenExceptions = true;
    boolean that_present_writtenExceptions = true;
    if (this_present_writtenExceptions || that_present_writtenExceptions) {
      if (!(this_present_writtenExceptions && that_present_writtenExceptions))
        return false;
      if (this.writtenExceptions != that.writtenExceptions)
        return false;
    }

    boolean this_present_receivedExceptions = true;
    boolean that_present_receivedExceptions = true;
    if (this_present_receivedExceptions || that_present_receivedExceptions) {
      if (!(this_present_receivedExceptions && that_present_receivedExceptions))
        return false;
      if (this.receivedExceptions != that.receivedExceptions)
        return false;
    }

    boolean this_present_writtenBytes = true;
    boolean that_present_writtenBytes = true;
    if (this_present_writtenBytes || that_present_writtenBytes) {
      if (!(this_present_writtenBytes && that_present_writtenBytes))
        return false;
      if (this.writtenBytes != that.writtenBytes)
        return false;
    }

    boolean this_present_receivedBytes = true;
    boolean that_present_receivedBytes = true;
    if (this_present_receivedBytes || that_present_receivedBytes) {
      if (!(this_present_receivedBytes && that_present_receivedBytes))
        return false;
      if (this.receivedBytes != that.receivedBytes)
        return false;
    }

    boolean this_present_costTime = true;
    boolean that_present_costTime = true;
    if (this_present_costTime || that_present_costTime) {
      if (!(this_present_costTime && that_present_costTime))
        return false;
      if (this.costTime != that.costTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + connections;

    hashCode = hashCode * 8191 + ((isSetTargetAddress()) ? 131071 : 524287);
    if (isSetTargetAddress())
      hashCode = hashCode * 8191 + targetAddress.hashCode();

    hashCode = hashCode * 8191 + completedCount;

    hashCode = hashCode * 8191 + successCount;

    hashCode = hashCode * 8191 + cancelledCount;

    hashCode = hashCode * 8191 + sendCount;

    hashCode = hashCode * 8191 + writtenExceptions;

    hashCode = hashCode * 8191 + receivedExceptions;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(writtenBytes);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(receivedBytes);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(costTime);

    return hashCode;
  }

  @Override
  public int compareTo(NettyPerformanceEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConnections()).compareTo(other.isSetConnections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnections()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connections, other.connections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetAddress()).compareTo(other.isSetTargetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetAddress, other.targetAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompletedCount()).compareTo(other.isSetCompletedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompletedCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completedCount, other.completedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessCount()).compareTo(other.isSetSuccessCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successCount, other.successCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelledCount()).compareTo(other.isSetCancelledCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelledCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelledCount, other.cancelledCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendCount()).compareTo(other.isSetSendCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendCount, other.sendCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWrittenExceptions()).compareTo(other.isSetWrittenExceptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWrittenExceptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writtenExceptions, other.writtenExceptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivedExceptions()).compareTo(other.isSetReceivedExceptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivedExceptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivedExceptions, other.receivedExceptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWrittenBytes()).compareTo(other.isSetWrittenBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWrittenBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writtenBytes, other.writtenBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivedBytes()).compareTo(other.isSetReceivedBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivedBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivedBytes, other.receivedBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCostTime()).compareTo(other.isSetCostTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costTime, other.costTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NettyPerformanceEntity(");
    boolean first = true;

    sb.append("connections:");
    sb.append(this.connections);
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetAddress:");
    if (this.targetAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.targetAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("completedCount:");
    sb.append(this.completedCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("successCount:");
    sb.append(this.successCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelledCount:");
    sb.append(this.cancelledCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendCount:");
    sb.append(this.sendCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("writtenExceptions:");
    sb.append(this.writtenExceptions);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivedExceptions:");
    sb.append(this.receivedExceptions);
    first = false;
    if (!first) sb.append(", ");
    sb.append("writtenBytes:");
    sb.append(this.writtenBytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivedBytes:");
    sb.append(this.receivedBytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("costTime:");
    sb.append(this.costTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NettyPerformanceEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NettyPerformanceEntityStandardScheme getScheme() {
      return new NettyPerformanceEntityStandardScheme();
    }
  }

  private static class NettyPerformanceEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<NettyPerformanceEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NettyPerformanceEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONNECTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.connections = iprot.readI32();
              struct.setConnectionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TARGET_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.targetAddress = iprot.readString();
              struct.setTargetAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPLETED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.completedCount = iprot.readI32();
              struct.setCompletedCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUCCESS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.successCount = iprot.readI32();
              struct.setSuccessCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CANCELLED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cancelledCount = iprot.readI32();
              struct.setCancelledCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEND_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sendCount = iprot.readI32();
              struct.setSendCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WRITTEN_EXCEPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.writtenExceptions = iprot.readI32();
              struct.setWrittenExceptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RECEIVED_EXCEPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.receivedExceptions = iprot.readI32();
              struct.setReceivedExceptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WRITTEN_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.writtenBytes = iprot.readI64();
              struct.setWrittenBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RECEIVED_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.receivedBytes = iprot.readI64();
              struct.setReceivedBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.costTime = iprot.readI64();
              struct.setCostTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NettyPerformanceEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CONNECTIONS_FIELD_DESC);
      oprot.writeI32(struct.connections);
      oprot.writeFieldEnd();
      if (struct.targetAddress != null) {
        oprot.writeFieldBegin(TARGET_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.targetAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMPLETED_COUNT_FIELD_DESC);
      oprot.writeI32(struct.completedCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUCCESS_COUNT_FIELD_DESC);
      oprot.writeI32(struct.successCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CANCELLED_COUNT_FIELD_DESC);
      oprot.writeI32(struct.cancelledCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEND_COUNT_FIELD_DESC);
      oprot.writeI32(struct.sendCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WRITTEN_EXCEPTIONS_FIELD_DESC);
      oprot.writeI32(struct.writtenExceptions);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVED_EXCEPTIONS_FIELD_DESC);
      oprot.writeI32(struct.receivedExceptions);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WRITTEN_BYTES_FIELD_DESC);
      oprot.writeI64(struct.writtenBytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVED_BYTES_FIELD_DESC);
      oprot.writeI64(struct.receivedBytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COST_TIME_FIELD_DESC);
      oprot.writeI64(struct.costTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NettyPerformanceEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NettyPerformanceEntityTupleScheme getScheme() {
      return new NettyPerformanceEntityTupleScheme();
    }
  }

  private static class NettyPerformanceEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<NettyPerformanceEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NettyPerformanceEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetConnections()) {
        optionals.set(0);
      }
      if (struct.isSetTargetAddress()) {
        optionals.set(1);
      }
      if (struct.isSetCompletedCount()) {
        optionals.set(2);
      }
      if (struct.isSetSuccessCount()) {
        optionals.set(3);
      }
      if (struct.isSetCancelledCount()) {
        optionals.set(4);
      }
      if (struct.isSetSendCount()) {
        optionals.set(5);
      }
      if (struct.isSetWrittenExceptions()) {
        optionals.set(6);
      }
      if (struct.isSetReceivedExceptions()) {
        optionals.set(7);
      }
      if (struct.isSetWrittenBytes()) {
        optionals.set(8);
      }
      if (struct.isSetReceivedBytes()) {
        optionals.set(9);
      }
      if (struct.isSetCostTime()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetConnections()) {
        oprot.writeI32(struct.connections);
      }
      if (struct.isSetTargetAddress()) {
        oprot.writeString(struct.targetAddress);
      }
      if (struct.isSetCompletedCount()) {
        oprot.writeI32(struct.completedCount);
      }
      if (struct.isSetSuccessCount()) {
        oprot.writeI32(struct.successCount);
      }
      if (struct.isSetCancelledCount()) {
        oprot.writeI32(struct.cancelledCount);
      }
      if (struct.isSetSendCount()) {
        oprot.writeI32(struct.sendCount);
      }
      if (struct.isSetWrittenExceptions()) {
        oprot.writeI32(struct.writtenExceptions);
      }
      if (struct.isSetReceivedExceptions()) {
        oprot.writeI32(struct.receivedExceptions);
      }
      if (struct.isSetWrittenBytes()) {
        oprot.writeI64(struct.writtenBytes);
      }
      if (struct.isSetReceivedBytes()) {
        oprot.writeI64(struct.receivedBytes);
      }
      if (struct.isSetCostTime()) {
        oprot.writeI64(struct.costTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NettyPerformanceEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.connections = iprot.readI32();
        struct.setConnectionsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.targetAddress = iprot.readString();
        struct.setTargetAddressIsSet(true);
      }
      if (incoming.get(2)) {
        struct.completedCount = iprot.readI32();
        struct.setCompletedCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.successCount = iprot.readI32();
        struct.setSuccessCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cancelledCount = iprot.readI32();
        struct.setCancelledCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sendCount = iprot.readI32();
        struct.setSendCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.writtenExceptions = iprot.readI32();
        struct.setWrittenExceptionsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.receivedExceptions = iprot.readI32();
        struct.setReceivedExceptionsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.writtenBytes = iprot.readI64();
        struct.setWrittenBytesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.receivedBytes = iprot.readI64();
        struct.setReceivedBytesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.costTime = iprot.readI64();
        struct.setCostTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

