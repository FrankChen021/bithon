/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class RedisClusterEntity implements org.apache.thrift.TBase<RedisClusterEntity, RedisClusterEntity._Fields>, java.io.Serializable, Cloneable, Comparable<RedisClusterEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RedisClusterEntity");

  private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CONNECTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("connections", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SLAVE_CONNECTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("slaveConnections", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField BLOCK_CONNECTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("blockConnections", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PUB_SUB_FIELD_DESC = new org.apache.thrift.protocol.TField("pubSub", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PUB_SUB_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("pubSubMode", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField HITS_FIELD_DESC = new org.apache.thrift.protocol.TField("hits", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField MISSES_FIELD_DESC = new org.apache.thrift.protocol.TField("misses", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("mem", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField TOTAL_COMMANDS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCommands", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField TOTAL_NETWORK_BYTES_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("totalNetworkBytesIn", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField TOTAL_NETWORK_BYTES_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalNetworkBytesOut", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RedisClusterEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RedisClusterEntityTupleSchemeFactory();

  public String clusterName; // required
  public long timestamp; // required
  public int interval; // required
  public int connections; // required
  public int slaveConnections; // required
  public int blockConnections; // required
  public int pubSub; // required
  public int pubSubMode; // required
  public long hits; // required
  public long misses; // required
  public long mem; // required
  public long totalCommands; // required
  public long totalNetworkBytesIn; // required
  public long totalNetworkBytesOut; // required
  public String flag; // optional
  public String host; // optional
  public int port; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLUSTER_NAME((short)1, "clusterName"),
    TIMESTAMP((short)2, "timestamp"),
    INTERVAL((short)3, "interval"),
    CONNECTIONS((short)4, "connections"),
    SLAVE_CONNECTIONS((short)5, "slaveConnections"),
    BLOCK_CONNECTIONS((short)6, "blockConnections"),
    PUB_SUB((short)7, "pubSub"),
    PUB_SUB_MODE((short)8, "pubSubMode"),
    HITS((short)9, "hits"),
    MISSES((short)10, "misses"),
    MEM((short)11, "mem"),
    TOTAL_COMMANDS((short)12, "totalCommands"),
    TOTAL_NETWORK_BYTES_IN((short)13, "totalNetworkBytesIn"),
    TOTAL_NETWORK_BYTES_OUT((short)14, "totalNetworkBytesOut"),
    FLAG((short)15, "flag"),
    HOST((short)16, "host"),
    PORT((short)17, "port");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLUSTER_NAME
          return CLUSTER_NAME;
        case 2: // TIMESTAMP
          return TIMESTAMP;
        case 3: // INTERVAL
          return INTERVAL;
        case 4: // CONNECTIONS
          return CONNECTIONS;
        case 5: // SLAVE_CONNECTIONS
          return SLAVE_CONNECTIONS;
        case 6: // BLOCK_CONNECTIONS
          return BLOCK_CONNECTIONS;
        case 7: // PUB_SUB
          return PUB_SUB;
        case 8: // PUB_SUB_MODE
          return PUB_SUB_MODE;
        case 9: // HITS
          return HITS;
        case 10: // MISSES
          return MISSES;
        case 11: // MEM
          return MEM;
        case 12: // TOTAL_COMMANDS
          return TOTAL_COMMANDS;
        case 13: // TOTAL_NETWORK_BYTES_IN
          return TOTAL_NETWORK_BYTES_IN;
        case 14: // TOTAL_NETWORK_BYTES_OUT
          return TOTAL_NETWORK_BYTES_OUT;
        case 15: // FLAG
          return FLAG;
        case 16: // HOST
          return HOST;
        case 17: // PORT
          return PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __INTERVAL_ISSET_ID = 1;
  private static final int __CONNECTIONS_ISSET_ID = 2;
  private static final int __SLAVECONNECTIONS_ISSET_ID = 3;
  private static final int __BLOCKCONNECTIONS_ISSET_ID = 4;
  private static final int __PUBSUB_ISSET_ID = 5;
  private static final int __PUBSUBMODE_ISSET_ID = 6;
  private static final int __HITS_ISSET_ID = 7;
  private static final int __MISSES_ISSET_ID = 8;
  private static final int __MEM_ISSET_ID = 9;
  private static final int __TOTALCOMMANDS_ISSET_ID = 10;
  private static final int __TOTALNETWORKBYTESIN_ISSET_ID = 11;
  private static final int __TOTALNETWORKBYTESOUT_ISSET_ID = 12;
  private static final int __PORT_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FLAG,_Fields.HOST,_Fields.PORT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("clusterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONNECTIONS, new org.apache.thrift.meta_data.FieldMetaData("connections", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLAVE_CONNECTIONS, new org.apache.thrift.meta_data.FieldMetaData("slaveConnections", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BLOCK_CONNECTIONS, new org.apache.thrift.meta_data.FieldMetaData("blockConnections", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUB_SUB, new org.apache.thrift.meta_data.FieldMetaData("pubSub", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUB_SUB_MODE, new org.apache.thrift.meta_data.FieldMetaData("pubSubMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HITS, new org.apache.thrift.meta_data.FieldMetaData("hits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MISSES, new org.apache.thrift.meta_data.FieldMetaData("misses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEM, new org.apache.thrift.meta_data.FieldMetaData("mem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_COMMANDS, new org.apache.thrift.meta_data.FieldMetaData("totalCommands", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_NETWORK_BYTES_IN, new org.apache.thrift.meta_data.FieldMetaData("totalNetworkBytesIn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_NETWORK_BYTES_OUT, new org.apache.thrift.meta_data.FieldMetaData("totalNetworkBytesOut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RedisClusterEntity.class, metaDataMap);
  }

  public RedisClusterEntity() {
    this.flag = "0";

  }

  public RedisClusterEntity(
    String clusterName,
    long timestamp,
    int interval,
    int connections,
    int slaveConnections,
    int blockConnections,
    int pubSub,
    int pubSubMode,
    long hits,
    long misses,
    long mem,
    long totalCommands,
    long totalNetworkBytesIn,
    long totalNetworkBytesOut)
  {
    this();
    this.clusterName = clusterName;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.interval = interval;
    setIntervalIsSet(true);
    this.connections = connections;
    setConnectionsIsSet(true);
    this.slaveConnections = slaveConnections;
    setSlaveConnectionsIsSet(true);
    this.blockConnections = blockConnections;
    setBlockConnectionsIsSet(true);
    this.pubSub = pubSub;
    setPubSubIsSet(true);
    this.pubSubMode = pubSubMode;
    setPubSubModeIsSet(true);
    this.hits = hits;
    setHitsIsSet(true);
    this.misses = misses;
    setMissesIsSet(true);
    this.mem = mem;
    setMemIsSet(true);
    this.totalCommands = totalCommands;
    setTotalCommandsIsSet(true);
    this.totalNetworkBytesIn = totalNetworkBytesIn;
    setTotalNetworkBytesInIsSet(true);
    this.totalNetworkBytesOut = totalNetworkBytesOut;
    setTotalNetworkBytesOutIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RedisClusterEntity(RedisClusterEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClusterName()) {
      this.clusterName = other.clusterName;
    }
    this.timestamp = other.timestamp;
    this.interval = other.interval;
    this.connections = other.connections;
    this.slaveConnections = other.slaveConnections;
    this.blockConnections = other.blockConnections;
    this.pubSub = other.pubSub;
    this.pubSubMode = other.pubSubMode;
    this.hits = other.hits;
    this.misses = other.misses;
    this.mem = other.mem;
    this.totalCommands = other.totalCommands;
    this.totalNetworkBytesIn = other.totalNetworkBytesIn;
    this.totalNetworkBytesOut = other.totalNetworkBytesOut;
    if (other.isSetFlag()) {
      this.flag = other.flag;
    }
    if (other.isSetHost()) {
      this.host = other.host;
    }
    this.port = other.port;
  }

  public RedisClusterEntity deepCopy() {
    return new RedisClusterEntity(this);
  }

  @Override
  public void clear() {
    this.clusterName = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setIntervalIsSet(false);
    this.interval = 0;
    setConnectionsIsSet(false);
    this.connections = 0;
    setSlaveConnectionsIsSet(false);
    this.slaveConnections = 0;
    setBlockConnectionsIsSet(false);
    this.blockConnections = 0;
    setPubSubIsSet(false);
    this.pubSub = 0;
    setPubSubModeIsSet(false);
    this.pubSubMode = 0;
    setHitsIsSet(false);
    this.hits = 0;
    setMissesIsSet(false);
    this.misses = 0;
    setMemIsSet(false);
    this.mem = 0;
    setTotalCommandsIsSet(false);
    this.totalCommands = 0;
    setTotalNetworkBytesInIsSet(false);
    this.totalNetworkBytesIn = 0;
    setTotalNetworkBytesOutIsSet(false);
    this.totalNetworkBytesOut = 0;
    this.flag = "0";

    this.host = null;
    setPortIsSet(false);
    this.port = 0;
  }

  public String getClusterName() {
    return this.clusterName;
  }

  public RedisClusterEntity setClusterName(String clusterName) {
    this.clusterName = clusterName;
    return this;
  }

  public void unsetClusterName() {
    this.clusterName = null;
  }

  /** Returns true if field clusterName is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterName() {
    return this.clusterName != null;
  }

  public void setClusterNameIsSet(boolean value) {
    if (!value) {
      this.clusterName = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public RedisClusterEntity setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getInterval() {
    return this.interval;
  }

  public RedisClusterEntity setInterval(int interval) {
    this.interval = interval;
    setIntervalIsSet(true);
    return this;
  }

  public void unsetInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  /** Returns true if field interval is set (has been assigned a value) and false otherwise */
  public boolean isSetInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  public void setIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
  }

  public int getConnections() {
    return this.connections;
  }

  public RedisClusterEntity setConnections(int connections) {
    this.connections = connections;
    setConnectionsIsSet(true);
    return this;
  }

  public void unsetConnections() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNECTIONS_ISSET_ID);
  }

  /** Returns true if field connections is set (has been assigned a value) and false otherwise */
  public boolean isSetConnections() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNECTIONS_ISSET_ID);
  }

  public void setConnectionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNECTIONS_ISSET_ID, value);
  }

  public int getSlaveConnections() {
    return this.slaveConnections;
  }

  public RedisClusterEntity setSlaveConnections(int slaveConnections) {
    this.slaveConnections = slaveConnections;
    setSlaveConnectionsIsSet(true);
    return this;
  }

  public void unsetSlaveConnections() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SLAVECONNECTIONS_ISSET_ID);
  }

  /** Returns true if field slaveConnections is set (has been assigned a value) and false otherwise */
  public boolean isSetSlaveConnections() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SLAVECONNECTIONS_ISSET_ID);
  }

  public void setSlaveConnectionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SLAVECONNECTIONS_ISSET_ID, value);
  }

  public int getBlockConnections() {
    return this.blockConnections;
  }

  public RedisClusterEntity setBlockConnections(int blockConnections) {
    this.blockConnections = blockConnections;
    setBlockConnectionsIsSet(true);
    return this;
  }

  public void unsetBlockConnections() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOCKCONNECTIONS_ISSET_ID);
  }

  /** Returns true if field blockConnections is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockConnections() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOCKCONNECTIONS_ISSET_ID);
  }

  public void setBlockConnectionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOCKCONNECTIONS_ISSET_ID, value);
  }

  public int getPubSub() {
    return this.pubSub;
  }

  public RedisClusterEntity setPubSub(int pubSub) {
    this.pubSub = pubSub;
    setPubSubIsSet(true);
    return this;
  }

  public void unsetPubSub() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PUBSUB_ISSET_ID);
  }

  /** Returns true if field pubSub is set (has been assigned a value) and false otherwise */
  public boolean isSetPubSub() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PUBSUB_ISSET_ID);
  }

  public void setPubSubIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PUBSUB_ISSET_ID, value);
  }

  public int getPubSubMode() {
    return this.pubSubMode;
  }

  public RedisClusterEntity setPubSubMode(int pubSubMode) {
    this.pubSubMode = pubSubMode;
    setPubSubModeIsSet(true);
    return this;
  }

  public void unsetPubSubMode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PUBSUBMODE_ISSET_ID);
  }

  /** Returns true if field pubSubMode is set (has been assigned a value) and false otherwise */
  public boolean isSetPubSubMode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PUBSUBMODE_ISSET_ID);
  }

  public void setPubSubModeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PUBSUBMODE_ISSET_ID, value);
  }

  public long getHits() {
    return this.hits;
  }

  public RedisClusterEntity setHits(long hits) {
    this.hits = hits;
    setHitsIsSet(true);
    return this;
  }

  public void unsetHits() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HITS_ISSET_ID);
  }

  /** Returns true if field hits is set (has been assigned a value) and false otherwise */
  public boolean isSetHits() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HITS_ISSET_ID);
  }

  public void setHitsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HITS_ISSET_ID, value);
  }

  public long getMisses() {
    return this.misses;
  }

  public RedisClusterEntity setMisses(long misses) {
    this.misses = misses;
    setMissesIsSet(true);
    return this;
  }

  public void unsetMisses() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MISSES_ISSET_ID);
  }

  /** Returns true if field misses is set (has been assigned a value) and false otherwise */
  public boolean isSetMisses() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MISSES_ISSET_ID);
  }

  public void setMissesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MISSES_ISSET_ID, value);
  }

  public long getMem() {
    return this.mem;
  }

  public RedisClusterEntity setMem(long mem) {
    this.mem = mem;
    setMemIsSet(true);
    return this;
  }

  public void unsetMem() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEM_ISSET_ID);
  }

  /** Returns true if field mem is set (has been assigned a value) and false otherwise */
  public boolean isSetMem() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEM_ISSET_ID);
  }

  public void setMemIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEM_ISSET_ID, value);
  }

  public long getTotalCommands() {
    return this.totalCommands;
  }

  public RedisClusterEntity setTotalCommands(long totalCommands) {
    this.totalCommands = totalCommands;
    setTotalCommandsIsSet(true);
    return this;
  }

  public void unsetTotalCommands() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALCOMMANDS_ISSET_ID);
  }

  /** Returns true if field totalCommands is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCommands() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALCOMMANDS_ISSET_ID);
  }

  public void setTotalCommandsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALCOMMANDS_ISSET_ID, value);
  }

  public long getTotalNetworkBytesIn() {
    return this.totalNetworkBytesIn;
  }

  public RedisClusterEntity setTotalNetworkBytesIn(long totalNetworkBytesIn) {
    this.totalNetworkBytesIn = totalNetworkBytesIn;
    setTotalNetworkBytesInIsSet(true);
    return this;
  }

  public void unsetTotalNetworkBytesIn() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALNETWORKBYTESIN_ISSET_ID);
  }

  /** Returns true if field totalNetworkBytesIn is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalNetworkBytesIn() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALNETWORKBYTESIN_ISSET_ID);
  }

  public void setTotalNetworkBytesInIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALNETWORKBYTESIN_ISSET_ID, value);
  }

  public long getTotalNetworkBytesOut() {
    return this.totalNetworkBytesOut;
  }

  public RedisClusterEntity setTotalNetworkBytesOut(long totalNetworkBytesOut) {
    this.totalNetworkBytesOut = totalNetworkBytesOut;
    setTotalNetworkBytesOutIsSet(true);
    return this;
  }

  public void unsetTotalNetworkBytesOut() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALNETWORKBYTESOUT_ISSET_ID);
  }

  /** Returns true if field totalNetworkBytesOut is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalNetworkBytesOut() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALNETWORKBYTESOUT_ISSET_ID);
  }

  public void setTotalNetworkBytesOutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALNETWORKBYTESOUT_ISSET_ID, value);
  }

  public String getFlag() {
    return this.flag;
  }

  public RedisClusterEntity setFlag(String flag) {
    this.flag = flag;
    return this;
  }

  public void unsetFlag() {
    this.flag = null;
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return this.flag != null;
  }

  public void setFlagIsSet(boolean value) {
    if (!value) {
      this.flag = null;
    }
  }

  public String getHost() {
    return this.host;
  }

  public RedisClusterEntity setHost(String host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public RedisClusterEntity setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLUSTER_NAME:
      if (value == null) {
        unsetClusterName();
      } else {
        setClusterName((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((Integer)value);
      }
      break;

    case CONNECTIONS:
      if (value == null) {
        unsetConnections();
      } else {
        setConnections((Integer)value);
      }
      break;

    case SLAVE_CONNECTIONS:
      if (value == null) {
        unsetSlaveConnections();
      } else {
        setSlaveConnections((Integer)value);
      }
      break;

    case BLOCK_CONNECTIONS:
      if (value == null) {
        unsetBlockConnections();
      } else {
        setBlockConnections((Integer)value);
      }
      break;

    case PUB_SUB:
      if (value == null) {
        unsetPubSub();
      } else {
        setPubSub((Integer)value);
      }
      break;

    case PUB_SUB_MODE:
      if (value == null) {
        unsetPubSubMode();
      } else {
        setPubSubMode((Integer)value);
      }
      break;

    case HITS:
      if (value == null) {
        unsetHits();
      } else {
        setHits((Long)value);
      }
      break;

    case MISSES:
      if (value == null) {
        unsetMisses();
      } else {
        setMisses((Long)value);
      }
      break;

    case MEM:
      if (value == null) {
        unsetMem();
      } else {
        setMem((Long)value);
      }
      break;

    case TOTAL_COMMANDS:
      if (value == null) {
        unsetTotalCommands();
      } else {
        setTotalCommands((Long)value);
      }
      break;

    case TOTAL_NETWORK_BYTES_IN:
      if (value == null) {
        unsetTotalNetworkBytesIn();
      } else {
        setTotalNetworkBytesIn((Long)value);
      }
      break;

    case TOTAL_NETWORK_BYTES_OUT:
      if (value == null) {
        unsetTotalNetworkBytesOut();
      } else {
        setTotalNetworkBytesOut((Long)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((String)value);
      }
      break;

    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLUSTER_NAME:
      return getClusterName();

    case TIMESTAMP:
      return getTimestamp();

    case INTERVAL:
      return getInterval();

    case CONNECTIONS:
      return getConnections();

    case SLAVE_CONNECTIONS:
      return getSlaveConnections();

    case BLOCK_CONNECTIONS:
      return getBlockConnections();

    case PUB_SUB:
      return getPubSub();

    case PUB_SUB_MODE:
      return getPubSubMode();

    case HITS:
      return getHits();

    case MISSES:
      return getMisses();

    case MEM:
      return getMem();

    case TOTAL_COMMANDS:
      return getTotalCommands();

    case TOTAL_NETWORK_BYTES_IN:
      return getTotalNetworkBytesIn();

    case TOTAL_NETWORK_BYTES_OUT:
      return getTotalNetworkBytesOut();

    case FLAG:
      return getFlag();

    case HOST:
      return getHost();

    case PORT:
      return getPort();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLUSTER_NAME:
      return isSetClusterName();
    case TIMESTAMP:
      return isSetTimestamp();
    case INTERVAL:
      return isSetInterval();
    case CONNECTIONS:
      return isSetConnections();
    case SLAVE_CONNECTIONS:
      return isSetSlaveConnections();
    case BLOCK_CONNECTIONS:
      return isSetBlockConnections();
    case PUB_SUB:
      return isSetPubSub();
    case PUB_SUB_MODE:
      return isSetPubSubMode();
    case HITS:
      return isSetHits();
    case MISSES:
      return isSetMisses();
    case MEM:
      return isSetMem();
    case TOTAL_COMMANDS:
      return isSetTotalCommands();
    case TOTAL_NETWORK_BYTES_IN:
      return isSetTotalNetworkBytesIn();
    case TOTAL_NETWORK_BYTES_OUT:
      return isSetTotalNetworkBytesOut();
    case FLAG:
      return isSetFlag();
    case HOST:
      return isSetHost();
    case PORT:
      return isSetPort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RedisClusterEntity)
      return this.equals((RedisClusterEntity)that);
    return false;
  }

  public boolean equals(RedisClusterEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_clusterName = true && this.isSetClusterName();
    boolean that_present_clusterName = true && that.isSetClusterName();
    if (this_present_clusterName || that_present_clusterName) {
      if (!(this_present_clusterName && that_present_clusterName))
        return false;
      if (!this.clusterName.equals(that.clusterName))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_interval = true;
    boolean that_present_interval = true;
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (this.interval != that.interval)
        return false;
    }

    boolean this_present_connections = true;
    boolean that_present_connections = true;
    if (this_present_connections || that_present_connections) {
      if (!(this_present_connections && that_present_connections))
        return false;
      if (this.connections != that.connections)
        return false;
    }

    boolean this_present_slaveConnections = true;
    boolean that_present_slaveConnections = true;
    if (this_present_slaveConnections || that_present_slaveConnections) {
      if (!(this_present_slaveConnections && that_present_slaveConnections))
        return false;
      if (this.slaveConnections != that.slaveConnections)
        return false;
    }

    boolean this_present_blockConnections = true;
    boolean that_present_blockConnections = true;
    if (this_present_blockConnections || that_present_blockConnections) {
      if (!(this_present_blockConnections && that_present_blockConnections))
        return false;
      if (this.blockConnections != that.blockConnections)
        return false;
    }

    boolean this_present_pubSub = true;
    boolean that_present_pubSub = true;
    if (this_present_pubSub || that_present_pubSub) {
      if (!(this_present_pubSub && that_present_pubSub))
        return false;
      if (this.pubSub != that.pubSub)
        return false;
    }

    boolean this_present_pubSubMode = true;
    boolean that_present_pubSubMode = true;
    if (this_present_pubSubMode || that_present_pubSubMode) {
      if (!(this_present_pubSubMode && that_present_pubSubMode))
        return false;
      if (this.pubSubMode != that.pubSubMode)
        return false;
    }

    boolean this_present_hits = true;
    boolean that_present_hits = true;
    if (this_present_hits || that_present_hits) {
      if (!(this_present_hits && that_present_hits))
        return false;
      if (this.hits != that.hits)
        return false;
    }

    boolean this_present_misses = true;
    boolean that_present_misses = true;
    if (this_present_misses || that_present_misses) {
      if (!(this_present_misses && that_present_misses))
        return false;
      if (this.misses != that.misses)
        return false;
    }

    boolean this_present_mem = true;
    boolean that_present_mem = true;
    if (this_present_mem || that_present_mem) {
      if (!(this_present_mem && that_present_mem))
        return false;
      if (this.mem != that.mem)
        return false;
    }

    boolean this_present_totalCommands = true;
    boolean that_present_totalCommands = true;
    if (this_present_totalCommands || that_present_totalCommands) {
      if (!(this_present_totalCommands && that_present_totalCommands))
        return false;
      if (this.totalCommands != that.totalCommands)
        return false;
    }

    boolean this_present_totalNetworkBytesIn = true;
    boolean that_present_totalNetworkBytesIn = true;
    if (this_present_totalNetworkBytesIn || that_present_totalNetworkBytesIn) {
      if (!(this_present_totalNetworkBytesIn && that_present_totalNetworkBytesIn))
        return false;
      if (this.totalNetworkBytesIn != that.totalNetworkBytesIn)
        return false;
    }

    boolean this_present_totalNetworkBytesOut = true;
    boolean that_present_totalNetworkBytesOut = true;
    if (this_present_totalNetworkBytesOut || that_present_totalNetworkBytesOut) {
      if (!(this_present_totalNetworkBytesOut && that_present_totalNetworkBytesOut))
        return false;
      if (this.totalNetworkBytesOut != that.totalNetworkBytesOut)
        return false;
    }

    boolean this_present_flag = true && this.isSetFlag();
    boolean that_present_flag = true && that.isSetFlag();
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (!this.flag.equals(that.flag))
        return false;
    }

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_port = true && this.isSetPort();
    boolean that_present_port = true && that.isSetPort();
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetClusterName()) ? 131071 : 524287);
    if (isSetClusterName())
      hashCode = hashCode * 8191 + clusterName.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + interval;

    hashCode = hashCode * 8191 + connections;

    hashCode = hashCode * 8191 + slaveConnections;

    hashCode = hashCode * 8191 + blockConnections;

    hashCode = hashCode * 8191 + pubSub;

    hashCode = hashCode * 8191 + pubSubMode;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(hits);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(misses);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mem);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalCommands);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalNetworkBytesIn);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalNetworkBytesOut);

    hashCode = hashCode * 8191 + ((isSetFlag()) ? 131071 : 524287);
    if (isSetFlag())
      hashCode = hashCode * 8191 + flag.hashCode();

    hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
    if (isSetHost())
      hashCode = hashCode * 8191 + host.hashCode();

    hashCode = hashCode * 8191 + ((isSetPort()) ? 131071 : 524287);
    if (isSetPort())
      hashCode = hashCode * 8191 + port;

    return hashCode;
  }

  @Override
  public int compareTo(RedisClusterEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClusterName()).compareTo(other.isSetClusterName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterName, other.clusterName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnections()).compareTo(other.isSetConnections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnections()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connections, other.connections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlaveConnections()).compareTo(other.isSetSlaveConnections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlaveConnections()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slaveConnections, other.slaveConnections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlockConnections()).compareTo(other.isSetBlockConnections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockConnections()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockConnections, other.blockConnections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPubSub()).compareTo(other.isSetPubSub());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPubSub()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pubSub, other.pubSub);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPubSubMode()).compareTo(other.isSetPubSubMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPubSubMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pubSubMode, other.pubSubMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHits()).compareTo(other.isSetHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hits, other.hits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMisses()).compareTo(other.isSetMisses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMisses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.misses, other.misses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMem()).compareTo(other.isSetMem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem, other.mem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCommands()).compareTo(other.isSetTotalCommands());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCommands()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCommands, other.totalCommands);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalNetworkBytesIn()).compareTo(other.isSetTotalNetworkBytesIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalNetworkBytesIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalNetworkBytesIn, other.totalNetworkBytesIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalNetworkBytesOut()).compareTo(other.isSetTotalNetworkBytesOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalNetworkBytesOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalNetworkBytesOut, other.totalNetworkBytesOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RedisClusterEntity(");
    boolean first = true;

    sb.append("clusterName:");
    if (this.clusterName == null) {
      sb.append("null");
    } else {
      sb.append(this.clusterName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interval:");
    sb.append(this.interval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("connections:");
    sb.append(this.connections);
    first = false;
    if (!first) sb.append(", ");
    sb.append("slaveConnections:");
    sb.append(this.slaveConnections);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockConnections:");
    sb.append(this.blockConnections);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pubSub:");
    sb.append(this.pubSub);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pubSubMode:");
    sb.append(this.pubSubMode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hits:");
    sb.append(this.hits);
    first = false;
    if (!first) sb.append(", ");
    sb.append("misses:");
    sb.append(this.misses);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mem:");
    sb.append(this.mem);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCommands:");
    sb.append(this.totalCommands);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalNetworkBytesIn:");
    sb.append(this.totalNetworkBytesIn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalNetworkBytesOut:");
    sb.append(this.totalNetworkBytesOut);
    first = false;
    if (isSetFlag()) {
      if (!first) sb.append(", ");
      sb.append("flag:");
      if (this.flag == null) {
        sb.append("null");
      } else {
        sb.append(this.flag);
      }
      first = false;
    }
    if (isSetHost()) {
      if (!first) sb.append(", ");
      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
    }
    if (isSetPort()) {
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RedisClusterEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RedisClusterEntityStandardScheme getScheme() {
      return new RedisClusterEntityStandardScheme();
    }
  }

  private static class RedisClusterEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<RedisClusterEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RedisClusterEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLUSTER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clusterName = iprot.readString();
              struct.setClusterNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interval = iprot.readI32();
              struct.setIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONNECTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.connections = iprot.readI32();
              struct.setConnectionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SLAVE_CONNECTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.slaveConnections = iprot.readI32();
              struct.setSlaveConnectionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BLOCK_CONNECTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.blockConnections = iprot.readI32();
              struct.setBlockConnectionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PUB_SUB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pubSub = iprot.readI32();
              struct.setPubSubIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PUB_SUB_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pubSubMode = iprot.readI32();
              struct.setPubSubModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.hits = iprot.readI64();
              struct.setHitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MISSES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.misses = iprot.readI64();
              struct.setMissesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mem = iprot.readI64();
              struct.setMemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TOTAL_COMMANDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalCommands = iprot.readI64();
              struct.setTotalCommandsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TOTAL_NETWORK_BYTES_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalNetworkBytesIn = iprot.readI64();
              struct.setTotalNetworkBytesInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TOTAL_NETWORK_BYTES_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalNetworkBytesOut = iprot.readI64();
              struct.setTotalNetworkBytesOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flag = iprot.readString();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host = iprot.readString();
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RedisClusterEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clusterName != null) {
        oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
        oprot.writeString(struct.clusterName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.interval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONNECTIONS_FIELD_DESC);
      oprot.writeI32(struct.connections);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SLAVE_CONNECTIONS_FIELD_DESC);
      oprot.writeI32(struct.slaveConnections);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCK_CONNECTIONS_FIELD_DESC);
      oprot.writeI32(struct.blockConnections);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUB_SUB_FIELD_DESC);
      oprot.writeI32(struct.pubSub);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUB_SUB_MODE_FIELD_DESC);
      oprot.writeI32(struct.pubSubMode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HITS_FIELD_DESC);
      oprot.writeI64(struct.hits);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MISSES_FIELD_DESC);
      oprot.writeI64(struct.misses);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEM_FIELD_DESC);
      oprot.writeI64(struct.mem);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_COMMANDS_FIELD_DESC);
      oprot.writeI64(struct.totalCommands);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_NETWORK_BYTES_IN_FIELD_DESC);
      oprot.writeI64(struct.totalNetworkBytesIn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_NETWORK_BYTES_OUT_FIELD_DESC);
      oprot.writeI64(struct.totalNetworkBytesOut);
      oprot.writeFieldEnd();
      if (struct.flag != null) {
        if (struct.isSetFlag()) {
          oprot.writeFieldBegin(FLAG_FIELD_DESC);
          oprot.writeString(struct.flag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.host != null) {
        if (struct.isSetHost()) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          oprot.writeString(struct.host);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPort()) {
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RedisClusterEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RedisClusterEntityTupleScheme getScheme() {
      return new RedisClusterEntityTupleScheme();
    }
  }

  private static class RedisClusterEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<RedisClusterEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RedisClusterEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetClusterName()) {
        optionals.set(0);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(1);
      }
      if (struct.isSetInterval()) {
        optionals.set(2);
      }
      if (struct.isSetConnections()) {
        optionals.set(3);
      }
      if (struct.isSetSlaveConnections()) {
        optionals.set(4);
      }
      if (struct.isSetBlockConnections()) {
        optionals.set(5);
      }
      if (struct.isSetPubSub()) {
        optionals.set(6);
      }
      if (struct.isSetPubSubMode()) {
        optionals.set(7);
      }
      if (struct.isSetHits()) {
        optionals.set(8);
      }
      if (struct.isSetMisses()) {
        optionals.set(9);
      }
      if (struct.isSetMem()) {
        optionals.set(10);
      }
      if (struct.isSetTotalCommands()) {
        optionals.set(11);
      }
      if (struct.isSetTotalNetworkBytesIn()) {
        optionals.set(12);
      }
      if (struct.isSetTotalNetworkBytesOut()) {
        optionals.set(13);
      }
      if (struct.isSetFlag()) {
        optionals.set(14);
      }
      if (struct.isSetHost()) {
        optionals.set(15);
      }
      if (struct.isSetPort()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetClusterName()) {
        oprot.writeString(struct.clusterName);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetInterval()) {
        oprot.writeI32(struct.interval);
      }
      if (struct.isSetConnections()) {
        oprot.writeI32(struct.connections);
      }
      if (struct.isSetSlaveConnections()) {
        oprot.writeI32(struct.slaveConnections);
      }
      if (struct.isSetBlockConnections()) {
        oprot.writeI32(struct.blockConnections);
      }
      if (struct.isSetPubSub()) {
        oprot.writeI32(struct.pubSub);
      }
      if (struct.isSetPubSubMode()) {
        oprot.writeI32(struct.pubSubMode);
      }
      if (struct.isSetHits()) {
        oprot.writeI64(struct.hits);
      }
      if (struct.isSetMisses()) {
        oprot.writeI64(struct.misses);
      }
      if (struct.isSetMem()) {
        oprot.writeI64(struct.mem);
      }
      if (struct.isSetTotalCommands()) {
        oprot.writeI64(struct.totalCommands);
      }
      if (struct.isSetTotalNetworkBytesIn()) {
        oprot.writeI64(struct.totalNetworkBytesIn);
      }
      if (struct.isSetTotalNetworkBytesOut()) {
        oprot.writeI64(struct.totalNetworkBytesOut);
      }
      if (struct.isSetFlag()) {
        oprot.writeString(struct.flag);
      }
      if (struct.isSetHost()) {
        oprot.writeString(struct.host);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RedisClusterEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.clusterName = iprot.readString();
        struct.setClusterNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.interval = iprot.readI32();
        struct.setIntervalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.connections = iprot.readI32();
        struct.setConnectionsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.slaveConnections = iprot.readI32();
        struct.setSlaveConnectionsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.blockConnections = iprot.readI32();
        struct.setBlockConnectionsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pubSub = iprot.readI32();
        struct.setPubSubIsSet(true);
      }
      if (incoming.get(7)) {
        struct.pubSubMode = iprot.readI32();
        struct.setPubSubModeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.hits = iprot.readI64();
        struct.setHitsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.misses = iprot.readI64();
        struct.setMissesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.mem = iprot.readI64();
        struct.setMemIsSet(true);
      }
      if (incoming.get(11)) {
        struct.totalCommands = iprot.readI64();
        struct.setTotalCommandsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.totalNetworkBytesIn = iprot.readI64();
        struct.setTotalNetworkBytesInIsSet(true);
      }
      if (incoming.get(13)) {
        struct.totalNetworkBytesOut = iprot.readI64();
        struct.setTotalNetworkBytesOutIsSet(true);
      }
      if (incoming.get(14)) {
        struct.flag = iprot.readString();
        struct.setFlagIsSet(true);
      }
      if (incoming.get(15)) {
        struct.host = iprot.readString();
        struct.setHostIsSet(true);
      }
      if (incoming.get(16)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

