/**
 * Autogenerated by Thrift Compiler (0.11.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class KMetricsEntity implements org.apache.thrift.TBase<KMetricsEntity, KMetricsEntity._Fields>, java.io.Serializable, Cloneable, Comparable<KMetricsEntity> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KMetricsEntity");

    private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short) 4);
    private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short) 5);
    private static final org.apache.thrift.protocol.TField COUNTER_ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("counterEntities", org.apache.thrift.protocol.TType.LIST, (short) 6);
    private static final org.apache.thrift.protocol.TField TIMER_ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("timerEntities", org.apache.thrift.protocol.TType.LIST, (short) 7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KMetricsEntityStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KMetricsEntityTupleSchemeFactory();

    public String appName; // required
    public String hostName; // required
    public int port; // required
    public long timestamp; // required
    public int interval; // required
    public java.util.List<KMetricsCounterEntity> counterEntities; // required
    public java.util.List<KMetricsTimerEntity> timerEntities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        APP_NAME((short) 1, "appName"),
        HOST_NAME((short) 2, "hostName"),
        PORT((short) 3, "port"),
        TIMESTAMP((short) 4, "timestamp"),
        INTERVAL((short) 5, "interval"),
        COUNTER_ENTITIES((short) 6, "counterEntities"),
        TIMER_ENTITIES((short) 7, "timerEntities");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // APP_NAME
                    return APP_NAME;
                case 2: // HOST_NAME
                    return HOST_NAME;
                case 3: // PORT
                    return PORT;
                case 4: // TIMESTAMP
                    return TIMESTAMP;
                case 5: // INTERVAL
                    return INTERVAL;
                case 6: // COUNTER_ENTITIES
                    return COUNTER_ENTITIES;
                case 7: // TIMER_ENTITIES
                    return TIMER_ENTITIES;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __TIMESTAMP_ISSET_ID = 1;
    private static final int __INTERVAL_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                               new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.COUNTER_ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("counterEntities", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                           new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                                                                                                                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KMetricsCounterEntity.class))));
        tmpMap.put(_Fields.TIMER_ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("timerEntities", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                                                                                                                      new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KMetricsTimerEntity.class))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KMetricsEntity.class, metaDataMap);
    }

    public KMetricsEntity() {
    }

    public KMetricsEntity(
        String appName,
        String hostName,
        int port,
        long timestamp,
        int interval,
        java.util.List<KMetricsCounterEntity> counterEntities,
        java.util.List<KMetricsTimerEntity> timerEntities) {
        this();
        this.appName = appName;
        this.hostName = hostName;
        this.port = port;
        setPortIsSet(true);
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        this.interval = interval;
        setIntervalIsSet(true);
        this.counterEntities = counterEntities;
        this.timerEntities = timerEntities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public KMetricsEntity(KMetricsEntity other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetAppName()) {
            this.appName = other.appName;
        }
        if (other.isSetHostName()) {
            this.hostName = other.hostName;
        }
        this.port = other.port;
        this.timestamp = other.timestamp;
        this.interval = other.interval;
        if (other.isSetCounterEntities()) {
            java.util.List<KMetricsCounterEntity> __this__counterEntities = new java.util.ArrayList<KMetricsCounterEntity>(other.counterEntities.size());
            for (KMetricsCounterEntity other_element : other.counterEntities) {
                __this__counterEntities.add(new KMetricsCounterEntity(other_element));
            }
            this.counterEntities = __this__counterEntities;
        }
        if (other.isSetTimerEntities()) {
            java.util.List<KMetricsTimerEntity> __this__timerEntities = new java.util.ArrayList<KMetricsTimerEntity>(other.timerEntities.size());
            for (KMetricsTimerEntity other_element : other.timerEntities) {
                __this__timerEntities.add(new KMetricsTimerEntity(other_element));
            }
            this.timerEntities = __this__timerEntities;
        }
    }

    public KMetricsEntity deepCopy() {
        return new KMetricsEntity(this);
    }

    @Override
    public void clear() {
        this.appName = null;
        this.hostName = null;
        setPortIsSet(false);
        this.port = 0;
        setTimestampIsSet(false);
        this.timestamp = 0;
        setIntervalIsSet(false);
        this.interval = 0;
        this.counterEntities = null;
        this.timerEntities = null;
    }

    public String getAppName() {
        return this.appName;
    }

    public KMetricsEntity setAppName(String appName) {
        this.appName = appName;
        return this;
    }

    public void unsetAppName() {
        this.appName = null;
    }

    /** Returns true if field appName is set (has been assigned a value) and false otherwise */
    public boolean isSetAppName() {
        return this.appName != null;
    }

    public void setAppNameIsSet(boolean value) {
        if (!value) {
            this.appName = null;
        }
    }

    public String getHostName() {
        return this.hostName;
    }

    public KMetricsEntity setHostName(String hostName) {
        this.hostName = hostName;
        return this;
    }

    public void unsetHostName() {
        this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
        return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
        if (!value) {
            this.hostName = null;
        }
    }

    public int getPort() {
        return this.port;
    }

    public KMetricsEntity setPort(int port) {
        this.port = port;
        setPortIsSet(true);
        return this;
    }

    public void unsetPort() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public long getTimestamp() {
        return this.timestamp;
    }

    public KMetricsEntity setTimestamp(long timestamp) {
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        return this;
    }

    public void unsetTimestamp() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public int getInterval() {
        return this.interval;
    }

    public KMetricsEntity setInterval(int interval) {
        this.interval = interval;
        setIntervalIsSet(true);
        return this;
    }

    public void unsetInterval() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
    }

    /** Returns true if field interval is set (has been assigned a value) and false otherwise */
    public boolean isSetInterval() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
    }

    public void setIntervalIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
    }

    public int getCounterEntitiesSize() {
        return (this.counterEntities == null) ? 0 : this.counterEntities.size();
    }

    public java.util.Iterator<KMetricsCounterEntity> getCounterEntitiesIterator() {
        return (this.counterEntities == null) ? null : this.counterEntities.iterator();
    }

    public void addToCounterEntities(KMetricsCounterEntity elem) {
        if (this.counterEntities == null) {
            this.counterEntities = new java.util.ArrayList<KMetricsCounterEntity>();
        }
        this.counterEntities.add(elem);
    }

    public java.util.List<KMetricsCounterEntity> getCounterEntities() {
        return this.counterEntities;
    }

    public KMetricsEntity setCounterEntities(java.util.List<KMetricsCounterEntity> counterEntities) {
        this.counterEntities = counterEntities;
        return this;
    }

    public void unsetCounterEntities() {
        this.counterEntities = null;
    }

    /** Returns true if field counterEntities is set (has been assigned a value) and false otherwise */
    public boolean isSetCounterEntities() {
        return this.counterEntities != null;
    }

    public void setCounterEntitiesIsSet(boolean value) {
        if (!value) {
            this.counterEntities = null;
        }
    }

    public int getTimerEntitiesSize() {
        return (this.timerEntities == null) ? 0 : this.timerEntities.size();
    }

    public java.util.Iterator<KMetricsTimerEntity> getTimerEntitiesIterator() {
        return (this.timerEntities == null) ? null : this.timerEntities.iterator();
    }

    public void addToTimerEntities(KMetricsTimerEntity elem) {
        if (this.timerEntities == null) {
            this.timerEntities = new java.util.ArrayList<KMetricsTimerEntity>();
        }
        this.timerEntities.add(elem);
    }

    public java.util.List<KMetricsTimerEntity> getTimerEntities() {
        return this.timerEntities;
    }

    public KMetricsEntity setTimerEntities(java.util.List<KMetricsTimerEntity> timerEntities) {
        this.timerEntities = timerEntities;
        return this;
    }

    public void unsetTimerEntities() {
        this.timerEntities = null;
    }

    /** Returns true if field timerEntities is set (has been assigned a value) and false otherwise */
    public boolean isSetTimerEntities() {
        return this.timerEntities != null;
    }

    public void setTimerEntitiesIsSet(boolean value) {
        if (!value) {
            this.timerEntities = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case APP_NAME:
                if (value == null) {
                    unsetAppName();
                } else {
                    setAppName((String) value);
                }
                break;

            case HOST_NAME:
                if (value == null) {
                    unsetHostName();
                } else {
                    setHostName((String) value);
                }
                break;

            case PORT:
                if (value == null) {
                    unsetPort();
                } else {
                    setPort((Integer) value);
                }
                break;

            case TIMESTAMP:
                if (value == null) {
                    unsetTimestamp();
                } else {
                    setTimestamp((Long) value);
                }
                break;

            case INTERVAL:
                if (value == null) {
                    unsetInterval();
                } else {
                    setInterval((Integer) value);
                }
                break;

            case COUNTER_ENTITIES:
                if (value == null) {
                    unsetCounterEntities();
                } else {
                    setCounterEntities((java.util.List<KMetricsCounterEntity>) value);
                }
                break;

            case TIMER_ENTITIES:
                if (value == null) {
                    unsetTimerEntities();
                } else {
                    setTimerEntities((java.util.List<KMetricsTimerEntity>) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case APP_NAME:
                return getAppName();

            case HOST_NAME:
                return getHostName();

            case PORT:
                return getPort();

            case TIMESTAMP:
                return getTimestamp();

            case INTERVAL:
                return getInterval();

            case COUNTER_ENTITIES:
                return getCounterEntities();

            case TIMER_ENTITIES:
                return getTimerEntities();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case APP_NAME:
                return isSetAppName();
            case HOST_NAME:
                return isSetHostName();
            case PORT:
                return isSetPort();
            case TIMESTAMP:
                return isSetTimestamp();
            case INTERVAL:
                return isSetInterval();
            case COUNTER_ENTITIES:
                return isSetCounterEntities();
            case TIMER_ENTITIES:
                return isSetTimerEntities();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof KMetricsEntity)
            return this.equals((KMetricsEntity) that);
        return false;
    }

    public boolean equals(KMetricsEntity that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_appName = true && this.isSetAppName();
        boolean that_present_appName = true && that.isSetAppName();
        if (this_present_appName || that_present_appName) {
            if (!(this_present_appName && that_present_appName))
                return false;
            if (!this.appName.equals(that.appName))
                return false;
        }

        boolean this_present_hostName = true && this.isSetHostName();
        boolean that_present_hostName = true && that.isSetHostName();
        if (this_present_hostName || that_present_hostName) {
            if (!(this_present_hostName && that_present_hostName))
                return false;
            if (!this.hostName.equals(that.hostName))
                return false;
        }

        boolean this_present_port = true;
        boolean that_present_port = true;
        if (this_present_port || that_present_port) {
            if (!(this_present_port && that_present_port))
                return false;
            if (this.port != that.port)
                return false;
        }

        boolean this_present_timestamp = true;
        boolean that_present_timestamp = true;
        if (this_present_timestamp || that_present_timestamp) {
            if (!(this_present_timestamp && that_present_timestamp))
                return false;
            if (this.timestamp != that.timestamp)
                return false;
        }

        boolean this_present_interval = true;
        boolean that_present_interval = true;
        if (this_present_interval || that_present_interval) {
            if (!(this_present_interval && that_present_interval))
                return false;
            if (this.interval != that.interval)
                return false;
        }

        boolean this_present_counterEntities = true && this.isSetCounterEntities();
        boolean that_present_counterEntities = true && that.isSetCounterEntities();
        if (this_present_counterEntities || that_present_counterEntities) {
            if (!(this_present_counterEntities && that_present_counterEntities))
                return false;
            if (!this.counterEntities.equals(that.counterEntities))
                return false;
        }

        boolean this_present_timerEntities = true && this.isSetTimerEntities();
        boolean that_present_timerEntities = true && that.isSetTimerEntities();
        if (this_present_timerEntities || that_present_timerEntities) {
            if (!(this_present_timerEntities && that_present_timerEntities))
                return false;
            if (!this.timerEntities.equals(that.timerEntities))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetAppName()) ? 131071 : 524287);
        if (isSetAppName())
            hashCode = hashCode * 8191 + appName.hashCode();

        hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
        if (isSetHostName())
            hashCode = hashCode * 8191 + hostName.hashCode();

        hashCode = hashCode * 8191 + port;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

        hashCode = hashCode * 8191 + interval;

        hashCode = hashCode * 8191 + ((isSetCounterEntities()) ? 131071 : 524287);
        if (isSetCounterEntities())
            hashCode = hashCode * 8191 + counterEntities.hashCode();

        hashCode = hashCode * 8191 + ((isSetTimerEntities()) ? 131071 : 524287);
        if (isSetTimerEntities())
            hashCode = hashCode * 8191 + timerEntities.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(KMetricsEntity other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAppName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHostName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPort()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTimestamp()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetInterval()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCounterEntities()).compareTo(other.isSetCounterEntities());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCounterEntities()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counterEntities, other.counterEntities);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTimerEntities()).compareTo(other.isSetTimerEntities());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTimerEntities()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timerEntities, other.timerEntities);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("KMetricsEntity(");
        boolean first = true;

        sb.append("appName:");
        if (this.appName == null) {
            sb.append("null");
        } else {
            sb.append(this.appName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("hostName:");
        if (this.hostName == null) {
            sb.append("null");
        } else {
            sb.append(this.hostName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("port:");
        sb.append(this.port);
        first = false;
        if (!first) sb.append(", ");
        sb.append("timestamp:");
        sb.append(this.timestamp);
        first = false;
        if (!first) sb.append(", ");
        sb.append("interval:");
        sb.append(this.interval);
        first = false;
        if (!first) sb.append(", ");
        sb.append("counterEntities:");
        if (this.counterEntities == null) {
            sb.append("null");
        } else {
            sb.append(this.counterEntities);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("timerEntities:");
        if (this.timerEntities == null) {
            sb.append("null");
        } else {
            sb.append(this.timerEntities);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class KMetricsEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public KMetricsEntityStandardScheme getScheme() {
            return new KMetricsEntityStandardScheme();
        }
    }

    private static class KMetricsEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<KMetricsEntity> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, KMetricsEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // APP_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.appName = iprot.readString();
                            struct.setAppNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // HOST_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.hostName = iprot.readString();
                            struct.setHostNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // PORT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.port = iprot.readI32();
                            struct.setPortIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // TIMESTAMP
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.timestamp = iprot.readI64();
                            struct.setTimestampIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // INTERVAL
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.interval = iprot.readI32();
                            struct.setIntervalIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // COUNTER_ENTITIES
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
                                struct.counterEntities = new java.util.ArrayList<KMetricsCounterEntity>(_list172.size);
                                KMetricsCounterEntity _elem173;
                                for (int _i174 = 0; _i174 < _list172.size; ++_i174) {
                                    _elem173 = new KMetricsCounterEntity();
                                    _elem173.read(iprot);
                                    struct.counterEntities.add(_elem173);
                                }
                                iprot.readListEnd();
                            }
                            struct.setCounterEntitiesIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // TIMER_ENTITIES
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list175 = iprot.readListBegin();
                                struct.timerEntities = new java.util.ArrayList<KMetricsTimerEntity>(_list175.size);
                                KMetricsTimerEntity _elem176;
                                for (int _i177 = 0; _i177 < _list175.size; ++_i177) {
                                    _elem176 = new KMetricsTimerEntity();
                                    _elem176.read(iprot);
                                    struct.timerEntities.add(_elem176);
                                }
                                iprot.readListEnd();
                            }
                            struct.setTimerEntitiesIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, KMetricsEntity struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.appName != null) {
                oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
                oprot.writeString(struct.appName);
                oprot.writeFieldEnd();
            }
            if (struct.hostName != null) {
                oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
                oprot.writeString(struct.hostName);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(PORT_FIELD_DESC);
            oprot.writeI32(struct.port);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
            oprot.writeI64(struct.timestamp);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
            oprot.writeI32(struct.interval);
            oprot.writeFieldEnd();
            if (struct.counterEntities != null) {
                oprot.writeFieldBegin(COUNTER_ENTITIES_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.counterEntities.size()));
                    for (KMetricsCounterEntity _iter178 : struct.counterEntities) {
                        _iter178.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.timerEntities != null) {
                oprot.writeFieldBegin(TIMER_ENTITIES_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.timerEntities.size()));
                    for (KMetricsTimerEntity _iter179 : struct.timerEntities) {
                        _iter179.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class KMetricsEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public KMetricsEntityTupleScheme getScheme() {
            return new KMetricsEntityTupleScheme();
        }
    }

    private static class KMetricsEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<KMetricsEntity> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, KMetricsEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetAppName()) {
                optionals.set(0);
            }
            if (struct.isSetHostName()) {
                optionals.set(1);
            }
            if (struct.isSetPort()) {
                optionals.set(2);
            }
            if (struct.isSetTimestamp()) {
                optionals.set(3);
            }
            if (struct.isSetInterval()) {
                optionals.set(4);
            }
            if (struct.isSetCounterEntities()) {
                optionals.set(5);
            }
            if (struct.isSetTimerEntities()) {
                optionals.set(6);
            }
            oprot.writeBitSet(optionals, 7);
            if (struct.isSetAppName()) {
                oprot.writeString(struct.appName);
            }
            if (struct.isSetHostName()) {
                oprot.writeString(struct.hostName);
            }
            if (struct.isSetPort()) {
                oprot.writeI32(struct.port);
            }
            if (struct.isSetTimestamp()) {
                oprot.writeI64(struct.timestamp);
            }
            if (struct.isSetInterval()) {
                oprot.writeI32(struct.interval);
            }
            if (struct.isSetCounterEntities()) {
                {
                    oprot.writeI32(struct.counterEntities.size());
                    for (KMetricsCounterEntity _iter180 : struct.counterEntities) {
                        _iter180.write(oprot);
                    }
                }
            }
            if (struct.isSetTimerEntities()) {
                {
                    oprot.writeI32(struct.timerEntities.size());
                    for (KMetricsTimerEntity _iter181 : struct.timerEntities) {
                        _iter181.write(oprot);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, KMetricsEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(7);
            if (incoming.get(0)) {
                struct.appName = iprot.readString();
                struct.setAppNameIsSet(true);
            }
            if (incoming.get(1)) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
            }
            if (incoming.get(2)) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
            }
            if (incoming.get(3)) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
            }
            if (incoming.get(4)) {
                struct.interval = iprot.readI32();
                struct.setIntervalIsSet(true);
            }
            if (incoming.get(5)) {
                {
                    org.apache.thrift.protocol.TList _list182 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.counterEntities = new java.util.ArrayList<KMetricsCounterEntity>(_list182.size);
                    KMetricsCounterEntity _elem183;
                    for (int _i184 = 0; _i184 < _list182.size; ++_i184) {
                        _elem183 = new KMetricsCounterEntity();
                        _elem183.read(iprot);
                        struct.counterEntities.add(_elem183);
                    }
                }
                struct.setCounterEntitiesIsSet(true);
            }
            if (incoming.get(6)) {
                {
                    org.apache.thrift.protocol.TList _list185 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.timerEntities = new java.util.ArrayList<KMetricsTimerEntity>(_list185.size);
                    KMetricsTimerEntity _elem186;
                    for (int _i187 = 0; _i187 < _list185.size; ++_i187) {
                        _elem186 = new KMetricsTimerEntity();
                        _elem186.read(iprot);
                        struct.timerEntities.add(_elem186);
                    }
                }
                struct.setTimerEntitiesIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

