/**
 * Autogenerated by Thrift Compiler (0.11.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * *************************  JVM明细和系统明细  ***************************
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class DetailEntity implements org.apache.thrift.TBase<DetailEntity, DetailEntity._Fields>, java.io.Serializable, Cloneable, Comparable<DetailEntity> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DetailEntity");

    private static final org.apache.thrift.protocol.TField JVM_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmDetail", org.apache.thrift.protocol.TType.MAP, (short) 1);
    private static final org.apache.thrift.protocol.TField SYSTEM_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("systemDetail", org.apache.thrift.protocol.TType.MAP, (short) 2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DetailEntityStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DetailEntityTupleSchemeFactory();

    public java.util.Map<String, String> jvmDetail; // required
    public java.util.Map<String, String> systemDetail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        JVM_DETAIL((short) 1, "jvmDetail"),
        SYSTEM_DETAIL((short) 2, "systemDetail");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // JVM_DETAIL
                    return JVM_DETAIL;
                case 2: // SYSTEM_DETAIL
                    return SYSTEM_DETAIL;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.JVM_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("jvmDetail", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                     new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                                                                                                                                 new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                                                                                                                                 new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.SYSTEM_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("systemDetail", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                                                                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                                                                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DetailEntity.class, metaDataMap);
    }

    public DetailEntity() {
    }

    public DetailEntity(
        java.util.Map<String, String> jvmDetail,
        java.util.Map<String, String> systemDetail) {
        this();
        this.jvmDetail = jvmDetail;
        this.systemDetail = systemDetail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DetailEntity(DetailEntity other) {
        if (other.isSetJvmDetail()) {
            java.util.Map<String, String> __this__jvmDetail = new java.util.HashMap<String, String>(other.jvmDetail);
            this.jvmDetail = __this__jvmDetail;
        }
        if (other.isSetSystemDetail()) {
            java.util.Map<String, String> __this__systemDetail = new java.util.HashMap<String, String>(other.systemDetail);
            this.systemDetail = __this__systemDetail;
        }
    }

    public DetailEntity deepCopy() {
        return new DetailEntity(this);
    }

    @Override
    public void clear() {
        this.jvmDetail = null;
        this.systemDetail = null;
    }

    public int getJvmDetailSize() {
        return (this.jvmDetail == null) ? 0 : this.jvmDetail.size();
    }

    public void putToJvmDetail(String key, String val) {
        if (this.jvmDetail == null) {
            this.jvmDetail = new java.util.HashMap<String, String>();
        }
        this.jvmDetail.put(key, val);
    }

    public java.util.Map<String, String> getJvmDetail() {
        return this.jvmDetail;
    }

    public DetailEntity setJvmDetail(java.util.Map<String, String> jvmDetail) {
        this.jvmDetail = jvmDetail;
        return this;
    }

    public void unsetJvmDetail() {
        this.jvmDetail = null;
    }

    /** Returns true if field jvmDetail is set (has been assigned a value) and false otherwise */
    public boolean isSetJvmDetail() {
        return this.jvmDetail != null;
    }

    public void setJvmDetailIsSet(boolean value) {
        if (!value) {
            this.jvmDetail = null;
        }
    }

    public int getSystemDetailSize() {
        return (this.systemDetail == null) ? 0 : this.systemDetail.size();
    }

    public void putToSystemDetail(String key, String val) {
        if (this.systemDetail == null) {
            this.systemDetail = new java.util.HashMap<String, String>();
        }
        this.systemDetail.put(key, val);
    }

    public java.util.Map<String, String> getSystemDetail() {
        return this.systemDetail;
    }

    public DetailEntity setSystemDetail(java.util.Map<String, String> systemDetail) {
        this.systemDetail = systemDetail;
        return this;
    }

    public void unsetSystemDetail() {
        this.systemDetail = null;
    }

    /** Returns true if field systemDetail is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemDetail() {
        return this.systemDetail != null;
    }

    public void setSystemDetailIsSet(boolean value) {
        if (!value) {
            this.systemDetail = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case JVM_DETAIL:
                if (value == null) {
                    unsetJvmDetail();
                } else {
                    setJvmDetail((java.util.Map<String, String>) value);
                }
                break;

            case SYSTEM_DETAIL:
                if (value == null) {
                    unsetSystemDetail();
                } else {
                    setSystemDetail((java.util.Map<String, String>) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case JVM_DETAIL:
                return getJvmDetail();

            case SYSTEM_DETAIL:
                return getSystemDetail();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case JVM_DETAIL:
                return isSetJvmDetail();
            case SYSTEM_DETAIL:
                return isSetSystemDetail();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof DetailEntity)
            return this.equals((DetailEntity) that);
        return false;
    }

    public boolean equals(DetailEntity that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_jvmDetail = true && this.isSetJvmDetail();
        boolean that_present_jvmDetail = true && that.isSetJvmDetail();
        if (this_present_jvmDetail || that_present_jvmDetail) {
            if (!(this_present_jvmDetail && that_present_jvmDetail))
                return false;
            if (!this.jvmDetail.equals(that.jvmDetail))
                return false;
        }

        boolean this_present_systemDetail = true && this.isSetSystemDetail();
        boolean that_present_systemDetail = true && that.isSetSystemDetail();
        if (this_present_systemDetail || that_present_systemDetail) {
            if (!(this_present_systemDetail && that_present_systemDetail))
                return false;
            if (!this.systemDetail.equals(that.systemDetail))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetJvmDetail()) ? 131071 : 524287);
        if (isSetJvmDetail())
            hashCode = hashCode * 8191 + jvmDetail.hashCode();

        hashCode = hashCode * 8191 + ((isSetSystemDetail()) ? 131071 : 524287);
        if (isSetSystemDetail())
            hashCode = hashCode * 8191 + systemDetail.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(DetailEntity other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetJvmDetail()).compareTo(other.isSetJvmDetail());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetJvmDetail()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmDetail, other.jvmDetail);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSystemDetail()).compareTo(other.isSetSystemDetail());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSystemDetail()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemDetail, other.systemDetail);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("DetailEntity(");
        boolean first = true;

        sb.append("jvmDetail:");
        if (this.jvmDetail == null) {
            sb.append("null");
        } else {
            sb.append(this.jvmDetail);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("systemDetail:");
        if (this.systemDetail == null) {
            sb.append("null");
        } else {
            sb.append(this.systemDetail);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class DetailEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public DetailEntityStandardScheme getScheme() {
            return new DetailEntityStandardScheme();
        }
    }

    private static class DetailEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<DetailEntity> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, DetailEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // JVM_DETAIL
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map110 = iprot.readMapBegin();
                                struct.jvmDetail = new java.util.HashMap<String, String>(2 * _map110.size);
                                String _key111;
                                String _val112;
                                for (int _i113 = 0; _i113 < _map110.size; ++_i113) {
                                    _key111 = iprot.readString();
                                    _val112 = iprot.readString();
                                    struct.jvmDetail.put(_key111, _val112);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setJvmDetailIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // SYSTEM_DETAIL
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map114 = iprot.readMapBegin();
                                struct.systemDetail = new java.util.HashMap<String, String>(2 * _map114.size);
                                String _key115;
                                String _val116;
                                for (int _i117 = 0; _i117 < _map114.size; ++_i117) {
                                    _key115 = iprot.readString();
                                    _val116 = iprot.readString();
                                    struct.systemDetail.put(_key115, _val116);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setSystemDetailIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, DetailEntity struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.jvmDetail != null) {
                oprot.writeFieldBegin(JVM_DETAIL_FIELD_DESC);
                {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.jvmDetail.size()));
                    for (java.util.Map.Entry<String, String> _iter118 : struct.jvmDetail.entrySet()) {
                        oprot.writeString(_iter118.getKey());
                        oprot.writeString(_iter118.getValue());
                    }
                    oprot.writeMapEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.systemDetail != null) {
                oprot.writeFieldBegin(SYSTEM_DETAIL_FIELD_DESC);
                {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.systemDetail.size()));
                    for (java.util.Map.Entry<String, String> _iter119 : struct.systemDetail.entrySet()) {
                        oprot.writeString(_iter119.getKey());
                        oprot.writeString(_iter119.getValue());
                    }
                    oprot.writeMapEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class DetailEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public DetailEntityTupleScheme getScheme() {
            return new DetailEntityTupleScheme();
        }
    }

    private static class DetailEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<DetailEntity> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, DetailEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetJvmDetail()) {
                optionals.set(0);
            }
            if (struct.isSetSystemDetail()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetJvmDetail()) {
                {
                    oprot.writeI32(struct.jvmDetail.size());
                    for (java.util.Map.Entry<String, String> _iter120 : struct.jvmDetail.entrySet()) {
                        oprot.writeString(_iter120.getKey());
                        oprot.writeString(_iter120.getValue());
                    }
                }
            }
            if (struct.isSetSystemDetail()) {
                {
                    oprot.writeI32(struct.systemDetail.size());
                    for (java.util.Map.Entry<String, String> _iter121 : struct.systemDetail.entrySet()) {
                        oprot.writeString(_iter121.getKey());
                        oprot.writeString(_iter121.getValue());
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, DetailEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                {
                    org.apache.thrift.protocol.TMap _map122 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.jvmDetail = new java.util.HashMap<String, String>(2 * _map122.size);
                    String _key123;
                    String _val124;
                    for (int _i125 = 0; _i125 < _map122.size; ++_i125) {
                        _key123 = iprot.readString();
                        _val124 = iprot.readString();
                        struct.jvmDetail.put(_key123, _val124);
                    }
                }
                struct.setJvmDetailIsSet(true);
            }
            if (incoming.get(1)) {
                {
                    org.apache.thrift.protocol.TMap _map126 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.systemDetail = new java.util.HashMap<String, String>(2 * _map126.size);
                    String _key127;
                    String _val128;
                    for (int _i129 = 0; _i129 < _map126.size; ++_i129) {
                        _key127 = iprot.readString();
                        _val128 = iprot.readString();
                        struct.systemDetail.put(_key127, _val128);
                    }
                }
                struct.setSystemDetailIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

