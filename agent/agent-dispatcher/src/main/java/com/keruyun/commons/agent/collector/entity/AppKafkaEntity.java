/**
 * Autogenerated by Thrift Compiler (0.11.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * ************************ 应用调用Kafka *********************************
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class AppKafkaEntity implements org.apache.thrift.TBase<AppKafkaEntity, AppKafkaEntity._Fields>, java.io.Serializable, Cloneable, Comparable<AppKafkaEntity> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppKafkaEntity");

    private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short) 4);
    private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short) 5);
    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short) 6);
    private static final org.apache.thrift.protocol.TField KAFKA_CONSUMER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("kafkaConsumerList", org.apache.thrift.protocol.TType.LIST, (short) 7);
    private static final org.apache.thrift.protocol.TField KAFKA_PRODUCER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("kafkaProducerList", org.apache.thrift.protocol.TType.LIST, (short) 8);
    private static final org.apache.thrift.protocol.TField KAFKA_NETWORK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("kafkaNetworkList", org.apache.thrift.protocol.TType.LIST, (short) 9);
    private static final org.apache.thrift.protocol.TField GRANULARITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("GranularityType", org.apache.thrift.protocol.TType.I32, (short) 10);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AppKafkaEntityStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AppKafkaEntityTupleSchemeFactory();

    public String appName; // required
    public String hostName; // required
    public int port; // required
    public long timestamp; // required
    public int interval; // required
    public String category; // required
    public java.util.List<KafkaConsumerEntity> kafkaConsumerList; // required
    public java.util.List<KafkaProducerEntity> kafkaProducerList; // required
    public java.util.List<KafkaNetworkEntity> kafkaNetworkList; // required
    public int GranularityType; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        APP_NAME((short) 1, "appName"),
        HOST_NAME((short) 2, "hostName"),
        PORT((short) 3, "port"),
        TIMESTAMP((short) 4, "timestamp"),
        INTERVAL((short) 5, "interval"),
        CATEGORY((short) 6, "category"),
        KAFKA_CONSUMER_LIST((short) 7, "kafkaConsumerList"),
        KAFKA_PRODUCER_LIST((short) 8, "kafkaProducerList"),
        KAFKA_NETWORK_LIST((short) 9, "kafkaNetworkList"),
        GRANULARITY_TYPE((short) 10, "GranularityType");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // APP_NAME
                    return APP_NAME;
                case 2: // HOST_NAME
                    return HOST_NAME;
                case 3: // PORT
                    return PORT;
                case 4: // TIMESTAMP
                    return TIMESTAMP;
                case 5: // INTERVAL
                    return INTERVAL;
                case 6: // CATEGORY
                    return CATEGORY;
                case 7: // KAFKA_CONSUMER_LIST
                    return KAFKA_CONSUMER_LIST;
                case 8: // KAFKA_PRODUCER_LIST
                    return KAFKA_PRODUCER_LIST;
                case 9: // KAFKA_NETWORK_LIST
                    return KAFKA_NETWORK_LIST;
                case 10: // GRANULARITY_TYPE
                    return GRANULARITY_TYPE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __TIMESTAMP_ISSET_ID = 1;
    private static final int __INTERVAL_ISSET_ID = 2;
    private static final int __GRANULARITYTYPE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.GRANULARITY_TYPE};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                               new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.KAFKA_CONSUMER_LIST, new org.apache.thrift.meta_data.FieldMetaData("kafkaConsumerList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                                                                                                                           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "KafkaConsumerEntity"))));
        tmpMap.put(_Fields.KAFKA_PRODUCER_LIST, new org.apache.thrift.meta_data.FieldMetaData("kafkaProducerList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                                                                                                                           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "KafkaProducerEntity"))));
        tmpMap.put(_Fields.KAFKA_NETWORK_LIST, new org.apache.thrift.meta_data.FieldMetaData("kafkaNetworkList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                             new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                                                                                                                          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "KafkaNetworkEntity"))));
        tmpMap.put(_Fields.GRANULARITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("GranularityType", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                                                                                           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppKafkaEntity.class, metaDataMap);
    }

    public AppKafkaEntity() {
    }

    public AppKafkaEntity(
        String appName,
        String hostName,
        int port,
        long timestamp,
        int interval,
        String category,
        java.util.List<KafkaConsumerEntity> kafkaConsumerList,
        java.util.List<KafkaProducerEntity> kafkaProducerList,
        java.util.List<KafkaNetworkEntity> kafkaNetworkList) {
        this();
        this.appName = appName;
        this.hostName = hostName;
        this.port = port;
        setPortIsSet(true);
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        this.interval = interval;
        setIntervalIsSet(true);
        this.category = category;
        this.kafkaConsumerList = kafkaConsumerList;
        this.kafkaProducerList = kafkaProducerList;
        this.kafkaNetworkList = kafkaNetworkList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AppKafkaEntity(AppKafkaEntity other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetAppName()) {
            this.appName = other.appName;
        }
        if (other.isSetHostName()) {
            this.hostName = other.hostName;
        }
        this.port = other.port;
        this.timestamp = other.timestamp;
        this.interval = other.interval;
        if (other.isSetCategory()) {
            this.category = other.category;
        }
        if (other.isSetKafkaConsumerList()) {
            java.util.List<KafkaConsumerEntity> __this__kafkaConsumerList = new java.util.ArrayList<KafkaConsumerEntity>(other.kafkaConsumerList.size());
            for (KafkaConsumerEntity other_element : other.kafkaConsumerList) {
                __this__kafkaConsumerList.add(new KafkaConsumerEntity(other_element));
            }
            this.kafkaConsumerList = __this__kafkaConsumerList;
        }
        if (other.isSetKafkaProducerList()) {
            java.util.List<KafkaProducerEntity> __this__kafkaProducerList = new java.util.ArrayList<KafkaProducerEntity>(other.kafkaProducerList.size());
            for (KafkaProducerEntity other_element : other.kafkaProducerList) {
                __this__kafkaProducerList.add(new KafkaProducerEntity(other_element));
            }
            this.kafkaProducerList = __this__kafkaProducerList;
        }
        if (other.isSetKafkaNetworkList()) {
            java.util.List<KafkaNetworkEntity> __this__kafkaNetworkList = new java.util.ArrayList<KafkaNetworkEntity>(other.kafkaNetworkList.size());
            for (KafkaNetworkEntity other_element : other.kafkaNetworkList) {
                __this__kafkaNetworkList.add(new KafkaNetworkEntity(other_element));
            }
            this.kafkaNetworkList = __this__kafkaNetworkList;
        }
        this.GranularityType = other.GranularityType;
    }

    public AppKafkaEntity deepCopy() {
        return new AppKafkaEntity(this);
    }

    @Override
    public void clear() {
        this.appName = null;
        this.hostName = null;
        setPortIsSet(false);
        this.port = 0;
        setTimestampIsSet(false);
        this.timestamp = 0;
        setIntervalIsSet(false);
        this.interval = 0;
        this.category = null;
        this.kafkaConsumerList = null;
        this.kafkaProducerList = null;
        this.kafkaNetworkList = null;
        setGranularityTypeIsSet(false);
        this.GranularityType = 0;
    }

    public String getAppName() {
        return this.appName;
    }

    public AppKafkaEntity setAppName(String appName) {
        this.appName = appName;
        return this;
    }

    public void unsetAppName() {
        this.appName = null;
    }

    /** Returns true if field appName is set (has been assigned a value) and false otherwise */
    public boolean isSetAppName() {
        return this.appName != null;
    }

    public void setAppNameIsSet(boolean value) {
        if (!value) {
            this.appName = null;
        }
    }

    public String getHostName() {
        return this.hostName;
    }

    public AppKafkaEntity setHostName(String hostName) {
        this.hostName = hostName;
        return this;
    }

    public void unsetHostName() {
        this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
        return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
        if (!value) {
            this.hostName = null;
        }
    }

    public int getPort() {
        return this.port;
    }

    public AppKafkaEntity setPort(int port) {
        this.port = port;
        setPortIsSet(true);
        return this;
    }

    public void unsetPort() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public long getTimestamp() {
        return this.timestamp;
    }

    public AppKafkaEntity setTimestamp(long timestamp) {
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        return this;
    }

    public void unsetTimestamp() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public int getInterval() {
        return this.interval;
    }

    public AppKafkaEntity setInterval(int interval) {
        this.interval = interval;
        setIntervalIsSet(true);
        return this;
    }

    public void unsetInterval() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
    }

    /** Returns true if field interval is set (has been assigned a value) and false otherwise */
    public boolean isSetInterval() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
    }

    public void setIntervalIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
    }

    public String getCategory() {
        return this.category;
    }

    public AppKafkaEntity setCategory(String category) {
        this.category = category;
        return this;
    }

    public void unsetCategory() {
        this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
        return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
        if (!value) {
            this.category = null;
        }
    }

    public int getKafkaConsumerListSize() {
        return (this.kafkaConsumerList == null) ? 0 : this.kafkaConsumerList.size();
    }

    public java.util.Iterator<KafkaConsumerEntity> getKafkaConsumerListIterator() {
        return (this.kafkaConsumerList == null) ? null : this.kafkaConsumerList.iterator();
    }

    public void addToKafkaConsumerList(KafkaConsumerEntity elem) {
        if (this.kafkaConsumerList == null) {
            this.kafkaConsumerList = new java.util.ArrayList<KafkaConsumerEntity>();
        }
        this.kafkaConsumerList.add(elem);
    }

    public java.util.List<KafkaConsumerEntity> getKafkaConsumerList() {
        return this.kafkaConsumerList;
    }

    public AppKafkaEntity setKafkaConsumerList(java.util.List<KafkaConsumerEntity> kafkaConsumerList) {
        this.kafkaConsumerList = kafkaConsumerList;
        return this;
    }

    public void unsetKafkaConsumerList() {
        this.kafkaConsumerList = null;
    }

    /** Returns true if field kafkaConsumerList is set (has been assigned a value) and false otherwise */
    public boolean isSetKafkaConsumerList() {
        return this.kafkaConsumerList != null;
    }

    public void setKafkaConsumerListIsSet(boolean value) {
        if (!value) {
            this.kafkaConsumerList = null;
        }
    }

    public int getKafkaProducerListSize() {
        return (this.kafkaProducerList == null) ? 0 : this.kafkaProducerList.size();
    }

    public java.util.Iterator<KafkaProducerEntity> getKafkaProducerListIterator() {
        return (this.kafkaProducerList == null) ? null : this.kafkaProducerList.iterator();
    }

    public void addToKafkaProducerList(KafkaProducerEntity elem) {
        if (this.kafkaProducerList == null) {
            this.kafkaProducerList = new java.util.ArrayList<KafkaProducerEntity>();
        }
        this.kafkaProducerList.add(elem);
    }

    public java.util.List<KafkaProducerEntity> getKafkaProducerList() {
        return this.kafkaProducerList;
    }

    public AppKafkaEntity setKafkaProducerList(java.util.List<KafkaProducerEntity> kafkaProducerList) {
        this.kafkaProducerList = kafkaProducerList;
        return this;
    }

    public void unsetKafkaProducerList() {
        this.kafkaProducerList = null;
    }

    /** Returns true if field kafkaProducerList is set (has been assigned a value) and false otherwise */
    public boolean isSetKafkaProducerList() {
        return this.kafkaProducerList != null;
    }

    public void setKafkaProducerListIsSet(boolean value) {
        if (!value) {
            this.kafkaProducerList = null;
        }
    }

    public int getKafkaNetworkListSize() {
        return (this.kafkaNetworkList == null) ? 0 : this.kafkaNetworkList.size();
    }

    public java.util.Iterator<KafkaNetworkEntity> getKafkaNetworkListIterator() {
        return (this.kafkaNetworkList == null) ? null : this.kafkaNetworkList.iterator();
    }

    public void addToKafkaNetworkList(KafkaNetworkEntity elem) {
        if (this.kafkaNetworkList == null) {
            this.kafkaNetworkList = new java.util.ArrayList<KafkaNetworkEntity>();
        }
        this.kafkaNetworkList.add(elem);
    }

    public java.util.List<KafkaNetworkEntity> getKafkaNetworkList() {
        return this.kafkaNetworkList;
    }

    public AppKafkaEntity setKafkaNetworkList(java.util.List<KafkaNetworkEntity> kafkaNetworkList) {
        this.kafkaNetworkList = kafkaNetworkList;
        return this;
    }

    public void unsetKafkaNetworkList() {
        this.kafkaNetworkList = null;
    }

    /** Returns true if field kafkaNetworkList is set (has been assigned a value) and false otherwise */
    public boolean isSetKafkaNetworkList() {
        return this.kafkaNetworkList != null;
    }

    public void setKafkaNetworkListIsSet(boolean value) {
        if (!value) {
            this.kafkaNetworkList = null;
        }
    }

    public int getGranularityType() {
        return this.GranularityType;
    }

    public AppKafkaEntity setGranularityType(int GranularityType) {
        this.GranularityType = GranularityType;
        setGranularityTypeIsSet(true);
        return this;
    }

    public void unsetGranularityType() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID);
    }

    /** Returns true if field GranularityType is set (has been assigned a value) and false otherwise */
    public boolean isSetGranularityType() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID);
    }

    public void setGranularityTypeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GRANULARITYTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case APP_NAME:
                if (value == null) {
                    unsetAppName();
                } else {
                    setAppName((String) value);
                }
                break;

            case HOST_NAME:
                if (value == null) {
                    unsetHostName();
                } else {
                    setHostName((String) value);
                }
                break;

            case PORT:
                if (value == null) {
                    unsetPort();
                } else {
                    setPort((Integer) value);
                }
                break;

            case TIMESTAMP:
                if (value == null) {
                    unsetTimestamp();
                } else {
                    setTimestamp((Long) value);
                }
                break;

            case INTERVAL:
                if (value == null) {
                    unsetInterval();
                } else {
                    setInterval((Integer) value);
                }
                break;

            case CATEGORY:
                if (value == null) {
                    unsetCategory();
                } else {
                    setCategory((String) value);
                }
                break;

            case KAFKA_CONSUMER_LIST:
                if (value == null) {
                    unsetKafkaConsumerList();
                } else {
                    setKafkaConsumerList((java.util.List<KafkaConsumerEntity>) value);
                }
                break;

            case KAFKA_PRODUCER_LIST:
                if (value == null) {
                    unsetKafkaProducerList();
                } else {
                    setKafkaProducerList((java.util.List<KafkaProducerEntity>) value);
                }
                break;

            case KAFKA_NETWORK_LIST:
                if (value == null) {
                    unsetKafkaNetworkList();
                } else {
                    setKafkaNetworkList((java.util.List<KafkaNetworkEntity>) value);
                }
                break;

            case GRANULARITY_TYPE:
                if (value == null) {
                    unsetGranularityType();
                } else {
                    setGranularityType((Integer) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case APP_NAME:
                return getAppName();

            case HOST_NAME:
                return getHostName();

            case PORT:
                return getPort();

            case TIMESTAMP:
                return getTimestamp();

            case INTERVAL:
                return getInterval();

            case CATEGORY:
                return getCategory();

            case KAFKA_CONSUMER_LIST:
                return getKafkaConsumerList();

            case KAFKA_PRODUCER_LIST:
                return getKafkaProducerList();

            case KAFKA_NETWORK_LIST:
                return getKafkaNetworkList();

            case GRANULARITY_TYPE:
                return getGranularityType();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case APP_NAME:
                return isSetAppName();
            case HOST_NAME:
                return isSetHostName();
            case PORT:
                return isSetPort();
            case TIMESTAMP:
                return isSetTimestamp();
            case INTERVAL:
                return isSetInterval();
            case CATEGORY:
                return isSetCategory();
            case KAFKA_CONSUMER_LIST:
                return isSetKafkaConsumerList();
            case KAFKA_PRODUCER_LIST:
                return isSetKafkaProducerList();
            case KAFKA_NETWORK_LIST:
                return isSetKafkaNetworkList();
            case GRANULARITY_TYPE:
                return isSetGranularityType();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof AppKafkaEntity)
            return this.equals((AppKafkaEntity) that);
        return false;
    }

    public boolean equals(AppKafkaEntity that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_appName = true && this.isSetAppName();
        boolean that_present_appName = true && that.isSetAppName();
        if (this_present_appName || that_present_appName) {
            if (!(this_present_appName && that_present_appName))
                return false;
            if (!this.appName.equals(that.appName))
                return false;
        }

        boolean this_present_hostName = true && this.isSetHostName();
        boolean that_present_hostName = true && that.isSetHostName();
        if (this_present_hostName || that_present_hostName) {
            if (!(this_present_hostName && that_present_hostName))
                return false;
            if (!this.hostName.equals(that.hostName))
                return false;
        }

        boolean this_present_port = true;
        boolean that_present_port = true;
        if (this_present_port || that_present_port) {
            if (!(this_present_port && that_present_port))
                return false;
            if (this.port != that.port)
                return false;
        }

        boolean this_present_timestamp = true;
        boolean that_present_timestamp = true;
        if (this_present_timestamp || that_present_timestamp) {
            if (!(this_present_timestamp && that_present_timestamp))
                return false;
            if (this.timestamp != that.timestamp)
                return false;
        }

        boolean this_present_interval = true;
        boolean that_present_interval = true;
        if (this_present_interval || that_present_interval) {
            if (!(this_present_interval && that_present_interval))
                return false;
            if (this.interval != that.interval)
                return false;
        }

        boolean this_present_category = true && this.isSetCategory();
        boolean that_present_category = true && that.isSetCategory();
        if (this_present_category || that_present_category) {
            if (!(this_present_category && that_present_category))
                return false;
            if (!this.category.equals(that.category))
                return false;
        }

        boolean this_present_kafkaConsumerList = true && this.isSetKafkaConsumerList();
        boolean that_present_kafkaConsumerList = true && that.isSetKafkaConsumerList();
        if (this_present_kafkaConsumerList || that_present_kafkaConsumerList) {
            if (!(this_present_kafkaConsumerList && that_present_kafkaConsumerList))
                return false;
            if (!this.kafkaConsumerList.equals(that.kafkaConsumerList))
                return false;
        }

        boolean this_present_kafkaProducerList = true && this.isSetKafkaProducerList();
        boolean that_present_kafkaProducerList = true && that.isSetKafkaProducerList();
        if (this_present_kafkaProducerList || that_present_kafkaProducerList) {
            if (!(this_present_kafkaProducerList && that_present_kafkaProducerList))
                return false;
            if (!this.kafkaProducerList.equals(that.kafkaProducerList))
                return false;
        }

        boolean this_present_kafkaNetworkList = true && this.isSetKafkaNetworkList();
        boolean that_present_kafkaNetworkList = true && that.isSetKafkaNetworkList();
        if (this_present_kafkaNetworkList || that_present_kafkaNetworkList) {
            if (!(this_present_kafkaNetworkList && that_present_kafkaNetworkList))
                return false;
            if (!this.kafkaNetworkList.equals(that.kafkaNetworkList))
                return false;
        }

        boolean this_present_GranularityType = true && this.isSetGranularityType();
        boolean that_present_GranularityType = true && that.isSetGranularityType();
        if (this_present_GranularityType || that_present_GranularityType) {
            if (!(this_present_GranularityType && that_present_GranularityType))
                return false;
            if (this.GranularityType != that.GranularityType)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetAppName()) ? 131071 : 524287);
        if (isSetAppName())
            hashCode = hashCode * 8191 + appName.hashCode();

        hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
        if (isSetHostName())
            hashCode = hashCode * 8191 + hostName.hashCode();

        hashCode = hashCode * 8191 + port;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

        hashCode = hashCode * 8191 + interval;

        hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
        if (isSetCategory())
            hashCode = hashCode * 8191 + category.hashCode();

        hashCode = hashCode * 8191 + ((isSetKafkaConsumerList()) ? 131071 : 524287);
        if (isSetKafkaConsumerList())
            hashCode = hashCode * 8191 + kafkaConsumerList.hashCode();

        hashCode = hashCode * 8191 + ((isSetKafkaProducerList()) ? 131071 : 524287);
        if (isSetKafkaProducerList())
            hashCode = hashCode * 8191 + kafkaProducerList.hashCode();

        hashCode = hashCode * 8191 + ((isSetKafkaNetworkList()) ? 131071 : 524287);
        if (isSetKafkaNetworkList())
            hashCode = hashCode * 8191 + kafkaNetworkList.hashCode();

        hashCode = hashCode * 8191 + ((isSetGranularityType()) ? 131071 : 524287);
        if (isSetGranularityType())
            hashCode = hashCode * 8191 + GranularityType;

        return hashCode;
    }

    @Override
    public int compareTo(AppKafkaEntity other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAppName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHostName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPort()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTimestamp()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetInterval()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCategory()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetKafkaConsumerList()).compareTo(other.isSetKafkaConsumerList());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetKafkaConsumerList()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kafkaConsumerList, other.kafkaConsumerList);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetKafkaProducerList()).compareTo(other.isSetKafkaProducerList());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetKafkaProducerList()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kafkaProducerList, other.kafkaProducerList);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetKafkaNetworkList()).compareTo(other.isSetKafkaNetworkList());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetKafkaNetworkList()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kafkaNetworkList, other.kafkaNetworkList);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetGranularityType()).compareTo(other.isSetGranularityType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGranularityType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GranularityType, other.GranularityType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("AppKafkaEntity(");
        boolean first = true;

        sb.append("appName:");
        if (this.appName == null) {
            sb.append("null");
        } else {
            sb.append(this.appName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("hostName:");
        if (this.hostName == null) {
            sb.append("null");
        } else {
            sb.append(this.hostName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("port:");
        sb.append(this.port);
        first = false;
        if (!first) sb.append(", ");
        sb.append("timestamp:");
        sb.append(this.timestamp);
        first = false;
        if (!first) sb.append(", ");
        sb.append("interval:");
        sb.append(this.interval);
        first = false;
        if (!first) sb.append(", ");
        sb.append("category:");
        if (this.category == null) {
            sb.append("null");
        } else {
            sb.append(this.category);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("kafkaConsumerList:");
        if (this.kafkaConsumerList == null) {
            sb.append("null");
        } else {
            sb.append(this.kafkaConsumerList);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("kafkaProducerList:");
        if (this.kafkaProducerList == null) {
            sb.append("null");
        } else {
            sb.append(this.kafkaProducerList);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("kafkaNetworkList:");
        if (this.kafkaNetworkList == null) {
            sb.append("null");
        } else {
            sb.append(this.kafkaNetworkList);
        }
        first = false;
        if (isSetGranularityType()) {
            if (!first) sb.append(", ");
            sb.append("GranularityType:");
            sb.append(this.GranularityType);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class AppKafkaEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public AppKafkaEntityStandardScheme getScheme() {
            return new AppKafkaEntityStandardScheme();
        }
    }

    private static class AppKafkaEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<AppKafkaEntity> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, AppKafkaEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // APP_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.appName = iprot.readString();
                            struct.setAppNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // HOST_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.hostName = iprot.readString();
                            struct.setHostNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // PORT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.port = iprot.readI32();
                            struct.setPortIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // TIMESTAMP
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.timestamp = iprot.readI64();
                            struct.setTimestampIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // INTERVAL
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.interval = iprot.readI32();
                            struct.setIntervalIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // CATEGORY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.category = iprot.readString();
                            struct.setCategoryIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // KAFKA_CONSUMER_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                                struct.kafkaConsumerList = new java.util.ArrayList<KafkaConsumerEntity>(_list24.size);
                                KafkaConsumerEntity _elem25;
                                for (int _i26 = 0; _i26 < _list24.size; ++_i26) {
                                    _elem25 = new KafkaConsumerEntity();
                                    _elem25.read(iprot);
                                    struct.kafkaConsumerList.add(_elem25);
                                }
                                iprot.readListEnd();
                            }
                            struct.setKafkaConsumerListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // KAFKA_PRODUCER_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                                struct.kafkaProducerList = new java.util.ArrayList<KafkaProducerEntity>(_list27.size);
                                KafkaProducerEntity _elem28;
                                for (int _i29 = 0; _i29 < _list27.size; ++_i29) {
                                    _elem28 = new KafkaProducerEntity();
                                    _elem28.read(iprot);
                                    struct.kafkaProducerList.add(_elem28);
                                }
                                iprot.readListEnd();
                            }
                            struct.setKafkaProducerListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // KAFKA_NETWORK_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                                struct.kafkaNetworkList = new java.util.ArrayList<KafkaNetworkEntity>(_list30.size);
                                KafkaNetworkEntity _elem31;
                                for (int _i32 = 0; _i32 < _list30.size; ++_i32) {
                                    _elem31 = new KafkaNetworkEntity();
                                    _elem31.read(iprot);
                                    struct.kafkaNetworkList.add(_elem31);
                                }
                                iprot.readListEnd();
                            }
                            struct.setKafkaNetworkListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // GRANULARITY_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.GranularityType = iprot.readI32();
                            struct.setGranularityTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, AppKafkaEntity struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.appName != null) {
                oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
                oprot.writeString(struct.appName);
                oprot.writeFieldEnd();
            }
            if (struct.hostName != null) {
                oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
                oprot.writeString(struct.hostName);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(PORT_FIELD_DESC);
            oprot.writeI32(struct.port);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
            oprot.writeI64(struct.timestamp);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
            oprot.writeI32(struct.interval);
            oprot.writeFieldEnd();
            if (struct.category != null) {
                oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
                oprot.writeString(struct.category);
                oprot.writeFieldEnd();
            }
            if (struct.kafkaConsumerList != null) {
                oprot.writeFieldBegin(KAFKA_CONSUMER_LIST_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.kafkaConsumerList.size()));
                    for (KafkaConsumerEntity _iter33 : struct.kafkaConsumerList) {
                        _iter33.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.kafkaProducerList != null) {
                oprot.writeFieldBegin(KAFKA_PRODUCER_LIST_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.kafkaProducerList.size()));
                    for (KafkaProducerEntity _iter34 : struct.kafkaProducerList) {
                        _iter34.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.kafkaNetworkList != null) {
                oprot.writeFieldBegin(KAFKA_NETWORK_LIST_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.kafkaNetworkList.size()));
                    for (KafkaNetworkEntity _iter35 : struct.kafkaNetworkList) {
                        _iter35.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.isSetGranularityType()) {
                oprot.writeFieldBegin(GRANULARITY_TYPE_FIELD_DESC);
                oprot.writeI32(struct.GranularityType);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class AppKafkaEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public AppKafkaEntityTupleScheme getScheme() {
            return new AppKafkaEntityTupleScheme();
        }
    }

    private static class AppKafkaEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<AppKafkaEntity> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, AppKafkaEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetAppName()) {
                optionals.set(0);
            }
            if (struct.isSetHostName()) {
                optionals.set(1);
            }
            if (struct.isSetPort()) {
                optionals.set(2);
            }
            if (struct.isSetTimestamp()) {
                optionals.set(3);
            }
            if (struct.isSetInterval()) {
                optionals.set(4);
            }
            if (struct.isSetCategory()) {
                optionals.set(5);
            }
            if (struct.isSetKafkaConsumerList()) {
                optionals.set(6);
            }
            if (struct.isSetKafkaProducerList()) {
                optionals.set(7);
            }
            if (struct.isSetKafkaNetworkList()) {
                optionals.set(8);
            }
            if (struct.isSetGranularityType()) {
                optionals.set(9);
            }
            oprot.writeBitSet(optionals, 10);
            if (struct.isSetAppName()) {
                oprot.writeString(struct.appName);
            }
            if (struct.isSetHostName()) {
                oprot.writeString(struct.hostName);
            }
            if (struct.isSetPort()) {
                oprot.writeI32(struct.port);
            }
            if (struct.isSetTimestamp()) {
                oprot.writeI64(struct.timestamp);
            }
            if (struct.isSetInterval()) {
                oprot.writeI32(struct.interval);
            }
            if (struct.isSetCategory()) {
                oprot.writeString(struct.category);
            }
            if (struct.isSetKafkaConsumerList()) {
                {
                    oprot.writeI32(struct.kafkaConsumerList.size());
                    for (KafkaConsumerEntity _iter36 : struct.kafkaConsumerList) {
                        _iter36.write(oprot);
                    }
                }
            }
            if (struct.isSetKafkaProducerList()) {
                {
                    oprot.writeI32(struct.kafkaProducerList.size());
                    for (KafkaProducerEntity _iter37 : struct.kafkaProducerList) {
                        _iter37.write(oprot);
                    }
                }
            }
            if (struct.isSetKafkaNetworkList()) {
                {
                    oprot.writeI32(struct.kafkaNetworkList.size());
                    for (KafkaNetworkEntity _iter38 : struct.kafkaNetworkList) {
                        _iter38.write(oprot);
                    }
                }
            }
            if (struct.isSetGranularityType()) {
                oprot.writeI32(struct.GranularityType);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, AppKafkaEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(10);
            if (incoming.get(0)) {
                struct.appName = iprot.readString();
                struct.setAppNameIsSet(true);
            }
            if (incoming.get(1)) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
            }
            if (incoming.get(2)) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
            }
            if (incoming.get(3)) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
            }
            if (incoming.get(4)) {
                struct.interval = iprot.readI32();
                struct.setIntervalIsSet(true);
            }
            if (incoming.get(5)) {
                struct.category = iprot.readString();
                struct.setCategoryIsSet(true);
            }
            if (incoming.get(6)) {
                {
                    org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.kafkaConsumerList = new java.util.ArrayList<KafkaConsumerEntity>(_list39.size);
                    KafkaConsumerEntity _elem40;
                    for (int _i41 = 0; _i41 < _list39.size; ++_i41) {
                        _elem40 = new KafkaConsumerEntity();
                        _elem40.read(iprot);
                        struct.kafkaConsumerList.add(_elem40);
                    }
                }
                struct.setKafkaConsumerListIsSet(true);
            }
            if (incoming.get(7)) {
                {
                    org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.kafkaProducerList = new java.util.ArrayList<KafkaProducerEntity>(_list42.size);
                    KafkaProducerEntity _elem43;
                    for (int _i44 = 0; _i44 < _list42.size; ++_i44) {
                        _elem43 = new KafkaProducerEntity();
                        _elem43.read(iprot);
                        struct.kafkaProducerList.add(_elem43);
                    }
                }
                struct.setKafkaProducerListIsSet(true);
            }
            if (incoming.get(8)) {
                {
                    org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.kafkaNetworkList = new java.util.ArrayList<KafkaNetworkEntity>(_list45.size);
                    KafkaNetworkEntity _elem46;
                    for (int _i47 = 0; _i47 < _list45.size; ++_i47) {
                        _elem46 = new KafkaNetworkEntity();
                        _elem46.read(iprot);
                        struct.kafkaNetworkList.add(_elem46);
                    }
                }
                struct.setKafkaNetworkListIsSet(true);
            }
            if (incoming.get(9)) {
                struct.GranularityType = iprot.readI32();
                struct.setGranularityTypeIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

