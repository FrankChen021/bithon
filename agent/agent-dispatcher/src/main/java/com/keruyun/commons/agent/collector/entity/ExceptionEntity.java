/**
 * Autogenerated by Thrift Compiler (0.11.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.keruyun.commons.agent.collector.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-06-10")
public class ExceptionEntity implements org.apache.thrift.TBase<ExceptionEntity, ExceptionEntity._Fields>, java.io.Serializable, Cloneable, Comparable<ExceptionEntity> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExceptionEntity");

    private static final org.apache.thrift.protocol.TField EXCEPTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionName", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField TRACE_FIELD_DESC = new org.apache.thrift.protocol.TField("trace", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField EXCEPTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionId", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short) 5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExceptionEntityStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExceptionEntityTupleSchemeFactory();

    public String exceptionName; // required
    public String message; // required
    public String trace; // required
    public String exceptionId; // optional
    public String messageId; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        EXCEPTION_NAME((short) 1, "exceptionName"),
        MESSAGE((short) 2, "message"),
        TRACE((short) 3, "trace"),
        EXCEPTION_ID((short) 4, "exceptionId"),
        MESSAGE_ID((short) 5, "messageId");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // EXCEPTION_NAME
                    return EXCEPTION_NAME;
                case 2: // MESSAGE
                    return MESSAGE;
                case 3: // TRACE
                    return TRACE;
                case 4: // EXCEPTION_ID
                    return EXCEPTION_ID;
                case 5: // MESSAGE_ID
                    return MESSAGE_ID;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final _Fields optionals[] = {_Fields.EXCEPTION_ID, _Fields.MESSAGE_ID};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.EXCEPTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("exceptionName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TRACE, new org.apache.thrift.meta_data.FieldMetaData("trace", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.EXCEPTION_ID, new org.apache.thrift.meta_data.FieldMetaData("exceptionId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                                                                                       new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                                                                                     new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExceptionEntity.class, metaDataMap);
    }

    public ExceptionEntity() {
    }

    public ExceptionEntity(
        String exceptionName,
        String message,
        String trace) {
        this();
        this.exceptionName = exceptionName;
        this.message = message;
        this.trace = trace;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ExceptionEntity(ExceptionEntity other) {
        if (other.isSetExceptionName()) {
            this.exceptionName = other.exceptionName;
        }
        if (other.isSetMessage()) {
            this.message = other.message;
        }
        if (other.isSetTrace()) {
            this.trace = other.trace;
        }
        if (other.isSetExceptionId()) {
            this.exceptionId = other.exceptionId;
        }
        if (other.isSetMessageId()) {
            this.messageId = other.messageId;
        }
    }

    public ExceptionEntity deepCopy() {
        return new ExceptionEntity(this);
    }

    @Override
    public void clear() {
        this.exceptionName = null;
        this.message = null;
        this.trace = null;
        this.exceptionId = null;
        this.messageId = null;
    }

    public String getExceptionName() {
        return this.exceptionName;
    }

    public ExceptionEntity setExceptionName(String exceptionName) {
        this.exceptionName = exceptionName;
        return this;
    }

    public void unsetExceptionName() {
        this.exceptionName = null;
    }

    /** Returns true if field exceptionName is set (has been assigned a value) and false otherwise */
    public boolean isSetExceptionName() {
        return this.exceptionName != null;
    }

    public void setExceptionNameIsSet(boolean value) {
        if (!value) {
            this.exceptionName = null;
        }
    }

    public String getMessage() {
        return this.message;
    }

    public ExceptionEntity setMessage(String message) {
        this.message = message;
        return this;
    }

    public void unsetMessage() {
        this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
        return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
        if (!value) {
            this.message = null;
        }
    }

    public String getTrace() {
        return this.trace;
    }

    public ExceptionEntity setTrace(String trace) {
        this.trace = trace;
        return this;
    }

    public void unsetTrace() {
        this.trace = null;
    }

    /** Returns true if field trace is set (has been assigned a value) and false otherwise */
    public boolean isSetTrace() {
        return this.trace != null;
    }

    public void setTraceIsSet(boolean value) {
        if (!value) {
            this.trace = null;
        }
    }

    public String getExceptionId() {
        return this.exceptionId;
    }

    public ExceptionEntity setExceptionId(String exceptionId) {
        this.exceptionId = exceptionId;
        return this;
    }

    public void unsetExceptionId() {
        this.exceptionId = null;
    }

    /** Returns true if field exceptionId is set (has been assigned a value) and false otherwise */
    public boolean isSetExceptionId() {
        return this.exceptionId != null;
    }

    public void setExceptionIdIsSet(boolean value) {
        if (!value) {
            this.exceptionId = null;
        }
    }

    public String getMessageId() {
        return this.messageId;
    }

    public ExceptionEntity setMessageId(String messageId) {
        this.messageId = messageId;
        return this;
    }

    public void unsetMessageId() {
        this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
        return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
        if (!value) {
            this.messageId = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case EXCEPTION_NAME:
                if (value == null) {
                    unsetExceptionName();
                } else {
                    setExceptionName((String) value);
                }
                break;

            case MESSAGE:
                if (value == null) {
                    unsetMessage();
                } else {
                    setMessage((String) value);
                }
                break;

            case TRACE:
                if (value == null) {
                    unsetTrace();
                } else {
                    setTrace((String) value);
                }
                break;

            case EXCEPTION_ID:
                if (value == null) {
                    unsetExceptionId();
                } else {
                    setExceptionId((String) value);
                }
                break;

            case MESSAGE_ID:
                if (value == null) {
                    unsetMessageId();
                } else {
                    setMessageId((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case EXCEPTION_NAME:
                return getExceptionName();

            case MESSAGE:
                return getMessage();

            case TRACE:
                return getTrace();

            case EXCEPTION_ID:
                return getExceptionId();

            case MESSAGE_ID:
                return getMessageId();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case EXCEPTION_NAME:
                return isSetExceptionName();
            case MESSAGE:
                return isSetMessage();
            case TRACE:
                return isSetTrace();
            case EXCEPTION_ID:
                return isSetExceptionId();
            case MESSAGE_ID:
                return isSetMessageId();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof ExceptionEntity)
            return this.equals((ExceptionEntity) that);
        return false;
    }

    public boolean equals(ExceptionEntity that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_exceptionName = true && this.isSetExceptionName();
        boolean that_present_exceptionName = true && that.isSetExceptionName();
        if (this_present_exceptionName || that_present_exceptionName) {
            if (!(this_present_exceptionName && that_present_exceptionName))
                return false;
            if (!this.exceptionName.equals(that.exceptionName))
                return false;
        }

        boolean this_present_message = true && this.isSetMessage();
        boolean that_present_message = true && that.isSetMessage();
        if (this_present_message || that_present_message) {
            if (!(this_present_message && that_present_message))
                return false;
            if (!this.message.equals(that.message))
                return false;
        }

        boolean this_present_trace = true && this.isSetTrace();
        boolean that_present_trace = true && that.isSetTrace();
        if (this_present_trace || that_present_trace) {
            if (!(this_present_trace && that_present_trace))
                return false;
            if (!this.trace.equals(that.trace))
                return false;
        }

        boolean this_present_exceptionId = true && this.isSetExceptionId();
        boolean that_present_exceptionId = true && that.isSetExceptionId();
        if (this_present_exceptionId || that_present_exceptionId) {
            if (!(this_present_exceptionId && that_present_exceptionId))
                return false;
            if (!this.exceptionId.equals(that.exceptionId))
                return false;
        }

        boolean this_present_messageId = true && this.isSetMessageId();
        boolean that_present_messageId = true && that.isSetMessageId();
        if (this_present_messageId || that_present_messageId) {
            if (!(this_present_messageId && that_present_messageId))
                return false;
            if (!this.messageId.equals(that.messageId))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetExceptionName()) ? 131071 : 524287);
        if (isSetExceptionName())
            hashCode = hashCode * 8191 + exceptionName.hashCode();

        hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
        if (isSetMessage())
            hashCode = hashCode * 8191 + message.hashCode();

        hashCode = hashCode * 8191 + ((isSetTrace()) ? 131071 : 524287);
        if (isSetTrace())
            hashCode = hashCode * 8191 + trace.hashCode();

        hashCode = hashCode * 8191 + ((isSetExceptionId()) ? 131071 : 524287);
        if (isSetExceptionId())
            hashCode = hashCode * 8191 + exceptionId.hashCode();

        hashCode = hashCode * 8191 + ((isSetMessageId()) ? 131071 : 524287);
        if (isSetMessageId())
            hashCode = hashCode * 8191 + messageId.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(ExceptionEntity other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetExceptionName()).compareTo(other.isSetExceptionName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetExceptionName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionName, other.exceptionName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMessage()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTrace()).compareTo(other.isSetTrace());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTrace()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trace, other.trace);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetExceptionId()).compareTo(other.isSetExceptionId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetExceptionId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionId, other.exceptionId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMessageId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ExceptionEntity(");
        boolean first = true;

        sb.append("exceptionName:");
        if (this.exceptionName == null) {
            sb.append("null");
        } else {
            sb.append(this.exceptionName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("message:");
        if (this.message == null) {
            sb.append("null");
        } else {
            sb.append(this.message);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("trace:");
        if (this.trace == null) {
            sb.append("null");
        } else {
            sb.append(this.trace);
        }
        first = false;
        if (isSetExceptionId()) {
            if (!first) sb.append(", ");
            sb.append("exceptionId:");
            if (this.exceptionId == null) {
                sb.append("null");
            } else {
                sb.append(this.exceptionId);
            }
            first = false;
        }
        if (isSetMessageId()) {
            if (!first) sb.append(", ");
            sb.append("messageId:");
            if (this.messageId == null) {
                sb.append("null");
            } else {
                sb.append(this.messageId);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ExceptionEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ExceptionEntityStandardScheme getScheme() {
            return new ExceptionEntityStandardScheme();
        }
    }

    private static class ExceptionEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExceptionEntity> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ExceptionEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // EXCEPTION_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.exceptionName = iprot.readString();
                            struct.setExceptionNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // MESSAGE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.message = iprot.readString();
                            struct.setMessageIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // TRACE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.trace = iprot.readString();
                            struct.setTraceIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // EXCEPTION_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.exceptionId = iprot.readString();
                            struct.setExceptionIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // MESSAGE_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.messageId = iprot.readString();
                            struct.setMessageIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ExceptionEntity struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.exceptionName != null) {
                oprot.writeFieldBegin(EXCEPTION_NAME_FIELD_DESC);
                oprot.writeString(struct.exceptionName);
                oprot.writeFieldEnd();
            }
            if (struct.message != null) {
                oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                oprot.writeString(struct.message);
                oprot.writeFieldEnd();
            }
            if (struct.trace != null) {
                oprot.writeFieldBegin(TRACE_FIELD_DESC);
                oprot.writeString(struct.trace);
                oprot.writeFieldEnd();
            }
            if (struct.exceptionId != null) {
                if (struct.isSetExceptionId()) {
                    oprot.writeFieldBegin(EXCEPTION_ID_FIELD_DESC);
                    oprot.writeString(struct.exceptionId);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.messageId != null) {
                if (struct.isSetMessageId()) {
                    oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
                    oprot.writeString(struct.messageId);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ExceptionEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ExceptionEntityTupleScheme getScheme() {
            return new ExceptionEntityTupleScheme();
        }
    }

    private static class ExceptionEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExceptionEntity> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ExceptionEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetExceptionName()) {
                optionals.set(0);
            }
            if (struct.isSetMessage()) {
                optionals.set(1);
            }
            if (struct.isSetTrace()) {
                optionals.set(2);
            }
            if (struct.isSetExceptionId()) {
                optionals.set(3);
            }
            if (struct.isSetMessageId()) {
                optionals.set(4);
            }
            oprot.writeBitSet(optionals, 5);
            if (struct.isSetExceptionName()) {
                oprot.writeString(struct.exceptionName);
            }
            if (struct.isSetMessage()) {
                oprot.writeString(struct.message);
            }
            if (struct.isSetTrace()) {
                oprot.writeString(struct.trace);
            }
            if (struct.isSetExceptionId()) {
                oprot.writeString(struct.exceptionId);
            }
            if (struct.isSetMessageId()) {
                oprot.writeString(struct.messageId);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ExceptionEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(5);
            if (incoming.get(0)) {
                struct.exceptionName = iprot.readString();
                struct.setExceptionNameIsSet(true);
            }
            if (incoming.get(1)) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
            }
            if (incoming.get(2)) {
                struct.trace = iprot.readString();
                struct.setTraceIsSet(true);
            }
            if (incoming.get(3)) {
                struct.exceptionId = iprot.readString();
                struct.setExceptionIdIsSet(true);
            }
            if (incoming.get(4)) {
                struct.messageId = iprot.readString();
                struct.setMessageIdIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

