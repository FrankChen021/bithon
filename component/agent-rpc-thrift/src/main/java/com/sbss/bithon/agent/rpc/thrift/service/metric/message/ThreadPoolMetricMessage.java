/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sbss.bithon.agent.rpc.thrift.service.metric.message;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * ***************** Thread Pool *****************************************
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-03-18")
public class ThreadPoolMetricMessage implements org.apache.thrift.TBase<ThreadPoolMetricMessage, ThreadPoolMetricMessage._Fields>, java.io.Serializable, Cloneable, Comparable<ThreadPoolMetricMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThreadPoolMetricMessage");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EXECUTOR_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("executorClass", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField POOL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("poolName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CALLER_RUN_TASK_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("callerRunTaskCount", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ABORTED_TASK_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("abortedTaskCount", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DISCARDED_TASK_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("discardedTaskCount", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField DISCARDED_OLDEST_TASK_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("discardedOldestTaskCount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField EXCEPTION_TASK_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionTaskCount", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField SUCCESSFUL_TASK_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("successfulTaskCount", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField TOTAL_TASK_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalTaskCount", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField ACTIVE_THREADS_FIELD_DESC = new org.apache.thrift.protocol.TField("activeThreads", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField CURRENT_POOL_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPoolSize", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField MAX_POOL_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxPoolSize", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField LARGEST_POOL_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("largestPoolSize", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField QUEUED_TASK_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("queuedTaskCount", org.apache.thrift.protocol.TType.I64, (short)16);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThreadPoolMetricMessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThreadPoolMetricMessageTupleSchemeFactory();

  public long timestamp; // required
  public int interval; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String executorClass; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String poolName; // required
  public long callerRunTaskCount; // required
  public long abortedTaskCount; // required
  public long discardedTaskCount; // required
  public long discardedOldestTaskCount; // required
  public long exceptionTaskCount; // required
  public long successfulTaskCount; // required
  public long totalTaskCount; // required
  public long activeThreads; // required
  public long currentPoolSize; // required
  public long maxPoolSize; // required
  public long largestPoolSize; // required
  public long queuedTaskCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    INTERVAL((short)2, "interval"),
    EXECUTOR_CLASS((short)3, "executorClass"),
    POOL_NAME((short)4, "poolName"),
    CALLER_RUN_TASK_COUNT((short)5, "callerRunTaskCount"),
    ABORTED_TASK_COUNT((short)6, "abortedTaskCount"),
    DISCARDED_TASK_COUNT((short)7, "discardedTaskCount"),
    DISCARDED_OLDEST_TASK_COUNT((short)8, "discardedOldestTaskCount"),
    EXCEPTION_TASK_COUNT((short)9, "exceptionTaskCount"),
    SUCCESSFUL_TASK_COUNT((short)10, "successfulTaskCount"),
    TOTAL_TASK_COUNT((short)11, "totalTaskCount"),
    ACTIVE_THREADS((short)12, "activeThreads"),
    CURRENT_POOL_SIZE((short)13, "currentPoolSize"),
    MAX_POOL_SIZE((short)14, "maxPoolSize"),
    LARGEST_POOL_SIZE((short)15, "largestPoolSize"),
    QUEUED_TASK_COUNT((short)16, "queuedTaskCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 2: // INTERVAL
          return INTERVAL;
        case 3: // EXECUTOR_CLASS
          return EXECUTOR_CLASS;
        case 4: // POOL_NAME
          return POOL_NAME;
        case 5: // CALLER_RUN_TASK_COUNT
          return CALLER_RUN_TASK_COUNT;
        case 6: // ABORTED_TASK_COUNT
          return ABORTED_TASK_COUNT;
        case 7: // DISCARDED_TASK_COUNT
          return DISCARDED_TASK_COUNT;
        case 8: // DISCARDED_OLDEST_TASK_COUNT
          return DISCARDED_OLDEST_TASK_COUNT;
        case 9: // EXCEPTION_TASK_COUNT
          return EXCEPTION_TASK_COUNT;
        case 10: // SUCCESSFUL_TASK_COUNT
          return SUCCESSFUL_TASK_COUNT;
        case 11: // TOTAL_TASK_COUNT
          return TOTAL_TASK_COUNT;
        case 12: // ACTIVE_THREADS
          return ACTIVE_THREADS;
        case 13: // CURRENT_POOL_SIZE
          return CURRENT_POOL_SIZE;
        case 14: // MAX_POOL_SIZE
          return MAX_POOL_SIZE;
        case 15: // LARGEST_POOL_SIZE
          return LARGEST_POOL_SIZE;
        case 16: // QUEUED_TASK_COUNT
          return QUEUED_TASK_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __INTERVAL_ISSET_ID = 1;
  private static final int __CALLERRUNTASKCOUNT_ISSET_ID = 2;
  private static final int __ABORTEDTASKCOUNT_ISSET_ID = 3;
  private static final int __DISCARDEDTASKCOUNT_ISSET_ID = 4;
  private static final int __DISCARDEDOLDESTTASKCOUNT_ISSET_ID = 5;
  private static final int __EXCEPTIONTASKCOUNT_ISSET_ID = 6;
  private static final int __SUCCESSFULTASKCOUNT_ISSET_ID = 7;
  private static final int __TOTALTASKCOUNT_ISSET_ID = 8;
  private static final int __ACTIVETHREADS_ISSET_ID = 9;
  private static final int __CURRENTPOOLSIZE_ISSET_ID = 10;
  private static final int __MAXPOOLSIZE_ISSET_ID = 11;
  private static final int __LARGESTPOOLSIZE_ISSET_ID = 12;
  private static final int __QUEUEDTASKCOUNT_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXECUTOR_CLASS, new org.apache.thrift.meta_data.FieldMetaData("executorClass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POOL_NAME, new org.apache.thrift.meta_data.FieldMetaData("poolName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALLER_RUN_TASK_COUNT, new org.apache.thrift.meta_data.FieldMetaData("callerRunTaskCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ABORTED_TASK_COUNT, new org.apache.thrift.meta_data.FieldMetaData("abortedTaskCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISCARDED_TASK_COUNT, new org.apache.thrift.meta_data.FieldMetaData("discardedTaskCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISCARDED_OLDEST_TASK_COUNT, new org.apache.thrift.meta_data.FieldMetaData("discardedOldestTaskCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXCEPTION_TASK_COUNT, new org.apache.thrift.meta_data.FieldMetaData("exceptionTaskCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUCCESSFUL_TASK_COUNT, new org.apache.thrift.meta_data.FieldMetaData("successfulTaskCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_TASK_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalTaskCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTIVE_THREADS, new org.apache.thrift.meta_data.FieldMetaData("activeThreads", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CURRENT_POOL_SIZE, new org.apache.thrift.meta_data.FieldMetaData("currentPoolSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_POOL_SIZE, new org.apache.thrift.meta_data.FieldMetaData("maxPoolSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LARGEST_POOL_SIZE, new org.apache.thrift.meta_data.FieldMetaData("largestPoolSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUEUED_TASK_COUNT, new org.apache.thrift.meta_data.FieldMetaData("queuedTaskCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThreadPoolMetricMessage.class, metaDataMap);
  }

  public ThreadPoolMetricMessage() {
  }

  public ThreadPoolMetricMessage(
    long timestamp,
    int interval,
    java.lang.String executorClass,
    java.lang.String poolName,
    long callerRunTaskCount,
    long abortedTaskCount,
    long discardedTaskCount,
    long discardedOldestTaskCount,
    long exceptionTaskCount,
    long successfulTaskCount,
    long totalTaskCount,
    long activeThreads,
    long currentPoolSize,
    long maxPoolSize,
    long largestPoolSize,
    long queuedTaskCount)
  {
    this();
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.interval = interval;
    setIntervalIsSet(true);
    this.executorClass = executorClass;
    this.poolName = poolName;
    this.callerRunTaskCount = callerRunTaskCount;
    setCallerRunTaskCountIsSet(true);
    this.abortedTaskCount = abortedTaskCount;
    setAbortedTaskCountIsSet(true);
    this.discardedTaskCount = discardedTaskCount;
    setDiscardedTaskCountIsSet(true);
    this.discardedOldestTaskCount = discardedOldestTaskCount;
    setDiscardedOldestTaskCountIsSet(true);
    this.exceptionTaskCount = exceptionTaskCount;
    setExceptionTaskCountIsSet(true);
    this.successfulTaskCount = successfulTaskCount;
    setSuccessfulTaskCountIsSet(true);
    this.totalTaskCount = totalTaskCount;
    setTotalTaskCountIsSet(true);
    this.activeThreads = activeThreads;
    setActiveThreadsIsSet(true);
    this.currentPoolSize = currentPoolSize;
    setCurrentPoolSizeIsSet(true);
    this.maxPoolSize = maxPoolSize;
    setMaxPoolSizeIsSet(true);
    this.largestPoolSize = largestPoolSize;
    setLargestPoolSizeIsSet(true);
    this.queuedTaskCount = queuedTaskCount;
    setQueuedTaskCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThreadPoolMetricMessage(ThreadPoolMetricMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timestamp = other.timestamp;
    this.interval = other.interval;
    if (other.isSetExecutorClass()) {
      this.executorClass = other.executorClass;
    }
    if (other.isSetPoolName()) {
      this.poolName = other.poolName;
    }
    this.callerRunTaskCount = other.callerRunTaskCount;
    this.abortedTaskCount = other.abortedTaskCount;
    this.discardedTaskCount = other.discardedTaskCount;
    this.discardedOldestTaskCount = other.discardedOldestTaskCount;
    this.exceptionTaskCount = other.exceptionTaskCount;
    this.successfulTaskCount = other.successfulTaskCount;
    this.totalTaskCount = other.totalTaskCount;
    this.activeThreads = other.activeThreads;
    this.currentPoolSize = other.currentPoolSize;
    this.maxPoolSize = other.maxPoolSize;
    this.largestPoolSize = other.largestPoolSize;
    this.queuedTaskCount = other.queuedTaskCount;
  }

  public ThreadPoolMetricMessage deepCopy() {
    return new ThreadPoolMetricMessage(this);
  }

  @Override
  public void clear() {
    setTimestampIsSet(false);
    this.timestamp = 0;
    setIntervalIsSet(false);
    this.interval = 0;
    this.executorClass = null;
    this.poolName = null;
    setCallerRunTaskCountIsSet(false);
    this.callerRunTaskCount = 0;
    setAbortedTaskCountIsSet(false);
    this.abortedTaskCount = 0;
    setDiscardedTaskCountIsSet(false);
    this.discardedTaskCount = 0;
    setDiscardedOldestTaskCountIsSet(false);
    this.discardedOldestTaskCount = 0;
    setExceptionTaskCountIsSet(false);
    this.exceptionTaskCount = 0;
    setSuccessfulTaskCountIsSet(false);
    this.successfulTaskCount = 0;
    setTotalTaskCountIsSet(false);
    this.totalTaskCount = 0;
    setActiveThreadsIsSet(false);
    this.activeThreads = 0;
    setCurrentPoolSizeIsSet(false);
    this.currentPoolSize = 0;
    setMaxPoolSizeIsSet(false);
    this.maxPoolSize = 0;
    setLargestPoolSizeIsSet(false);
    this.largestPoolSize = 0;
    setQueuedTaskCountIsSet(false);
    this.queuedTaskCount = 0;
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public ThreadPoolMetricMessage setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getInterval() {
    return this.interval;
  }

  public ThreadPoolMetricMessage setInterval(int interval) {
    this.interval = interval;
    setIntervalIsSet(true);
    return this;
  }

  public void unsetInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  /** Returns true if field interval is set (has been assigned a value) and false otherwise */
  public boolean isSetInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  public void setIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getExecutorClass() {
    return this.executorClass;
  }

  public ThreadPoolMetricMessage setExecutorClass(@org.apache.thrift.annotation.Nullable java.lang.String executorClass) {
    this.executorClass = executorClass;
    return this;
  }

  public void unsetExecutorClass() {
    this.executorClass = null;
  }

  /** Returns true if field executorClass is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutorClass() {
    return this.executorClass != null;
  }

  public void setExecutorClassIsSet(boolean value) {
    if (!value) {
      this.executorClass = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPoolName() {
    return this.poolName;
  }

  public ThreadPoolMetricMessage setPoolName(@org.apache.thrift.annotation.Nullable java.lang.String poolName) {
    this.poolName = poolName;
    return this;
  }

  public void unsetPoolName() {
    this.poolName = null;
  }

  /** Returns true if field poolName is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolName() {
    return this.poolName != null;
  }

  public void setPoolNameIsSet(boolean value) {
    if (!value) {
      this.poolName = null;
    }
  }

  public long getCallerRunTaskCount() {
    return this.callerRunTaskCount;
  }

  public ThreadPoolMetricMessage setCallerRunTaskCount(long callerRunTaskCount) {
    this.callerRunTaskCount = callerRunTaskCount;
    setCallerRunTaskCountIsSet(true);
    return this;
  }

  public void unsetCallerRunTaskCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CALLERRUNTASKCOUNT_ISSET_ID);
  }

  /** Returns true if field callerRunTaskCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCallerRunTaskCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CALLERRUNTASKCOUNT_ISSET_ID);
  }

  public void setCallerRunTaskCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CALLERRUNTASKCOUNT_ISSET_ID, value);
  }

  public long getAbortedTaskCount() {
    return this.abortedTaskCount;
  }

  public ThreadPoolMetricMessage setAbortedTaskCount(long abortedTaskCount) {
    this.abortedTaskCount = abortedTaskCount;
    setAbortedTaskCountIsSet(true);
    return this;
  }

  public void unsetAbortedTaskCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ABORTEDTASKCOUNT_ISSET_ID);
  }

  /** Returns true if field abortedTaskCount is set (has been assigned a value) and false otherwise */
  public boolean isSetAbortedTaskCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ABORTEDTASKCOUNT_ISSET_ID);
  }

  public void setAbortedTaskCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ABORTEDTASKCOUNT_ISSET_ID, value);
  }

  public long getDiscardedTaskCount() {
    return this.discardedTaskCount;
  }

  public ThreadPoolMetricMessage setDiscardedTaskCount(long discardedTaskCount) {
    this.discardedTaskCount = discardedTaskCount;
    setDiscardedTaskCountIsSet(true);
    return this;
  }

  public void unsetDiscardedTaskCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISCARDEDTASKCOUNT_ISSET_ID);
  }

  /** Returns true if field discardedTaskCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscardedTaskCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISCARDEDTASKCOUNT_ISSET_ID);
  }

  public void setDiscardedTaskCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISCARDEDTASKCOUNT_ISSET_ID, value);
  }

  public long getDiscardedOldestTaskCount() {
    return this.discardedOldestTaskCount;
  }

  public ThreadPoolMetricMessage setDiscardedOldestTaskCount(long discardedOldestTaskCount) {
    this.discardedOldestTaskCount = discardedOldestTaskCount;
    setDiscardedOldestTaskCountIsSet(true);
    return this;
  }

  public void unsetDiscardedOldestTaskCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISCARDEDOLDESTTASKCOUNT_ISSET_ID);
  }

  /** Returns true if field discardedOldestTaskCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscardedOldestTaskCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISCARDEDOLDESTTASKCOUNT_ISSET_ID);
  }

  public void setDiscardedOldestTaskCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISCARDEDOLDESTTASKCOUNT_ISSET_ID, value);
  }

  public long getExceptionTaskCount() {
    return this.exceptionTaskCount;
  }

  public ThreadPoolMetricMessage setExceptionTaskCount(long exceptionTaskCount) {
    this.exceptionTaskCount = exceptionTaskCount;
    setExceptionTaskCountIsSet(true);
    return this;
  }

  public void unsetExceptionTaskCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXCEPTIONTASKCOUNT_ISSET_ID);
  }

  /** Returns true if field exceptionTaskCount is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionTaskCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXCEPTIONTASKCOUNT_ISSET_ID);
  }

  public void setExceptionTaskCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXCEPTIONTASKCOUNT_ISSET_ID, value);
  }

  public long getSuccessfulTaskCount() {
    return this.successfulTaskCount;
  }

  public ThreadPoolMetricMessage setSuccessfulTaskCount(long successfulTaskCount) {
    this.successfulTaskCount = successfulTaskCount;
    setSuccessfulTaskCountIsSet(true);
    return this;
  }

  public void unsetSuccessfulTaskCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESSFULTASKCOUNT_ISSET_ID);
  }

  /** Returns true if field successfulTaskCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessfulTaskCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESSFULTASKCOUNT_ISSET_ID);
  }

  public void setSuccessfulTaskCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESSFULTASKCOUNT_ISSET_ID, value);
  }

  public long getTotalTaskCount() {
    return this.totalTaskCount;
  }

  public ThreadPoolMetricMessage setTotalTaskCount(long totalTaskCount) {
    this.totalTaskCount = totalTaskCount;
    setTotalTaskCountIsSet(true);
    return this;
  }

  public void unsetTotalTaskCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALTASKCOUNT_ISSET_ID);
  }

  /** Returns true if field totalTaskCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalTaskCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALTASKCOUNT_ISSET_ID);
  }

  public void setTotalTaskCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALTASKCOUNT_ISSET_ID, value);
  }

  public long getActiveThreads() {
    return this.activeThreads;
  }

  public ThreadPoolMetricMessage setActiveThreads(long activeThreads) {
    this.activeThreads = activeThreads;
    setActiveThreadsIsSet(true);
    return this;
  }

  public void unsetActiveThreads() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACTIVETHREADS_ISSET_ID);
  }

  /** Returns true if field activeThreads is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveThreads() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACTIVETHREADS_ISSET_ID);
  }

  public void setActiveThreadsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACTIVETHREADS_ISSET_ID, value);
  }

  public long getCurrentPoolSize() {
    return this.currentPoolSize;
  }

  public ThreadPoolMetricMessage setCurrentPoolSize(long currentPoolSize) {
    this.currentPoolSize = currentPoolSize;
    setCurrentPoolSizeIsSet(true);
    return this;
  }

  public void unsetCurrentPoolSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURRENTPOOLSIZE_ISSET_ID);
  }

  /** Returns true if field currentPoolSize is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentPoolSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRENTPOOLSIZE_ISSET_ID);
  }

  public void setCurrentPoolSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURRENTPOOLSIZE_ISSET_ID, value);
  }

  public long getMaxPoolSize() {
    return this.maxPoolSize;
  }

  public ThreadPoolMetricMessage setMaxPoolSize(long maxPoolSize) {
    this.maxPoolSize = maxPoolSize;
    setMaxPoolSizeIsSet(true);
    return this;
  }

  public void unsetMaxPoolSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXPOOLSIZE_ISSET_ID);
  }

  /** Returns true if field maxPoolSize is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxPoolSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXPOOLSIZE_ISSET_ID);
  }

  public void setMaxPoolSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXPOOLSIZE_ISSET_ID, value);
  }

  public long getLargestPoolSize() {
    return this.largestPoolSize;
  }

  public ThreadPoolMetricMessage setLargestPoolSize(long largestPoolSize) {
    this.largestPoolSize = largestPoolSize;
    setLargestPoolSizeIsSet(true);
    return this;
  }

  public void unsetLargestPoolSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LARGESTPOOLSIZE_ISSET_ID);
  }

  /** Returns true if field largestPoolSize is set (has been assigned a value) and false otherwise */
  public boolean isSetLargestPoolSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LARGESTPOOLSIZE_ISSET_ID);
  }

  public void setLargestPoolSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LARGESTPOOLSIZE_ISSET_ID, value);
  }

  public long getQueuedTaskCount() {
    return this.queuedTaskCount;
  }

  public ThreadPoolMetricMessage setQueuedTaskCount(long queuedTaskCount) {
    this.queuedTaskCount = queuedTaskCount;
    setQueuedTaskCountIsSet(true);
    return this;
  }

  public void unsetQueuedTaskCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUEUEDTASKCOUNT_ISSET_ID);
  }

  /** Returns true if field queuedTaskCount is set (has been assigned a value) and false otherwise */
  public boolean isSetQueuedTaskCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUEUEDTASKCOUNT_ISSET_ID);
  }

  public void setQueuedTaskCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUEUEDTASKCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((java.lang.Integer)value);
      }
      break;

    case EXECUTOR_CLASS:
      if (value == null) {
        unsetExecutorClass();
      } else {
        setExecutorClass((java.lang.String)value);
      }
      break;

    case POOL_NAME:
      if (value == null) {
        unsetPoolName();
      } else {
        setPoolName((java.lang.String)value);
      }
      break;

    case CALLER_RUN_TASK_COUNT:
      if (value == null) {
        unsetCallerRunTaskCount();
      } else {
        setCallerRunTaskCount((java.lang.Long)value);
      }
      break;

    case ABORTED_TASK_COUNT:
      if (value == null) {
        unsetAbortedTaskCount();
      } else {
        setAbortedTaskCount((java.lang.Long)value);
      }
      break;

    case DISCARDED_TASK_COUNT:
      if (value == null) {
        unsetDiscardedTaskCount();
      } else {
        setDiscardedTaskCount((java.lang.Long)value);
      }
      break;

    case DISCARDED_OLDEST_TASK_COUNT:
      if (value == null) {
        unsetDiscardedOldestTaskCount();
      } else {
        setDiscardedOldestTaskCount((java.lang.Long)value);
      }
      break;

    case EXCEPTION_TASK_COUNT:
      if (value == null) {
        unsetExceptionTaskCount();
      } else {
        setExceptionTaskCount((java.lang.Long)value);
      }
      break;

    case SUCCESSFUL_TASK_COUNT:
      if (value == null) {
        unsetSuccessfulTaskCount();
      } else {
        setSuccessfulTaskCount((java.lang.Long)value);
      }
      break;

    case TOTAL_TASK_COUNT:
      if (value == null) {
        unsetTotalTaskCount();
      } else {
        setTotalTaskCount((java.lang.Long)value);
      }
      break;

    case ACTIVE_THREADS:
      if (value == null) {
        unsetActiveThreads();
      } else {
        setActiveThreads((java.lang.Long)value);
      }
      break;

    case CURRENT_POOL_SIZE:
      if (value == null) {
        unsetCurrentPoolSize();
      } else {
        setCurrentPoolSize((java.lang.Long)value);
      }
      break;

    case MAX_POOL_SIZE:
      if (value == null) {
        unsetMaxPoolSize();
      } else {
        setMaxPoolSize((java.lang.Long)value);
      }
      break;

    case LARGEST_POOL_SIZE:
      if (value == null) {
        unsetLargestPoolSize();
      } else {
        setLargestPoolSize((java.lang.Long)value);
      }
      break;

    case QUEUED_TASK_COUNT:
      if (value == null) {
        unsetQueuedTaskCount();
      } else {
        setQueuedTaskCount((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return getTimestamp();

    case INTERVAL:
      return getInterval();

    case EXECUTOR_CLASS:
      return getExecutorClass();

    case POOL_NAME:
      return getPoolName();

    case CALLER_RUN_TASK_COUNT:
      return getCallerRunTaskCount();

    case ABORTED_TASK_COUNT:
      return getAbortedTaskCount();

    case DISCARDED_TASK_COUNT:
      return getDiscardedTaskCount();

    case DISCARDED_OLDEST_TASK_COUNT:
      return getDiscardedOldestTaskCount();

    case EXCEPTION_TASK_COUNT:
      return getExceptionTaskCount();

    case SUCCESSFUL_TASK_COUNT:
      return getSuccessfulTaskCount();

    case TOTAL_TASK_COUNT:
      return getTotalTaskCount();

    case ACTIVE_THREADS:
      return getActiveThreads();

    case CURRENT_POOL_SIZE:
      return getCurrentPoolSize();

    case MAX_POOL_SIZE:
      return getMaxPoolSize();

    case LARGEST_POOL_SIZE:
      return getLargestPoolSize();

    case QUEUED_TASK_COUNT:
      return getQueuedTaskCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case INTERVAL:
      return isSetInterval();
    case EXECUTOR_CLASS:
      return isSetExecutorClass();
    case POOL_NAME:
      return isSetPoolName();
    case CALLER_RUN_TASK_COUNT:
      return isSetCallerRunTaskCount();
    case ABORTED_TASK_COUNT:
      return isSetAbortedTaskCount();
    case DISCARDED_TASK_COUNT:
      return isSetDiscardedTaskCount();
    case DISCARDED_OLDEST_TASK_COUNT:
      return isSetDiscardedOldestTaskCount();
    case EXCEPTION_TASK_COUNT:
      return isSetExceptionTaskCount();
    case SUCCESSFUL_TASK_COUNT:
      return isSetSuccessfulTaskCount();
    case TOTAL_TASK_COUNT:
      return isSetTotalTaskCount();
    case ACTIVE_THREADS:
      return isSetActiveThreads();
    case CURRENT_POOL_SIZE:
      return isSetCurrentPoolSize();
    case MAX_POOL_SIZE:
      return isSetMaxPoolSize();
    case LARGEST_POOL_SIZE:
      return isSetLargestPoolSize();
    case QUEUED_TASK_COUNT:
      return isSetQueuedTaskCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ThreadPoolMetricMessage)
      return this.equals((ThreadPoolMetricMessage)that);
    return false;
  }

  public boolean equals(ThreadPoolMetricMessage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_interval = true;
    boolean that_present_interval = true;
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (this.interval != that.interval)
        return false;
    }

    boolean this_present_executorClass = true && this.isSetExecutorClass();
    boolean that_present_executorClass = true && that.isSetExecutorClass();
    if (this_present_executorClass || that_present_executorClass) {
      if (!(this_present_executorClass && that_present_executorClass))
        return false;
      if (!this.executorClass.equals(that.executorClass))
        return false;
    }

    boolean this_present_poolName = true && this.isSetPoolName();
    boolean that_present_poolName = true && that.isSetPoolName();
    if (this_present_poolName || that_present_poolName) {
      if (!(this_present_poolName && that_present_poolName))
        return false;
      if (!this.poolName.equals(that.poolName))
        return false;
    }

    boolean this_present_callerRunTaskCount = true;
    boolean that_present_callerRunTaskCount = true;
    if (this_present_callerRunTaskCount || that_present_callerRunTaskCount) {
      if (!(this_present_callerRunTaskCount && that_present_callerRunTaskCount))
        return false;
      if (this.callerRunTaskCount != that.callerRunTaskCount)
        return false;
    }

    boolean this_present_abortedTaskCount = true;
    boolean that_present_abortedTaskCount = true;
    if (this_present_abortedTaskCount || that_present_abortedTaskCount) {
      if (!(this_present_abortedTaskCount && that_present_abortedTaskCount))
        return false;
      if (this.abortedTaskCount != that.abortedTaskCount)
        return false;
    }

    boolean this_present_discardedTaskCount = true;
    boolean that_present_discardedTaskCount = true;
    if (this_present_discardedTaskCount || that_present_discardedTaskCount) {
      if (!(this_present_discardedTaskCount && that_present_discardedTaskCount))
        return false;
      if (this.discardedTaskCount != that.discardedTaskCount)
        return false;
    }

    boolean this_present_discardedOldestTaskCount = true;
    boolean that_present_discardedOldestTaskCount = true;
    if (this_present_discardedOldestTaskCount || that_present_discardedOldestTaskCount) {
      if (!(this_present_discardedOldestTaskCount && that_present_discardedOldestTaskCount))
        return false;
      if (this.discardedOldestTaskCount != that.discardedOldestTaskCount)
        return false;
    }

    boolean this_present_exceptionTaskCount = true;
    boolean that_present_exceptionTaskCount = true;
    if (this_present_exceptionTaskCount || that_present_exceptionTaskCount) {
      if (!(this_present_exceptionTaskCount && that_present_exceptionTaskCount))
        return false;
      if (this.exceptionTaskCount != that.exceptionTaskCount)
        return false;
    }

    boolean this_present_successfulTaskCount = true;
    boolean that_present_successfulTaskCount = true;
    if (this_present_successfulTaskCount || that_present_successfulTaskCount) {
      if (!(this_present_successfulTaskCount && that_present_successfulTaskCount))
        return false;
      if (this.successfulTaskCount != that.successfulTaskCount)
        return false;
    }

    boolean this_present_totalTaskCount = true;
    boolean that_present_totalTaskCount = true;
    if (this_present_totalTaskCount || that_present_totalTaskCount) {
      if (!(this_present_totalTaskCount && that_present_totalTaskCount))
        return false;
      if (this.totalTaskCount != that.totalTaskCount)
        return false;
    }

    boolean this_present_activeThreads = true;
    boolean that_present_activeThreads = true;
    if (this_present_activeThreads || that_present_activeThreads) {
      if (!(this_present_activeThreads && that_present_activeThreads))
        return false;
      if (this.activeThreads != that.activeThreads)
        return false;
    }

    boolean this_present_currentPoolSize = true;
    boolean that_present_currentPoolSize = true;
    if (this_present_currentPoolSize || that_present_currentPoolSize) {
      if (!(this_present_currentPoolSize && that_present_currentPoolSize))
        return false;
      if (this.currentPoolSize != that.currentPoolSize)
        return false;
    }

    boolean this_present_maxPoolSize = true;
    boolean that_present_maxPoolSize = true;
    if (this_present_maxPoolSize || that_present_maxPoolSize) {
      if (!(this_present_maxPoolSize && that_present_maxPoolSize))
        return false;
      if (this.maxPoolSize != that.maxPoolSize)
        return false;
    }

    boolean this_present_largestPoolSize = true;
    boolean that_present_largestPoolSize = true;
    if (this_present_largestPoolSize || that_present_largestPoolSize) {
      if (!(this_present_largestPoolSize && that_present_largestPoolSize))
        return false;
      if (this.largestPoolSize != that.largestPoolSize)
        return false;
    }

    boolean this_present_queuedTaskCount = true;
    boolean that_present_queuedTaskCount = true;
    if (this_present_queuedTaskCount || that_present_queuedTaskCount) {
      if (!(this_present_queuedTaskCount && that_present_queuedTaskCount))
        return false;
      if (this.queuedTaskCount != that.queuedTaskCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + interval;

    hashCode = hashCode * 8191 + ((isSetExecutorClass()) ? 131071 : 524287);
    if (isSetExecutorClass())
      hashCode = hashCode * 8191 + executorClass.hashCode();

    hashCode = hashCode * 8191 + ((isSetPoolName()) ? 131071 : 524287);
    if (isSetPoolName())
      hashCode = hashCode * 8191 + poolName.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(callerRunTaskCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(abortedTaskCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(discardedTaskCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(discardedOldestTaskCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(exceptionTaskCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(successfulTaskCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalTaskCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(activeThreads);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(currentPoolSize);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxPoolSize);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(largestPoolSize);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(queuedTaskCount);

    return hashCode;
  }

  @Override
  public int compareTo(ThreadPoolMetricMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInterval(), other.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExecutorClass(), other.isSetExecutorClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutorClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executorClass, other.executorClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPoolName(), other.isSetPoolName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolName, other.poolName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCallerRunTaskCount(), other.isSetCallerRunTaskCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallerRunTaskCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callerRunTaskCount, other.callerRunTaskCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAbortedTaskCount(), other.isSetAbortedTaskCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbortedTaskCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abortedTaskCount, other.abortedTaskCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDiscardedTaskCount(), other.isSetDiscardedTaskCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscardedTaskCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discardedTaskCount, other.discardedTaskCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDiscardedOldestTaskCount(), other.isSetDiscardedOldestTaskCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscardedOldestTaskCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discardedOldestTaskCount, other.discardedOldestTaskCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExceptionTaskCount(), other.isSetExceptionTaskCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionTaskCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionTaskCount, other.exceptionTaskCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSuccessfulTaskCount(), other.isSetSuccessfulTaskCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessfulTaskCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successfulTaskCount, other.successfulTaskCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTotalTaskCount(), other.isSetTotalTaskCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalTaskCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalTaskCount, other.totalTaskCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetActiveThreads(), other.isSetActiveThreads());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveThreads()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeThreads, other.activeThreads);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCurrentPoolSize(), other.isSetCurrentPoolSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentPoolSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPoolSize, other.currentPoolSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxPoolSize(), other.isSetMaxPoolSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxPoolSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxPoolSize, other.maxPoolSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLargestPoolSize(), other.isSetLargestPoolSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLargestPoolSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.largestPoolSize, other.largestPoolSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueuedTaskCount(), other.isSetQueuedTaskCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueuedTaskCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queuedTaskCount, other.queuedTaskCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ThreadPoolMetricMessage(");
    boolean first = true;

    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interval:");
    sb.append(this.interval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("executorClass:");
    if (this.executorClass == null) {
      sb.append("null");
    } else {
      sb.append(this.executorClass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("poolName:");
    if (this.poolName == null) {
      sb.append("null");
    } else {
      sb.append(this.poolName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("callerRunTaskCount:");
    sb.append(this.callerRunTaskCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("abortedTaskCount:");
    sb.append(this.abortedTaskCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("discardedTaskCount:");
    sb.append(this.discardedTaskCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("discardedOldestTaskCount:");
    sb.append(this.discardedOldestTaskCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptionTaskCount:");
    sb.append(this.exceptionTaskCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("successfulTaskCount:");
    sb.append(this.successfulTaskCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalTaskCount:");
    sb.append(this.totalTaskCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeThreads:");
    sb.append(this.activeThreads);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentPoolSize:");
    sb.append(this.currentPoolSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxPoolSize:");
    sb.append(this.maxPoolSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("largestPoolSize:");
    sb.append(this.largestPoolSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queuedTaskCount:");
    sb.append(this.queuedTaskCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThreadPoolMetricMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThreadPoolMetricMessageStandardScheme getScheme() {
      return new ThreadPoolMetricMessageStandardScheme();
    }
  }

  private static class ThreadPoolMetricMessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThreadPoolMetricMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThreadPoolMetricMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interval = iprot.readI32();
              struct.setIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXECUTOR_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executorClass = iprot.readString();
              struct.setExecutorClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POOL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.poolName = iprot.readString();
              struct.setPoolNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CALLER_RUN_TASK_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.callerRunTaskCount = iprot.readI64();
              struct.setCallerRunTaskCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ABORTED_TASK_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.abortedTaskCount = iprot.readI64();
              struct.setAbortedTaskCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DISCARDED_TASK_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.discardedTaskCount = iprot.readI64();
              struct.setDiscardedTaskCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DISCARDED_OLDEST_TASK_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.discardedOldestTaskCount = iprot.readI64();
              struct.setDiscardedOldestTaskCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXCEPTION_TASK_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.exceptionTaskCount = iprot.readI64();
              struct.setExceptionTaskCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SUCCESSFUL_TASK_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.successfulTaskCount = iprot.readI64();
              struct.setSuccessfulTaskCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TOTAL_TASK_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalTaskCount = iprot.readI64();
              struct.setTotalTaskCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ACTIVE_THREADS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.activeThreads = iprot.readI64();
              struct.setActiveThreadsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CURRENT_POOL_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.currentPoolSize = iprot.readI64();
              struct.setCurrentPoolSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MAX_POOL_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxPoolSize = iprot.readI64();
              struct.setMaxPoolSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LARGEST_POOL_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.largestPoolSize = iprot.readI64();
              struct.setLargestPoolSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // QUEUED_TASK_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.queuedTaskCount = iprot.readI64();
              struct.setQueuedTaskCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThreadPoolMetricMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.interval);
      oprot.writeFieldEnd();
      if (struct.executorClass != null) {
        oprot.writeFieldBegin(EXECUTOR_CLASS_FIELD_DESC);
        oprot.writeString(struct.executorClass);
        oprot.writeFieldEnd();
      }
      if (struct.poolName != null) {
        oprot.writeFieldBegin(POOL_NAME_FIELD_DESC);
        oprot.writeString(struct.poolName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CALLER_RUN_TASK_COUNT_FIELD_DESC);
      oprot.writeI64(struct.callerRunTaskCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ABORTED_TASK_COUNT_FIELD_DESC);
      oprot.writeI64(struct.abortedTaskCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISCARDED_TASK_COUNT_FIELD_DESC);
      oprot.writeI64(struct.discardedTaskCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISCARDED_OLDEST_TASK_COUNT_FIELD_DESC);
      oprot.writeI64(struct.discardedOldestTaskCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCEPTION_TASK_COUNT_FIELD_DESC);
      oprot.writeI64(struct.exceptionTaskCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUCCESSFUL_TASK_COUNT_FIELD_DESC);
      oprot.writeI64(struct.successfulTaskCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_TASK_COUNT_FIELD_DESC);
      oprot.writeI64(struct.totalTaskCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVE_THREADS_FIELD_DESC);
      oprot.writeI64(struct.activeThreads);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_POOL_SIZE_FIELD_DESC);
      oprot.writeI64(struct.currentPoolSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_POOL_SIZE_FIELD_DESC);
      oprot.writeI64(struct.maxPoolSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LARGEST_POOL_SIZE_FIELD_DESC);
      oprot.writeI64(struct.largestPoolSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUEUED_TASK_COUNT_FIELD_DESC);
      oprot.writeI64(struct.queuedTaskCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThreadPoolMetricMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThreadPoolMetricMessageTupleScheme getScheme() {
      return new ThreadPoolMetricMessageTupleScheme();
    }
  }

  private static class ThreadPoolMetricMessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThreadPoolMetricMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThreadPoolMetricMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetInterval()) {
        optionals.set(1);
      }
      if (struct.isSetExecutorClass()) {
        optionals.set(2);
      }
      if (struct.isSetPoolName()) {
        optionals.set(3);
      }
      if (struct.isSetCallerRunTaskCount()) {
        optionals.set(4);
      }
      if (struct.isSetAbortedTaskCount()) {
        optionals.set(5);
      }
      if (struct.isSetDiscardedTaskCount()) {
        optionals.set(6);
      }
      if (struct.isSetDiscardedOldestTaskCount()) {
        optionals.set(7);
      }
      if (struct.isSetExceptionTaskCount()) {
        optionals.set(8);
      }
      if (struct.isSetSuccessfulTaskCount()) {
        optionals.set(9);
      }
      if (struct.isSetTotalTaskCount()) {
        optionals.set(10);
      }
      if (struct.isSetActiveThreads()) {
        optionals.set(11);
      }
      if (struct.isSetCurrentPoolSize()) {
        optionals.set(12);
      }
      if (struct.isSetMaxPoolSize()) {
        optionals.set(13);
      }
      if (struct.isSetLargestPoolSize()) {
        optionals.set(14);
      }
      if (struct.isSetQueuedTaskCount()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetInterval()) {
        oprot.writeI32(struct.interval);
      }
      if (struct.isSetExecutorClass()) {
        oprot.writeString(struct.executorClass);
      }
      if (struct.isSetPoolName()) {
        oprot.writeString(struct.poolName);
      }
      if (struct.isSetCallerRunTaskCount()) {
        oprot.writeI64(struct.callerRunTaskCount);
      }
      if (struct.isSetAbortedTaskCount()) {
        oprot.writeI64(struct.abortedTaskCount);
      }
      if (struct.isSetDiscardedTaskCount()) {
        oprot.writeI64(struct.discardedTaskCount);
      }
      if (struct.isSetDiscardedOldestTaskCount()) {
        oprot.writeI64(struct.discardedOldestTaskCount);
      }
      if (struct.isSetExceptionTaskCount()) {
        oprot.writeI64(struct.exceptionTaskCount);
      }
      if (struct.isSetSuccessfulTaskCount()) {
        oprot.writeI64(struct.successfulTaskCount);
      }
      if (struct.isSetTotalTaskCount()) {
        oprot.writeI64(struct.totalTaskCount);
      }
      if (struct.isSetActiveThreads()) {
        oprot.writeI64(struct.activeThreads);
      }
      if (struct.isSetCurrentPoolSize()) {
        oprot.writeI64(struct.currentPoolSize);
      }
      if (struct.isSetMaxPoolSize()) {
        oprot.writeI64(struct.maxPoolSize);
      }
      if (struct.isSetLargestPoolSize()) {
        oprot.writeI64(struct.largestPoolSize);
      }
      if (struct.isSetQueuedTaskCount()) {
        oprot.writeI64(struct.queuedTaskCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThreadPoolMetricMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        struct.interval = iprot.readI32();
        struct.setIntervalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.executorClass = iprot.readString();
        struct.setExecutorClassIsSet(true);
      }
      if (incoming.get(3)) {
        struct.poolName = iprot.readString();
        struct.setPoolNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.callerRunTaskCount = iprot.readI64();
        struct.setCallerRunTaskCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.abortedTaskCount = iprot.readI64();
        struct.setAbortedTaskCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.discardedTaskCount = iprot.readI64();
        struct.setDiscardedTaskCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.discardedOldestTaskCount = iprot.readI64();
        struct.setDiscardedOldestTaskCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.exceptionTaskCount = iprot.readI64();
        struct.setExceptionTaskCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.successfulTaskCount = iprot.readI64();
        struct.setSuccessfulTaskCountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.totalTaskCount = iprot.readI64();
        struct.setTotalTaskCountIsSet(true);
      }
      if (incoming.get(11)) {
        struct.activeThreads = iprot.readI64();
        struct.setActiveThreadsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.currentPoolSize = iprot.readI64();
        struct.setCurrentPoolSizeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.maxPoolSize = iprot.readI64();
        struct.setMaxPoolSizeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.largestPoolSize = iprot.readI64();
        struct.setLargestPoolSizeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.queuedTaskCount = iprot.readI64();
        struct.setQueuedTaskCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

