/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sbss.bithon.agent.rpc.thrift.service.trace;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-05")
public class TraceSpan implements org.apache.thrift.TBase<TraceSpan, TraceSpan._Fields>, java.io.Serializable, Cloneable, Comparable<TraceSpan> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TraceSpan");

  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spanId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PARENT_SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentSpanId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PARENT_APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("parentAppName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField KIND_FIELD_DESC = new org.apache.thrift.protocol.TField("kind", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CLAZZ_FIELD_DESC = new org.apache.thrift.protocol.TField("clazz", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("method", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.MAP, (short)14);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)16);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TraceSpanStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TraceSpanTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String traceId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String spanId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String parentSpanId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String parentAppName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String kind; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String clazz; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String method; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> tags; // required
  public long startTime; // required
  public long endTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRACE_ID((short)6, "traceId"),
    SPAN_ID((short)7, "spanId"),
    PARENT_SPAN_ID((short)8, "parentSpanId"),
    PARENT_APP_NAME((short)9, "parentAppName"),
    KIND((short)10, "kind"),
    NAME((short)11, "name"),
    CLAZZ((short)12, "clazz"),
    METHOD((short)13, "method"),
    TAGS((short)14, "tags"),
    START_TIME((short)15, "startTime"),
    END_TIME((short)16, "endTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 6: // TRACE_ID
          return TRACE_ID;
        case 7: // SPAN_ID
          return SPAN_ID;
        case 8: // PARENT_SPAN_ID
          return PARENT_SPAN_ID;
        case 9: // PARENT_APP_NAME
          return PARENT_APP_NAME;
        case 10: // KIND
          return KIND;
        case 11: // NAME
          return NAME;
        case 12: // CLAZZ
          return CLAZZ;
        case 13: // METHOD
          return METHOD;
        case 14: // TAGS
          return TAGS;
        case 15: // START_TIME
          return START_TIME;
        case 16: // END_TIME
          return END_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTTIME_ISSET_ID = 0;
  private static final int __ENDTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("spanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("parentSpanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("parentAppName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KIND, new org.apache.thrift.meta_data.FieldMetaData("kind", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLAZZ, new org.apache.thrift.meta_data.FieldMetaData("clazz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METHOD, new org.apache.thrift.meta_data.FieldMetaData("method", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TraceSpan.class, metaDataMap);
  }

  public TraceSpan() {
  }

  public TraceSpan(
    java.lang.String traceId,
    java.lang.String spanId,
    java.lang.String parentSpanId,
    java.lang.String parentAppName,
    java.lang.String kind,
    java.lang.String name,
    java.lang.String clazz,
    java.lang.String method,
    java.util.Map<java.lang.String,java.lang.String> tags,
    long startTime,
    long endTime)
  {
    this();
    this.traceId = traceId;
    this.spanId = spanId;
    this.parentSpanId = parentSpanId;
    this.parentAppName = parentAppName;
    this.kind = kind;
    this.name = name;
    this.clazz = clazz;
    this.method = method;
    this.tags = tags;
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TraceSpan(TraceSpan other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTraceId()) {
      this.traceId = other.traceId;
    }
    if (other.isSetSpanId()) {
      this.spanId = other.spanId;
    }
    if (other.isSetParentSpanId()) {
      this.parentSpanId = other.parentSpanId;
    }
    if (other.isSetParentAppName()) {
      this.parentAppName = other.parentAppName;
    }
    if (other.isSetKind()) {
      this.kind = other.kind;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetClazz()) {
      this.clazz = other.clazz;
    }
    if (other.isSetMethod()) {
      this.method = other.method;
    }
    if (other.isSetTags()) {
      java.util.Map<java.lang.String,java.lang.String> __this__tags = new java.util.HashMap<java.lang.String,java.lang.String>(other.tags);
      this.tags = __this__tags;
    }
    this.startTime = other.startTime;
    this.endTime = other.endTime;
  }

  public TraceSpan deepCopy() {
    return new TraceSpan(this);
  }

  @Override
  public void clear() {
    this.traceId = null;
    this.spanId = null;
    this.parentSpanId = null;
    this.parentAppName = null;
    this.kind = null;
    this.name = null;
    this.clazz = null;
    this.method = null;
    this.tags = null;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTraceId() {
    return this.traceId;
  }

  public TraceSpan setTraceId(@org.apache.thrift.annotation.Nullable java.lang.String traceId) {
    this.traceId = traceId;
    return this;
  }

  public void unsetTraceId() {
    this.traceId = null;
  }

  /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceId() {
    return this.traceId != null;
  }

  public void setTraceIdIsSet(boolean value) {
    if (!value) {
      this.traceId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSpanId() {
    return this.spanId;
  }

  public TraceSpan setSpanId(@org.apache.thrift.annotation.Nullable java.lang.String spanId) {
    this.spanId = spanId;
    return this;
  }

  public void unsetSpanId() {
    this.spanId = null;
  }

  /** Returns true if field spanId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanId() {
    return this.spanId != null;
  }

  public void setSpanIdIsSet(boolean value) {
    if (!value) {
      this.spanId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getParentSpanId() {
    return this.parentSpanId;
  }

  public TraceSpan setParentSpanId(@org.apache.thrift.annotation.Nullable java.lang.String parentSpanId) {
    this.parentSpanId = parentSpanId;
    return this;
  }

  public void unsetParentSpanId() {
    this.parentSpanId = null;
  }

  /** Returns true if field parentSpanId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentSpanId() {
    return this.parentSpanId != null;
  }

  public void setParentSpanIdIsSet(boolean value) {
    if (!value) {
      this.parentSpanId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getParentAppName() {
    return this.parentAppName;
  }

  public TraceSpan setParentAppName(@org.apache.thrift.annotation.Nullable java.lang.String parentAppName) {
    this.parentAppName = parentAppName;
    return this;
  }

  public void unsetParentAppName() {
    this.parentAppName = null;
  }

  /** Returns true if field parentAppName is set (has been assigned a value) and false otherwise */
  public boolean isSetParentAppName() {
    return this.parentAppName != null;
  }

  public void setParentAppNameIsSet(boolean value) {
    if (!value) {
      this.parentAppName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getKind() {
    return this.kind;
  }

  public TraceSpan setKind(@org.apache.thrift.annotation.Nullable java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  public void unsetKind() {
    this.kind = null;
  }

  /** Returns true if field kind is set (has been assigned a value) and false otherwise */
  public boolean isSetKind() {
    return this.kind != null;
  }

  public void setKindIsSet(boolean value) {
    if (!value) {
      this.kind = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public TraceSpan setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getClazz() {
    return this.clazz;
  }

  public TraceSpan setClazz(@org.apache.thrift.annotation.Nullable java.lang.String clazz) {
    this.clazz = clazz;
    return this;
  }

  public void unsetClazz() {
    this.clazz = null;
  }

  /** Returns true if field clazz is set (has been assigned a value) and false otherwise */
  public boolean isSetClazz() {
    return this.clazz != null;
  }

  public void setClazzIsSet(boolean value) {
    if (!value) {
      this.clazz = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMethod() {
    return this.method;
  }

  public TraceSpan setMethod(@org.apache.thrift.annotation.Nullable java.lang.String method) {
    this.method = method;
    return this;
  }

  public void unsetMethod() {
    this.method = null;
  }

  /** Returns true if field method is set (has been assigned a value) and false otherwise */
  public boolean isSetMethod() {
    return this.method != null;
  }

  public void setMethodIsSet(boolean value) {
    if (!value) {
      this.method = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public void putToTags(java.lang.String key, java.lang.String val) {
    if (this.tags == null) {
      this.tags = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.tags.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getTags() {
    return this.tags;
  }

  public TraceSpan setTags(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public long getStartTime() {
    return this.startTime;
  }

  public TraceSpan setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public TraceSpan setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TRACE_ID:
      if (value == null) {
        unsetTraceId();
      } else {
        setTraceId((java.lang.String)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpanId();
      } else {
        setSpanId((java.lang.String)value);
      }
      break;

    case PARENT_SPAN_ID:
      if (value == null) {
        unsetParentSpanId();
      } else {
        setParentSpanId((java.lang.String)value);
      }
      break;

    case PARENT_APP_NAME:
      if (value == null) {
        unsetParentAppName();
      } else {
        setParentAppName((java.lang.String)value);
      }
      break;

    case KIND:
      if (value == null) {
        unsetKind();
      } else {
        setKind((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case CLAZZ:
      if (value == null) {
        unsetClazz();
      } else {
        setClazz((java.lang.String)value);
      }
      break;

    case METHOD:
      if (value == null) {
        unsetMethod();
      } else {
        setMethod((java.lang.String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((java.lang.Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE_ID:
      return getTraceId();

    case SPAN_ID:
      return getSpanId();

    case PARENT_SPAN_ID:
      return getParentSpanId();

    case PARENT_APP_NAME:
      return getParentAppName();

    case KIND:
      return getKind();

    case NAME:
      return getName();

    case CLAZZ:
      return getClazz();

    case METHOD:
      return getMethod();

    case TAGS:
      return getTags();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TRACE_ID:
      return isSetTraceId();
    case SPAN_ID:
      return isSetSpanId();
    case PARENT_SPAN_ID:
      return isSetParentSpanId();
    case PARENT_APP_NAME:
      return isSetParentAppName();
    case KIND:
      return isSetKind();
    case NAME:
      return isSetName();
    case CLAZZ:
      return isSetClazz();
    case METHOD:
      return isSetMethod();
    case TAGS:
      return isSetTags();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TraceSpan)
      return this.equals((TraceSpan)that);
    return false;
  }

  public boolean equals(TraceSpan that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_traceId = true && this.isSetTraceId();
    boolean that_present_traceId = true && that.isSetTraceId();
    if (this_present_traceId || that_present_traceId) {
      if (!(this_present_traceId && that_present_traceId))
        return false;
      if (!this.traceId.equals(that.traceId))
        return false;
    }

    boolean this_present_spanId = true && this.isSetSpanId();
    boolean that_present_spanId = true && that.isSetSpanId();
    if (this_present_spanId || that_present_spanId) {
      if (!(this_present_spanId && that_present_spanId))
        return false;
      if (!this.spanId.equals(that.spanId))
        return false;
    }

    boolean this_present_parentSpanId = true && this.isSetParentSpanId();
    boolean that_present_parentSpanId = true && that.isSetParentSpanId();
    if (this_present_parentSpanId || that_present_parentSpanId) {
      if (!(this_present_parentSpanId && that_present_parentSpanId))
        return false;
      if (!this.parentSpanId.equals(that.parentSpanId))
        return false;
    }

    boolean this_present_parentAppName = true && this.isSetParentAppName();
    boolean that_present_parentAppName = true && that.isSetParentAppName();
    if (this_present_parentAppName || that_present_parentAppName) {
      if (!(this_present_parentAppName && that_present_parentAppName))
        return false;
      if (!this.parentAppName.equals(that.parentAppName))
        return false;
    }

    boolean this_present_kind = true && this.isSetKind();
    boolean that_present_kind = true && that.isSetKind();
    if (this_present_kind || that_present_kind) {
      if (!(this_present_kind && that_present_kind))
        return false;
      if (!this.kind.equals(that.kind))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_clazz = true && this.isSetClazz();
    boolean that_present_clazz = true && that.isSetClazz();
    if (this_present_clazz || that_present_clazz) {
      if (!(this_present_clazz && that_present_clazz))
        return false;
      if (!this.clazz.equals(that.clazz))
        return false;
    }

    boolean this_present_method = true && this.isSetMethod();
    boolean that_present_method = true && that.isSetMethod();
    if (this_present_method || that_present_method) {
      if (!(this_present_method && that_present_method))
        return false;
      if (!this.method.equals(that.method))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTraceId()) ? 131071 : 524287);
    if (isSetTraceId())
      hashCode = hashCode * 8191 + traceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpanId()) ? 131071 : 524287);
    if (isSetSpanId())
      hashCode = hashCode * 8191 + spanId.hashCode();

    hashCode = hashCode * 8191 + ((isSetParentSpanId()) ? 131071 : 524287);
    if (isSetParentSpanId())
      hashCode = hashCode * 8191 + parentSpanId.hashCode();

    hashCode = hashCode * 8191 + ((isSetParentAppName()) ? 131071 : 524287);
    if (isSetParentAppName())
      hashCode = hashCode * 8191 + parentAppName.hashCode();

    hashCode = hashCode * 8191 + ((isSetKind()) ? 131071 : 524287);
    if (isSetKind())
      hashCode = hashCode * 8191 + kind.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetClazz()) ? 131071 : 524287);
    if (isSetClazz())
      hashCode = hashCode * 8191 + clazz.hashCode();

    hashCode = hashCode * 8191 + ((isSetMethod()) ? 131071 : 524287);
    if (isSetMethod())
      hashCode = hashCode * 8191 + method.hashCode();

    hashCode = hashCode * 8191 + ((isSetTags()) ? 131071 : 524287);
    if (isSetTags())
      hashCode = hashCode * 8191 + tags.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(endTime);

    return hashCode;
  }

  @Override
  public int compareTo(TraceSpan other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTraceId()).compareTo(other.isSetTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceId, other.traceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSpanId()).compareTo(other.isSetSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanId, other.spanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParentSpanId()).compareTo(other.isSetParentSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentSpanId, other.parentSpanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParentAppName()).compareTo(other.isSetParentAppName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentAppName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentAppName, other.parentAppName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKind()).compareTo(other.isSetKind());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKind()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kind, other.kind);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClazz()).compareTo(other.isSetClazz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClazz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clazz, other.clazz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMethod()).compareTo(other.isSetMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.method, other.method);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TraceSpan(");
    boolean first = true;

    sb.append("traceId:");
    if (this.traceId == null) {
      sb.append("null");
    } else {
      sb.append(this.traceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanId:");
    if (this.spanId == null) {
      sb.append("null");
    } else {
      sb.append(this.spanId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentSpanId:");
    if (this.parentSpanId == null) {
      sb.append("null");
    } else {
      sb.append(this.parentSpanId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentAppName:");
    if (this.parentAppName == null) {
      sb.append("null");
    } else {
      sb.append(this.parentAppName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("kind:");
    if (this.kind == null) {
      sb.append("null");
    } else {
      sb.append(this.kind);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clazz:");
    if (this.clazz == null) {
      sb.append("null");
    } else {
      sb.append(this.clazz);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("method:");
    if (this.method == null) {
      sb.append("null");
    } else {
      sb.append(this.method);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tags:");
    if (this.tags == null) {
      sb.append("null");
    } else {
      sb.append(this.tags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TraceSpanStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TraceSpanStandardScheme getScheme() {
      return new TraceSpanStandardScheme();
    }
  }

  private static class TraceSpanStandardScheme extends org.apache.thrift.scheme.StandardScheme<TraceSpan> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TraceSpan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 6: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traceId = iprot.readString();
              struct.setTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spanId = iprot.readString();
              struct.setSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARENT_SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentSpanId = iprot.readString();
              struct.setParentSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PARENT_APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentAppName = iprot.readString();
              struct.setParentAppNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // KIND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kind = iprot.readString();
              struct.setKindIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CLAZZ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clazz = iprot.readString();
              struct.setClazzIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.method = iprot.readString();
              struct.setMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.tags = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                @org.apache.thrift.annotation.Nullable java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.tags.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TraceSpan struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.traceId != null) {
        oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
        oprot.writeString(struct.traceId);
        oprot.writeFieldEnd();
      }
      if (struct.spanId != null) {
        oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
        oprot.writeString(struct.spanId);
        oprot.writeFieldEnd();
      }
      if (struct.parentSpanId != null) {
        oprot.writeFieldBegin(PARENT_SPAN_ID_FIELD_DESC);
        oprot.writeString(struct.parentSpanId);
        oprot.writeFieldEnd();
      }
      if (struct.parentAppName != null) {
        oprot.writeFieldBegin(PARENT_APP_NAME_FIELD_DESC);
        oprot.writeString(struct.parentAppName);
        oprot.writeFieldEnd();
      }
      if (struct.kind != null) {
        oprot.writeFieldBegin(KIND_FIELD_DESC);
        oprot.writeString(struct.kind);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.clazz != null) {
        oprot.writeFieldBegin(CLAZZ_FIELD_DESC);
        oprot.writeString(struct.clazz);
        oprot.writeFieldEnd();
      }
      if (struct.method != null) {
        oprot.writeFieldBegin(METHOD_FIELD_DESC);
        oprot.writeString(struct.method);
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        oprot.writeFieldBegin(TAGS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 : struct.tags.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TraceSpanTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TraceSpanTupleScheme getScheme() {
      return new TraceSpanTupleScheme();
    }
  }

  private static class TraceSpanTupleScheme extends org.apache.thrift.scheme.TupleScheme<TraceSpan> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TraceSpan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTraceId()) {
        optionals.set(0);
      }
      if (struct.isSetSpanId()) {
        optionals.set(1);
      }
      if (struct.isSetParentSpanId()) {
        optionals.set(2);
      }
      if (struct.isSetParentAppName()) {
        optionals.set(3);
      }
      if (struct.isSetKind()) {
        optionals.set(4);
      }
      if (struct.isSetName()) {
        optionals.set(5);
      }
      if (struct.isSetClazz()) {
        optionals.set(6);
      }
      if (struct.isSetMethod()) {
        optionals.set(7);
      }
      if (struct.isSetTags()) {
        optionals.set(8);
      }
      if (struct.isSetStartTime()) {
        optionals.set(9);
      }
      if (struct.isSetEndTime()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetTraceId()) {
        oprot.writeString(struct.traceId);
      }
      if (struct.isSetSpanId()) {
        oprot.writeString(struct.spanId);
      }
      if (struct.isSetParentSpanId()) {
        oprot.writeString(struct.parentSpanId);
      }
      if (struct.isSetParentAppName()) {
        oprot.writeString(struct.parentAppName);
      }
      if (struct.isSetKind()) {
        oprot.writeString(struct.kind);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetClazz()) {
        oprot.writeString(struct.clazz);
      }
      if (struct.isSetMethod()) {
        oprot.writeString(struct.method);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 : struct.tags.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TraceSpan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.traceId = iprot.readString();
        struct.setTraceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.spanId = iprot.readString();
        struct.setSpanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.parentSpanId = iprot.readString();
        struct.setParentSpanIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.parentAppName = iprot.readString();
        struct.setParentAppNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.kind = iprot.readString();
        struct.setKindIsSet(true);
      }
      if (incoming.get(5)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.clazz = iprot.readString();
        struct.setClazzIsSet(true);
      }
      if (incoming.get(7)) {
        struct.method = iprot.readString();
        struct.setMethodIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key7;
          @org.apache.thrift.annotation.Nullable java.lang.String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.tags.put(_key7, _val8);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

