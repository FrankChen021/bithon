/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sbss.bithon.agent.rpc.thrift.service.metric.message;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-10")
public class JdbcEntity implements org.apache.thrift.TBase<JdbcEntity, JdbcEntity._Fields>, java.io.Serializable, Cloneable, Comparable<JdbcEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JdbcEntity");

  private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DRIVER_FIELD_DESC = new org.apache.thrift.protocol.TField("driver", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ACTIVE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("activeCount", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("createCount", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField DESTROY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("destroyCount", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField POOLING_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("poolingCount", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField POOLING_PEAK_FIELD_DESC = new org.apache.thrift.protocol.TField("poolingPeak", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField ACTIVE_PEAK_FIELD_DESC = new org.apache.thrift.protocol.TField("activePeak", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField LOGIC_CONNECT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("logicConnectCount", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField LOGIC_CLOSE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("logicCloseCount", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField WAIT_THREAD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("waitThreadCount", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField CREATE_ERROR_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("createErrorCount", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField EXECUTE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("executeCount", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField COMMIT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("commitCount", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField ROLLBACK_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("rollbackCount", org.apache.thrift.protocol.TType.I64, (short)22);
  private static final org.apache.thrift.protocol.TField START_TRANSACTION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("startTransactionCount", org.apache.thrift.protocol.TType.I64, (short)23);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JdbcEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JdbcEntityTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String uri; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String driver; // required
  public long activeCount; // required
  public long createCount; // optional
  public long destroyCount; // optional
  public long poolingCount; // optional
  public long poolingPeak; // optional
  public long activePeak; // optional
  public long logicConnectCount; // optional
  public long logicCloseCount; // optional
  public long waitThreadCount; // optional
  public long createErrorCount; // optional
  public long executeCount; // optional
  public long commitCount; // optional
  public long rollbackCount; // optional
  public long startTransactionCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    URI((short)7, "uri"),
    DRIVER((short)8, "driver"),
    ACTIVE_COUNT((short)9, "activeCount"),
    CREATE_COUNT((short)11, "createCount"),
    DESTROY_COUNT((short)12, "destroyCount"),
    POOLING_COUNT((short)13, "poolingCount"),
    POOLING_PEAK((short)14, "poolingPeak"),
    ACTIVE_PEAK((short)15, "activePeak"),
    LOGIC_CONNECT_COUNT((short)16, "logicConnectCount"),
    LOGIC_CLOSE_COUNT((short)17, "logicCloseCount"),
    WAIT_THREAD_COUNT((short)18, "waitThreadCount"),
    CREATE_ERROR_COUNT((short)19, "createErrorCount"),
    EXECUTE_COUNT((short)20, "executeCount"),
    COMMIT_COUNT((short)21, "commitCount"),
    ROLLBACK_COUNT((short)22, "rollbackCount"),
    START_TRANSACTION_COUNT((short)23, "startTransactionCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 7: // URI
          return URI;
        case 8: // DRIVER
          return DRIVER;
        case 9: // ACTIVE_COUNT
          return ACTIVE_COUNT;
        case 11: // CREATE_COUNT
          return CREATE_COUNT;
        case 12: // DESTROY_COUNT
          return DESTROY_COUNT;
        case 13: // POOLING_COUNT
          return POOLING_COUNT;
        case 14: // POOLING_PEAK
          return POOLING_PEAK;
        case 15: // ACTIVE_PEAK
          return ACTIVE_PEAK;
        case 16: // LOGIC_CONNECT_COUNT
          return LOGIC_CONNECT_COUNT;
        case 17: // LOGIC_CLOSE_COUNT
          return LOGIC_CLOSE_COUNT;
        case 18: // WAIT_THREAD_COUNT
          return WAIT_THREAD_COUNT;
        case 19: // CREATE_ERROR_COUNT
          return CREATE_ERROR_COUNT;
        case 20: // EXECUTE_COUNT
          return EXECUTE_COUNT;
        case 21: // COMMIT_COUNT
          return COMMIT_COUNT;
        case 22: // ROLLBACK_COUNT
          return ROLLBACK_COUNT;
        case 23: // START_TRANSACTION_COUNT
          return START_TRANSACTION_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACTIVECOUNT_ISSET_ID = 0;
  private static final int __CREATECOUNT_ISSET_ID = 1;
  private static final int __DESTROYCOUNT_ISSET_ID = 2;
  private static final int __POOLINGCOUNT_ISSET_ID = 3;
  private static final int __POOLINGPEAK_ISSET_ID = 4;
  private static final int __ACTIVEPEAK_ISSET_ID = 5;
  private static final int __LOGICCONNECTCOUNT_ISSET_ID = 6;
  private static final int __LOGICCLOSECOUNT_ISSET_ID = 7;
  private static final int __WAITTHREADCOUNT_ISSET_ID = 8;
  private static final int __CREATEERRORCOUNT_ISSET_ID = 9;
  private static final int __EXECUTECOUNT_ISSET_ID = 10;
  private static final int __COMMITCOUNT_ISSET_ID = 11;
  private static final int __ROLLBACKCOUNT_ISSET_ID = 12;
  private static final int __STARTTRANSACTIONCOUNT_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CREATE_COUNT,_Fields.DESTROY_COUNT,_Fields.POOLING_COUNT,_Fields.POOLING_PEAK,_Fields.ACTIVE_PEAK,_Fields.LOGIC_CONNECT_COUNT,_Fields.LOGIC_CLOSE_COUNT,_Fields.WAIT_THREAD_COUNT,_Fields.CREATE_ERROR_COUNT,_Fields.EXECUTE_COUNT,_Fields.COMMIT_COUNT,_Fields.ROLLBACK_COUNT,_Fields.START_TRANSACTION_COUNT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRIVER, new org.apache.thrift.meta_data.FieldMetaData("driver", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("activeCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("createCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DESTROY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("destroyCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POOLING_COUNT, new org.apache.thrift.meta_data.FieldMetaData("poolingCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POOLING_PEAK, new org.apache.thrift.meta_data.FieldMetaData("poolingPeak", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTIVE_PEAK, new org.apache.thrift.meta_data.FieldMetaData("activePeak", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOGIC_CONNECT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("logicConnectCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOGIC_CLOSE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("logicCloseCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WAIT_THREAD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("waitThreadCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_ERROR_COUNT, new org.apache.thrift.meta_data.FieldMetaData("createErrorCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXECUTE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("executeCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMIT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("commitCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROLLBACK_COUNT, new org.apache.thrift.meta_data.FieldMetaData("rollbackCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TRANSACTION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("startTransactionCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JdbcEntity.class, metaDataMap);
  }

  public JdbcEntity() {
  }

  public JdbcEntity(
    java.lang.String uri,
    java.lang.String driver,
    long activeCount)
  {
    this();
    this.uri = uri;
    this.driver = driver;
    this.activeCount = activeCount;
    setActiveCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JdbcEntity(JdbcEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUri()) {
      this.uri = other.uri;
    }
    if (other.isSetDriver()) {
      this.driver = other.driver;
    }
    this.activeCount = other.activeCount;
    this.createCount = other.createCount;
    this.destroyCount = other.destroyCount;
    this.poolingCount = other.poolingCount;
    this.poolingPeak = other.poolingPeak;
    this.activePeak = other.activePeak;
    this.logicConnectCount = other.logicConnectCount;
    this.logicCloseCount = other.logicCloseCount;
    this.waitThreadCount = other.waitThreadCount;
    this.createErrorCount = other.createErrorCount;
    this.executeCount = other.executeCount;
    this.commitCount = other.commitCount;
    this.rollbackCount = other.rollbackCount;
    this.startTransactionCount = other.startTransactionCount;
  }

  public JdbcEntity deepCopy() {
    return new JdbcEntity(this);
  }

  @Override
  public void clear() {
    this.uri = null;
    this.driver = null;
    setActiveCountIsSet(false);
    this.activeCount = 0;
    setCreateCountIsSet(false);
    this.createCount = 0;
    setDestroyCountIsSet(false);
    this.destroyCount = 0;
    setPoolingCountIsSet(false);
    this.poolingCount = 0;
    setPoolingPeakIsSet(false);
    this.poolingPeak = 0;
    setActivePeakIsSet(false);
    this.activePeak = 0;
    setLogicConnectCountIsSet(false);
    this.logicConnectCount = 0;
    setLogicCloseCountIsSet(false);
    this.logicCloseCount = 0;
    setWaitThreadCountIsSet(false);
    this.waitThreadCount = 0;
    setCreateErrorCountIsSet(false);
    this.createErrorCount = 0;
    setExecuteCountIsSet(false);
    this.executeCount = 0;
    setCommitCountIsSet(false);
    this.commitCount = 0;
    setRollbackCountIsSet(false);
    this.rollbackCount = 0;
    setStartTransactionCountIsSet(false);
    this.startTransactionCount = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUri() {
    return this.uri;
  }

  public JdbcEntity setUri(@org.apache.thrift.annotation.Nullable java.lang.String uri) {
    this.uri = uri;
    return this;
  }

  public void unsetUri() {
    this.uri = null;
  }

  /** Returns true if field uri is set (has been assigned a value) and false otherwise */
  public boolean isSetUri() {
    return this.uri != null;
  }

  public void setUriIsSet(boolean value) {
    if (!value) {
      this.uri = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDriver() {
    return this.driver;
  }

  public JdbcEntity setDriver(@org.apache.thrift.annotation.Nullable java.lang.String driver) {
    this.driver = driver;
    return this;
  }

  public void unsetDriver() {
    this.driver = null;
  }

  /** Returns true if field driver is set (has been assigned a value) and false otherwise */
  public boolean isSetDriver() {
    return this.driver != null;
  }

  public void setDriverIsSet(boolean value) {
    if (!value) {
      this.driver = null;
    }
  }

  public long getActiveCount() {
    return this.activeCount;
  }

  public JdbcEntity setActiveCount(long activeCount) {
    this.activeCount = activeCount;
    setActiveCountIsSet(true);
    return this;
  }

  public void unsetActiveCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACTIVECOUNT_ISSET_ID);
  }

  /** Returns true if field activeCount is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACTIVECOUNT_ISSET_ID);
  }

  public void setActiveCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACTIVECOUNT_ISSET_ID, value);
  }

  public long getCreateCount() {
    return this.createCount;
  }

  public JdbcEntity setCreateCount(long createCount) {
    this.createCount = createCount;
    setCreateCountIsSet(true);
    return this;
  }

  public void unsetCreateCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATECOUNT_ISSET_ID);
  }

  /** Returns true if field createCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATECOUNT_ISSET_ID);
  }

  public void setCreateCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATECOUNT_ISSET_ID, value);
  }

  public long getDestroyCount() {
    return this.destroyCount;
  }

  public JdbcEntity setDestroyCount(long destroyCount) {
    this.destroyCount = destroyCount;
    setDestroyCountIsSet(true);
    return this;
  }

  public void unsetDestroyCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DESTROYCOUNT_ISSET_ID);
  }

  /** Returns true if field destroyCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDestroyCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DESTROYCOUNT_ISSET_ID);
  }

  public void setDestroyCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DESTROYCOUNT_ISSET_ID, value);
  }

  public long getPoolingCount() {
    return this.poolingCount;
  }

  public JdbcEntity setPoolingCount(long poolingCount) {
    this.poolingCount = poolingCount;
    setPoolingCountIsSet(true);
    return this;
  }

  public void unsetPoolingCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POOLINGCOUNT_ISSET_ID);
  }

  /** Returns true if field poolingCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolingCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POOLINGCOUNT_ISSET_ID);
  }

  public void setPoolingCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POOLINGCOUNT_ISSET_ID, value);
  }

  public long getPoolingPeak() {
    return this.poolingPeak;
  }

  public JdbcEntity setPoolingPeak(long poolingPeak) {
    this.poolingPeak = poolingPeak;
    setPoolingPeakIsSet(true);
    return this;
  }

  public void unsetPoolingPeak() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POOLINGPEAK_ISSET_ID);
  }

  /** Returns true if field poolingPeak is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolingPeak() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POOLINGPEAK_ISSET_ID);
  }

  public void setPoolingPeakIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POOLINGPEAK_ISSET_ID, value);
  }

  public long getActivePeak() {
    return this.activePeak;
  }

  public JdbcEntity setActivePeak(long activePeak) {
    this.activePeak = activePeak;
    setActivePeakIsSet(true);
    return this;
  }

  public void unsetActivePeak() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACTIVEPEAK_ISSET_ID);
  }

  /** Returns true if field activePeak is set (has been assigned a value) and false otherwise */
  public boolean isSetActivePeak() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACTIVEPEAK_ISSET_ID);
  }

  public void setActivePeakIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACTIVEPEAK_ISSET_ID, value);
  }

  public long getLogicConnectCount() {
    return this.logicConnectCount;
  }

  public JdbcEntity setLogicConnectCount(long logicConnectCount) {
    this.logicConnectCount = logicConnectCount;
    setLogicConnectCountIsSet(true);
    return this;
  }

  public void unsetLogicConnectCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOGICCONNECTCOUNT_ISSET_ID);
  }

  /** Returns true if field logicConnectCount is set (has been assigned a value) and false otherwise */
  public boolean isSetLogicConnectCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOGICCONNECTCOUNT_ISSET_ID);
  }

  public void setLogicConnectCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOGICCONNECTCOUNT_ISSET_ID, value);
  }

  public long getLogicCloseCount() {
    return this.logicCloseCount;
  }

  public JdbcEntity setLogicCloseCount(long logicCloseCount) {
    this.logicCloseCount = logicCloseCount;
    setLogicCloseCountIsSet(true);
    return this;
  }

  public void unsetLogicCloseCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOGICCLOSECOUNT_ISSET_ID);
  }

  /** Returns true if field logicCloseCount is set (has been assigned a value) and false otherwise */
  public boolean isSetLogicCloseCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOGICCLOSECOUNT_ISSET_ID);
  }

  public void setLogicCloseCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOGICCLOSECOUNT_ISSET_ID, value);
  }

  public long getWaitThreadCount() {
    return this.waitThreadCount;
  }

  public JdbcEntity setWaitThreadCount(long waitThreadCount) {
    this.waitThreadCount = waitThreadCount;
    setWaitThreadCountIsSet(true);
    return this;
  }

  public void unsetWaitThreadCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WAITTHREADCOUNT_ISSET_ID);
  }

  /** Returns true if field waitThreadCount is set (has been assigned a value) and false otherwise */
  public boolean isSetWaitThreadCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WAITTHREADCOUNT_ISSET_ID);
  }

  public void setWaitThreadCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WAITTHREADCOUNT_ISSET_ID, value);
  }

  public long getCreateErrorCount() {
    return this.createErrorCount;
  }

  public JdbcEntity setCreateErrorCount(long createErrorCount) {
    this.createErrorCount = createErrorCount;
    setCreateErrorCountIsSet(true);
    return this;
  }

  public void unsetCreateErrorCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATEERRORCOUNT_ISSET_ID);
  }

  /** Returns true if field createErrorCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateErrorCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATEERRORCOUNT_ISSET_ID);
  }

  public void setCreateErrorCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATEERRORCOUNT_ISSET_ID, value);
  }

  public long getExecuteCount() {
    return this.executeCount;
  }

  public JdbcEntity setExecuteCount(long executeCount) {
    this.executeCount = executeCount;
    setExecuteCountIsSet(true);
    return this;
  }

  public void unsetExecuteCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXECUTECOUNT_ISSET_ID);
  }

  /** Returns true if field executeCount is set (has been assigned a value) and false otherwise */
  public boolean isSetExecuteCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXECUTECOUNT_ISSET_ID);
  }

  public void setExecuteCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXECUTECOUNT_ISSET_ID, value);
  }

  public long getCommitCount() {
    return this.commitCount;
  }

  public JdbcEntity setCommitCount(long commitCount) {
    this.commitCount = commitCount;
    setCommitCountIsSet(true);
    return this;
  }

  public void unsetCommitCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMITCOUNT_ISSET_ID);
  }

  /** Returns true if field commitCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMITCOUNT_ISSET_ID);
  }

  public void setCommitCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMITCOUNT_ISSET_ID, value);
  }

  public long getRollbackCount() {
    return this.rollbackCount;
  }

  public JdbcEntity setRollbackCount(long rollbackCount) {
    this.rollbackCount = rollbackCount;
    setRollbackCountIsSet(true);
    return this;
  }

  public void unsetRollbackCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROLLBACKCOUNT_ISSET_ID);
  }

  /** Returns true if field rollbackCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRollbackCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROLLBACKCOUNT_ISSET_ID);
  }

  public void setRollbackCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROLLBACKCOUNT_ISSET_ID, value);
  }

  public long getStartTransactionCount() {
    return this.startTransactionCount;
  }

  public JdbcEntity setStartTransactionCount(long startTransactionCount) {
    this.startTransactionCount = startTransactionCount;
    setStartTransactionCountIsSet(true);
    return this;
  }

  public void unsetStartTransactionCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTTRANSACTIONCOUNT_ISSET_ID);
  }

  /** Returns true if field startTransactionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTransactionCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTTRANSACTIONCOUNT_ISSET_ID);
  }

  public void setStartTransactionCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTTRANSACTIONCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case URI:
      if (value == null) {
        unsetUri();
      } else {
        setUri((java.lang.String)value);
      }
      break;

    case DRIVER:
      if (value == null) {
        unsetDriver();
      } else {
        setDriver((java.lang.String)value);
      }
      break;

    case ACTIVE_COUNT:
      if (value == null) {
        unsetActiveCount();
      } else {
        setActiveCount((java.lang.Long)value);
      }
      break;

    case CREATE_COUNT:
      if (value == null) {
        unsetCreateCount();
      } else {
        setCreateCount((java.lang.Long)value);
      }
      break;

    case DESTROY_COUNT:
      if (value == null) {
        unsetDestroyCount();
      } else {
        setDestroyCount((java.lang.Long)value);
      }
      break;

    case POOLING_COUNT:
      if (value == null) {
        unsetPoolingCount();
      } else {
        setPoolingCount((java.lang.Long)value);
      }
      break;

    case POOLING_PEAK:
      if (value == null) {
        unsetPoolingPeak();
      } else {
        setPoolingPeak((java.lang.Long)value);
      }
      break;

    case ACTIVE_PEAK:
      if (value == null) {
        unsetActivePeak();
      } else {
        setActivePeak((java.lang.Long)value);
      }
      break;

    case LOGIC_CONNECT_COUNT:
      if (value == null) {
        unsetLogicConnectCount();
      } else {
        setLogicConnectCount((java.lang.Long)value);
      }
      break;

    case LOGIC_CLOSE_COUNT:
      if (value == null) {
        unsetLogicCloseCount();
      } else {
        setLogicCloseCount((java.lang.Long)value);
      }
      break;

    case WAIT_THREAD_COUNT:
      if (value == null) {
        unsetWaitThreadCount();
      } else {
        setWaitThreadCount((java.lang.Long)value);
      }
      break;

    case CREATE_ERROR_COUNT:
      if (value == null) {
        unsetCreateErrorCount();
      } else {
        setCreateErrorCount((java.lang.Long)value);
      }
      break;

    case EXECUTE_COUNT:
      if (value == null) {
        unsetExecuteCount();
      } else {
        setExecuteCount((java.lang.Long)value);
      }
      break;

    case COMMIT_COUNT:
      if (value == null) {
        unsetCommitCount();
      } else {
        setCommitCount((java.lang.Long)value);
      }
      break;

    case ROLLBACK_COUNT:
      if (value == null) {
        unsetRollbackCount();
      } else {
        setRollbackCount((java.lang.Long)value);
      }
      break;

    case START_TRANSACTION_COUNT:
      if (value == null) {
        unsetStartTransactionCount();
      } else {
        setStartTransactionCount((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case URI:
      return getUri();

    case DRIVER:
      return getDriver();

    case ACTIVE_COUNT:
      return getActiveCount();

    case CREATE_COUNT:
      return getCreateCount();

    case DESTROY_COUNT:
      return getDestroyCount();

    case POOLING_COUNT:
      return getPoolingCount();

    case POOLING_PEAK:
      return getPoolingPeak();

    case ACTIVE_PEAK:
      return getActivePeak();

    case LOGIC_CONNECT_COUNT:
      return getLogicConnectCount();

    case LOGIC_CLOSE_COUNT:
      return getLogicCloseCount();

    case WAIT_THREAD_COUNT:
      return getWaitThreadCount();

    case CREATE_ERROR_COUNT:
      return getCreateErrorCount();

    case EXECUTE_COUNT:
      return getExecuteCount();

    case COMMIT_COUNT:
      return getCommitCount();

    case ROLLBACK_COUNT:
      return getRollbackCount();

    case START_TRANSACTION_COUNT:
      return getStartTransactionCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case URI:
      return isSetUri();
    case DRIVER:
      return isSetDriver();
    case ACTIVE_COUNT:
      return isSetActiveCount();
    case CREATE_COUNT:
      return isSetCreateCount();
    case DESTROY_COUNT:
      return isSetDestroyCount();
    case POOLING_COUNT:
      return isSetPoolingCount();
    case POOLING_PEAK:
      return isSetPoolingPeak();
    case ACTIVE_PEAK:
      return isSetActivePeak();
    case LOGIC_CONNECT_COUNT:
      return isSetLogicConnectCount();
    case LOGIC_CLOSE_COUNT:
      return isSetLogicCloseCount();
    case WAIT_THREAD_COUNT:
      return isSetWaitThreadCount();
    case CREATE_ERROR_COUNT:
      return isSetCreateErrorCount();
    case EXECUTE_COUNT:
      return isSetExecuteCount();
    case COMMIT_COUNT:
      return isSetCommitCount();
    case ROLLBACK_COUNT:
      return isSetRollbackCount();
    case START_TRANSACTION_COUNT:
      return isSetStartTransactionCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof JdbcEntity)
      return this.equals((JdbcEntity)that);
    return false;
  }

  public boolean equals(JdbcEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uri = true && this.isSetUri();
    boolean that_present_uri = true && that.isSetUri();
    if (this_present_uri || that_present_uri) {
      if (!(this_present_uri && that_present_uri))
        return false;
      if (!this.uri.equals(that.uri))
        return false;
    }

    boolean this_present_driver = true && this.isSetDriver();
    boolean that_present_driver = true && that.isSetDriver();
    if (this_present_driver || that_present_driver) {
      if (!(this_present_driver && that_present_driver))
        return false;
      if (!this.driver.equals(that.driver))
        return false;
    }

    boolean this_present_activeCount = true;
    boolean that_present_activeCount = true;
    if (this_present_activeCount || that_present_activeCount) {
      if (!(this_present_activeCount && that_present_activeCount))
        return false;
      if (this.activeCount != that.activeCount)
        return false;
    }

    boolean this_present_createCount = true && this.isSetCreateCount();
    boolean that_present_createCount = true && that.isSetCreateCount();
    if (this_present_createCount || that_present_createCount) {
      if (!(this_present_createCount && that_present_createCount))
        return false;
      if (this.createCount != that.createCount)
        return false;
    }

    boolean this_present_destroyCount = true && this.isSetDestroyCount();
    boolean that_present_destroyCount = true && that.isSetDestroyCount();
    if (this_present_destroyCount || that_present_destroyCount) {
      if (!(this_present_destroyCount && that_present_destroyCount))
        return false;
      if (this.destroyCount != that.destroyCount)
        return false;
    }

    boolean this_present_poolingCount = true && this.isSetPoolingCount();
    boolean that_present_poolingCount = true && that.isSetPoolingCount();
    if (this_present_poolingCount || that_present_poolingCount) {
      if (!(this_present_poolingCount && that_present_poolingCount))
        return false;
      if (this.poolingCount != that.poolingCount)
        return false;
    }

    boolean this_present_poolingPeak = true && this.isSetPoolingPeak();
    boolean that_present_poolingPeak = true && that.isSetPoolingPeak();
    if (this_present_poolingPeak || that_present_poolingPeak) {
      if (!(this_present_poolingPeak && that_present_poolingPeak))
        return false;
      if (this.poolingPeak != that.poolingPeak)
        return false;
    }

    boolean this_present_activePeak = true && this.isSetActivePeak();
    boolean that_present_activePeak = true && that.isSetActivePeak();
    if (this_present_activePeak || that_present_activePeak) {
      if (!(this_present_activePeak && that_present_activePeak))
        return false;
      if (this.activePeak != that.activePeak)
        return false;
    }

    boolean this_present_logicConnectCount = true && this.isSetLogicConnectCount();
    boolean that_present_logicConnectCount = true && that.isSetLogicConnectCount();
    if (this_present_logicConnectCount || that_present_logicConnectCount) {
      if (!(this_present_logicConnectCount && that_present_logicConnectCount))
        return false;
      if (this.logicConnectCount != that.logicConnectCount)
        return false;
    }

    boolean this_present_logicCloseCount = true && this.isSetLogicCloseCount();
    boolean that_present_logicCloseCount = true && that.isSetLogicCloseCount();
    if (this_present_logicCloseCount || that_present_logicCloseCount) {
      if (!(this_present_logicCloseCount && that_present_logicCloseCount))
        return false;
      if (this.logicCloseCount != that.logicCloseCount)
        return false;
    }

    boolean this_present_waitThreadCount = true && this.isSetWaitThreadCount();
    boolean that_present_waitThreadCount = true && that.isSetWaitThreadCount();
    if (this_present_waitThreadCount || that_present_waitThreadCount) {
      if (!(this_present_waitThreadCount && that_present_waitThreadCount))
        return false;
      if (this.waitThreadCount != that.waitThreadCount)
        return false;
    }

    boolean this_present_createErrorCount = true && this.isSetCreateErrorCount();
    boolean that_present_createErrorCount = true && that.isSetCreateErrorCount();
    if (this_present_createErrorCount || that_present_createErrorCount) {
      if (!(this_present_createErrorCount && that_present_createErrorCount))
        return false;
      if (this.createErrorCount != that.createErrorCount)
        return false;
    }

    boolean this_present_executeCount = true && this.isSetExecuteCount();
    boolean that_present_executeCount = true && that.isSetExecuteCount();
    if (this_present_executeCount || that_present_executeCount) {
      if (!(this_present_executeCount && that_present_executeCount))
        return false;
      if (this.executeCount != that.executeCount)
        return false;
    }

    boolean this_present_commitCount = true && this.isSetCommitCount();
    boolean that_present_commitCount = true && that.isSetCommitCount();
    if (this_present_commitCount || that_present_commitCount) {
      if (!(this_present_commitCount && that_present_commitCount))
        return false;
      if (this.commitCount != that.commitCount)
        return false;
    }

    boolean this_present_rollbackCount = true && this.isSetRollbackCount();
    boolean that_present_rollbackCount = true && that.isSetRollbackCount();
    if (this_present_rollbackCount || that_present_rollbackCount) {
      if (!(this_present_rollbackCount && that_present_rollbackCount))
        return false;
      if (this.rollbackCount != that.rollbackCount)
        return false;
    }

    boolean this_present_startTransactionCount = true && this.isSetStartTransactionCount();
    boolean that_present_startTransactionCount = true && that.isSetStartTransactionCount();
    if (this_present_startTransactionCount || that_present_startTransactionCount) {
      if (!(this_present_startTransactionCount && that_present_startTransactionCount))
        return false;
      if (this.startTransactionCount != that.startTransactionCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUri()) ? 131071 : 524287);
    if (isSetUri())
      hashCode = hashCode * 8191 + uri.hashCode();

    hashCode = hashCode * 8191 + ((isSetDriver()) ? 131071 : 524287);
    if (isSetDriver())
      hashCode = hashCode * 8191 + driver.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(activeCount);

    hashCode = hashCode * 8191 + ((isSetCreateCount()) ? 131071 : 524287);
    if (isSetCreateCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createCount);

    hashCode = hashCode * 8191 + ((isSetDestroyCount()) ? 131071 : 524287);
    if (isSetDestroyCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(destroyCount);

    hashCode = hashCode * 8191 + ((isSetPoolingCount()) ? 131071 : 524287);
    if (isSetPoolingCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(poolingCount);

    hashCode = hashCode * 8191 + ((isSetPoolingPeak()) ? 131071 : 524287);
    if (isSetPoolingPeak())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(poolingPeak);

    hashCode = hashCode * 8191 + ((isSetActivePeak()) ? 131071 : 524287);
    if (isSetActivePeak())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(activePeak);

    hashCode = hashCode * 8191 + ((isSetLogicConnectCount()) ? 131071 : 524287);
    if (isSetLogicConnectCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(logicConnectCount);

    hashCode = hashCode * 8191 + ((isSetLogicCloseCount()) ? 131071 : 524287);
    if (isSetLogicCloseCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(logicCloseCount);

    hashCode = hashCode * 8191 + ((isSetWaitThreadCount()) ? 131071 : 524287);
    if (isSetWaitThreadCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(waitThreadCount);

    hashCode = hashCode * 8191 + ((isSetCreateErrorCount()) ? 131071 : 524287);
    if (isSetCreateErrorCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createErrorCount);

    hashCode = hashCode * 8191 + ((isSetExecuteCount()) ? 131071 : 524287);
    if (isSetExecuteCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(executeCount);

    hashCode = hashCode * 8191 + ((isSetCommitCount()) ? 131071 : 524287);
    if (isSetCommitCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(commitCount);

    hashCode = hashCode * 8191 + ((isSetRollbackCount()) ? 131071 : 524287);
    if (isSetRollbackCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rollbackCount);

    hashCode = hashCode * 8191 + ((isSetStartTransactionCount()) ? 131071 : 524287);
    if (isSetStartTransactionCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startTransactionCount);

    return hashCode;
  }

  @Override
  public int compareTo(JdbcEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUri()).compareTo(other.isSetUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDriver()).compareTo(other.isSetDriver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDriver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driver, other.driver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActiveCount()).compareTo(other.isSetActiveCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeCount, other.activeCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateCount()).compareTo(other.isSetCreateCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createCount, other.createCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDestroyCount()).compareTo(other.isSetDestroyCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestroyCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destroyCount, other.destroyCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPoolingCount()).compareTo(other.isSetPoolingCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolingCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolingCount, other.poolingCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPoolingPeak()).compareTo(other.isSetPoolingPeak());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolingPeak()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolingPeak, other.poolingPeak);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActivePeak()).compareTo(other.isSetActivePeak());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivePeak()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activePeak, other.activePeak);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLogicConnectCount()).compareTo(other.isSetLogicConnectCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogicConnectCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logicConnectCount, other.logicConnectCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLogicCloseCount()).compareTo(other.isSetLogicCloseCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogicCloseCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logicCloseCount, other.logicCloseCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWaitThreadCount()).compareTo(other.isSetWaitThreadCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaitThreadCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waitThreadCount, other.waitThreadCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateErrorCount()).compareTo(other.isSetCreateErrorCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateErrorCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createErrorCount, other.createErrorCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExecuteCount()).compareTo(other.isSetExecuteCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecuteCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executeCount, other.executeCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCommitCount()).compareTo(other.isSetCommitCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitCount, other.commitCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRollbackCount()).compareTo(other.isSetRollbackCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRollbackCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rollbackCount, other.rollbackCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStartTransactionCount()).compareTo(other.isSetStartTransactionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTransactionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTransactionCount, other.startTransactionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("JdbcEntity(");
    boolean first = true;

    sb.append("uri:");
    if (this.uri == null) {
      sb.append("null");
    } else {
      sb.append(this.uri);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("driver:");
    if (this.driver == null) {
      sb.append("null");
    } else {
      sb.append(this.driver);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeCount:");
    sb.append(this.activeCount);
    first = false;
    if (isSetCreateCount()) {
      if (!first) sb.append(", ");
      sb.append("createCount:");
      sb.append(this.createCount);
      first = false;
    }
    if (isSetDestroyCount()) {
      if (!first) sb.append(", ");
      sb.append("destroyCount:");
      sb.append(this.destroyCount);
      first = false;
    }
    if (isSetPoolingCount()) {
      if (!first) sb.append(", ");
      sb.append("poolingCount:");
      sb.append(this.poolingCount);
      first = false;
    }
    if (isSetPoolingPeak()) {
      if (!first) sb.append(", ");
      sb.append("poolingPeak:");
      sb.append(this.poolingPeak);
      first = false;
    }
    if (isSetActivePeak()) {
      if (!first) sb.append(", ");
      sb.append("activePeak:");
      sb.append(this.activePeak);
      first = false;
    }
    if (isSetLogicConnectCount()) {
      if (!first) sb.append(", ");
      sb.append("logicConnectCount:");
      sb.append(this.logicConnectCount);
      first = false;
    }
    if (isSetLogicCloseCount()) {
      if (!first) sb.append(", ");
      sb.append("logicCloseCount:");
      sb.append(this.logicCloseCount);
      first = false;
    }
    if (isSetWaitThreadCount()) {
      if (!first) sb.append(", ");
      sb.append("waitThreadCount:");
      sb.append(this.waitThreadCount);
      first = false;
    }
    if (isSetCreateErrorCount()) {
      if (!first) sb.append(", ");
      sb.append("createErrorCount:");
      sb.append(this.createErrorCount);
      first = false;
    }
    if (isSetExecuteCount()) {
      if (!first) sb.append(", ");
      sb.append("executeCount:");
      sb.append(this.executeCount);
      first = false;
    }
    if (isSetCommitCount()) {
      if (!first) sb.append(", ");
      sb.append("commitCount:");
      sb.append(this.commitCount);
      first = false;
    }
    if (isSetRollbackCount()) {
      if (!first) sb.append(", ");
      sb.append("rollbackCount:");
      sb.append(this.rollbackCount);
      first = false;
    }
    if (isSetStartTransactionCount()) {
      if (!first) sb.append(", ");
      sb.append("startTransactionCount:");
      sb.append(this.startTransactionCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JdbcEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JdbcEntityStandardScheme getScheme() {
      return new JdbcEntityStandardScheme();
    }
  }

  private static class JdbcEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<JdbcEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JdbcEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 7: // URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uri = iprot.readString();
              struct.setUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DRIVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.driver = iprot.readString();
              struct.setDriverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACTIVE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.activeCount = iprot.readI64();
              struct.setActiveCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createCount = iprot.readI64();
              struct.setCreateCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DESTROY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.destroyCount = iprot.readI64();
              struct.setDestroyCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // POOLING_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.poolingCount = iprot.readI64();
              struct.setPoolingCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // POOLING_PEAK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.poolingPeak = iprot.readI64();
              struct.setPoolingPeakIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ACTIVE_PEAK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.activePeak = iprot.readI64();
              struct.setActivePeakIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LOGIC_CONNECT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.logicConnectCount = iprot.readI64();
              struct.setLogicConnectCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LOGIC_CLOSE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.logicCloseCount = iprot.readI64();
              struct.setLogicCloseCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // WAIT_THREAD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.waitThreadCount = iprot.readI64();
              struct.setWaitThreadCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CREATE_ERROR_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createErrorCount = iprot.readI64();
              struct.setCreateErrorCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // EXECUTE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.executeCount = iprot.readI64();
              struct.setExecuteCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // COMMIT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commitCount = iprot.readI64();
              struct.setCommitCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ROLLBACK_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rollbackCount = iprot.readI64();
              struct.setRollbackCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // START_TRANSACTION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTransactionCount = iprot.readI64();
              struct.setStartTransactionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JdbcEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uri != null) {
        oprot.writeFieldBegin(URI_FIELD_DESC);
        oprot.writeString(struct.uri);
        oprot.writeFieldEnd();
      }
      if (struct.driver != null) {
        oprot.writeFieldBegin(DRIVER_FIELD_DESC);
        oprot.writeString(struct.driver);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTIVE_COUNT_FIELD_DESC);
      oprot.writeI64(struct.activeCount);
      oprot.writeFieldEnd();
      if (struct.isSetCreateCount()) {
        oprot.writeFieldBegin(CREATE_COUNT_FIELD_DESC);
        oprot.writeI64(struct.createCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDestroyCount()) {
        oprot.writeFieldBegin(DESTROY_COUNT_FIELD_DESC);
        oprot.writeI64(struct.destroyCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPoolingCount()) {
        oprot.writeFieldBegin(POOLING_COUNT_FIELD_DESC);
        oprot.writeI64(struct.poolingCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPoolingPeak()) {
        oprot.writeFieldBegin(POOLING_PEAK_FIELD_DESC);
        oprot.writeI64(struct.poolingPeak);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActivePeak()) {
        oprot.writeFieldBegin(ACTIVE_PEAK_FIELD_DESC);
        oprot.writeI64(struct.activePeak);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLogicConnectCount()) {
        oprot.writeFieldBegin(LOGIC_CONNECT_COUNT_FIELD_DESC);
        oprot.writeI64(struct.logicConnectCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLogicCloseCount()) {
        oprot.writeFieldBegin(LOGIC_CLOSE_COUNT_FIELD_DESC);
        oprot.writeI64(struct.logicCloseCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWaitThreadCount()) {
        oprot.writeFieldBegin(WAIT_THREAD_COUNT_FIELD_DESC);
        oprot.writeI64(struct.waitThreadCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateErrorCount()) {
        oprot.writeFieldBegin(CREATE_ERROR_COUNT_FIELD_DESC);
        oprot.writeI64(struct.createErrorCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExecuteCount()) {
        oprot.writeFieldBegin(EXECUTE_COUNT_FIELD_DESC);
        oprot.writeI64(struct.executeCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommitCount()) {
        oprot.writeFieldBegin(COMMIT_COUNT_FIELD_DESC);
        oprot.writeI64(struct.commitCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRollbackCount()) {
        oprot.writeFieldBegin(ROLLBACK_COUNT_FIELD_DESC);
        oprot.writeI64(struct.rollbackCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStartTransactionCount()) {
        oprot.writeFieldBegin(START_TRANSACTION_COUNT_FIELD_DESC);
        oprot.writeI64(struct.startTransactionCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JdbcEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JdbcEntityTupleScheme getScheme() {
      return new JdbcEntityTupleScheme();
    }
  }

  private static class JdbcEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<JdbcEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JdbcEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUri()) {
        optionals.set(0);
      }
      if (struct.isSetDriver()) {
        optionals.set(1);
      }
      if (struct.isSetActiveCount()) {
        optionals.set(2);
      }
      if (struct.isSetCreateCount()) {
        optionals.set(3);
      }
      if (struct.isSetDestroyCount()) {
        optionals.set(4);
      }
      if (struct.isSetPoolingCount()) {
        optionals.set(5);
      }
      if (struct.isSetPoolingPeak()) {
        optionals.set(6);
      }
      if (struct.isSetActivePeak()) {
        optionals.set(7);
      }
      if (struct.isSetLogicConnectCount()) {
        optionals.set(8);
      }
      if (struct.isSetLogicCloseCount()) {
        optionals.set(9);
      }
      if (struct.isSetWaitThreadCount()) {
        optionals.set(10);
      }
      if (struct.isSetCreateErrorCount()) {
        optionals.set(11);
      }
      if (struct.isSetExecuteCount()) {
        optionals.set(12);
      }
      if (struct.isSetCommitCount()) {
        optionals.set(13);
      }
      if (struct.isSetRollbackCount()) {
        optionals.set(14);
      }
      if (struct.isSetStartTransactionCount()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetUri()) {
        oprot.writeString(struct.uri);
      }
      if (struct.isSetDriver()) {
        oprot.writeString(struct.driver);
      }
      if (struct.isSetActiveCount()) {
        oprot.writeI64(struct.activeCount);
      }
      if (struct.isSetCreateCount()) {
        oprot.writeI64(struct.createCount);
      }
      if (struct.isSetDestroyCount()) {
        oprot.writeI64(struct.destroyCount);
      }
      if (struct.isSetPoolingCount()) {
        oprot.writeI64(struct.poolingCount);
      }
      if (struct.isSetPoolingPeak()) {
        oprot.writeI64(struct.poolingPeak);
      }
      if (struct.isSetActivePeak()) {
        oprot.writeI64(struct.activePeak);
      }
      if (struct.isSetLogicConnectCount()) {
        oprot.writeI64(struct.logicConnectCount);
      }
      if (struct.isSetLogicCloseCount()) {
        oprot.writeI64(struct.logicCloseCount);
      }
      if (struct.isSetWaitThreadCount()) {
        oprot.writeI64(struct.waitThreadCount);
      }
      if (struct.isSetCreateErrorCount()) {
        oprot.writeI64(struct.createErrorCount);
      }
      if (struct.isSetExecuteCount()) {
        oprot.writeI64(struct.executeCount);
      }
      if (struct.isSetCommitCount()) {
        oprot.writeI64(struct.commitCount);
      }
      if (struct.isSetRollbackCount()) {
        oprot.writeI64(struct.rollbackCount);
      }
      if (struct.isSetStartTransactionCount()) {
        oprot.writeI64(struct.startTransactionCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JdbcEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.uri = iprot.readString();
        struct.setUriIsSet(true);
      }
      if (incoming.get(1)) {
        struct.driver = iprot.readString();
        struct.setDriverIsSet(true);
      }
      if (incoming.get(2)) {
        struct.activeCount = iprot.readI64();
        struct.setActiveCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createCount = iprot.readI64();
        struct.setCreateCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.destroyCount = iprot.readI64();
        struct.setDestroyCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.poolingCount = iprot.readI64();
        struct.setPoolingCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.poolingPeak = iprot.readI64();
        struct.setPoolingPeakIsSet(true);
      }
      if (incoming.get(7)) {
        struct.activePeak = iprot.readI64();
        struct.setActivePeakIsSet(true);
      }
      if (incoming.get(8)) {
        struct.logicConnectCount = iprot.readI64();
        struct.setLogicConnectCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.logicCloseCount = iprot.readI64();
        struct.setLogicCloseCountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.waitThreadCount = iprot.readI64();
        struct.setWaitThreadCountIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createErrorCount = iprot.readI64();
        struct.setCreateErrorCountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.executeCount = iprot.readI64();
        struct.setExecuteCountIsSet(true);
      }
      if (incoming.get(13)) {
        struct.commitCount = iprot.readI64();
        struct.setCommitCountIsSet(true);
      }
      if (incoming.get(14)) {
        struct.rollbackCount = iprot.readI64();
        struct.setRollbackCountIsSet(true);
      }
      if (incoming.get(15)) {
        struct.startTransactionCount = iprot.readI64();
        struct.setStartTransactionCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

