/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sbss.bithon.agent.rpc.thrift.service.metric;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class IMetricCollector {

  public interface Iface {

    public void sendWebRequest(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage> messages) throws org.apache.thrift.TException;

    public void sendJvm(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage> messages) throws org.apache.thrift.TException;

    public void sendJvmGc(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage> messages) throws org.apache.thrift.TException;

    public void sendWebServer(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage> messages) throws org.apache.thrift.TException;

    public void sendException(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage> messages) throws org.apache.thrift.TException;

    public void sendHttpClient(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage> messages) throws org.apache.thrift.TException;

    public void sendThreadPool(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage> messages) throws org.apache.thrift.TException;

    public void sendJdbc(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage> messages) throws org.apache.thrift.TException;

    public void sendRedis(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage> messages) throws org.apache.thrift.TException;

    public void sendSql(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage> messages) throws org.apache.thrift.TException;

    public void sendMongoDb(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage> messages) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void sendWebRequest(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sendJvm(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sendJvmGc(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sendWebServer(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sendException(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sendHttpClient(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sendThreadPool(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sendJdbc(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sendRedis(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sendSql(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sendMongoDb(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void sendWebRequest(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage> messages) throws org.apache.thrift.TException
    {
      send_sendWebRequest(header, messages);
    }

    public void send_sendWebRequest(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage> messages) throws org.apache.thrift.TException
    {
      sendWebRequest_args args = new sendWebRequest_args();
      args.setHeader(header);
      args.setMessages(messages);
      sendBaseOneway("sendWebRequest", args);
    }

    public void sendJvm(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage> messages) throws org.apache.thrift.TException
    {
      send_sendJvm(header, messages);
    }

    public void send_sendJvm(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage> messages) throws org.apache.thrift.TException
    {
      sendJvm_args args = new sendJvm_args();
      args.setHeader(header);
      args.setMessages(messages);
      sendBaseOneway("sendJvm", args);
    }

    public void sendJvmGc(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage> messages) throws org.apache.thrift.TException
    {
      send_sendJvmGc(header, messages);
    }

    public void send_sendJvmGc(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage> messages) throws org.apache.thrift.TException
    {
      sendJvmGc_args args = new sendJvmGc_args();
      args.setHeader(header);
      args.setMessages(messages);
      sendBaseOneway("sendJvmGc", args);
    }

    public void sendWebServer(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage> messages) throws org.apache.thrift.TException
    {
      send_sendWebServer(header, messages);
    }

    public void send_sendWebServer(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage> messages) throws org.apache.thrift.TException
    {
      sendWebServer_args args = new sendWebServer_args();
      args.setHeader(header);
      args.setMessages(messages);
      sendBaseOneway("sendWebServer", args);
    }

    public void sendException(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage> messages) throws org.apache.thrift.TException
    {
      send_sendException(header, messages);
    }

    public void send_sendException(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage> messages) throws org.apache.thrift.TException
    {
      sendException_args args = new sendException_args();
      args.setHeader(header);
      args.setMessages(messages);
      sendBaseOneway("sendException", args);
    }

    public void sendHttpClient(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage> messages) throws org.apache.thrift.TException
    {
      send_sendHttpClient(header, messages);
    }

    public void send_sendHttpClient(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage> messages) throws org.apache.thrift.TException
    {
      sendHttpClient_args args = new sendHttpClient_args();
      args.setHeader(header);
      args.setMessages(messages);
      sendBaseOneway("sendHttpClient", args);
    }

    public void sendThreadPool(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage> messages) throws org.apache.thrift.TException
    {
      send_sendThreadPool(header, messages);
    }

    public void send_sendThreadPool(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage> messages) throws org.apache.thrift.TException
    {
      sendThreadPool_args args = new sendThreadPool_args();
      args.setHeader(header);
      args.setMessages(messages);
      sendBaseOneway("sendThreadPool", args);
    }

    public void sendJdbc(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage> messages) throws org.apache.thrift.TException
    {
      send_sendJdbc(header, messages);
    }

    public void send_sendJdbc(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage> messages) throws org.apache.thrift.TException
    {
      sendJdbc_args args = new sendJdbc_args();
      args.setHeader(header);
      args.setMessages(messages);
      sendBaseOneway("sendJdbc", args);
    }

    public void sendRedis(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage> messages) throws org.apache.thrift.TException
    {
      send_sendRedis(header, messages);
    }

    public void send_sendRedis(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage> messages) throws org.apache.thrift.TException
    {
      sendRedis_args args = new sendRedis_args();
      args.setHeader(header);
      args.setMessages(messages);
      sendBaseOneway("sendRedis", args);
    }

    public void sendSql(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage> messages) throws org.apache.thrift.TException
    {
      send_sendSql(header, messages);
    }

    public void send_sendSql(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage> messages) throws org.apache.thrift.TException
    {
      sendSql_args args = new sendSql_args();
      args.setHeader(header);
      args.setMessages(messages);
      sendBaseOneway("sendSql", args);
    }

    public void sendMongoDb(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage> messages) throws org.apache.thrift.TException
    {
      send_sendMongoDb(header, messages);
    }

    public void send_sendMongoDb(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage> messages) throws org.apache.thrift.TException
    {
      sendMongoDb_args args = new sendMongoDb_args();
      args.setHeader(header);
      args.setMessages(messages);
      sendBaseOneway("sendMongoDb", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void sendWebRequest(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendWebRequest_call method_call = new sendWebRequest_call(header, messages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendWebRequest_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header;
      private java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage> messages;
      public sendWebRequest_call(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.header = header;
        this.messages = messages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendWebRequest", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sendWebRequest_args args = new sendWebRequest_args();
        args.setHeader(header);
        args.setMessages(messages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sendJvm(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendJvm_call method_call = new sendJvm_call(header, messages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendJvm_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header;
      private java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage> messages;
      public sendJvm_call(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.header = header;
        this.messages = messages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendJvm", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sendJvm_args args = new sendJvm_args();
        args.setHeader(header);
        args.setMessages(messages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sendJvmGc(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendJvmGc_call method_call = new sendJvmGc_call(header, messages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendJvmGc_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header;
      private java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage> messages;
      public sendJvmGc_call(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.header = header;
        this.messages = messages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendJvmGc", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sendJvmGc_args args = new sendJvmGc_args();
        args.setHeader(header);
        args.setMessages(messages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sendWebServer(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendWebServer_call method_call = new sendWebServer_call(header, messages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendWebServer_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header;
      private java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage> messages;
      public sendWebServer_call(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.header = header;
        this.messages = messages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendWebServer", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sendWebServer_args args = new sendWebServer_args();
        args.setHeader(header);
        args.setMessages(messages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sendException(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendException_call method_call = new sendException_call(header, messages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendException_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header;
      private java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage> messages;
      public sendException_call(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.header = header;
        this.messages = messages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendException", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sendException_args args = new sendException_args();
        args.setHeader(header);
        args.setMessages(messages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sendHttpClient(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendHttpClient_call method_call = new sendHttpClient_call(header, messages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendHttpClient_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header;
      private java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage> messages;
      public sendHttpClient_call(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.header = header;
        this.messages = messages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendHttpClient", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sendHttpClient_args args = new sendHttpClient_args();
        args.setHeader(header);
        args.setMessages(messages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sendThreadPool(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendThreadPool_call method_call = new sendThreadPool_call(header, messages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendThreadPool_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header;
      private java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage> messages;
      public sendThreadPool_call(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.header = header;
        this.messages = messages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendThreadPool", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sendThreadPool_args args = new sendThreadPool_args();
        args.setHeader(header);
        args.setMessages(messages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sendJdbc(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendJdbc_call method_call = new sendJdbc_call(header, messages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendJdbc_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header;
      private java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage> messages;
      public sendJdbc_call(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.header = header;
        this.messages = messages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendJdbc", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sendJdbc_args args = new sendJdbc_args();
        args.setHeader(header);
        args.setMessages(messages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sendRedis(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendRedis_call method_call = new sendRedis_call(header, messages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendRedis_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header;
      private java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage> messages;
      public sendRedis_call(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.header = header;
        this.messages = messages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendRedis", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sendRedis_args args = new sendRedis_args();
        args.setHeader(header);
        args.setMessages(messages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sendSql(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendSql_call method_call = new sendSql_call(header, messages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendSql_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header;
      private java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage> messages;
      public sendSql_call(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.header = header;
        this.messages = messages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendSql", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sendSql_args args = new sendSql_args();
        args.setHeader(header);
        args.setMessages(messages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sendMongoDb(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendMongoDb_call method_call = new sendMongoDb_call(header, messages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendMongoDb_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header;
      private java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage> messages;
      public sendMongoDb_call(com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header, java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage> messages, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.header = header;
        this.messages = messages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendMongoDb", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sendMongoDb_args args = new sendMongoDb_args();
        args.setHeader(header);
        args.setMessages(messages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("sendWebRequest", new sendWebRequest());
      processMap.put("sendJvm", new sendJvm());
      processMap.put("sendJvmGc", new sendJvmGc());
      processMap.put("sendWebServer", new sendWebServer());
      processMap.put("sendException", new sendException());
      processMap.put("sendHttpClient", new sendHttpClient());
      processMap.put("sendThreadPool", new sendThreadPool());
      processMap.put("sendJdbc", new sendJdbc());
      processMap.put("sendRedis", new sendRedis());
      processMap.put("sendSql", new sendSql());
      processMap.put("sendMongoDb", new sendMongoDb());
      return processMap;
    }

    public static class sendWebRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendWebRequest_args> {
      public sendWebRequest() {
        super("sendWebRequest");
      }

      public sendWebRequest_args getEmptyArgsInstance() {
        return new sendWebRequest_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, sendWebRequest_args args) throws org.apache.thrift.TException {
        iface.sendWebRequest(args.header, args.messages);
        return null;
      }
    }

    public static class sendJvm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendJvm_args> {
      public sendJvm() {
        super("sendJvm");
      }

      public sendJvm_args getEmptyArgsInstance() {
        return new sendJvm_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, sendJvm_args args) throws org.apache.thrift.TException {
        iface.sendJvm(args.header, args.messages);
        return null;
      }
    }

    public static class sendJvmGc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendJvmGc_args> {
      public sendJvmGc() {
        super("sendJvmGc");
      }

      public sendJvmGc_args getEmptyArgsInstance() {
        return new sendJvmGc_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, sendJvmGc_args args) throws org.apache.thrift.TException {
        iface.sendJvmGc(args.header, args.messages);
        return null;
      }
    }

    public static class sendWebServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendWebServer_args> {
      public sendWebServer() {
        super("sendWebServer");
      }

      public sendWebServer_args getEmptyArgsInstance() {
        return new sendWebServer_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, sendWebServer_args args) throws org.apache.thrift.TException {
        iface.sendWebServer(args.header, args.messages);
        return null;
      }
    }

    public static class sendException<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendException_args> {
      public sendException() {
        super("sendException");
      }

      public sendException_args getEmptyArgsInstance() {
        return new sendException_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, sendException_args args) throws org.apache.thrift.TException {
        iface.sendException(args.header, args.messages);
        return null;
      }
    }

    public static class sendHttpClient<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendHttpClient_args> {
      public sendHttpClient() {
        super("sendHttpClient");
      }

      public sendHttpClient_args getEmptyArgsInstance() {
        return new sendHttpClient_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, sendHttpClient_args args) throws org.apache.thrift.TException {
        iface.sendHttpClient(args.header, args.messages);
        return null;
      }
    }

    public static class sendThreadPool<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendThreadPool_args> {
      public sendThreadPool() {
        super("sendThreadPool");
      }

      public sendThreadPool_args getEmptyArgsInstance() {
        return new sendThreadPool_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, sendThreadPool_args args) throws org.apache.thrift.TException {
        iface.sendThreadPool(args.header, args.messages);
        return null;
      }
    }

    public static class sendJdbc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendJdbc_args> {
      public sendJdbc() {
        super("sendJdbc");
      }

      public sendJdbc_args getEmptyArgsInstance() {
        return new sendJdbc_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, sendJdbc_args args) throws org.apache.thrift.TException {
        iface.sendJdbc(args.header, args.messages);
        return null;
      }
    }

    public static class sendRedis<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendRedis_args> {
      public sendRedis() {
        super("sendRedis");
      }

      public sendRedis_args getEmptyArgsInstance() {
        return new sendRedis_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, sendRedis_args args) throws org.apache.thrift.TException {
        iface.sendRedis(args.header, args.messages);
        return null;
      }
    }

    public static class sendSql<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendSql_args> {
      public sendSql() {
        super("sendSql");
      }

      public sendSql_args getEmptyArgsInstance() {
        return new sendSql_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, sendSql_args args) throws org.apache.thrift.TException {
        iface.sendSql(args.header, args.messages);
        return null;
      }
    }

    public static class sendMongoDb<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendMongoDb_args> {
      public sendMongoDb() {
        super("sendMongoDb");
      }

      public sendMongoDb_args getEmptyArgsInstance() {
        return new sendMongoDb_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, sendMongoDb_args args) throws org.apache.thrift.TException {
        iface.sendMongoDb(args.header, args.messages);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("sendWebRequest", new sendWebRequest());
      processMap.put("sendJvm", new sendJvm());
      processMap.put("sendJvmGc", new sendJvmGc());
      processMap.put("sendWebServer", new sendWebServer());
      processMap.put("sendException", new sendException());
      processMap.put("sendHttpClient", new sendHttpClient());
      processMap.put("sendThreadPool", new sendThreadPool());
      processMap.put("sendJdbc", new sendJdbc());
      processMap.put("sendRedis", new sendRedis());
      processMap.put("sendSql", new sendSql());
      processMap.put("sendMongoDb", new sendMongoDb());
      return processMap;
    }

    public static class sendWebRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendWebRequest_args, Void> {
      public sendWebRequest() {
        super("sendWebRequest");
      }

      public sendWebRequest_args getEmptyArgsInstance() {
        return new sendWebRequest_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendWebRequest_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sendWebRequest(args.header, args.messages,resultHandler);
      }
    }

    public static class sendJvm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendJvm_args, Void> {
      public sendJvm() {
        super("sendJvm");
      }

      public sendJvm_args getEmptyArgsInstance() {
        return new sendJvm_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendJvm_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sendJvm(args.header, args.messages,resultHandler);
      }
    }

    public static class sendJvmGc<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendJvmGc_args, Void> {
      public sendJvmGc() {
        super("sendJvmGc");
      }

      public sendJvmGc_args getEmptyArgsInstance() {
        return new sendJvmGc_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendJvmGc_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sendJvmGc(args.header, args.messages,resultHandler);
      }
    }

    public static class sendWebServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendWebServer_args, Void> {
      public sendWebServer() {
        super("sendWebServer");
      }

      public sendWebServer_args getEmptyArgsInstance() {
        return new sendWebServer_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendWebServer_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sendWebServer(args.header, args.messages,resultHandler);
      }
    }

    public static class sendException<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendException_args, Void> {
      public sendException() {
        super("sendException");
      }

      public sendException_args getEmptyArgsInstance() {
        return new sendException_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendException_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sendException(args.header, args.messages,resultHandler);
      }
    }

    public static class sendHttpClient<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendHttpClient_args, Void> {
      public sendHttpClient() {
        super("sendHttpClient");
      }

      public sendHttpClient_args getEmptyArgsInstance() {
        return new sendHttpClient_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendHttpClient_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sendHttpClient(args.header, args.messages,resultHandler);
      }
    }

    public static class sendThreadPool<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendThreadPool_args, Void> {
      public sendThreadPool() {
        super("sendThreadPool");
      }

      public sendThreadPool_args getEmptyArgsInstance() {
        return new sendThreadPool_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendThreadPool_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sendThreadPool(args.header, args.messages,resultHandler);
      }
    }

    public static class sendJdbc<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendJdbc_args, Void> {
      public sendJdbc() {
        super("sendJdbc");
      }

      public sendJdbc_args getEmptyArgsInstance() {
        return new sendJdbc_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendJdbc_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sendJdbc(args.header, args.messages,resultHandler);
      }
    }

    public static class sendRedis<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendRedis_args, Void> {
      public sendRedis() {
        super("sendRedis");
      }

      public sendRedis_args getEmptyArgsInstance() {
        return new sendRedis_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendRedis_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sendRedis(args.header, args.messages,resultHandler);
      }
    }

    public static class sendSql<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendSql_args, Void> {
      public sendSql() {
        super("sendSql");
      }

      public sendSql_args getEmptyArgsInstance() {
        return new sendSql_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendSql_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sendSql(args.header, args.messages,resultHandler);
      }
    }

    public static class sendMongoDb<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendMongoDb_args, Void> {
      public sendMongoDb() {
        super("sendMongoDb");
      }

      public sendMongoDb_args getEmptyArgsInstance() {
        return new sendMongoDb_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendMongoDb_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sendMongoDb(args.header, args.messages,resultHandler);
      }
    }

  }

  public static class sendWebRequest_args implements org.apache.thrift.TBase<sendWebRequest_args, sendWebRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendWebRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendWebRequest_args");

    private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendWebRequest_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendWebRequest_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage> messages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEADER((short)1, "header"),
      MESSAGES((short)2, "messages");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEADER
            return HEADER;
          case 2: // MESSAGES
            return MESSAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.MessageHeader.class)));
      tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendWebRequest_args.class, metaDataMap);
    }

    public sendWebRequest_args() {
    }

    public sendWebRequest_args(
      com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header,
      java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage> messages)
    {
      this();
      this.header = header;
      this.messages = messages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendWebRequest_args(sendWebRequest_args other) {
      if (other.isSetHeader()) {
        this.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader(other.header);
      }
      if (other.isSetMessages()) {
        java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage> __this__messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage>(other.messages.size());
        for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage other_element : other.messages) {
          __this__messages.add(new com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage(other_element));
        }
        this.messages = __this__messages;
      }
    }

    public sendWebRequest_args deepCopy() {
      return new sendWebRequest_args(this);
    }

    @Override
    public void clear() {
      this.header = null;
      this.messages = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.sbss.bithon.agent.rpc.thrift.service.MessageHeader getHeader() {
      return this.header;
    }

    public sendWebRequest_args setHeader(@org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header) {
      this.header = header;
      return this;
    }

    public void unsetHeader() {
      this.header = null;
    }

    /** Returns true if field header is set (has been assigned a value) and false otherwise */
    public boolean isSetHeader() {
      return this.header != null;
    }

    public void setHeaderIsSet(boolean value) {
      if (!value) {
        this.header = null;
      }
    }

    public int getMessagesSize() {
      return (this.messages == null) ? 0 : this.messages.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage> getMessagesIterator() {
      return (this.messages == null) ? null : this.messages.iterator();
    }

    public void addToMessages(com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage elem) {
      if (this.messages == null) {
        this.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage>();
      }
      this.messages.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage> getMessages() {
      return this.messages;
    }

    public sendWebRequest_args setMessages(@org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage> messages) {
      this.messages = messages;
      return this;
    }

    public void unsetMessages() {
      this.messages = null;
    }

    /** Returns true if field messages is set (has been assigned a value) and false otherwise */
    public boolean isSetMessages() {
      return this.messages != null;
    }

    public void setMessagesIsSet(boolean value) {
      if (!value) {
        this.messages = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HEADER:
        if (value == null) {
          unsetHeader();
        } else {
          setHeader((com.sbss.bithon.agent.rpc.thrift.service.MessageHeader)value);
        }
        break;

      case MESSAGES:
        if (value == null) {
          unsetMessages();
        } else {
          setMessages((java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HEADER:
        return getHeader();

      case MESSAGES:
        return getMessages();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HEADER:
        return isSetHeader();
      case MESSAGES:
        return isSetMessages();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sendWebRequest_args)
        return this.equals((sendWebRequest_args)that);
      return false;
    }

    public boolean equals(sendWebRequest_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_header = true && this.isSetHeader();
      boolean that_present_header = true && that.isSetHeader();
      if (this_present_header || that_present_header) {
        if (!(this_present_header && that_present_header))
          return false;
        if (!this.header.equals(that.header))
          return false;
      }

      boolean this_present_messages = true && this.isSetMessages();
      boolean that_present_messages = true && that.isSetMessages();
      if (this_present_messages || that_present_messages) {
        if (!(this_present_messages && that_present_messages))
          return false;
        if (!this.messages.equals(that.messages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHeader()) ? 131071 : 524287);
      if (isSetHeader())
        hashCode = hashCode * 8191 + header.hashCode();

      hashCode = hashCode * 8191 + ((isSetMessages()) ? 131071 : 524287);
      if (isSetMessages())
        hashCode = hashCode * 8191 + messages.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendWebRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHeader(), other.isSetHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMessages(), other.isSetMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendWebRequest_args(");
      boolean first = true;

      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        sb.append(this.messages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (header == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not present! Struct: " + toString());
      }
      if (messages == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messages' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (header != null) {
        header.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendWebRequest_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendWebRequest_argsStandardScheme getScheme() {
        return new sendWebRequest_argsStandardScheme();
      }
    }

    private static class sendWebRequest_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendWebRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendWebRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
                struct.header.read(iprot);
                struct.setHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage>(_list0.size);
                  @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage();
                    _elem1.read(iprot);
                    struct.messages.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setMessagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendWebRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.header != null) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.messages != null) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
            for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage _iter3 : struct.messages)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendWebRequest_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendWebRequest_argsTupleScheme getScheme() {
        return new sendWebRequest_argsTupleScheme();
      }
    }

    private static class sendWebRequest_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendWebRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendWebRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header.write(oprot);
        {
          oprot.writeI32(struct.messages.size());
          for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage _iter4 : struct.messages)
          {
            _iter4.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendWebRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
        {
          org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage>(_list5.size);
          @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebRequestMetricMessage();
            _elem6.read(iprot);
            struct.messages.add(_elem6);
          }
        }
        struct.setMessagesIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendJvm_args implements org.apache.thrift.TBase<sendJvm_args, sendJvm_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendJvm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendJvm_args");

    private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendJvm_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendJvm_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage> messages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEADER((short)1, "header"),
      MESSAGES((short)2, "messages");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEADER
            return HEADER;
          case 2: // MESSAGES
            return MESSAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.MessageHeader.class)));
      tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendJvm_args.class, metaDataMap);
    }

    public sendJvm_args() {
    }

    public sendJvm_args(
      com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header,
      java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage> messages)
    {
      this();
      this.header = header;
      this.messages = messages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendJvm_args(sendJvm_args other) {
      if (other.isSetHeader()) {
        this.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader(other.header);
      }
      if (other.isSetMessages()) {
        java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage> __this__messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage>(other.messages.size());
        for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage other_element : other.messages) {
          __this__messages.add(new com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage(other_element));
        }
        this.messages = __this__messages;
      }
    }

    public sendJvm_args deepCopy() {
      return new sendJvm_args(this);
    }

    @Override
    public void clear() {
      this.header = null;
      this.messages = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.sbss.bithon.agent.rpc.thrift.service.MessageHeader getHeader() {
      return this.header;
    }

    public sendJvm_args setHeader(@org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header) {
      this.header = header;
      return this;
    }

    public void unsetHeader() {
      this.header = null;
    }

    /** Returns true if field header is set (has been assigned a value) and false otherwise */
    public boolean isSetHeader() {
      return this.header != null;
    }

    public void setHeaderIsSet(boolean value) {
      if (!value) {
        this.header = null;
      }
    }

    public int getMessagesSize() {
      return (this.messages == null) ? 0 : this.messages.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage> getMessagesIterator() {
      return (this.messages == null) ? null : this.messages.iterator();
    }

    public void addToMessages(com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage elem) {
      if (this.messages == null) {
        this.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage>();
      }
      this.messages.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage> getMessages() {
      return this.messages;
    }

    public sendJvm_args setMessages(@org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage> messages) {
      this.messages = messages;
      return this;
    }

    public void unsetMessages() {
      this.messages = null;
    }

    /** Returns true if field messages is set (has been assigned a value) and false otherwise */
    public boolean isSetMessages() {
      return this.messages != null;
    }

    public void setMessagesIsSet(boolean value) {
      if (!value) {
        this.messages = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HEADER:
        if (value == null) {
          unsetHeader();
        } else {
          setHeader((com.sbss.bithon.agent.rpc.thrift.service.MessageHeader)value);
        }
        break;

      case MESSAGES:
        if (value == null) {
          unsetMessages();
        } else {
          setMessages((java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HEADER:
        return getHeader();

      case MESSAGES:
        return getMessages();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HEADER:
        return isSetHeader();
      case MESSAGES:
        return isSetMessages();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sendJvm_args)
        return this.equals((sendJvm_args)that);
      return false;
    }

    public boolean equals(sendJvm_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_header = true && this.isSetHeader();
      boolean that_present_header = true && that.isSetHeader();
      if (this_present_header || that_present_header) {
        if (!(this_present_header && that_present_header))
          return false;
        if (!this.header.equals(that.header))
          return false;
      }

      boolean this_present_messages = true && this.isSetMessages();
      boolean that_present_messages = true && that.isSetMessages();
      if (this_present_messages || that_present_messages) {
        if (!(this_present_messages && that_present_messages))
          return false;
        if (!this.messages.equals(that.messages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHeader()) ? 131071 : 524287);
      if (isSetHeader())
        hashCode = hashCode * 8191 + header.hashCode();

      hashCode = hashCode * 8191 + ((isSetMessages()) ? 131071 : 524287);
      if (isSetMessages())
        hashCode = hashCode * 8191 + messages.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendJvm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHeader(), other.isSetHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMessages(), other.isSetMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendJvm_args(");
      boolean first = true;

      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        sb.append(this.messages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (header == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not present! Struct: " + toString());
      }
      if (messages == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messages' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (header != null) {
        header.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendJvm_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendJvm_argsStandardScheme getScheme() {
        return new sendJvm_argsStandardScheme();
      }
    }

    private static class sendJvm_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendJvm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendJvm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
                struct.header.read(iprot);
                struct.setHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage>(_list8.size);
                  @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage();
                    _elem9.read(iprot);
                    struct.messages.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setMessagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendJvm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.header != null) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.messages != null) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
            for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage _iter11 : struct.messages)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendJvm_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendJvm_argsTupleScheme getScheme() {
        return new sendJvm_argsTupleScheme();
      }
    }

    private static class sendJvm_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendJvm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendJvm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header.write(oprot);
        {
          oprot.writeI32(struct.messages.size());
          for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage _iter12 : struct.messages)
          {
            _iter12.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendJvm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
        {
          org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage>(_list13.size);
          @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmMetricMessage();
            _elem14.read(iprot);
            struct.messages.add(_elem14);
          }
        }
        struct.setMessagesIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendJvmGc_args implements org.apache.thrift.TBase<sendJvmGc_args, sendJvmGc_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendJvmGc_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendJvmGc_args");

    private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendJvmGc_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendJvmGc_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage> messages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEADER((short)1, "header"),
      MESSAGES((short)2, "messages");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEADER
            return HEADER;
          case 2: // MESSAGES
            return MESSAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.MessageHeader.class)));
      tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendJvmGc_args.class, metaDataMap);
    }

    public sendJvmGc_args() {
    }

    public sendJvmGc_args(
      com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header,
      java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage> messages)
    {
      this();
      this.header = header;
      this.messages = messages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendJvmGc_args(sendJvmGc_args other) {
      if (other.isSetHeader()) {
        this.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader(other.header);
      }
      if (other.isSetMessages()) {
        java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage> __this__messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage>(other.messages.size());
        for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage other_element : other.messages) {
          __this__messages.add(new com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage(other_element));
        }
        this.messages = __this__messages;
      }
    }

    public sendJvmGc_args deepCopy() {
      return new sendJvmGc_args(this);
    }

    @Override
    public void clear() {
      this.header = null;
      this.messages = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.sbss.bithon.agent.rpc.thrift.service.MessageHeader getHeader() {
      return this.header;
    }

    public sendJvmGc_args setHeader(@org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header) {
      this.header = header;
      return this;
    }

    public void unsetHeader() {
      this.header = null;
    }

    /** Returns true if field header is set (has been assigned a value) and false otherwise */
    public boolean isSetHeader() {
      return this.header != null;
    }

    public void setHeaderIsSet(boolean value) {
      if (!value) {
        this.header = null;
      }
    }

    public int getMessagesSize() {
      return (this.messages == null) ? 0 : this.messages.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage> getMessagesIterator() {
      return (this.messages == null) ? null : this.messages.iterator();
    }

    public void addToMessages(com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage elem) {
      if (this.messages == null) {
        this.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage>();
      }
      this.messages.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage> getMessages() {
      return this.messages;
    }

    public sendJvmGc_args setMessages(@org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage> messages) {
      this.messages = messages;
      return this;
    }

    public void unsetMessages() {
      this.messages = null;
    }

    /** Returns true if field messages is set (has been assigned a value) and false otherwise */
    public boolean isSetMessages() {
      return this.messages != null;
    }

    public void setMessagesIsSet(boolean value) {
      if (!value) {
        this.messages = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HEADER:
        if (value == null) {
          unsetHeader();
        } else {
          setHeader((com.sbss.bithon.agent.rpc.thrift.service.MessageHeader)value);
        }
        break;

      case MESSAGES:
        if (value == null) {
          unsetMessages();
        } else {
          setMessages((java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HEADER:
        return getHeader();

      case MESSAGES:
        return getMessages();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HEADER:
        return isSetHeader();
      case MESSAGES:
        return isSetMessages();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sendJvmGc_args)
        return this.equals((sendJvmGc_args)that);
      return false;
    }

    public boolean equals(sendJvmGc_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_header = true && this.isSetHeader();
      boolean that_present_header = true && that.isSetHeader();
      if (this_present_header || that_present_header) {
        if (!(this_present_header && that_present_header))
          return false;
        if (!this.header.equals(that.header))
          return false;
      }

      boolean this_present_messages = true && this.isSetMessages();
      boolean that_present_messages = true && that.isSetMessages();
      if (this_present_messages || that_present_messages) {
        if (!(this_present_messages && that_present_messages))
          return false;
        if (!this.messages.equals(that.messages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHeader()) ? 131071 : 524287);
      if (isSetHeader())
        hashCode = hashCode * 8191 + header.hashCode();

      hashCode = hashCode * 8191 + ((isSetMessages()) ? 131071 : 524287);
      if (isSetMessages())
        hashCode = hashCode * 8191 + messages.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendJvmGc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHeader(), other.isSetHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMessages(), other.isSetMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendJvmGc_args(");
      boolean first = true;

      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        sb.append(this.messages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (header == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not present! Struct: " + toString());
      }
      if (messages == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messages' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (header != null) {
        header.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendJvmGc_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendJvmGc_argsStandardScheme getScheme() {
        return new sendJvmGc_argsStandardScheme();
      }
    }

    private static class sendJvmGc_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendJvmGc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendJvmGc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
                struct.header.read(iprot);
                struct.setHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage>(_list16.size);
                  @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage();
                    _elem17.read(iprot);
                    struct.messages.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setMessagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendJvmGc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.header != null) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.messages != null) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
            for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage _iter19 : struct.messages)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendJvmGc_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendJvmGc_argsTupleScheme getScheme() {
        return new sendJvmGc_argsTupleScheme();
      }
    }

    private static class sendJvmGc_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendJvmGc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendJvmGc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header.write(oprot);
        {
          oprot.writeI32(struct.messages.size());
          for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage _iter20 : struct.messages)
          {
            _iter20.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendJvmGc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
        {
          org.apache.thrift.protocol.TList _list21 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage>(_list21.size);
          @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.JvmGcMetricMessage();
            _elem22.read(iprot);
            struct.messages.add(_elem22);
          }
        }
        struct.setMessagesIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendWebServer_args implements org.apache.thrift.TBase<sendWebServer_args, sendWebServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendWebServer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendWebServer_args");

    private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendWebServer_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendWebServer_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage> messages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEADER((short)1, "header"),
      MESSAGES((short)2, "messages");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEADER
            return HEADER;
          case 2: // MESSAGES
            return MESSAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.MessageHeader.class)));
      tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendWebServer_args.class, metaDataMap);
    }

    public sendWebServer_args() {
    }

    public sendWebServer_args(
      com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header,
      java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage> messages)
    {
      this();
      this.header = header;
      this.messages = messages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendWebServer_args(sendWebServer_args other) {
      if (other.isSetHeader()) {
        this.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader(other.header);
      }
      if (other.isSetMessages()) {
        java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage> __this__messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage>(other.messages.size());
        for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage other_element : other.messages) {
          __this__messages.add(new com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage(other_element));
        }
        this.messages = __this__messages;
      }
    }

    public sendWebServer_args deepCopy() {
      return new sendWebServer_args(this);
    }

    @Override
    public void clear() {
      this.header = null;
      this.messages = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.sbss.bithon.agent.rpc.thrift.service.MessageHeader getHeader() {
      return this.header;
    }

    public sendWebServer_args setHeader(@org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header) {
      this.header = header;
      return this;
    }

    public void unsetHeader() {
      this.header = null;
    }

    /** Returns true if field header is set (has been assigned a value) and false otherwise */
    public boolean isSetHeader() {
      return this.header != null;
    }

    public void setHeaderIsSet(boolean value) {
      if (!value) {
        this.header = null;
      }
    }

    public int getMessagesSize() {
      return (this.messages == null) ? 0 : this.messages.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage> getMessagesIterator() {
      return (this.messages == null) ? null : this.messages.iterator();
    }

    public void addToMessages(com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage elem) {
      if (this.messages == null) {
        this.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage>();
      }
      this.messages.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage> getMessages() {
      return this.messages;
    }

    public sendWebServer_args setMessages(@org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage> messages) {
      this.messages = messages;
      return this;
    }

    public void unsetMessages() {
      this.messages = null;
    }

    /** Returns true if field messages is set (has been assigned a value) and false otherwise */
    public boolean isSetMessages() {
      return this.messages != null;
    }

    public void setMessagesIsSet(boolean value) {
      if (!value) {
        this.messages = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HEADER:
        if (value == null) {
          unsetHeader();
        } else {
          setHeader((com.sbss.bithon.agent.rpc.thrift.service.MessageHeader)value);
        }
        break;

      case MESSAGES:
        if (value == null) {
          unsetMessages();
        } else {
          setMessages((java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HEADER:
        return getHeader();

      case MESSAGES:
        return getMessages();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HEADER:
        return isSetHeader();
      case MESSAGES:
        return isSetMessages();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sendWebServer_args)
        return this.equals((sendWebServer_args)that);
      return false;
    }

    public boolean equals(sendWebServer_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_header = true && this.isSetHeader();
      boolean that_present_header = true && that.isSetHeader();
      if (this_present_header || that_present_header) {
        if (!(this_present_header && that_present_header))
          return false;
        if (!this.header.equals(that.header))
          return false;
      }

      boolean this_present_messages = true && this.isSetMessages();
      boolean that_present_messages = true && that.isSetMessages();
      if (this_present_messages || that_present_messages) {
        if (!(this_present_messages && that_present_messages))
          return false;
        if (!this.messages.equals(that.messages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHeader()) ? 131071 : 524287);
      if (isSetHeader())
        hashCode = hashCode * 8191 + header.hashCode();

      hashCode = hashCode * 8191 + ((isSetMessages()) ? 131071 : 524287);
      if (isSetMessages())
        hashCode = hashCode * 8191 + messages.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendWebServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHeader(), other.isSetHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMessages(), other.isSetMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendWebServer_args(");
      boolean first = true;

      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        sb.append(this.messages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (header == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not present! Struct: " + toString());
      }
      if (messages == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messages' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (header != null) {
        header.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendWebServer_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendWebServer_argsStandardScheme getScheme() {
        return new sendWebServer_argsStandardScheme();
      }
    }

    private static class sendWebServer_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendWebServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendWebServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
                struct.header.read(iprot);
                struct.setHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage>(_list24.size);
                  @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage();
                    _elem25.read(iprot);
                    struct.messages.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setMessagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendWebServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.header != null) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.messages != null) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
            for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage _iter27 : struct.messages)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendWebServer_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendWebServer_argsTupleScheme getScheme() {
        return new sendWebServer_argsTupleScheme();
      }
    }

    private static class sendWebServer_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendWebServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendWebServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header.write(oprot);
        {
          oprot.writeI32(struct.messages.size());
          for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage _iter28 : struct.messages)
          {
            _iter28.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendWebServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
        {
          org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage>(_list29.size);
          @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.WebServerMetricMessage();
            _elem30.read(iprot);
            struct.messages.add(_elem30);
          }
        }
        struct.setMessagesIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendException_args implements org.apache.thrift.TBase<sendException_args, sendException_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendException_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendException_args");

    private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendException_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendException_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage> messages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEADER((short)1, "header"),
      MESSAGES((short)2, "messages");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEADER
            return HEADER;
          case 2: // MESSAGES
            return MESSAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.MessageHeader.class)));
      tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendException_args.class, metaDataMap);
    }

    public sendException_args() {
    }

    public sendException_args(
      com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header,
      java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage> messages)
    {
      this();
      this.header = header;
      this.messages = messages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendException_args(sendException_args other) {
      if (other.isSetHeader()) {
        this.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader(other.header);
      }
      if (other.isSetMessages()) {
        java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage> __this__messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage>(other.messages.size());
        for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage other_element : other.messages) {
          __this__messages.add(new com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage(other_element));
        }
        this.messages = __this__messages;
      }
    }

    public sendException_args deepCopy() {
      return new sendException_args(this);
    }

    @Override
    public void clear() {
      this.header = null;
      this.messages = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.sbss.bithon.agent.rpc.thrift.service.MessageHeader getHeader() {
      return this.header;
    }

    public sendException_args setHeader(@org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header) {
      this.header = header;
      return this;
    }

    public void unsetHeader() {
      this.header = null;
    }

    /** Returns true if field header is set (has been assigned a value) and false otherwise */
    public boolean isSetHeader() {
      return this.header != null;
    }

    public void setHeaderIsSet(boolean value) {
      if (!value) {
        this.header = null;
      }
    }

    public int getMessagesSize() {
      return (this.messages == null) ? 0 : this.messages.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage> getMessagesIterator() {
      return (this.messages == null) ? null : this.messages.iterator();
    }

    public void addToMessages(com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage elem) {
      if (this.messages == null) {
        this.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage>();
      }
      this.messages.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage> getMessages() {
      return this.messages;
    }

    public sendException_args setMessages(@org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage> messages) {
      this.messages = messages;
      return this;
    }

    public void unsetMessages() {
      this.messages = null;
    }

    /** Returns true if field messages is set (has been assigned a value) and false otherwise */
    public boolean isSetMessages() {
      return this.messages != null;
    }

    public void setMessagesIsSet(boolean value) {
      if (!value) {
        this.messages = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HEADER:
        if (value == null) {
          unsetHeader();
        } else {
          setHeader((com.sbss.bithon.agent.rpc.thrift.service.MessageHeader)value);
        }
        break;

      case MESSAGES:
        if (value == null) {
          unsetMessages();
        } else {
          setMessages((java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HEADER:
        return getHeader();

      case MESSAGES:
        return getMessages();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HEADER:
        return isSetHeader();
      case MESSAGES:
        return isSetMessages();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sendException_args)
        return this.equals((sendException_args)that);
      return false;
    }

    public boolean equals(sendException_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_header = true && this.isSetHeader();
      boolean that_present_header = true && that.isSetHeader();
      if (this_present_header || that_present_header) {
        if (!(this_present_header && that_present_header))
          return false;
        if (!this.header.equals(that.header))
          return false;
      }

      boolean this_present_messages = true && this.isSetMessages();
      boolean that_present_messages = true && that.isSetMessages();
      if (this_present_messages || that_present_messages) {
        if (!(this_present_messages && that_present_messages))
          return false;
        if (!this.messages.equals(that.messages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHeader()) ? 131071 : 524287);
      if (isSetHeader())
        hashCode = hashCode * 8191 + header.hashCode();

      hashCode = hashCode * 8191 + ((isSetMessages()) ? 131071 : 524287);
      if (isSetMessages())
        hashCode = hashCode * 8191 + messages.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendException_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHeader(), other.isSetHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMessages(), other.isSetMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendException_args(");
      boolean first = true;

      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        sb.append(this.messages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (header == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not present! Struct: " + toString());
      }
      if (messages == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messages' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (header != null) {
        header.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendException_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendException_argsStandardScheme getScheme() {
        return new sendException_argsStandardScheme();
      }
    }

    private static class sendException_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendException_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendException_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
                struct.header.read(iprot);
                struct.setHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage>(_list32.size);
                  @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage();
                    _elem33.read(iprot);
                    struct.messages.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setMessagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendException_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.header != null) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.messages != null) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
            for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage _iter35 : struct.messages)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendException_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendException_argsTupleScheme getScheme() {
        return new sendException_argsTupleScheme();
      }
    }

    private static class sendException_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendException_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendException_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header.write(oprot);
        {
          oprot.writeI32(struct.messages.size());
          for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage _iter36 : struct.messages)
          {
            _iter36.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendException_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
        {
          org.apache.thrift.protocol.TList _list37 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage>(_list37.size);
          @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.ExceptionMetricMessage();
            _elem38.read(iprot);
            struct.messages.add(_elem38);
          }
        }
        struct.setMessagesIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendHttpClient_args implements org.apache.thrift.TBase<sendHttpClient_args, sendHttpClient_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendHttpClient_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendHttpClient_args");

    private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendHttpClient_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendHttpClient_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage> messages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEADER((short)1, "header"),
      MESSAGES((short)2, "messages");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEADER
            return HEADER;
          case 2: // MESSAGES
            return MESSAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.MessageHeader.class)));
      tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendHttpClient_args.class, metaDataMap);
    }

    public sendHttpClient_args() {
    }

    public sendHttpClient_args(
      com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header,
      java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage> messages)
    {
      this();
      this.header = header;
      this.messages = messages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendHttpClient_args(sendHttpClient_args other) {
      if (other.isSetHeader()) {
        this.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader(other.header);
      }
      if (other.isSetMessages()) {
        java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage> __this__messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage>(other.messages.size());
        for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage other_element : other.messages) {
          __this__messages.add(new com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage(other_element));
        }
        this.messages = __this__messages;
      }
    }

    public sendHttpClient_args deepCopy() {
      return new sendHttpClient_args(this);
    }

    @Override
    public void clear() {
      this.header = null;
      this.messages = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.sbss.bithon.agent.rpc.thrift.service.MessageHeader getHeader() {
      return this.header;
    }

    public sendHttpClient_args setHeader(@org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header) {
      this.header = header;
      return this;
    }

    public void unsetHeader() {
      this.header = null;
    }

    /** Returns true if field header is set (has been assigned a value) and false otherwise */
    public boolean isSetHeader() {
      return this.header != null;
    }

    public void setHeaderIsSet(boolean value) {
      if (!value) {
        this.header = null;
      }
    }

    public int getMessagesSize() {
      return (this.messages == null) ? 0 : this.messages.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage> getMessagesIterator() {
      return (this.messages == null) ? null : this.messages.iterator();
    }

    public void addToMessages(com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage elem) {
      if (this.messages == null) {
        this.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage>();
      }
      this.messages.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage> getMessages() {
      return this.messages;
    }

    public sendHttpClient_args setMessages(@org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage> messages) {
      this.messages = messages;
      return this;
    }

    public void unsetMessages() {
      this.messages = null;
    }

    /** Returns true if field messages is set (has been assigned a value) and false otherwise */
    public boolean isSetMessages() {
      return this.messages != null;
    }

    public void setMessagesIsSet(boolean value) {
      if (!value) {
        this.messages = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HEADER:
        if (value == null) {
          unsetHeader();
        } else {
          setHeader((com.sbss.bithon.agent.rpc.thrift.service.MessageHeader)value);
        }
        break;

      case MESSAGES:
        if (value == null) {
          unsetMessages();
        } else {
          setMessages((java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HEADER:
        return getHeader();

      case MESSAGES:
        return getMessages();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HEADER:
        return isSetHeader();
      case MESSAGES:
        return isSetMessages();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sendHttpClient_args)
        return this.equals((sendHttpClient_args)that);
      return false;
    }

    public boolean equals(sendHttpClient_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_header = true && this.isSetHeader();
      boolean that_present_header = true && that.isSetHeader();
      if (this_present_header || that_present_header) {
        if (!(this_present_header && that_present_header))
          return false;
        if (!this.header.equals(that.header))
          return false;
      }

      boolean this_present_messages = true && this.isSetMessages();
      boolean that_present_messages = true && that.isSetMessages();
      if (this_present_messages || that_present_messages) {
        if (!(this_present_messages && that_present_messages))
          return false;
        if (!this.messages.equals(that.messages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHeader()) ? 131071 : 524287);
      if (isSetHeader())
        hashCode = hashCode * 8191 + header.hashCode();

      hashCode = hashCode * 8191 + ((isSetMessages()) ? 131071 : 524287);
      if (isSetMessages())
        hashCode = hashCode * 8191 + messages.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendHttpClient_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHeader(), other.isSetHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMessages(), other.isSetMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendHttpClient_args(");
      boolean first = true;

      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        sb.append(this.messages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (header == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not present! Struct: " + toString());
      }
      if (messages == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messages' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (header != null) {
        header.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendHttpClient_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendHttpClient_argsStandardScheme getScheme() {
        return new sendHttpClient_argsStandardScheme();
      }
    }

    private static class sendHttpClient_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendHttpClient_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendHttpClient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
                struct.header.read(iprot);
                struct.setHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage>(_list40.size);
                  @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage();
                    _elem41.read(iprot);
                    struct.messages.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setMessagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendHttpClient_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.header != null) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.messages != null) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
            for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage _iter43 : struct.messages)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendHttpClient_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendHttpClient_argsTupleScheme getScheme() {
        return new sendHttpClient_argsTupleScheme();
      }
    }

    private static class sendHttpClient_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendHttpClient_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendHttpClient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header.write(oprot);
        {
          oprot.writeI32(struct.messages.size());
          for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage _iter44 : struct.messages)
          {
            _iter44.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendHttpClient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
        {
          org.apache.thrift.protocol.TList _list45 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage>(_list45.size);
          @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.HttpClientMetricMessage();
            _elem46.read(iprot);
            struct.messages.add(_elem46);
          }
        }
        struct.setMessagesIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendThreadPool_args implements org.apache.thrift.TBase<sendThreadPool_args, sendThreadPool_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendThreadPool_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendThreadPool_args");

    private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendThreadPool_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendThreadPool_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage> messages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEADER((short)1, "header"),
      MESSAGES((short)2, "messages");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEADER
            return HEADER;
          case 2: // MESSAGES
            return MESSAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.MessageHeader.class)));
      tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendThreadPool_args.class, metaDataMap);
    }

    public sendThreadPool_args() {
    }

    public sendThreadPool_args(
      com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header,
      java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage> messages)
    {
      this();
      this.header = header;
      this.messages = messages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendThreadPool_args(sendThreadPool_args other) {
      if (other.isSetHeader()) {
        this.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader(other.header);
      }
      if (other.isSetMessages()) {
        java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage> __this__messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage>(other.messages.size());
        for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage other_element : other.messages) {
          __this__messages.add(new com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage(other_element));
        }
        this.messages = __this__messages;
      }
    }

    public sendThreadPool_args deepCopy() {
      return new sendThreadPool_args(this);
    }

    @Override
    public void clear() {
      this.header = null;
      this.messages = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.sbss.bithon.agent.rpc.thrift.service.MessageHeader getHeader() {
      return this.header;
    }

    public sendThreadPool_args setHeader(@org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header) {
      this.header = header;
      return this;
    }

    public void unsetHeader() {
      this.header = null;
    }

    /** Returns true if field header is set (has been assigned a value) and false otherwise */
    public boolean isSetHeader() {
      return this.header != null;
    }

    public void setHeaderIsSet(boolean value) {
      if (!value) {
        this.header = null;
      }
    }

    public int getMessagesSize() {
      return (this.messages == null) ? 0 : this.messages.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage> getMessagesIterator() {
      return (this.messages == null) ? null : this.messages.iterator();
    }

    public void addToMessages(com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage elem) {
      if (this.messages == null) {
        this.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage>();
      }
      this.messages.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage> getMessages() {
      return this.messages;
    }

    public sendThreadPool_args setMessages(@org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage> messages) {
      this.messages = messages;
      return this;
    }

    public void unsetMessages() {
      this.messages = null;
    }

    /** Returns true if field messages is set (has been assigned a value) and false otherwise */
    public boolean isSetMessages() {
      return this.messages != null;
    }

    public void setMessagesIsSet(boolean value) {
      if (!value) {
        this.messages = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HEADER:
        if (value == null) {
          unsetHeader();
        } else {
          setHeader((com.sbss.bithon.agent.rpc.thrift.service.MessageHeader)value);
        }
        break;

      case MESSAGES:
        if (value == null) {
          unsetMessages();
        } else {
          setMessages((java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HEADER:
        return getHeader();

      case MESSAGES:
        return getMessages();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HEADER:
        return isSetHeader();
      case MESSAGES:
        return isSetMessages();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sendThreadPool_args)
        return this.equals((sendThreadPool_args)that);
      return false;
    }

    public boolean equals(sendThreadPool_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_header = true && this.isSetHeader();
      boolean that_present_header = true && that.isSetHeader();
      if (this_present_header || that_present_header) {
        if (!(this_present_header && that_present_header))
          return false;
        if (!this.header.equals(that.header))
          return false;
      }

      boolean this_present_messages = true && this.isSetMessages();
      boolean that_present_messages = true && that.isSetMessages();
      if (this_present_messages || that_present_messages) {
        if (!(this_present_messages && that_present_messages))
          return false;
        if (!this.messages.equals(that.messages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHeader()) ? 131071 : 524287);
      if (isSetHeader())
        hashCode = hashCode * 8191 + header.hashCode();

      hashCode = hashCode * 8191 + ((isSetMessages()) ? 131071 : 524287);
      if (isSetMessages())
        hashCode = hashCode * 8191 + messages.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendThreadPool_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHeader(), other.isSetHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMessages(), other.isSetMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendThreadPool_args(");
      boolean first = true;

      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        sb.append(this.messages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (header == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not present! Struct: " + toString());
      }
      if (messages == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messages' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (header != null) {
        header.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendThreadPool_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendThreadPool_argsStandardScheme getScheme() {
        return new sendThreadPool_argsStandardScheme();
      }
    }

    private static class sendThreadPool_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendThreadPool_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendThreadPool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
                struct.header.read(iprot);
                struct.setHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage>(_list48.size);
                  @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage();
                    _elem49.read(iprot);
                    struct.messages.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setMessagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendThreadPool_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.header != null) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.messages != null) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
            for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage _iter51 : struct.messages)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendThreadPool_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendThreadPool_argsTupleScheme getScheme() {
        return new sendThreadPool_argsTupleScheme();
      }
    }

    private static class sendThreadPool_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendThreadPool_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendThreadPool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header.write(oprot);
        {
          oprot.writeI32(struct.messages.size());
          for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage _iter52 : struct.messages)
          {
            _iter52.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendThreadPool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
        {
          org.apache.thrift.protocol.TList _list53 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage>(_list53.size);
          @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.ThreadPoolMetricMessage();
            _elem54.read(iprot);
            struct.messages.add(_elem54);
          }
        }
        struct.setMessagesIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendJdbc_args implements org.apache.thrift.TBase<sendJdbc_args, sendJdbc_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendJdbc_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendJdbc_args");

    private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendJdbc_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendJdbc_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage> messages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEADER((short)1, "header"),
      MESSAGES((short)2, "messages");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEADER
            return HEADER;
          case 2: // MESSAGES
            return MESSAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.MessageHeader.class)));
      tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendJdbc_args.class, metaDataMap);
    }

    public sendJdbc_args() {
    }

    public sendJdbc_args(
      com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header,
      java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage> messages)
    {
      this();
      this.header = header;
      this.messages = messages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendJdbc_args(sendJdbc_args other) {
      if (other.isSetHeader()) {
        this.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader(other.header);
      }
      if (other.isSetMessages()) {
        java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage> __this__messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage>(other.messages.size());
        for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage other_element : other.messages) {
          __this__messages.add(new com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage(other_element));
        }
        this.messages = __this__messages;
      }
    }

    public sendJdbc_args deepCopy() {
      return new sendJdbc_args(this);
    }

    @Override
    public void clear() {
      this.header = null;
      this.messages = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.sbss.bithon.agent.rpc.thrift.service.MessageHeader getHeader() {
      return this.header;
    }

    public sendJdbc_args setHeader(@org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header) {
      this.header = header;
      return this;
    }

    public void unsetHeader() {
      this.header = null;
    }

    /** Returns true if field header is set (has been assigned a value) and false otherwise */
    public boolean isSetHeader() {
      return this.header != null;
    }

    public void setHeaderIsSet(boolean value) {
      if (!value) {
        this.header = null;
      }
    }

    public int getMessagesSize() {
      return (this.messages == null) ? 0 : this.messages.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage> getMessagesIterator() {
      return (this.messages == null) ? null : this.messages.iterator();
    }

    public void addToMessages(com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage elem) {
      if (this.messages == null) {
        this.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage>();
      }
      this.messages.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage> getMessages() {
      return this.messages;
    }

    public sendJdbc_args setMessages(@org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage> messages) {
      this.messages = messages;
      return this;
    }

    public void unsetMessages() {
      this.messages = null;
    }

    /** Returns true if field messages is set (has been assigned a value) and false otherwise */
    public boolean isSetMessages() {
      return this.messages != null;
    }

    public void setMessagesIsSet(boolean value) {
      if (!value) {
        this.messages = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HEADER:
        if (value == null) {
          unsetHeader();
        } else {
          setHeader((com.sbss.bithon.agent.rpc.thrift.service.MessageHeader)value);
        }
        break;

      case MESSAGES:
        if (value == null) {
          unsetMessages();
        } else {
          setMessages((java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HEADER:
        return getHeader();

      case MESSAGES:
        return getMessages();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HEADER:
        return isSetHeader();
      case MESSAGES:
        return isSetMessages();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sendJdbc_args)
        return this.equals((sendJdbc_args)that);
      return false;
    }

    public boolean equals(sendJdbc_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_header = true && this.isSetHeader();
      boolean that_present_header = true && that.isSetHeader();
      if (this_present_header || that_present_header) {
        if (!(this_present_header && that_present_header))
          return false;
        if (!this.header.equals(that.header))
          return false;
      }

      boolean this_present_messages = true && this.isSetMessages();
      boolean that_present_messages = true && that.isSetMessages();
      if (this_present_messages || that_present_messages) {
        if (!(this_present_messages && that_present_messages))
          return false;
        if (!this.messages.equals(that.messages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHeader()) ? 131071 : 524287);
      if (isSetHeader())
        hashCode = hashCode * 8191 + header.hashCode();

      hashCode = hashCode * 8191 + ((isSetMessages()) ? 131071 : 524287);
      if (isSetMessages())
        hashCode = hashCode * 8191 + messages.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendJdbc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHeader(), other.isSetHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMessages(), other.isSetMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendJdbc_args(");
      boolean first = true;

      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        sb.append(this.messages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (header == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not present! Struct: " + toString());
      }
      if (messages == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messages' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (header != null) {
        header.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendJdbc_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendJdbc_argsStandardScheme getScheme() {
        return new sendJdbc_argsStandardScheme();
      }
    }

    private static class sendJdbc_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendJdbc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendJdbc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
                struct.header.read(iprot);
                struct.setHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage>(_list56.size);
                  @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage();
                    _elem57.read(iprot);
                    struct.messages.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setMessagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendJdbc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.header != null) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.messages != null) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
            for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage _iter59 : struct.messages)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendJdbc_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendJdbc_argsTupleScheme getScheme() {
        return new sendJdbc_argsTupleScheme();
      }
    }

    private static class sendJdbc_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendJdbc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendJdbc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header.write(oprot);
        {
          oprot.writeI32(struct.messages.size());
          for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage _iter60 : struct.messages)
          {
            _iter60.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendJdbc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
        {
          org.apache.thrift.protocol.TList _list61 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage>(_list61.size);
          @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.JdbcPoolMetricMessage();
            _elem62.read(iprot);
            struct.messages.add(_elem62);
          }
        }
        struct.setMessagesIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendRedis_args implements org.apache.thrift.TBase<sendRedis_args, sendRedis_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendRedis_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendRedis_args");

    private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendRedis_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendRedis_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage> messages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEADER((short)1, "header"),
      MESSAGES((short)2, "messages");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEADER
            return HEADER;
          case 2: // MESSAGES
            return MESSAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.MessageHeader.class)));
      tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendRedis_args.class, metaDataMap);
    }

    public sendRedis_args() {
    }

    public sendRedis_args(
      com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header,
      java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage> messages)
    {
      this();
      this.header = header;
      this.messages = messages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendRedis_args(sendRedis_args other) {
      if (other.isSetHeader()) {
        this.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader(other.header);
      }
      if (other.isSetMessages()) {
        java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage> __this__messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage>(other.messages.size());
        for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage other_element : other.messages) {
          __this__messages.add(new com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage(other_element));
        }
        this.messages = __this__messages;
      }
    }

    public sendRedis_args deepCopy() {
      return new sendRedis_args(this);
    }

    @Override
    public void clear() {
      this.header = null;
      this.messages = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.sbss.bithon.agent.rpc.thrift.service.MessageHeader getHeader() {
      return this.header;
    }

    public sendRedis_args setHeader(@org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header) {
      this.header = header;
      return this;
    }

    public void unsetHeader() {
      this.header = null;
    }

    /** Returns true if field header is set (has been assigned a value) and false otherwise */
    public boolean isSetHeader() {
      return this.header != null;
    }

    public void setHeaderIsSet(boolean value) {
      if (!value) {
        this.header = null;
      }
    }

    public int getMessagesSize() {
      return (this.messages == null) ? 0 : this.messages.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage> getMessagesIterator() {
      return (this.messages == null) ? null : this.messages.iterator();
    }

    public void addToMessages(com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage elem) {
      if (this.messages == null) {
        this.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage>();
      }
      this.messages.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage> getMessages() {
      return this.messages;
    }

    public sendRedis_args setMessages(@org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage> messages) {
      this.messages = messages;
      return this;
    }

    public void unsetMessages() {
      this.messages = null;
    }

    /** Returns true if field messages is set (has been assigned a value) and false otherwise */
    public boolean isSetMessages() {
      return this.messages != null;
    }

    public void setMessagesIsSet(boolean value) {
      if (!value) {
        this.messages = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HEADER:
        if (value == null) {
          unsetHeader();
        } else {
          setHeader((com.sbss.bithon.agent.rpc.thrift.service.MessageHeader)value);
        }
        break;

      case MESSAGES:
        if (value == null) {
          unsetMessages();
        } else {
          setMessages((java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HEADER:
        return getHeader();

      case MESSAGES:
        return getMessages();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HEADER:
        return isSetHeader();
      case MESSAGES:
        return isSetMessages();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sendRedis_args)
        return this.equals((sendRedis_args)that);
      return false;
    }

    public boolean equals(sendRedis_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_header = true && this.isSetHeader();
      boolean that_present_header = true && that.isSetHeader();
      if (this_present_header || that_present_header) {
        if (!(this_present_header && that_present_header))
          return false;
        if (!this.header.equals(that.header))
          return false;
      }

      boolean this_present_messages = true && this.isSetMessages();
      boolean that_present_messages = true && that.isSetMessages();
      if (this_present_messages || that_present_messages) {
        if (!(this_present_messages && that_present_messages))
          return false;
        if (!this.messages.equals(that.messages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHeader()) ? 131071 : 524287);
      if (isSetHeader())
        hashCode = hashCode * 8191 + header.hashCode();

      hashCode = hashCode * 8191 + ((isSetMessages()) ? 131071 : 524287);
      if (isSetMessages())
        hashCode = hashCode * 8191 + messages.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendRedis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHeader(), other.isSetHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMessages(), other.isSetMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendRedis_args(");
      boolean first = true;

      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        sb.append(this.messages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (header == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not present! Struct: " + toString());
      }
      if (messages == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messages' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (header != null) {
        header.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendRedis_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendRedis_argsStandardScheme getScheme() {
        return new sendRedis_argsStandardScheme();
      }
    }

    private static class sendRedis_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendRedis_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendRedis_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
                struct.header.read(iprot);
                struct.setHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage>(_list64.size);
                  @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage();
                    _elem65.read(iprot);
                    struct.messages.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setMessagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendRedis_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.header != null) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.messages != null) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
            for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage _iter67 : struct.messages)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendRedis_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendRedis_argsTupleScheme getScheme() {
        return new sendRedis_argsTupleScheme();
      }
    }

    private static class sendRedis_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendRedis_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendRedis_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header.write(oprot);
        {
          oprot.writeI32(struct.messages.size());
          for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage _iter68 : struct.messages)
          {
            _iter68.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendRedis_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
        {
          org.apache.thrift.protocol.TList _list69 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage>(_list69.size);
          @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.RedisMetricMessage();
            _elem70.read(iprot);
            struct.messages.add(_elem70);
          }
        }
        struct.setMessagesIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendSql_args implements org.apache.thrift.TBase<sendSql_args, sendSql_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendSql_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendSql_args");

    private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendSql_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendSql_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage> messages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEADER((short)1, "header"),
      MESSAGES((short)2, "messages");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEADER
            return HEADER;
          case 2: // MESSAGES
            return MESSAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.MessageHeader.class)));
      tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendSql_args.class, metaDataMap);
    }

    public sendSql_args() {
    }

    public sendSql_args(
      com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header,
      java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage> messages)
    {
      this();
      this.header = header;
      this.messages = messages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendSql_args(sendSql_args other) {
      if (other.isSetHeader()) {
        this.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader(other.header);
      }
      if (other.isSetMessages()) {
        java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage> __this__messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage>(other.messages.size());
        for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage other_element : other.messages) {
          __this__messages.add(new com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage(other_element));
        }
        this.messages = __this__messages;
      }
    }

    public sendSql_args deepCopy() {
      return new sendSql_args(this);
    }

    @Override
    public void clear() {
      this.header = null;
      this.messages = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.sbss.bithon.agent.rpc.thrift.service.MessageHeader getHeader() {
      return this.header;
    }

    public sendSql_args setHeader(@org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header) {
      this.header = header;
      return this;
    }

    public void unsetHeader() {
      this.header = null;
    }

    /** Returns true if field header is set (has been assigned a value) and false otherwise */
    public boolean isSetHeader() {
      return this.header != null;
    }

    public void setHeaderIsSet(boolean value) {
      if (!value) {
        this.header = null;
      }
    }

    public int getMessagesSize() {
      return (this.messages == null) ? 0 : this.messages.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage> getMessagesIterator() {
      return (this.messages == null) ? null : this.messages.iterator();
    }

    public void addToMessages(com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage elem) {
      if (this.messages == null) {
        this.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage>();
      }
      this.messages.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage> getMessages() {
      return this.messages;
    }

    public sendSql_args setMessages(@org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage> messages) {
      this.messages = messages;
      return this;
    }

    public void unsetMessages() {
      this.messages = null;
    }

    /** Returns true if field messages is set (has been assigned a value) and false otherwise */
    public boolean isSetMessages() {
      return this.messages != null;
    }

    public void setMessagesIsSet(boolean value) {
      if (!value) {
        this.messages = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HEADER:
        if (value == null) {
          unsetHeader();
        } else {
          setHeader((com.sbss.bithon.agent.rpc.thrift.service.MessageHeader)value);
        }
        break;

      case MESSAGES:
        if (value == null) {
          unsetMessages();
        } else {
          setMessages((java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HEADER:
        return getHeader();

      case MESSAGES:
        return getMessages();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HEADER:
        return isSetHeader();
      case MESSAGES:
        return isSetMessages();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sendSql_args)
        return this.equals((sendSql_args)that);
      return false;
    }

    public boolean equals(sendSql_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_header = true && this.isSetHeader();
      boolean that_present_header = true && that.isSetHeader();
      if (this_present_header || that_present_header) {
        if (!(this_present_header && that_present_header))
          return false;
        if (!this.header.equals(that.header))
          return false;
      }

      boolean this_present_messages = true && this.isSetMessages();
      boolean that_present_messages = true && that.isSetMessages();
      if (this_present_messages || that_present_messages) {
        if (!(this_present_messages && that_present_messages))
          return false;
        if (!this.messages.equals(that.messages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHeader()) ? 131071 : 524287);
      if (isSetHeader())
        hashCode = hashCode * 8191 + header.hashCode();

      hashCode = hashCode * 8191 + ((isSetMessages()) ? 131071 : 524287);
      if (isSetMessages())
        hashCode = hashCode * 8191 + messages.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendSql_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHeader(), other.isSetHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMessages(), other.isSetMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendSql_args(");
      boolean first = true;

      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        sb.append(this.messages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (header == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not present! Struct: " + toString());
      }
      if (messages == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messages' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (header != null) {
        header.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendSql_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendSql_argsStandardScheme getScheme() {
        return new sendSql_argsStandardScheme();
      }
    }

    private static class sendSql_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendSql_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendSql_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
                struct.header.read(iprot);
                struct.setHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage>(_list72.size);
                  @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage();
                    _elem73.read(iprot);
                    struct.messages.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setMessagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendSql_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.header != null) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.messages != null) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
            for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage _iter75 : struct.messages)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendSql_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendSql_argsTupleScheme getScheme() {
        return new sendSql_argsTupleScheme();
      }
    }

    private static class sendSql_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendSql_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendSql_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header.write(oprot);
        {
          oprot.writeI32(struct.messages.size());
          for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage _iter76 : struct.messages)
          {
            _iter76.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendSql_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
        {
          org.apache.thrift.protocol.TList _list77 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage>(_list77.size);
          @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.SqlMetricMessage();
            _elem78.read(iprot);
            struct.messages.add(_elem78);
          }
        }
        struct.setMessagesIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendMongoDb_args implements org.apache.thrift.TBase<sendMongoDb_args, sendMongoDb_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendMongoDb_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMongoDb_args");

    private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendMongoDb_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendMongoDb_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage> messages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEADER((short)1, "header"),
      MESSAGES((short)2, "messages");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEADER
            return HEADER;
          case 2: // MESSAGES
            return MESSAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.MessageHeader.class)));
      tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMongoDb_args.class, metaDataMap);
    }

    public sendMongoDb_args() {
    }

    public sendMongoDb_args(
      com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header,
      java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage> messages)
    {
      this();
      this.header = header;
      this.messages = messages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMongoDb_args(sendMongoDb_args other) {
      if (other.isSetHeader()) {
        this.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader(other.header);
      }
      if (other.isSetMessages()) {
        java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage> __this__messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage>(other.messages.size());
        for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage other_element : other.messages) {
          __this__messages.add(new com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage(other_element));
        }
        this.messages = __this__messages;
      }
    }

    public sendMongoDb_args deepCopy() {
      return new sendMongoDb_args(this);
    }

    @Override
    public void clear() {
      this.header = null;
      this.messages = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.sbss.bithon.agent.rpc.thrift.service.MessageHeader getHeader() {
      return this.header;
    }

    public sendMongoDb_args setHeader(@org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.MessageHeader header) {
      this.header = header;
      return this;
    }

    public void unsetHeader() {
      this.header = null;
    }

    /** Returns true if field header is set (has been assigned a value) and false otherwise */
    public boolean isSetHeader() {
      return this.header != null;
    }

    public void setHeaderIsSet(boolean value) {
      if (!value) {
        this.header = null;
      }
    }

    public int getMessagesSize() {
      return (this.messages == null) ? 0 : this.messages.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage> getMessagesIterator() {
      return (this.messages == null) ? null : this.messages.iterator();
    }

    public void addToMessages(com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage elem) {
      if (this.messages == null) {
        this.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage>();
      }
      this.messages.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage> getMessages() {
      return this.messages;
    }

    public sendMongoDb_args setMessages(@org.apache.thrift.annotation.Nullable java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage> messages) {
      this.messages = messages;
      return this;
    }

    public void unsetMessages() {
      this.messages = null;
    }

    /** Returns true if field messages is set (has been assigned a value) and false otherwise */
    public boolean isSetMessages() {
      return this.messages != null;
    }

    public void setMessagesIsSet(boolean value) {
      if (!value) {
        this.messages = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HEADER:
        if (value == null) {
          unsetHeader();
        } else {
          setHeader((com.sbss.bithon.agent.rpc.thrift.service.MessageHeader)value);
        }
        break;

      case MESSAGES:
        if (value == null) {
          unsetMessages();
        } else {
          setMessages((java.util.List<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HEADER:
        return getHeader();

      case MESSAGES:
        return getMessages();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HEADER:
        return isSetHeader();
      case MESSAGES:
        return isSetMessages();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sendMongoDb_args)
        return this.equals((sendMongoDb_args)that);
      return false;
    }

    public boolean equals(sendMongoDb_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_header = true && this.isSetHeader();
      boolean that_present_header = true && that.isSetHeader();
      if (this_present_header || that_present_header) {
        if (!(this_present_header && that_present_header))
          return false;
        if (!this.header.equals(that.header))
          return false;
      }

      boolean this_present_messages = true && this.isSetMessages();
      boolean that_present_messages = true && that.isSetMessages();
      if (this_present_messages || that_present_messages) {
        if (!(this_present_messages && that_present_messages))
          return false;
        if (!this.messages.equals(that.messages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHeader()) ? 131071 : 524287);
      if (isSetHeader())
        hashCode = hashCode * 8191 + header.hashCode();

      hashCode = hashCode * 8191 + ((isSetMessages()) ? 131071 : 524287);
      if (isSetMessages())
        hashCode = hashCode * 8191 + messages.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendMongoDb_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHeader(), other.isSetHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMessages(), other.isSetMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendMongoDb_args(");
      boolean first = true;

      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        sb.append(this.messages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (header == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not present! Struct: " + toString());
      }
      if (messages == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messages' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (header != null) {
        header.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMongoDb_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendMongoDb_argsStandardScheme getScheme() {
        return new sendMongoDb_argsStandardScheme();
      }
    }

    private static class sendMongoDb_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendMongoDb_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMongoDb_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
                struct.header.read(iprot);
                struct.setHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage>(_list80.size);
                  @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage();
                    _elem81.read(iprot);
                    struct.messages.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setMessagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMongoDb_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.header != null) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.messages != null) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
            for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage _iter83 : struct.messages)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMongoDb_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendMongoDb_argsTupleScheme getScheme() {
        return new sendMongoDb_argsTupleScheme();
      }
    }

    private static class sendMongoDb_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendMongoDb_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMongoDb_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header.write(oprot);
        {
          oprot.writeI32(struct.messages.size());
          for (com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage _iter84 : struct.messages)
          {
            _iter84.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMongoDb_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.header = new com.sbss.bithon.agent.rpc.thrift.service.MessageHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
        {
          org.apache.thrift.protocol.TList _list85 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.messages = new java.util.ArrayList<com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage>(_list85.size);
          @org.apache.thrift.annotation.Nullable com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage _elem86;
          for (int _i87 = 0; _i87 < _list85.size; ++_i87)
          {
            _elem86 = new com.sbss.bithon.agent.rpc.thrift.service.metric.message.MongoDbMetricMessage();
            _elem86.read(iprot);
            struct.messages.add(_elem86);
          }
        }
        struct.setMessagesIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
