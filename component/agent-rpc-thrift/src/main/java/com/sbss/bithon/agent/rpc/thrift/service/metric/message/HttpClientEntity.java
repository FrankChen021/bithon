/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sbss.bithon.agent.rpc.thrift.service.metric.message;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-05")
public class HttpClientEntity implements org.apache.thrift.TBase<HttpClientEntity, HttpClientEntity._Fields>, java.io.Serializable, Cloneable, Comparable<HttpClientEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HttpClientEntity");

  private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("method", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("costTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COUNT4XX_FIELD_DESC = new org.apache.thrift.protocol.TField("count4xx", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField COUNT5XX_FIELD_DESC = new org.apache.thrift.protocol.TField("count5xx", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField REQUEST_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestCount", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField EXCEPTION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionCount", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField REQUEST_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("requestBytes", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField RESPONSE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("responseBytes", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HttpClientEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HttpClientEntityTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String uri; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String method; // required
  public long costTime; // required
  public long count4xx; // required
  public long count5xx; // required
  public long requestCount; // required
  public long exceptionCount; // required
  public long requestBytes; // required
  public long responseBytes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    URI((short)1, "uri"),
    METHOD((short)2, "method"),
    COST_TIME((short)3, "costTime"),
    COUNT4XX((short)4, "count4xx"),
    COUNT5XX((short)5, "count5xx"),
    REQUEST_COUNT((short)6, "requestCount"),
    EXCEPTION_COUNT((short)7, "exceptionCount"),
    REQUEST_BYTES((short)8, "requestBytes"),
    RESPONSE_BYTES((short)9, "responseBytes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // URI
          return URI;
        case 2: // METHOD
          return METHOD;
        case 3: // COST_TIME
          return COST_TIME;
        case 4: // COUNT4XX
          return COUNT4XX;
        case 5: // COUNT5XX
          return COUNT5XX;
        case 6: // REQUEST_COUNT
          return REQUEST_COUNT;
        case 7: // EXCEPTION_COUNT
          return EXCEPTION_COUNT;
        case 8: // REQUEST_BYTES
          return REQUEST_BYTES;
        case 9: // RESPONSE_BYTES
          return RESPONSE_BYTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COSTTIME_ISSET_ID = 0;
  private static final int __COUNT4XX_ISSET_ID = 1;
  private static final int __COUNT5XX_ISSET_ID = 2;
  private static final int __REQUESTCOUNT_ISSET_ID = 3;
  private static final int __EXCEPTIONCOUNT_ISSET_ID = 4;
  private static final int __REQUESTBYTES_ISSET_ID = 5;
  private static final int __RESPONSEBYTES_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METHOD, new org.apache.thrift.meta_data.FieldMetaData("method", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COST_TIME, new org.apache.thrift.meta_data.FieldMetaData("costTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COUNT4XX, new org.apache.thrift.meta_data.FieldMetaData("count4xx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COUNT5XX, new org.apache.thrift.meta_data.FieldMetaData("count5xx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUEST_COUNT, new org.apache.thrift.meta_data.FieldMetaData("requestCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXCEPTION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("exceptionCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUEST_BYTES, new org.apache.thrift.meta_data.FieldMetaData("requestBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESPONSE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("responseBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HttpClientEntity.class, metaDataMap);
  }

  public HttpClientEntity() {
  }

  public HttpClientEntity(
    java.lang.String uri,
    java.lang.String method,
    long costTime,
    long count4xx,
    long count5xx,
    long requestCount,
    long exceptionCount,
    long requestBytes,
    long responseBytes)
  {
    this();
    this.uri = uri;
    this.method = method;
    this.costTime = costTime;
    setCostTimeIsSet(true);
    this.count4xx = count4xx;
    setCount4xxIsSet(true);
    this.count5xx = count5xx;
    setCount5xxIsSet(true);
    this.requestCount = requestCount;
    setRequestCountIsSet(true);
    this.exceptionCount = exceptionCount;
    setExceptionCountIsSet(true);
    this.requestBytes = requestBytes;
    setRequestBytesIsSet(true);
    this.responseBytes = responseBytes;
    setResponseBytesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HttpClientEntity(HttpClientEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUri()) {
      this.uri = other.uri;
    }
    if (other.isSetMethod()) {
      this.method = other.method;
    }
    this.costTime = other.costTime;
    this.count4xx = other.count4xx;
    this.count5xx = other.count5xx;
    this.requestCount = other.requestCount;
    this.exceptionCount = other.exceptionCount;
    this.requestBytes = other.requestBytes;
    this.responseBytes = other.responseBytes;
  }

  public HttpClientEntity deepCopy() {
    return new HttpClientEntity(this);
  }

  @Override
  public void clear() {
    this.uri = null;
    this.method = null;
    setCostTimeIsSet(false);
    this.costTime = 0;
    setCount4xxIsSet(false);
    this.count4xx = 0;
    setCount5xxIsSet(false);
    this.count5xx = 0;
    setRequestCountIsSet(false);
    this.requestCount = 0;
    setExceptionCountIsSet(false);
    this.exceptionCount = 0;
    setRequestBytesIsSet(false);
    this.requestBytes = 0;
    setResponseBytesIsSet(false);
    this.responseBytes = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUri() {
    return this.uri;
  }

  public HttpClientEntity setUri(@org.apache.thrift.annotation.Nullable java.lang.String uri) {
    this.uri = uri;
    return this;
  }

  public void unsetUri() {
    this.uri = null;
  }

  /** Returns true if field uri is set (has been assigned a value) and false otherwise */
  public boolean isSetUri() {
    return this.uri != null;
  }

  public void setUriIsSet(boolean value) {
    if (!value) {
      this.uri = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMethod() {
    return this.method;
  }

  public HttpClientEntity setMethod(@org.apache.thrift.annotation.Nullable java.lang.String method) {
    this.method = method;
    return this;
  }

  public void unsetMethod() {
    this.method = null;
  }

  /** Returns true if field method is set (has been assigned a value) and false otherwise */
  public boolean isSetMethod() {
    return this.method != null;
  }

  public void setMethodIsSet(boolean value) {
    if (!value) {
      this.method = null;
    }
  }

  public long getCostTime() {
    return this.costTime;
  }

  public HttpClientEntity setCostTime(long costTime) {
    this.costTime = costTime;
    setCostTimeIsSet(true);
    return this;
  }

  public void unsetCostTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COSTTIME_ISSET_ID);
  }

  /** Returns true if field costTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCostTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COSTTIME_ISSET_ID);
  }

  public void setCostTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COSTTIME_ISSET_ID, value);
  }

  public long getCount4xx() {
    return this.count4xx;
  }

  public HttpClientEntity setCount4xx(long count4xx) {
    this.count4xx = count4xx;
    setCount4xxIsSet(true);
    return this;
  }

  public void unsetCount4xx() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT4XX_ISSET_ID);
  }

  /** Returns true if field count4xx is set (has been assigned a value) and false otherwise */
  public boolean isSetCount4xx() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT4XX_ISSET_ID);
  }

  public void setCount4xxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT4XX_ISSET_ID, value);
  }

  public long getCount5xx() {
    return this.count5xx;
  }

  public HttpClientEntity setCount5xx(long count5xx) {
    this.count5xx = count5xx;
    setCount5xxIsSet(true);
    return this;
  }

  public void unsetCount5xx() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT5XX_ISSET_ID);
  }

  /** Returns true if field count5xx is set (has been assigned a value) and false otherwise */
  public boolean isSetCount5xx() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT5XX_ISSET_ID);
  }

  public void setCount5xxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT5XX_ISSET_ID, value);
  }

  public long getRequestCount() {
    return this.requestCount;
  }

  public HttpClientEntity setRequestCount(long requestCount) {
    this.requestCount = requestCount;
    setRequestCountIsSet(true);
    return this;
  }

  public void unsetRequestCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTCOUNT_ISSET_ID);
  }

  /** Returns true if field requestCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTCOUNT_ISSET_ID);
  }

  public void setRequestCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTCOUNT_ISSET_ID, value);
  }

  public long getExceptionCount() {
    return this.exceptionCount;
  }

  public HttpClientEntity setExceptionCount(long exceptionCount) {
    this.exceptionCount = exceptionCount;
    setExceptionCountIsSet(true);
    return this;
  }

  public void unsetExceptionCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXCEPTIONCOUNT_ISSET_ID);
  }

  /** Returns true if field exceptionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXCEPTIONCOUNT_ISSET_ID);
  }

  public void setExceptionCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXCEPTIONCOUNT_ISSET_ID, value);
  }

  public long getRequestBytes() {
    return this.requestBytes;
  }

  public HttpClientEntity setRequestBytes(long requestBytes) {
    this.requestBytes = requestBytes;
    setRequestBytesIsSet(true);
    return this;
  }

  public void unsetRequestBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTBYTES_ISSET_ID);
  }

  /** Returns true if field requestBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTBYTES_ISSET_ID);
  }

  public void setRequestBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTBYTES_ISSET_ID, value);
  }

  public long getResponseBytes() {
    return this.responseBytes;
  }

  public HttpClientEntity setResponseBytes(long responseBytes) {
    this.responseBytes = responseBytes;
    setResponseBytesIsSet(true);
    return this;
  }

  public void unsetResponseBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSEBYTES_ISSET_ID);
  }

  /** Returns true if field responseBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSEBYTES_ISSET_ID);
  }

  public void setResponseBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSEBYTES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case URI:
      if (value == null) {
        unsetUri();
      } else {
        setUri((java.lang.String)value);
      }
      break;

    case METHOD:
      if (value == null) {
        unsetMethod();
      } else {
        setMethod((java.lang.String)value);
      }
      break;

    case COST_TIME:
      if (value == null) {
        unsetCostTime();
      } else {
        setCostTime((java.lang.Long)value);
      }
      break;

    case COUNT4XX:
      if (value == null) {
        unsetCount4xx();
      } else {
        setCount4xx((java.lang.Long)value);
      }
      break;

    case COUNT5XX:
      if (value == null) {
        unsetCount5xx();
      } else {
        setCount5xx((java.lang.Long)value);
      }
      break;

    case REQUEST_COUNT:
      if (value == null) {
        unsetRequestCount();
      } else {
        setRequestCount((java.lang.Long)value);
      }
      break;

    case EXCEPTION_COUNT:
      if (value == null) {
        unsetExceptionCount();
      } else {
        setExceptionCount((java.lang.Long)value);
      }
      break;

    case REQUEST_BYTES:
      if (value == null) {
        unsetRequestBytes();
      } else {
        setRequestBytes((java.lang.Long)value);
      }
      break;

    case RESPONSE_BYTES:
      if (value == null) {
        unsetResponseBytes();
      } else {
        setResponseBytes((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case URI:
      return getUri();

    case METHOD:
      return getMethod();

    case COST_TIME:
      return getCostTime();

    case COUNT4XX:
      return getCount4xx();

    case COUNT5XX:
      return getCount5xx();

    case REQUEST_COUNT:
      return getRequestCount();

    case EXCEPTION_COUNT:
      return getExceptionCount();

    case REQUEST_BYTES:
      return getRequestBytes();

    case RESPONSE_BYTES:
      return getResponseBytes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case URI:
      return isSetUri();
    case METHOD:
      return isSetMethod();
    case COST_TIME:
      return isSetCostTime();
    case COUNT4XX:
      return isSetCount4xx();
    case COUNT5XX:
      return isSetCount5xx();
    case REQUEST_COUNT:
      return isSetRequestCount();
    case EXCEPTION_COUNT:
      return isSetExceptionCount();
    case REQUEST_BYTES:
      return isSetRequestBytes();
    case RESPONSE_BYTES:
      return isSetResponseBytes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HttpClientEntity)
      return this.equals((HttpClientEntity)that);
    return false;
  }

  public boolean equals(HttpClientEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uri = true && this.isSetUri();
    boolean that_present_uri = true && that.isSetUri();
    if (this_present_uri || that_present_uri) {
      if (!(this_present_uri && that_present_uri))
        return false;
      if (!this.uri.equals(that.uri))
        return false;
    }

    boolean this_present_method = true && this.isSetMethod();
    boolean that_present_method = true && that.isSetMethod();
    if (this_present_method || that_present_method) {
      if (!(this_present_method && that_present_method))
        return false;
      if (!this.method.equals(that.method))
        return false;
    }

    boolean this_present_costTime = true;
    boolean that_present_costTime = true;
    if (this_present_costTime || that_present_costTime) {
      if (!(this_present_costTime && that_present_costTime))
        return false;
      if (this.costTime != that.costTime)
        return false;
    }

    boolean this_present_count4xx = true;
    boolean that_present_count4xx = true;
    if (this_present_count4xx || that_present_count4xx) {
      if (!(this_present_count4xx && that_present_count4xx))
        return false;
      if (this.count4xx != that.count4xx)
        return false;
    }

    boolean this_present_count5xx = true;
    boolean that_present_count5xx = true;
    if (this_present_count5xx || that_present_count5xx) {
      if (!(this_present_count5xx && that_present_count5xx))
        return false;
      if (this.count5xx != that.count5xx)
        return false;
    }

    boolean this_present_requestCount = true;
    boolean that_present_requestCount = true;
    if (this_present_requestCount || that_present_requestCount) {
      if (!(this_present_requestCount && that_present_requestCount))
        return false;
      if (this.requestCount != that.requestCount)
        return false;
    }

    boolean this_present_exceptionCount = true;
    boolean that_present_exceptionCount = true;
    if (this_present_exceptionCount || that_present_exceptionCount) {
      if (!(this_present_exceptionCount && that_present_exceptionCount))
        return false;
      if (this.exceptionCount != that.exceptionCount)
        return false;
    }

    boolean this_present_requestBytes = true;
    boolean that_present_requestBytes = true;
    if (this_present_requestBytes || that_present_requestBytes) {
      if (!(this_present_requestBytes && that_present_requestBytes))
        return false;
      if (this.requestBytes != that.requestBytes)
        return false;
    }

    boolean this_present_responseBytes = true;
    boolean that_present_responseBytes = true;
    if (this_present_responseBytes || that_present_responseBytes) {
      if (!(this_present_responseBytes && that_present_responseBytes))
        return false;
      if (this.responseBytes != that.responseBytes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUri()) ? 131071 : 524287);
    if (isSetUri())
      hashCode = hashCode * 8191 + uri.hashCode();

    hashCode = hashCode * 8191 + ((isSetMethod()) ? 131071 : 524287);
    if (isSetMethod())
      hashCode = hashCode * 8191 + method.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(costTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(count4xx);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(count5xx);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(exceptionCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestBytes);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseBytes);

    return hashCode;
  }

  @Override
  public int compareTo(HttpClientEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUri()).compareTo(other.isSetUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMethod()).compareTo(other.isSetMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.method, other.method);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCostTime()).compareTo(other.isSetCostTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costTime, other.costTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCount4xx()).compareTo(other.isSetCount4xx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount4xx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count4xx, other.count4xx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCount5xx()).compareTo(other.isSetCount5xx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount5xx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count5xx, other.count5xx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequestCount()).compareTo(other.isSetRequestCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestCount, other.requestCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExceptionCount()).compareTo(other.isSetExceptionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionCount, other.exceptionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequestBytes()).compareTo(other.isSetRequestBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestBytes, other.requestBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResponseBytes()).compareTo(other.isSetResponseBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseBytes, other.responseBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HttpClientEntity(");
    boolean first = true;

    sb.append("uri:");
    if (this.uri == null) {
      sb.append("null");
    } else {
      sb.append(this.uri);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("method:");
    if (this.method == null) {
      sb.append("null");
    } else {
      sb.append(this.method);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("costTime:");
    sb.append(this.costTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count4xx:");
    sb.append(this.count4xx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count5xx:");
    sb.append(this.count5xx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestCount:");
    sb.append(this.requestCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptionCount:");
    sb.append(this.exceptionCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestBytes:");
    sb.append(this.requestBytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseBytes:");
    sb.append(this.responseBytes);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HttpClientEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HttpClientEntityStandardScheme getScheme() {
      return new HttpClientEntityStandardScheme();
    }
  }

  private static class HttpClientEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<HttpClientEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HttpClientEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uri = iprot.readString();
              struct.setUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.method = iprot.readString();
              struct.setMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.costTime = iprot.readI64();
              struct.setCostTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COUNT4XX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.count4xx = iprot.readI64();
              struct.setCount4xxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COUNT5XX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.count5xx = iprot.readI64();
              struct.setCount5xxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQUEST_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.requestCount = iprot.readI64();
              struct.setRequestCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXCEPTION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.exceptionCount = iprot.readI64();
              struct.setExceptionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REQUEST_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.requestBytes = iprot.readI64();
              struct.setRequestBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RESPONSE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.responseBytes = iprot.readI64();
              struct.setResponseBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HttpClientEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uri != null) {
        oprot.writeFieldBegin(URI_FIELD_DESC);
        oprot.writeString(struct.uri);
        oprot.writeFieldEnd();
      }
      if (struct.method != null) {
        oprot.writeFieldBegin(METHOD_FIELD_DESC);
        oprot.writeString(struct.method);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COST_TIME_FIELD_DESC);
      oprot.writeI64(struct.costTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT4XX_FIELD_DESC);
      oprot.writeI64(struct.count4xx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT5XX_FIELD_DESC);
      oprot.writeI64(struct.count5xx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_COUNT_FIELD_DESC);
      oprot.writeI64(struct.requestCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCEPTION_COUNT_FIELD_DESC);
      oprot.writeI64(struct.exceptionCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_BYTES_FIELD_DESC);
      oprot.writeI64(struct.requestBytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESPONSE_BYTES_FIELD_DESC);
      oprot.writeI64(struct.responseBytes);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HttpClientEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HttpClientEntityTupleScheme getScheme() {
      return new HttpClientEntityTupleScheme();
    }
  }

  private static class HttpClientEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<HttpClientEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HttpClientEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUri()) {
        optionals.set(0);
      }
      if (struct.isSetMethod()) {
        optionals.set(1);
      }
      if (struct.isSetCostTime()) {
        optionals.set(2);
      }
      if (struct.isSetCount4xx()) {
        optionals.set(3);
      }
      if (struct.isSetCount5xx()) {
        optionals.set(4);
      }
      if (struct.isSetRequestCount()) {
        optionals.set(5);
      }
      if (struct.isSetExceptionCount()) {
        optionals.set(6);
      }
      if (struct.isSetRequestBytes()) {
        optionals.set(7);
      }
      if (struct.isSetResponseBytes()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetUri()) {
        oprot.writeString(struct.uri);
      }
      if (struct.isSetMethod()) {
        oprot.writeString(struct.method);
      }
      if (struct.isSetCostTime()) {
        oprot.writeI64(struct.costTime);
      }
      if (struct.isSetCount4xx()) {
        oprot.writeI64(struct.count4xx);
      }
      if (struct.isSetCount5xx()) {
        oprot.writeI64(struct.count5xx);
      }
      if (struct.isSetRequestCount()) {
        oprot.writeI64(struct.requestCount);
      }
      if (struct.isSetExceptionCount()) {
        oprot.writeI64(struct.exceptionCount);
      }
      if (struct.isSetRequestBytes()) {
        oprot.writeI64(struct.requestBytes);
      }
      if (struct.isSetResponseBytes()) {
        oprot.writeI64(struct.responseBytes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HttpClientEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.uri = iprot.readString();
        struct.setUriIsSet(true);
      }
      if (incoming.get(1)) {
        struct.method = iprot.readString();
        struct.setMethodIsSet(true);
      }
      if (incoming.get(2)) {
        struct.costTime = iprot.readI64();
        struct.setCostTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.count4xx = iprot.readI64();
        struct.setCount4xxIsSet(true);
      }
      if (incoming.get(4)) {
        struct.count5xx = iprot.readI64();
        struct.setCount5xxIsSet(true);
      }
      if (incoming.get(5)) {
        struct.requestCount = iprot.readI64();
        struct.setRequestCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.exceptionCount = iprot.readI64();
        struct.setExceptionCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.requestBytes = iprot.readI64();
        struct.setRequestBytesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.responseBytes = iprot.readI64();
        struct.setResponseBytesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

