/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sbss.bithon.agent.rpc.thrift.service.metric.message;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class WebRequestMetricMessage implements org.apache.thrift.TBase<WebRequestMetricMessage, WebRequestMetricMessage._Fields>, java.io.Serializable, Cloneable, Comparable<WebRequestMetricMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WebRequestMetricMessage");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SRC_APPLICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("srcApplication", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MIN_RESPONSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("minResponseTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField RESPONSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("responseTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField MAX_RESPONSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxResponseTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField CALL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("callCount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField ERROR_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCount", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField COUNT4XX_FIELD_DESC = new org.apache.thrift.protocol.TField("count4xx", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField COUNT5XX_FIELD_DESC = new org.apache.thrift.protocol.TField("count5xx", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField REQUEST_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("requestBytes", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField RESPONSE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("responseBytes", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField FLOWED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("flowedCount", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField DEGRADED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("degradedCount", org.apache.thrift.protocol.TType.I64, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WebRequestMetricMessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WebRequestMetricMessageTupleSchemeFactory();

  public long timestamp; // required
  public int interval; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String srcApplication; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String uri; // required
  public long minResponseTime; // required
  public long responseTime; // required
  public long maxResponseTime; // required
  public long callCount; // required
  public long errorCount; // required
  public long count4xx; // required
  public long count5xx; // required
  public long requestBytes; // required
  public long responseBytes; // required
  public long flowedCount; // required
  public long degradedCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    INTERVAL((short)2, "interval"),
    SRC_APPLICATION((short)3, "srcApplication"),
    URI((short)4, "uri"),
    MIN_RESPONSE_TIME((short)5, "minResponseTime"),
    RESPONSE_TIME((short)6, "responseTime"),
    MAX_RESPONSE_TIME((short)7, "maxResponseTime"),
    CALL_COUNT((short)8, "callCount"),
    ERROR_COUNT((short)9, "errorCount"),
    COUNT4XX((short)10, "count4xx"),
    COUNT5XX((short)11, "count5xx"),
    REQUEST_BYTES((short)12, "requestBytes"),
    RESPONSE_BYTES((short)13, "responseBytes"),
    FLOWED_COUNT((short)14, "flowedCount"),
    DEGRADED_COUNT((short)15, "degradedCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 2: // INTERVAL
          return INTERVAL;
        case 3: // SRC_APPLICATION
          return SRC_APPLICATION;
        case 4: // URI
          return URI;
        case 5: // MIN_RESPONSE_TIME
          return MIN_RESPONSE_TIME;
        case 6: // RESPONSE_TIME
          return RESPONSE_TIME;
        case 7: // MAX_RESPONSE_TIME
          return MAX_RESPONSE_TIME;
        case 8: // CALL_COUNT
          return CALL_COUNT;
        case 9: // ERROR_COUNT
          return ERROR_COUNT;
        case 10: // COUNT4XX
          return COUNT4XX;
        case 11: // COUNT5XX
          return COUNT5XX;
        case 12: // REQUEST_BYTES
          return REQUEST_BYTES;
        case 13: // RESPONSE_BYTES
          return RESPONSE_BYTES;
        case 14: // FLOWED_COUNT
          return FLOWED_COUNT;
        case 15: // DEGRADED_COUNT
          return DEGRADED_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __INTERVAL_ISSET_ID = 1;
  private static final int __MINRESPONSETIME_ISSET_ID = 2;
  private static final int __RESPONSETIME_ISSET_ID = 3;
  private static final int __MAXRESPONSETIME_ISSET_ID = 4;
  private static final int __CALLCOUNT_ISSET_ID = 5;
  private static final int __ERRORCOUNT_ISSET_ID = 6;
  private static final int __COUNT4XX_ISSET_ID = 7;
  private static final int __COUNT5XX_ISSET_ID = 8;
  private static final int __REQUESTBYTES_ISSET_ID = 9;
  private static final int __RESPONSEBYTES_ISSET_ID = 10;
  private static final int __FLOWEDCOUNT_ISSET_ID = 11;
  private static final int __DEGRADEDCOUNT_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SRC_APPLICATION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SRC_APPLICATION, new org.apache.thrift.meta_data.FieldMetaData("srcApplication", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN_RESPONSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("minResponseTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESPONSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("responseTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_RESPONSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("maxResponseTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CALL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("callCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ERROR_COUNT, new org.apache.thrift.meta_data.FieldMetaData("errorCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COUNT4XX, new org.apache.thrift.meta_data.FieldMetaData("count4xx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COUNT5XX, new org.apache.thrift.meta_data.FieldMetaData("count5xx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUEST_BYTES, new org.apache.thrift.meta_data.FieldMetaData("requestBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESPONSE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("responseBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FLOWED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("flowedCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEGRADED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("degradedCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WebRequestMetricMessage.class, metaDataMap);
  }

  public WebRequestMetricMessage() {
  }

  public WebRequestMetricMessage(
    long timestamp,
    int interval,
    java.lang.String uri,
    long minResponseTime,
    long responseTime,
    long maxResponseTime,
    long callCount,
    long errorCount,
    long count4xx,
    long count5xx,
    long requestBytes,
    long responseBytes,
    long flowedCount,
    long degradedCount)
  {
    this();
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.interval = interval;
    setIntervalIsSet(true);
    this.uri = uri;
    this.minResponseTime = minResponseTime;
    setMinResponseTimeIsSet(true);
    this.responseTime = responseTime;
    setResponseTimeIsSet(true);
    this.maxResponseTime = maxResponseTime;
    setMaxResponseTimeIsSet(true);
    this.callCount = callCount;
    setCallCountIsSet(true);
    this.errorCount = errorCount;
    setErrorCountIsSet(true);
    this.count4xx = count4xx;
    setCount4xxIsSet(true);
    this.count5xx = count5xx;
    setCount5xxIsSet(true);
    this.requestBytes = requestBytes;
    setRequestBytesIsSet(true);
    this.responseBytes = responseBytes;
    setResponseBytesIsSet(true);
    this.flowedCount = flowedCount;
    setFlowedCountIsSet(true);
    this.degradedCount = degradedCount;
    setDegradedCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WebRequestMetricMessage(WebRequestMetricMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timestamp = other.timestamp;
    this.interval = other.interval;
    if (other.isSetSrcApplication()) {
      this.srcApplication = other.srcApplication;
    }
    if (other.isSetUri()) {
      this.uri = other.uri;
    }
    this.minResponseTime = other.minResponseTime;
    this.responseTime = other.responseTime;
    this.maxResponseTime = other.maxResponseTime;
    this.callCount = other.callCount;
    this.errorCount = other.errorCount;
    this.count4xx = other.count4xx;
    this.count5xx = other.count5xx;
    this.requestBytes = other.requestBytes;
    this.responseBytes = other.responseBytes;
    this.flowedCount = other.flowedCount;
    this.degradedCount = other.degradedCount;
  }

  public WebRequestMetricMessage deepCopy() {
    return new WebRequestMetricMessage(this);
  }

  @Override
  public void clear() {
    setTimestampIsSet(false);
    this.timestamp = 0;
    setIntervalIsSet(false);
    this.interval = 0;
    this.srcApplication = null;
    this.uri = null;
    setMinResponseTimeIsSet(false);
    this.minResponseTime = 0;
    setResponseTimeIsSet(false);
    this.responseTime = 0;
    setMaxResponseTimeIsSet(false);
    this.maxResponseTime = 0;
    setCallCountIsSet(false);
    this.callCount = 0;
    setErrorCountIsSet(false);
    this.errorCount = 0;
    setCount4xxIsSet(false);
    this.count4xx = 0;
    setCount5xxIsSet(false);
    this.count5xx = 0;
    setRequestBytesIsSet(false);
    this.requestBytes = 0;
    setResponseBytesIsSet(false);
    this.responseBytes = 0;
    setFlowedCountIsSet(false);
    this.flowedCount = 0;
    setDegradedCountIsSet(false);
    this.degradedCount = 0;
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public WebRequestMetricMessage setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getInterval() {
    return this.interval;
  }

  public WebRequestMetricMessage setInterval(int interval) {
    this.interval = interval;
    setIntervalIsSet(true);
    return this;
  }

  public void unsetInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  /** Returns true if field interval is set (has been assigned a value) and false otherwise */
  public boolean isSetInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  public void setIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSrcApplication() {
    return this.srcApplication;
  }

  public WebRequestMetricMessage setSrcApplication(@org.apache.thrift.annotation.Nullable java.lang.String srcApplication) {
    this.srcApplication = srcApplication;
    return this;
  }

  public void unsetSrcApplication() {
    this.srcApplication = null;
  }

  /** Returns true if field srcApplication is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcApplication() {
    return this.srcApplication != null;
  }

  public void setSrcApplicationIsSet(boolean value) {
    if (!value) {
      this.srcApplication = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUri() {
    return this.uri;
  }

  public WebRequestMetricMessage setUri(@org.apache.thrift.annotation.Nullable java.lang.String uri) {
    this.uri = uri;
    return this;
  }

  public void unsetUri() {
    this.uri = null;
  }

  /** Returns true if field uri is set (has been assigned a value) and false otherwise */
  public boolean isSetUri() {
    return this.uri != null;
  }

  public void setUriIsSet(boolean value) {
    if (!value) {
      this.uri = null;
    }
  }

  public long getMinResponseTime() {
    return this.minResponseTime;
  }

  public WebRequestMetricMessage setMinResponseTime(long minResponseTime) {
    this.minResponseTime = minResponseTime;
    setMinResponseTimeIsSet(true);
    return this;
  }

  public void unsetMinResponseTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINRESPONSETIME_ISSET_ID);
  }

  /** Returns true if field minResponseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMinResponseTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINRESPONSETIME_ISSET_ID);
  }

  public void setMinResponseTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINRESPONSETIME_ISSET_ID, value);
  }

  public long getResponseTime() {
    return this.responseTime;
  }

  public WebRequestMetricMessage setResponseTime(long responseTime) {
    this.responseTime = responseTime;
    setResponseTimeIsSet(true);
    return this;
  }

  public void unsetResponseTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  /** Returns true if field responseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  public void setResponseTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSETIME_ISSET_ID, value);
  }

  public long getMaxResponseTime() {
    return this.maxResponseTime;
  }

  public WebRequestMetricMessage setMaxResponseTime(long maxResponseTime) {
    this.maxResponseTime = maxResponseTime;
    setMaxResponseTimeIsSet(true);
    return this;
  }

  public void unsetMaxResponseTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXRESPONSETIME_ISSET_ID);
  }

  /** Returns true if field maxResponseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxResponseTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXRESPONSETIME_ISSET_ID);
  }

  public void setMaxResponseTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXRESPONSETIME_ISSET_ID, value);
  }

  public long getCallCount() {
    return this.callCount;
  }

  public WebRequestMetricMessage setCallCount(long callCount) {
    this.callCount = callCount;
    setCallCountIsSet(true);
    return this;
  }

  public void unsetCallCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CALLCOUNT_ISSET_ID);
  }

  /** Returns true if field callCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCallCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CALLCOUNT_ISSET_ID);
  }

  public void setCallCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CALLCOUNT_ISSET_ID, value);
  }

  public long getErrorCount() {
    return this.errorCount;
  }

  public WebRequestMetricMessage setErrorCount(long errorCount) {
    this.errorCount = errorCount;
    setErrorCountIsSet(true);
    return this;
  }

  public void unsetErrorCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERRORCOUNT_ISSET_ID);
  }

  /** Returns true if field errorCount is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERRORCOUNT_ISSET_ID);
  }

  public void setErrorCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERRORCOUNT_ISSET_ID, value);
  }

  public long getCount4xx() {
    return this.count4xx;
  }

  public WebRequestMetricMessage setCount4xx(long count4xx) {
    this.count4xx = count4xx;
    setCount4xxIsSet(true);
    return this;
  }

  public void unsetCount4xx() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT4XX_ISSET_ID);
  }

  /** Returns true if field count4xx is set (has been assigned a value) and false otherwise */
  public boolean isSetCount4xx() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT4XX_ISSET_ID);
  }

  public void setCount4xxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT4XX_ISSET_ID, value);
  }

  public long getCount5xx() {
    return this.count5xx;
  }

  public WebRequestMetricMessage setCount5xx(long count5xx) {
    this.count5xx = count5xx;
    setCount5xxIsSet(true);
    return this;
  }

  public void unsetCount5xx() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT5XX_ISSET_ID);
  }

  /** Returns true if field count5xx is set (has been assigned a value) and false otherwise */
  public boolean isSetCount5xx() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT5XX_ISSET_ID);
  }

  public void setCount5xxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT5XX_ISSET_ID, value);
  }

  public long getRequestBytes() {
    return this.requestBytes;
  }

  public WebRequestMetricMessage setRequestBytes(long requestBytes) {
    this.requestBytes = requestBytes;
    setRequestBytesIsSet(true);
    return this;
  }

  public void unsetRequestBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTBYTES_ISSET_ID);
  }

  /** Returns true if field requestBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTBYTES_ISSET_ID);
  }

  public void setRequestBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTBYTES_ISSET_ID, value);
  }

  public long getResponseBytes() {
    return this.responseBytes;
  }

  public WebRequestMetricMessage setResponseBytes(long responseBytes) {
    this.responseBytes = responseBytes;
    setResponseBytesIsSet(true);
    return this;
  }

  public void unsetResponseBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSEBYTES_ISSET_ID);
  }

  /** Returns true if field responseBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSEBYTES_ISSET_ID);
  }

  public void setResponseBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSEBYTES_ISSET_ID, value);
  }

  public long getFlowedCount() {
    return this.flowedCount;
  }

  public WebRequestMetricMessage setFlowedCount(long flowedCount) {
    this.flowedCount = flowedCount;
    setFlowedCountIsSet(true);
    return this;
  }

  public void unsetFlowedCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLOWEDCOUNT_ISSET_ID);
  }

  /** Returns true if field flowedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFlowedCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLOWEDCOUNT_ISSET_ID);
  }

  public void setFlowedCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLOWEDCOUNT_ISSET_ID, value);
  }

  public long getDegradedCount() {
    return this.degradedCount;
  }

  public WebRequestMetricMessage setDegradedCount(long degradedCount) {
    this.degradedCount = degradedCount;
    setDegradedCountIsSet(true);
    return this;
  }

  public void unsetDegradedCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEGRADEDCOUNT_ISSET_ID);
  }

  /** Returns true if field degradedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDegradedCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEGRADEDCOUNT_ISSET_ID);
  }

  public void setDegradedCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEGRADEDCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((java.lang.Integer)value);
      }
      break;

    case SRC_APPLICATION:
      if (value == null) {
        unsetSrcApplication();
      } else {
        setSrcApplication((java.lang.String)value);
      }
      break;

    case URI:
      if (value == null) {
        unsetUri();
      } else {
        setUri((java.lang.String)value);
      }
      break;

    case MIN_RESPONSE_TIME:
      if (value == null) {
        unsetMinResponseTime();
      } else {
        setMinResponseTime((java.lang.Long)value);
      }
      break;

    case RESPONSE_TIME:
      if (value == null) {
        unsetResponseTime();
      } else {
        setResponseTime((java.lang.Long)value);
      }
      break;

    case MAX_RESPONSE_TIME:
      if (value == null) {
        unsetMaxResponseTime();
      } else {
        setMaxResponseTime((java.lang.Long)value);
      }
      break;

    case CALL_COUNT:
      if (value == null) {
        unsetCallCount();
      } else {
        setCallCount((java.lang.Long)value);
      }
      break;

    case ERROR_COUNT:
      if (value == null) {
        unsetErrorCount();
      } else {
        setErrorCount((java.lang.Long)value);
      }
      break;

    case COUNT4XX:
      if (value == null) {
        unsetCount4xx();
      } else {
        setCount4xx((java.lang.Long)value);
      }
      break;

    case COUNT5XX:
      if (value == null) {
        unsetCount5xx();
      } else {
        setCount5xx((java.lang.Long)value);
      }
      break;

    case REQUEST_BYTES:
      if (value == null) {
        unsetRequestBytes();
      } else {
        setRequestBytes((java.lang.Long)value);
      }
      break;

    case RESPONSE_BYTES:
      if (value == null) {
        unsetResponseBytes();
      } else {
        setResponseBytes((java.lang.Long)value);
      }
      break;

    case FLOWED_COUNT:
      if (value == null) {
        unsetFlowedCount();
      } else {
        setFlowedCount((java.lang.Long)value);
      }
      break;

    case DEGRADED_COUNT:
      if (value == null) {
        unsetDegradedCount();
      } else {
        setDegradedCount((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return getTimestamp();

    case INTERVAL:
      return getInterval();

    case SRC_APPLICATION:
      return getSrcApplication();

    case URI:
      return getUri();

    case MIN_RESPONSE_TIME:
      return getMinResponseTime();

    case RESPONSE_TIME:
      return getResponseTime();

    case MAX_RESPONSE_TIME:
      return getMaxResponseTime();

    case CALL_COUNT:
      return getCallCount();

    case ERROR_COUNT:
      return getErrorCount();

    case COUNT4XX:
      return getCount4xx();

    case COUNT5XX:
      return getCount5xx();

    case REQUEST_BYTES:
      return getRequestBytes();

    case RESPONSE_BYTES:
      return getResponseBytes();

    case FLOWED_COUNT:
      return getFlowedCount();

    case DEGRADED_COUNT:
      return getDegradedCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case INTERVAL:
      return isSetInterval();
    case SRC_APPLICATION:
      return isSetSrcApplication();
    case URI:
      return isSetUri();
    case MIN_RESPONSE_TIME:
      return isSetMinResponseTime();
    case RESPONSE_TIME:
      return isSetResponseTime();
    case MAX_RESPONSE_TIME:
      return isSetMaxResponseTime();
    case CALL_COUNT:
      return isSetCallCount();
    case ERROR_COUNT:
      return isSetErrorCount();
    case COUNT4XX:
      return isSetCount4xx();
    case COUNT5XX:
      return isSetCount5xx();
    case REQUEST_BYTES:
      return isSetRequestBytes();
    case RESPONSE_BYTES:
      return isSetResponseBytes();
    case FLOWED_COUNT:
      return isSetFlowedCount();
    case DEGRADED_COUNT:
      return isSetDegradedCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof WebRequestMetricMessage)
      return this.equals((WebRequestMetricMessage)that);
    return false;
  }

  public boolean equals(WebRequestMetricMessage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_interval = true;
    boolean that_present_interval = true;
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (this.interval != that.interval)
        return false;
    }

    boolean this_present_srcApplication = true && this.isSetSrcApplication();
    boolean that_present_srcApplication = true && that.isSetSrcApplication();
    if (this_present_srcApplication || that_present_srcApplication) {
      if (!(this_present_srcApplication && that_present_srcApplication))
        return false;
      if (!this.srcApplication.equals(that.srcApplication))
        return false;
    }

    boolean this_present_uri = true && this.isSetUri();
    boolean that_present_uri = true && that.isSetUri();
    if (this_present_uri || that_present_uri) {
      if (!(this_present_uri && that_present_uri))
        return false;
      if (!this.uri.equals(that.uri))
        return false;
    }

    boolean this_present_minResponseTime = true;
    boolean that_present_minResponseTime = true;
    if (this_present_minResponseTime || that_present_minResponseTime) {
      if (!(this_present_minResponseTime && that_present_minResponseTime))
        return false;
      if (this.minResponseTime != that.minResponseTime)
        return false;
    }

    boolean this_present_responseTime = true;
    boolean that_present_responseTime = true;
    if (this_present_responseTime || that_present_responseTime) {
      if (!(this_present_responseTime && that_present_responseTime))
        return false;
      if (this.responseTime != that.responseTime)
        return false;
    }

    boolean this_present_maxResponseTime = true;
    boolean that_present_maxResponseTime = true;
    if (this_present_maxResponseTime || that_present_maxResponseTime) {
      if (!(this_present_maxResponseTime && that_present_maxResponseTime))
        return false;
      if (this.maxResponseTime != that.maxResponseTime)
        return false;
    }

    boolean this_present_callCount = true;
    boolean that_present_callCount = true;
    if (this_present_callCount || that_present_callCount) {
      if (!(this_present_callCount && that_present_callCount))
        return false;
      if (this.callCount != that.callCount)
        return false;
    }

    boolean this_present_errorCount = true;
    boolean that_present_errorCount = true;
    if (this_present_errorCount || that_present_errorCount) {
      if (!(this_present_errorCount && that_present_errorCount))
        return false;
      if (this.errorCount != that.errorCount)
        return false;
    }

    boolean this_present_count4xx = true;
    boolean that_present_count4xx = true;
    if (this_present_count4xx || that_present_count4xx) {
      if (!(this_present_count4xx && that_present_count4xx))
        return false;
      if (this.count4xx != that.count4xx)
        return false;
    }

    boolean this_present_count5xx = true;
    boolean that_present_count5xx = true;
    if (this_present_count5xx || that_present_count5xx) {
      if (!(this_present_count5xx && that_present_count5xx))
        return false;
      if (this.count5xx != that.count5xx)
        return false;
    }

    boolean this_present_requestBytes = true;
    boolean that_present_requestBytes = true;
    if (this_present_requestBytes || that_present_requestBytes) {
      if (!(this_present_requestBytes && that_present_requestBytes))
        return false;
      if (this.requestBytes != that.requestBytes)
        return false;
    }

    boolean this_present_responseBytes = true;
    boolean that_present_responseBytes = true;
    if (this_present_responseBytes || that_present_responseBytes) {
      if (!(this_present_responseBytes && that_present_responseBytes))
        return false;
      if (this.responseBytes != that.responseBytes)
        return false;
    }

    boolean this_present_flowedCount = true;
    boolean that_present_flowedCount = true;
    if (this_present_flowedCount || that_present_flowedCount) {
      if (!(this_present_flowedCount && that_present_flowedCount))
        return false;
      if (this.flowedCount != that.flowedCount)
        return false;
    }

    boolean this_present_degradedCount = true;
    boolean that_present_degradedCount = true;
    if (this_present_degradedCount || that_present_degradedCount) {
      if (!(this_present_degradedCount && that_present_degradedCount))
        return false;
      if (this.degradedCount != that.degradedCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + interval;

    hashCode = hashCode * 8191 + ((isSetSrcApplication()) ? 131071 : 524287);
    if (isSetSrcApplication())
      hashCode = hashCode * 8191 + srcApplication.hashCode();

    hashCode = hashCode * 8191 + ((isSetUri()) ? 131071 : 524287);
    if (isSetUri())
      hashCode = hashCode * 8191 + uri.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(minResponseTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxResponseTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(callCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(errorCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(count4xx);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(count5xx);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestBytes);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseBytes);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(flowedCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(degradedCount);

    return hashCode;
  }

  @Override
  public int compareTo(WebRequestMetricMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInterval(), other.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrcApplication(), other.isSetSrcApplication());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcApplication()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcApplication, other.srcApplication);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUri(), other.isSetUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMinResponseTime(), other.isSetMinResponseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinResponseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minResponseTime, other.minResponseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResponseTime(), other.isSetResponseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseTime, other.responseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxResponseTime(), other.isSetMaxResponseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxResponseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxResponseTime, other.maxResponseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCallCount(), other.isSetCallCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callCount, other.callCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetErrorCount(), other.isSetErrorCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCount, other.errorCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCount4xx(), other.isSetCount4xx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount4xx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count4xx, other.count4xx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCount5xx(), other.isSetCount5xx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount5xx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count5xx, other.count5xx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRequestBytes(), other.isSetRequestBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestBytes, other.requestBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResponseBytes(), other.isSetResponseBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseBytes, other.responseBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFlowedCount(), other.isSetFlowedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowedCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowedCount, other.flowedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDegradedCount(), other.isSetDegradedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDegradedCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.degradedCount, other.degradedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WebRequestMetricMessage(");
    boolean first = true;

    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interval:");
    sb.append(this.interval);
    first = false;
    if (isSetSrcApplication()) {
      if (!first) sb.append(", ");
      sb.append("srcApplication:");
      if (this.srcApplication == null) {
        sb.append("null");
      } else {
        sb.append(this.srcApplication);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("uri:");
    if (this.uri == null) {
      sb.append("null");
    } else {
      sb.append(this.uri);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minResponseTime:");
    sb.append(this.minResponseTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseTime:");
    sb.append(this.responseTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxResponseTime:");
    sb.append(this.maxResponseTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("callCount:");
    sb.append(this.callCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorCount:");
    sb.append(this.errorCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count4xx:");
    sb.append(this.count4xx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count5xx:");
    sb.append(this.count5xx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestBytes:");
    sb.append(this.requestBytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseBytes:");
    sb.append(this.responseBytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flowedCount:");
    sb.append(this.flowedCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("degradedCount:");
    sb.append(this.degradedCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WebRequestMetricMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WebRequestMetricMessageStandardScheme getScheme() {
      return new WebRequestMetricMessageStandardScheme();
    }
  }

  private static class WebRequestMetricMessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<WebRequestMetricMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WebRequestMetricMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interval = iprot.readI32();
              struct.setIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SRC_APPLICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.srcApplication = iprot.readString();
              struct.setSrcApplicationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uri = iprot.readString();
              struct.setUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MIN_RESPONSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minResponseTime = iprot.readI64();
              struct.setMinResponseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESPONSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.responseTime = iprot.readI64();
              struct.setResponseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MAX_RESPONSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxResponseTime = iprot.readI64();
              struct.setMaxResponseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CALL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.callCount = iprot.readI64();
              struct.setCallCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ERROR_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.errorCount = iprot.readI64();
              struct.setErrorCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COUNT4XX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.count4xx = iprot.readI64();
              struct.setCount4xxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COUNT5XX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.count5xx = iprot.readI64();
              struct.setCount5xxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REQUEST_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.requestBytes = iprot.readI64();
              struct.setRequestBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // RESPONSE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.responseBytes = iprot.readI64();
              struct.setResponseBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FLOWED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.flowedCount = iprot.readI64();
              struct.setFlowedCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEGRADED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.degradedCount = iprot.readI64();
              struct.setDegradedCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WebRequestMetricMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.interval);
      oprot.writeFieldEnd();
      if (struct.srcApplication != null) {
        if (struct.isSetSrcApplication()) {
          oprot.writeFieldBegin(SRC_APPLICATION_FIELD_DESC);
          oprot.writeString(struct.srcApplication);
          oprot.writeFieldEnd();
        }
      }
      if (struct.uri != null) {
        oprot.writeFieldBegin(URI_FIELD_DESC);
        oprot.writeString(struct.uri);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN_RESPONSE_TIME_FIELD_DESC);
      oprot.writeI64(struct.minResponseTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESPONSE_TIME_FIELD_DESC);
      oprot.writeI64(struct.responseTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_RESPONSE_TIME_FIELD_DESC);
      oprot.writeI64(struct.maxResponseTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CALL_COUNT_FIELD_DESC);
      oprot.writeI64(struct.callCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ERROR_COUNT_FIELD_DESC);
      oprot.writeI64(struct.errorCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT4XX_FIELD_DESC);
      oprot.writeI64(struct.count4xx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT5XX_FIELD_DESC);
      oprot.writeI64(struct.count5xx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_BYTES_FIELD_DESC);
      oprot.writeI64(struct.requestBytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESPONSE_BYTES_FIELD_DESC);
      oprot.writeI64(struct.responseBytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLOWED_COUNT_FIELD_DESC);
      oprot.writeI64(struct.flowedCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEGRADED_COUNT_FIELD_DESC);
      oprot.writeI64(struct.degradedCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WebRequestMetricMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WebRequestMetricMessageTupleScheme getScheme() {
      return new WebRequestMetricMessageTupleScheme();
    }
  }

  private static class WebRequestMetricMessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<WebRequestMetricMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WebRequestMetricMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetInterval()) {
        optionals.set(1);
      }
      if (struct.isSetSrcApplication()) {
        optionals.set(2);
      }
      if (struct.isSetUri()) {
        optionals.set(3);
      }
      if (struct.isSetMinResponseTime()) {
        optionals.set(4);
      }
      if (struct.isSetResponseTime()) {
        optionals.set(5);
      }
      if (struct.isSetMaxResponseTime()) {
        optionals.set(6);
      }
      if (struct.isSetCallCount()) {
        optionals.set(7);
      }
      if (struct.isSetErrorCount()) {
        optionals.set(8);
      }
      if (struct.isSetCount4xx()) {
        optionals.set(9);
      }
      if (struct.isSetCount5xx()) {
        optionals.set(10);
      }
      if (struct.isSetRequestBytes()) {
        optionals.set(11);
      }
      if (struct.isSetResponseBytes()) {
        optionals.set(12);
      }
      if (struct.isSetFlowedCount()) {
        optionals.set(13);
      }
      if (struct.isSetDegradedCount()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetInterval()) {
        oprot.writeI32(struct.interval);
      }
      if (struct.isSetSrcApplication()) {
        oprot.writeString(struct.srcApplication);
      }
      if (struct.isSetUri()) {
        oprot.writeString(struct.uri);
      }
      if (struct.isSetMinResponseTime()) {
        oprot.writeI64(struct.minResponseTime);
      }
      if (struct.isSetResponseTime()) {
        oprot.writeI64(struct.responseTime);
      }
      if (struct.isSetMaxResponseTime()) {
        oprot.writeI64(struct.maxResponseTime);
      }
      if (struct.isSetCallCount()) {
        oprot.writeI64(struct.callCount);
      }
      if (struct.isSetErrorCount()) {
        oprot.writeI64(struct.errorCount);
      }
      if (struct.isSetCount4xx()) {
        oprot.writeI64(struct.count4xx);
      }
      if (struct.isSetCount5xx()) {
        oprot.writeI64(struct.count5xx);
      }
      if (struct.isSetRequestBytes()) {
        oprot.writeI64(struct.requestBytes);
      }
      if (struct.isSetResponseBytes()) {
        oprot.writeI64(struct.responseBytes);
      }
      if (struct.isSetFlowedCount()) {
        oprot.writeI64(struct.flowedCount);
      }
      if (struct.isSetDegradedCount()) {
        oprot.writeI64(struct.degradedCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WebRequestMetricMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        struct.interval = iprot.readI32();
        struct.setIntervalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.srcApplication = iprot.readString();
        struct.setSrcApplicationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.uri = iprot.readString();
        struct.setUriIsSet(true);
      }
      if (incoming.get(4)) {
        struct.minResponseTime = iprot.readI64();
        struct.setMinResponseTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.responseTime = iprot.readI64();
        struct.setResponseTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.maxResponseTime = iprot.readI64();
        struct.setMaxResponseTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.callCount = iprot.readI64();
        struct.setCallCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.errorCount = iprot.readI64();
        struct.setErrorCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.count4xx = iprot.readI64();
        struct.setCount4xxIsSet(true);
      }
      if (incoming.get(10)) {
        struct.count5xx = iprot.readI64();
        struct.setCount5xxIsSet(true);
      }
      if (incoming.get(11)) {
        struct.requestBytes = iprot.readI64();
        struct.setRequestBytesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.responseBytes = iprot.readI64();
        struct.setResponseBytesIsSet(true);
      }
      if (incoming.get(13)) {
        struct.flowedCount = iprot.readI64();
        struct.setFlowedCountIsSet(true);
      }
      if (incoming.get(14)) {
        struct.degradedCount = iprot.readI64();
        struct.setDegradedCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

