/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sbss.bithon.agent.rpc.thrift.service.metric.message;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * ************************* JVM Metrics **********************************
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-03")
public class JvmMessage implements org.apache.thrift.TBase<JvmMessage, JvmMessage._Fields>, java.io.Serializable, Cloneable, Comparable<JvmMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JvmMessage");

  private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField INSTANCE_TIME_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceTimeEntity", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField CPU_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuEntity", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField MEMORY_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("memoryEntity", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField HEAP_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("heapEntity", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField NON_HEAP_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("nonHeapEntity", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField GC_ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("gcEntities", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField THREAD_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("threadEntity", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField CLASSES_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("classesEntity", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField METASPACE_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("metaspaceEntity", org.apache.thrift.protocol.TType.STRUCT, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JvmMessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JvmMessageTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String appName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String env; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String hostName; // required
  public int port; // required
  public int interval; // required
  public long timestamp; // required
  public @org.apache.thrift.annotation.Nullable InstanceTimeEntity instanceTimeEntity; // required
  public @org.apache.thrift.annotation.Nullable CpuEntity cpuEntity; // required
  public @org.apache.thrift.annotation.Nullable MemoryEntity memoryEntity; // required
  public @org.apache.thrift.annotation.Nullable HeapEntity heapEntity; // required
  public @org.apache.thrift.annotation.Nullable NonHeapEntity nonHeapEntity; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<GcEntity> gcEntities; // required
  public @org.apache.thrift.annotation.Nullable ThreadEntity threadEntity; // required
  public @org.apache.thrift.annotation.Nullable ClassEntity classesEntity; // required
  public @org.apache.thrift.annotation.Nullable MetaspaceEntity metaspaceEntity; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP_NAME((short)1, "appName"),
    ENV((short)2, "env"),
    HOST_NAME((short)3, "hostName"),
    PORT((short)4, "port"),
    INTERVAL((short)5, "interval"),
    TIMESTAMP((short)6, "timestamp"),
    INSTANCE_TIME_ENTITY((short)7, "instanceTimeEntity"),
    CPU_ENTITY((short)8, "cpuEntity"),
    MEMORY_ENTITY((short)9, "memoryEntity"),
    HEAP_ENTITY((short)10, "heapEntity"),
    NON_HEAP_ENTITY((short)11, "nonHeapEntity"),
    GC_ENTITIES((short)12, "gcEntities"),
    THREAD_ENTITY((short)13, "threadEntity"),
    CLASSES_ENTITY((short)14, "classesEntity"),
    METASPACE_ENTITY((short)15, "metaspaceEntity");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_NAME
          return APP_NAME;
        case 2: // ENV
          return ENV;
        case 3: // HOST_NAME
          return HOST_NAME;
        case 4: // PORT
          return PORT;
        case 5: // INTERVAL
          return INTERVAL;
        case 6: // TIMESTAMP
          return TIMESTAMP;
        case 7: // INSTANCE_TIME_ENTITY
          return INSTANCE_TIME_ENTITY;
        case 8: // CPU_ENTITY
          return CPU_ENTITY;
        case 9: // MEMORY_ENTITY
          return MEMORY_ENTITY;
        case 10: // HEAP_ENTITY
          return HEAP_ENTITY;
        case 11: // NON_HEAP_ENTITY
          return NON_HEAP_ENTITY;
        case 12: // GC_ENTITIES
          return GC_ENTITIES;
        case 13: // THREAD_ENTITY
          return THREAD_ENTITY;
        case 14: // CLASSES_ENTITY
          return CLASSES_ENTITY;
        case 15: // METASPACE_ENTITY
          return METASPACE_ENTITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private static final int __INTERVAL_ISSET_ID = 1;
  private static final int __TIMESTAMP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INSTANCE_TIME_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("instanceTimeEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "InstanceTimeEntity")));
    tmpMap.put(_Fields.CPU_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("cpuEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "CpuEntity")));
    tmpMap.put(_Fields.MEMORY_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("memoryEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "MemoryEntity")));
    tmpMap.put(_Fields.HEAP_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("heapEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "HeapEntity")));
    tmpMap.put(_Fields.NON_HEAP_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("nonHeapEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "NonHeapEntity")));
    tmpMap.put(_Fields.GC_ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("gcEntities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "GcEntity"))));
    tmpMap.put(_Fields.THREAD_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("threadEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ThreadEntity")));
    tmpMap.put(_Fields.CLASSES_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("classesEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ClassEntity")));
    tmpMap.put(_Fields.METASPACE_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("metaspaceEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "MetaspaceEntity")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JvmMessage.class, metaDataMap);
  }

  public JvmMessage() {
  }

  public JvmMessage(
    java.lang.String appName,
    java.lang.String env,
    java.lang.String hostName,
    int port,
    int interval,
    long timestamp,
    InstanceTimeEntity instanceTimeEntity,
    CpuEntity cpuEntity,
    MemoryEntity memoryEntity,
    HeapEntity heapEntity,
    NonHeapEntity nonHeapEntity,
    java.util.List<GcEntity> gcEntities,
    ThreadEntity threadEntity,
    ClassEntity classesEntity,
    MetaspaceEntity metaspaceEntity)
  {
    this();
    this.appName = appName;
    this.env = env;
    this.hostName = hostName;
    this.port = port;
    setPortIsSet(true);
    this.interval = interval;
    setIntervalIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.instanceTimeEntity = instanceTimeEntity;
    this.cpuEntity = cpuEntity;
    this.memoryEntity = memoryEntity;
    this.heapEntity = heapEntity;
    this.nonHeapEntity = nonHeapEntity;
    this.gcEntities = gcEntities;
    this.threadEntity = threadEntity;
    this.classesEntity = classesEntity;
    this.metaspaceEntity = metaspaceEntity;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JvmMessage(JvmMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAppName()) {
      this.appName = other.appName;
    }
    if (other.isSetEnv()) {
      this.env = other.env;
    }
    if (other.isSetHostName()) {
      this.hostName = other.hostName;
    }
    this.port = other.port;
    this.interval = other.interval;
    this.timestamp = other.timestamp;
    if (other.isSetInstanceTimeEntity()) {
      this.instanceTimeEntity = new InstanceTimeEntity(other.instanceTimeEntity);
    }
    if (other.isSetCpuEntity()) {
      this.cpuEntity = new CpuEntity(other.cpuEntity);
    }
    if (other.isSetMemoryEntity()) {
      this.memoryEntity = new MemoryEntity(other.memoryEntity);
    }
    if (other.isSetHeapEntity()) {
      this.heapEntity = new HeapEntity(other.heapEntity);
    }
    if (other.isSetNonHeapEntity()) {
      this.nonHeapEntity = new NonHeapEntity(other.nonHeapEntity);
    }
    if (other.isSetGcEntities()) {
      java.util.List<GcEntity> __this__gcEntities = new java.util.ArrayList<GcEntity>(other.gcEntities.size());
      for (GcEntity other_element : other.gcEntities) {
        __this__gcEntities.add(new GcEntity(other_element));
      }
      this.gcEntities = __this__gcEntities;
    }
    if (other.isSetThreadEntity()) {
      this.threadEntity = new ThreadEntity(other.threadEntity);
    }
    if (other.isSetClassesEntity()) {
      this.classesEntity = new ClassEntity(other.classesEntity);
    }
    if (other.isSetMetaspaceEntity()) {
      this.metaspaceEntity = new MetaspaceEntity(other.metaspaceEntity);
    }
  }

  public JvmMessage deepCopy() {
    return new JvmMessage(this);
  }

  @Override
  public void clear() {
    this.appName = null;
    this.env = null;
    this.hostName = null;
    setPortIsSet(false);
    this.port = 0;
    setIntervalIsSet(false);
    this.interval = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.instanceTimeEntity = null;
    this.cpuEntity = null;
    this.memoryEntity = null;
    this.heapEntity = null;
    this.nonHeapEntity = null;
    this.gcEntities = null;
    this.threadEntity = null;
    this.classesEntity = null;
    this.metaspaceEntity = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAppName() {
    return this.appName;
  }

  public JvmMessage setAppName(@org.apache.thrift.annotation.Nullable java.lang.String appName) {
    this.appName = appName;
    return this;
  }

  public void unsetAppName() {
    this.appName = null;
  }

  /** Returns true if field appName is set (has been assigned a value) and false otherwise */
  public boolean isSetAppName() {
    return this.appName != null;
  }

  public void setAppNameIsSet(boolean value) {
    if (!value) {
      this.appName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEnv() {
    return this.env;
  }

  public JvmMessage setEnv(@org.apache.thrift.annotation.Nullable java.lang.String env) {
    this.env = env;
    return this;
  }

  public void unsetEnv() {
    this.env = null;
  }

  /** Returns true if field env is set (has been assigned a value) and false otherwise */
  public boolean isSetEnv() {
    return this.env != null;
  }

  public void setEnvIsSet(boolean value) {
    if (!value) {
      this.env = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHostName() {
    return this.hostName;
  }

  public JvmMessage setHostName(@org.apache.thrift.annotation.Nullable java.lang.String hostName) {
    this.hostName = hostName;
    return this;
  }

  public void unsetHostName() {
    this.hostName = null;
  }

  /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
  public boolean isSetHostName() {
    return this.hostName != null;
  }

  public void setHostNameIsSet(boolean value) {
    if (!value) {
      this.hostName = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public JvmMessage setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public int getInterval() {
    return this.interval;
  }

  public JvmMessage setInterval(int interval) {
    this.interval = interval;
    setIntervalIsSet(true);
    return this;
  }

  public void unsetInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  /** Returns true if field interval is set (has been assigned a value) and false otherwise */
  public boolean isSetInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  public void setIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public JvmMessage setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public InstanceTimeEntity getInstanceTimeEntity() {
    return this.instanceTimeEntity;
  }

  public JvmMessage setInstanceTimeEntity(@org.apache.thrift.annotation.Nullable InstanceTimeEntity instanceTimeEntity) {
    this.instanceTimeEntity = instanceTimeEntity;
    return this;
  }

  public void unsetInstanceTimeEntity() {
    this.instanceTimeEntity = null;
  }

  /** Returns true if field instanceTimeEntity is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceTimeEntity() {
    return this.instanceTimeEntity != null;
  }

  public void setInstanceTimeEntityIsSet(boolean value) {
    if (!value) {
      this.instanceTimeEntity = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public CpuEntity getCpuEntity() {
    return this.cpuEntity;
  }

  public JvmMessage setCpuEntity(@org.apache.thrift.annotation.Nullable CpuEntity cpuEntity) {
    this.cpuEntity = cpuEntity;
    return this;
  }

  public void unsetCpuEntity() {
    this.cpuEntity = null;
  }

  /** Returns true if field cpuEntity is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuEntity() {
    return this.cpuEntity != null;
  }

  public void setCpuEntityIsSet(boolean value) {
    if (!value) {
      this.cpuEntity = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MemoryEntity getMemoryEntity() {
    return this.memoryEntity;
  }

  public JvmMessage setMemoryEntity(@org.apache.thrift.annotation.Nullable MemoryEntity memoryEntity) {
    this.memoryEntity = memoryEntity;
    return this;
  }

  public void unsetMemoryEntity() {
    this.memoryEntity = null;
  }

  /** Returns true if field memoryEntity is set (has been assigned a value) and false otherwise */
  public boolean isSetMemoryEntity() {
    return this.memoryEntity != null;
  }

  public void setMemoryEntityIsSet(boolean value) {
    if (!value) {
      this.memoryEntity = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public HeapEntity getHeapEntity() {
    return this.heapEntity;
  }

  public JvmMessage setHeapEntity(@org.apache.thrift.annotation.Nullable HeapEntity heapEntity) {
    this.heapEntity = heapEntity;
    return this;
  }

  public void unsetHeapEntity() {
    this.heapEntity = null;
  }

  /** Returns true if field heapEntity is set (has been assigned a value) and false otherwise */
  public boolean isSetHeapEntity() {
    return this.heapEntity != null;
  }

  public void setHeapEntityIsSet(boolean value) {
    if (!value) {
      this.heapEntity = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public NonHeapEntity getNonHeapEntity() {
    return this.nonHeapEntity;
  }

  public JvmMessage setNonHeapEntity(@org.apache.thrift.annotation.Nullable NonHeapEntity nonHeapEntity) {
    this.nonHeapEntity = nonHeapEntity;
    return this;
  }

  public void unsetNonHeapEntity() {
    this.nonHeapEntity = null;
  }

  /** Returns true if field nonHeapEntity is set (has been assigned a value) and false otherwise */
  public boolean isSetNonHeapEntity() {
    return this.nonHeapEntity != null;
  }

  public void setNonHeapEntityIsSet(boolean value) {
    if (!value) {
      this.nonHeapEntity = null;
    }
  }

  public int getGcEntitiesSize() {
    return (this.gcEntities == null) ? 0 : this.gcEntities.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<GcEntity> getGcEntitiesIterator() {
    return (this.gcEntities == null) ? null : this.gcEntities.iterator();
  }

  public void addToGcEntities(GcEntity elem) {
    if (this.gcEntities == null) {
      this.gcEntities = new java.util.ArrayList<GcEntity>();
    }
    this.gcEntities.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<GcEntity> getGcEntities() {
    return this.gcEntities;
  }

  public JvmMessage setGcEntities(@org.apache.thrift.annotation.Nullable java.util.List<GcEntity> gcEntities) {
    this.gcEntities = gcEntities;
    return this;
  }

  public void unsetGcEntities() {
    this.gcEntities = null;
  }

  /** Returns true if field gcEntities is set (has been assigned a value) and false otherwise */
  public boolean isSetGcEntities() {
    return this.gcEntities != null;
  }

  public void setGcEntitiesIsSet(boolean value) {
    if (!value) {
      this.gcEntities = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ThreadEntity getThreadEntity() {
    return this.threadEntity;
  }

  public JvmMessage setThreadEntity(@org.apache.thrift.annotation.Nullable ThreadEntity threadEntity) {
    this.threadEntity = threadEntity;
    return this;
  }

  public void unsetThreadEntity() {
    this.threadEntity = null;
  }

  /** Returns true if field threadEntity is set (has been assigned a value) and false otherwise */
  public boolean isSetThreadEntity() {
    return this.threadEntity != null;
  }

  public void setThreadEntityIsSet(boolean value) {
    if (!value) {
      this.threadEntity = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ClassEntity getClassesEntity() {
    return this.classesEntity;
  }

  public JvmMessage setClassesEntity(@org.apache.thrift.annotation.Nullable ClassEntity classesEntity) {
    this.classesEntity = classesEntity;
    return this;
  }

  public void unsetClassesEntity() {
    this.classesEntity = null;
  }

  /** Returns true if field classesEntity is set (has been assigned a value) and false otherwise */
  public boolean isSetClassesEntity() {
    return this.classesEntity != null;
  }

  public void setClassesEntityIsSet(boolean value) {
    if (!value) {
      this.classesEntity = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public MetaspaceEntity getMetaspaceEntity() {
    return this.metaspaceEntity;
  }

  public JvmMessage setMetaspaceEntity(@org.apache.thrift.annotation.Nullable MetaspaceEntity metaspaceEntity) {
    this.metaspaceEntity = metaspaceEntity;
    return this;
  }

  public void unsetMetaspaceEntity() {
    this.metaspaceEntity = null;
  }

  /** Returns true if field metaspaceEntity is set (has been assigned a value) and false otherwise */
  public boolean isSetMetaspaceEntity() {
    return this.metaspaceEntity != null;
  }

  public void setMetaspaceEntityIsSet(boolean value) {
    if (!value) {
      this.metaspaceEntity = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case APP_NAME:
      if (value == null) {
        unsetAppName();
      } else {
        setAppName((java.lang.String)value);
      }
      break;

    case ENV:
      if (value == null) {
        unsetEnv();
      } else {
        setEnv((java.lang.String)value);
      }
      break;

    case HOST_NAME:
      if (value == null) {
        unsetHostName();
      } else {
        setHostName((java.lang.String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((java.lang.Integer)value);
      }
      break;

    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((java.lang.Integer)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case INSTANCE_TIME_ENTITY:
      if (value == null) {
        unsetInstanceTimeEntity();
      } else {
        setInstanceTimeEntity((InstanceTimeEntity)value);
      }
      break;

    case CPU_ENTITY:
      if (value == null) {
        unsetCpuEntity();
      } else {
        setCpuEntity((CpuEntity)value);
      }
      break;

    case MEMORY_ENTITY:
      if (value == null) {
        unsetMemoryEntity();
      } else {
        setMemoryEntity((MemoryEntity)value);
      }
      break;

    case HEAP_ENTITY:
      if (value == null) {
        unsetHeapEntity();
      } else {
        setHeapEntity((HeapEntity)value);
      }
      break;

    case NON_HEAP_ENTITY:
      if (value == null) {
        unsetNonHeapEntity();
      } else {
        setNonHeapEntity((NonHeapEntity)value);
      }
      break;

    case GC_ENTITIES:
      if (value == null) {
        unsetGcEntities();
      } else {
        setGcEntities((java.util.List<GcEntity>)value);
      }
      break;

    case THREAD_ENTITY:
      if (value == null) {
        unsetThreadEntity();
      } else {
        setThreadEntity((ThreadEntity)value);
      }
      break;

    case CLASSES_ENTITY:
      if (value == null) {
        unsetClassesEntity();
      } else {
        setClassesEntity((ClassEntity)value);
      }
      break;

    case METASPACE_ENTITY:
      if (value == null) {
        unsetMetaspaceEntity();
      } else {
        setMetaspaceEntity((MetaspaceEntity)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_NAME:
      return getAppName();

    case ENV:
      return getEnv();

    case HOST_NAME:
      return getHostName();

    case PORT:
      return getPort();

    case INTERVAL:
      return getInterval();

    case TIMESTAMP:
      return getTimestamp();

    case INSTANCE_TIME_ENTITY:
      return getInstanceTimeEntity();

    case CPU_ENTITY:
      return getCpuEntity();

    case MEMORY_ENTITY:
      return getMemoryEntity();

    case HEAP_ENTITY:
      return getHeapEntity();

    case NON_HEAP_ENTITY:
      return getNonHeapEntity();

    case GC_ENTITIES:
      return getGcEntities();

    case THREAD_ENTITY:
      return getThreadEntity();

    case CLASSES_ENTITY:
      return getClassesEntity();

    case METASPACE_ENTITY:
      return getMetaspaceEntity();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case APP_NAME:
      return isSetAppName();
    case ENV:
      return isSetEnv();
    case HOST_NAME:
      return isSetHostName();
    case PORT:
      return isSetPort();
    case INTERVAL:
      return isSetInterval();
    case TIMESTAMP:
      return isSetTimestamp();
    case INSTANCE_TIME_ENTITY:
      return isSetInstanceTimeEntity();
    case CPU_ENTITY:
      return isSetCpuEntity();
    case MEMORY_ENTITY:
      return isSetMemoryEntity();
    case HEAP_ENTITY:
      return isSetHeapEntity();
    case NON_HEAP_ENTITY:
      return isSetNonHeapEntity();
    case GC_ENTITIES:
      return isSetGcEntities();
    case THREAD_ENTITY:
      return isSetThreadEntity();
    case CLASSES_ENTITY:
      return isSetClassesEntity();
    case METASPACE_ENTITY:
      return isSetMetaspaceEntity();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof JvmMessage)
      return this.equals((JvmMessage)that);
    return false;
  }

  public boolean equals(JvmMessage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_appName = true && this.isSetAppName();
    boolean that_present_appName = true && that.isSetAppName();
    if (this_present_appName || that_present_appName) {
      if (!(this_present_appName && that_present_appName))
        return false;
      if (!this.appName.equals(that.appName))
        return false;
    }

    boolean this_present_env = true && this.isSetEnv();
    boolean that_present_env = true && that.isSetEnv();
    if (this_present_env || that_present_env) {
      if (!(this_present_env && that_present_env))
        return false;
      if (!this.env.equals(that.env))
        return false;
    }

    boolean this_present_hostName = true && this.isSetHostName();
    boolean that_present_hostName = true && that.isSetHostName();
    if (this_present_hostName || that_present_hostName) {
      if (!(this_present_hostName && that_present_hostName))
        return false;
      if (!this.hostName.equals(that.hostName))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_interval = true;
    boolean that_present_interval = true;
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (this.interval != that.interval)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_instanceTimeEntity = true && this.isSetInstanceTimeEntity();
    boolean that_present_instanceTimeEntity = true && that.isSetInstanceTimeEntity();
    if (this_present_instanceTimeEntity || that_present_instanceTimeEntity) {
      if (!(this_present_instanceTimeEntity && that_present_instanceTimeEntity))
        return false;
      if (!this.instanceTimeEntity.equals(that.instanceTimeEntity))
        return false;
    }

    boolean this_present_cpuEntity = true && this.isSetCpuEntity();
    boolean that_present_cpuEntity = true && that.isSetCpuEntity();
    if (this_present_cpuEntity || that_present_cpuEntity) {
      if (!(this_present_cpuEntity && that_present_cpuEntity))
        return false;
      if (!this.cpuEntity.equals(that.cpuEntity))
        return false;
    }

    boolean this_present_memoryEntity = true && this.isSetMemoryEntity();
    boolean that_present_memoryEntity = true && that.isSetMemoryEntity();
    if (this_present_memoryEntity || that_present_memoryEntity) {
      if (!(this_present_memoryEntity && that_present_memoryEntity))
        return false;
      if (!this.memoryEntity.equals(that.memoryEntity))
        return false;
    }

    boolean this_present_heapEntity = true && this.isSetHeapEntity();
    boolean that_present_heapEntity = true && that.isSetHeapEntity();
    if (this_present_heapEntity || that_present_heapEntity) {
      if (!(this_present_heapEntity && that_present_heapEntity))
        return false;
      if (!this.heapEntity.equals(that.heapEntity))
        return false;
    }

    boolean this_present_nonHeapEntity = true && this.isSetNonHeapEntity();
    boolean that_present_nonHeapEntity = true && that.isSetNonHeapEntity();
    if (this_present_nonHeapEntity || that_present_nonHeapEntity) {
      if (!(this_present_nonHeapEntity && that_present_nonHeapEntity))
        return false;
      if (!this.nonHeapEntity.equals(that.nonHeapEntity))
        return false;
    }

    boolean this_present_gcEntities = true && this.isSetGcEntities();
    boolean that_present_gcEntities = true && that.isSetGcEntities();
    if (this_present_gcEntities || that_present_gcEntities) {
      if (!(this_present_gcEntities && that_present_gcEntities))
        return false;
      if (!this.gcEntities.equals(that.gcEntities))
        return false;
    }

    boolean this_present_threadEntity = true && this.isSetThreadEntity();
    boolean that_present_threadEntity = true && that.isSetThreadEntity();
    if (this_present_threadEntity || that_present_threadEntity) {
      if (!(this_present_threadEntity && that_present_threadEntity))
        return false;
      if (!this.threadEntity.equals(that.threadEntity))
        return false;
    }

    boolean this_present_classesEntity = true && this.isSetClassesEntity();
    boolean that_present_classesEntity = true && that.isSetClassesEntity();
    if (this_present_classesEntity || that_present_classesEntity) {
      if (!(this_present_classesEntity && that_present_classesEntity))
        return false;
      if (!this.classesEntity.equals(that.classesEntity))
        return false;
    }

    boolean this_present_metaspaceEntity = true && this.isSetMetaspaceEntity();
    boolean that_present_metaspaceEntity = true && that.isSetMetaspaceEntity();
    if (this_present_metaspaceEntity || that_present_metaspaceEntity) {
      if (!(this_present_metaspaceEntity && that_present_metaspaceEntity))
        return false;
      if (!this.metaspaceEntity.equals(that.metaspaceEntity))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAppName()) ? 131071 : 524287);
    if (isSetAppName())
      hashCode = hashCode * 8191 + appName.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnv()) ? 131071 : 524287);
    if (isSetEnv())
      hashCode = hashCode * 8191 + env.hashCode();

    hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
    if (isSetHostName())
      hashCode = hashCode * 8191 + hostName.hashCode();

    hashCode = hashCode * 8191 + port;

    hashCode = hashCode * 8191 + interval;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetInstanceTimeEntity()) ? 131071 : 524287);
    if (isSetInstanceTimeEntity())
      hashCode = hashCode * 8191 + instanceTimeEntity.hashCode();

    hashCode = hashCode * 8191 + ((isSetCpuEntity()) ? 131071 : 524287);
    if (isSetCpuEntity())
      hashCode = hashCode * 8191 + cpuEntity.hashCode();

    hashCode = hashCode * 8191 + ((isSetMemoryEntity()) ? 131071 : 524287);
    if (isSetMemoryEntity())
      hashCode = hashCode * 8191 + memoryEntity.hashCode();

    hashCode = hashCode * 8191 + ((isSetHeapEntity()) ? 131071 : 524287);
    if (isSetHeapEntity())
      hashCode = hashCode * 8191 + heapEntity.hashCode();

    hashCode = hashCode * 8191 + ((isSetNonHeapEntity()) ? 131071 : 524287);
    if (isSetNonHeapEntity())
      hashCode = hashCode * 8191 + nonHeapEntity.hashCode();

    hashCode = hashCode * 8191 + ((isSetGcEntities()) ? 131071 : 524287);
    if (isSetGcEntities())
      hashCode = hashCode * 8191 + gcEntities.hashCode();

    hashCode = hashCode * 8191 + ((isSetThreadEntity()) ? 131071 : 524287);
    if (isSetThreadEntity())
      hashCode = hashCode * 8191 + threadEntity.hashCode();

    hashCode = hashCode * 8191 + ((isSetClassesEntity()) ? 131071 : 524287);
    if (isSetClassesEntity())
      hashCode = hashCode * 8191 + classesEntity.hashCode();

    hashCode = hashCode * 8191 + ((isSetMetaspaceEntity()) ? 131071 : 524287);
    if (isSetMetaspaceEntity())
      hashCode = hashCode * 8191 + metaspaceEntity.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(JvmMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnv()).compareTo(other.isSetEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, other.env);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInstanceTimeEntity()).compareTo(other.isSetInstanceTimeEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceTimeEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceTimeEntity, other.instanceTimeEntity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCpuEntity()).compareTo(other.isSetCpuEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuEntity, other.cpuEntity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMemoryEntity()).compareTo(other.isSetMemoryEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemoryEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memoryEntity, other.memoryEntity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHeapEntity()).compareTo(other.isSetHeapEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeapEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heapEntity, other.heapEntity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNonHeapEntity()).compareTo(other.isSetNonHeapEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonHeapEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonHeapEntity, other.nonHeapEntity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGcEntities()).compareTo(other.isSetGcEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGcEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gcEntities, other.gcEntities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetThreadEntity()).compareTo(other.isSetThreadEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreadEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadEntity, other.threadEntity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClassesEntity()).compareTo(other.isSetClassesEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassesEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classesEntity, other.classesEntity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMetaspaceEntity()).compareTo(other.isSetMetaspaceEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetaspaceEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metaspaceEntity, other.metaspaceEntity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("JvmMessage(");
    boolean first = true;

    sb.append("appName:");
    if (this.appName == null) {
      sb.append("null");
    } else {
      sb.append(this.appName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("env:");
    if (this.env == null) {
      sb.append("null");
    } else {
      sb.append(this.env);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostName:");
    if (this.hostName == null) {
      sb.append("null");
    } else {
      sb.append(this.hostName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interval:");
    sb.append(this.interval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("instanceTimeEntity:");
    if (this.instanceTimeEntity == null) {
      sb.append("null");
    } else {
      sb.append(this.instanceTimeEntity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuEntity:");
    if (this.cpuEntity == null) {
      sb.append("null");
    } else {
      sb.append(this.cpuEntity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memoryEntity:");
    if (this.memoryEntity == null) {
      sb.append("null");
    } else {
      sb.append(this.memoryEntity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("heapEntity:");
    if (this.heapEntity == null) {
      sb.append("null");
    } else {
      sb.append(this.heapEntity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nonHeapEntity:");
    if (this.nonHeapEntity == null) {
      sb.append("null");
    } else {
      sb.append(this.nonHeapEntity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gcEntities:");
    if (this.gcEntities == null) {
      sb.append("null");
    } else {
      sb.append(this.gcEntities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("threadEntity:");
    if (this.threadEntity == null) {
      sb.append("null");
    } else {
      sb.append(this.threadEntity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("classesEntity:");
    if (this.classesEntity == null) {
      sb.append("null");
    } else {
      sb.append(this.classesEntity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metaspaceEntity:");
    if (this.metaspaceEntity == null) {
      sb.append("null");
    } else {
      sb.append(this.metaspaceEntity);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JvmMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JvmMessageStandardScheme getScheme() {
      return new JvmMessageStandardScheme();
    }
  }

  private static class JvmMessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<JvmMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JvmMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appName = iprot.readString();
              struct.setAppNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.env = iprot.readString();
              struct.setEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostName = iprot.readString();
              struct.setHostNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interval = iprot.readI32();
              struct.setIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INSTANCE_TIME_ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.instanceTimeEntity = new InstanceTimeEntity();
              struct.instanceTimeEntity.read(iprot);
              struct.setInstanceTimeEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CPU_ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cpuEntity = new CpuEntity();
              struct.cpuEntity.read(iprot);
              struct.setCpuEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MEMORY_ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.memoryEntity = new MemoryEntity();
              struct.memoryEntity.read(iprot);
              struct.setMemoryEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HEAP_ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.heapEntity = new HeapEntity();
              struct.heapEntity.read(iprot);
              struct.setHeapEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NON_HEAP_ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nonHeapEntity = new NonHeapEntity();
              struct.nonHeapEntity.read(iprot);
              struct.setNonHeapEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // GC_ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.gcEntities = new java.util.ArrayList<GcEntity>(_list0.size);
                @org.apache.thrift.annotation.Nullable GcEntity _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new GcEntity();
                  _elem1.read(iprot);
                  struct.gcEntities.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setGcEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // THREAD_ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.threadEntity = new ThreadEntity();
              struct.threadEntity.read(iprot);
              struct.setThreadEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CLASSES_ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.classesEntity = new ClassEntity();
              struct.classesEntity.read(iprot);
              struct.setClassesEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // METASPACE_ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metaspaceEntity = new MetaspaceEntity();
              struct.metaspaceEntity.read(iprot);
              struct.setMetaspaceEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JvmMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.appName != null) {
        oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
        oprot.writeString(struct.appName);
        oprot.writeFieldEnd();
      }
      if (struct.env != null) {
        oprot.writeFieldBegin(ENV_FIELD_DESC);
        oprot.writeString(struct.env);
        oprot.writeFieldEnd();
      }
      if (struct.hostName != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(struct.hostName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.port);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.interval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.instanceTimeEntity != null) {
        oprot.writeFieldBegin(INSTANCE_TIME_ENTITY_FIELD_DESC);
        struct.instanceTimeEntity.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.cpuEntity != null) {
        oprot.writeFieldBegin(CPU_ENTITY_FIELD_DESC);
        struct.cpuEntity.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.memoryEntity != null) {
        oprot.writeFieldBegin(MEMORY_ENTITY_FIELD_DESC);
        struct.memoryEntity.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.heapEntity != null) {
        oprot.writeFieldBegin(HEAP_ENTITY_FIELD_DESC);
        struct.heapEntity.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.nonHeapEntity != null) {
        oprot.writeFieldBegin(NON_HEAP_ENTITY_FIELD_DESC);
        struct.nonHeapEntity.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.gcEntities != null) {
        oprot.writeFieldBegin(GC_ENTITIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.gcEntities.size()));
          for (GcEntity _iter3 : struct.gcEntities)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.threadEntity != null) {
        oprot.writeFieldBegin(THREAD_ENTITY_FIELD_DESC);
        struct.threadEntity.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.classesEntity != null) {
        oprot.writeFieldBegin(CLASSES_ENTITY_FIELD_DESC);
        struct.classesEntity.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.metaspaceEntity != null) {
        oprot.writeFieldBegin(METASPACE_ENTITY_FIELD_DESC);
        struct.metaspaceEntity.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JvmMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JvmMessageTupleScheme getScheme() {
      return new JvmMessageTupleScheme();
    }
  }

  private static class JvmMessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<JvmMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JvmMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAppName()) {
        optionals.set(0);
      }
      if (struct.isSetEnv()) {
        optionals.set(1);
      }
      if (struct.isSetHostName()) {
        optionals.set(2);
      }
      if (struct.isSetPort()) {
        optionals.set(3);
      }
      if (struct.isSetInterval()) {
        optionals.set(4);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(5);
      }
      if (struct.isSetInstanceTimeEntity()) {
        optionals.set(6);
      }
      if (struct.isSetCpuEntity()) {
        optionals.set(7);
      }
      if (struct.isSetMemoryEntity()) {
        optionals.set(8);
      }
      if (struct.isSetHeapEntity()) {
        optionals.set(9);
      }
      if (struct.isSetNonHeapEntity()) {
        optionals.set(10);
      }
      if (struct.isSetGcEntities()) {
        optionals.set(11);
      }
      if (struct.isSetThreadEntity()) {
        optionals.set(12);
      }
      if (struct.isSetClassesEntity()) {
        optionals.set(13);
      }
      if (struct.isSetMetaspaceEntity()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetAppName()) {
        oprot.writeString(struct.appName);
      }
      if (struct.isSetEnv()) {
        oprot.writeString(struct.env);
      }
      if (struct.isSetHostName()) {
        oprot.writeString(struct.hostName);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetInterval()) {
        oprot.writeI32(struct.interval);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetInstanceTimeEntity()) {
        struct.instanceTimeEntity.write(oprot);
      }
      if (struct.isSetCpuEntity()) {
        struct.cpuEntity.write(oprot);
      }
      if (struct.isSetMemoryEntity()) {
        struct.memoryEntity.write(oprot);
      }
      if (struct.isSetHeapEntity()) {
        struct.heapEntity.write(oprot);
      }
      if (struct.isSetNonHeapEntity()) {
        struct.nonHeapEntity.write(oprot);
      }
      if (struct.isSetGcEntities()) {
        {
          oprot.writeI32(struct.gcEntities.size());
          for (GcEntity _iter4 : struct.gcEntities)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetThreadEntity()) {
        struct.threadEntity.write(oprot);
      }
      if (struct.isSetClassesEntity()) {
        struct.classesEntity.write(oprot);
      }
      if (struct.isSetMetaspaceEntity()) {
        struct.metaspaceEntity.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JvmMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.appName = iprot.readString();
        struct.setAppNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.env = iprot.readString();
        struct.setEnvIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hostName = iprot.readString();
        struct.setHostNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(4)) {
        struct.interval = iprot.readI32();
        struct.setIntervalIsSet(true);
      }
      if (incoming.get(5)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.instanceTimeEntity = new InstanceTimeEntity();
        struct.instanceTimeEntity.read(iprot);
        struct.setInstanceTimeEntityIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cpuEntity = new CpuEntity();
        struct.cpuEntity.read(iprot);
        struct.setCpuEntityIsSet(true);
      }
      if (incoming.get(8)) {
        struct.memoryEntity = new MemoryEntity();
        struct.memoryEntity.read(iprot);
        struct.setMemoryEntityIsSet(true);
      }
      if (incoming.get(9)) {
        struct.heapEntity = new HeapEntity();
        struct.heapEntity.read(iprot);
        struct.setHeapEntityIsSet(true);
      }
      if (incoming.get(10)) {
        struct.nonHeapEntity = new NonHeapEntity();
        struct.nonHeapEntity.read(iprot);
        struct.setNonHeapEntityIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.gcEntities = new java.util.ArrayList<GcEntity>(_list5.size);
          @org.apache.thrift.annotation.Nullable GcEntity _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new GcEntity();
            _elem6.read(iprot);
            struct.gcEntities.add(_elem6);
          }
        }
        struct.setGcEntitiesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.threadEntity = new ThreadEntity();
        struct.threadEntity.read(iprot);
        struct.setThreadEntityIsSet(true);
      }
      if (incoming.get(13)) {
        struct.classesEntity = new ClassEntity();
        struct.classesEntity.read(iprot);
        struct.setClassesEntityIsSet(true);
      }
      if (incoming.get(14)) {
        struct.metaspaceEntity = new MetaspaceEntity();
        struct.metaspaceEntity.read(iprot);
        struct.setMetaspaceEntityIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

