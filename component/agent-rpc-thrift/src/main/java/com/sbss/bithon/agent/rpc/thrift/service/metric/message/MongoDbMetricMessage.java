/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sbss.bithon.agent.rpc.thrift.service.metric.message;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * *****************************  MongoDb       **************************
 */
public class MongoDbMetricMessage implements org.apache.thrift.TBase<MongoDbMetricMessage, MongoDbMetricMessage._Fields>, java.io.Serializable, Cloneable, Comparable<MongoDbMetricMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MongoDbMetricMessage");

  private static final org.apache.thrift.protocol.TField SERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("server", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("collection", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CALL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("callCount", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField EXCEPTION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionCount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField RESPONSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("responseTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField MIN_RESPONSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("minResponseTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField MAX_RESPONSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxResponseTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField REQUEST_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("requestBytes", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField RESPONSE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("responseBytes", org.apache.thrift.protocol.TType.I64, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MongoDbMetricMessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MongoDbMetricMessageTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String server; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String database; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String collection; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String command; // required
  public long timestamp; // required
  public int interval; // required
  public long callCount; // required
  public long exceptionCount; // required
  public long responseTime; // required
  public long minResponseTime; // required
  public long maxResponseTime; // required
  public long requestBytes; // required
  public long responseBytes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVER((short)1, "server"),
    DATABASE((short)2, "database"),
    COLLECTION((short)3, "collection"),
    COMMAND((short)4, "command"),
    TIMESTAMP((short)5, "timestamp"),
    INTERVAL((short)6, "interval"),
    CALL_COUNT((short)7, "callCount"),
    EXCEPTION_COUNT((short)8, "exceptionCount"),
    RESPONSE_TIME((short)9, "responseTime"),
    MIN_RESPONSE_TIME((short)10, "minResponseTime"),
    MAX_RESPONSE_TIME((short)11, "maxResponseTime"),
    REQUEST_BYTES((short)12, "requestBytes"),
    RESPONSE_BYTES((short)13, "responseBytes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVER
          return SERVER;
        case 2: // DATABASE
          return DATABASE;
        case 3: // COLLECTION
          return COLLECTION;
        case 4: // COMMAND
          return COMMAND;
        case 5: // TIMESTAMP
          return TIMESTAMP;
        case 6: // INTERVAL
          return INTERVAL;
        case 7: // CALL_COUNT
          return CALL_COUNT;
        case 8: // EXCEPTION_COUNT
          return EXCEPTION_COUNT;
        case 9: // RESPONSE_TIME
          return RESPONSE_TIME;
        case 10: // MIN_RESPONSE_TIME
          return MIN_RESPONSE_TIME;
        case 11: // MAX_RESPONSE_TIME
          return MAX_RESPONSE_TIME;
        case 12: // REQUEST_BYTES
          return REQUEST_BYTES;
        case 13: // RESPONSE_BYTES
          return RESPONSE_BYTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __INTERVAL_ISSET_ID = 1;
  private static final int __CALLCOUNT_ISSET_ID = 2;
  private static final int __EXCEPTIONCOUNT_ISSET_ID = 3;
  private static final int __RESPONSETIME_ISSET_ID = 4;
  private static final int __MINRESPONSETIME_ISSET_ID = 5;
  private static final int __MAXRESPONSETIME_ISSET_ID = 6;
  private static final int __REQUESTBYTES_ISSET_ID = 7;
  private static final int __RESPONSEBYTES_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVER, new org.apache.thrift.meta_data.FieldMetaData("server", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("collection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CALL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("callCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXCEPTION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("exceptionCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESPONSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("responseTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_RESPONSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("minResponseTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_RESPONSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("maxResponseTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUEST_BYTES, new org.apache.thrift.meta_data.FieldMetaData("requestBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESPONSE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("responseBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MongoDbMetricMessage.class, metaDataMap);
  }

  public MongoDbMetricMessage() {
  }

  public MongoDbMetricMessage(
    java.lang.String server,
    java.lang.String database,
    java.lang.String collection,
    java.lang.String command,
    long timestamp,
    int interval,
    long callCount,
    long exceptionCount,
    long responseTime,
    long minResponseTime,
    long maxResponseTime,
    long requestBytes,
    long responseBytes)
  {
    this();
    this.server = server;
    this.database = database;
    this.collection = collection;
    this.command = command;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.interval = interval;
    setIntervalIsSet(true);
    this.callCount = callCount;
    setCallCountIsSet(true);
    this.exceptionCount = exceptionCount;
    setExceptionCountIsSet(true);
    this.responseTime = responseTime;
    setResponseTimeIsSet(true);
    this.minResponseTime = minResponseTime;
    setMinResponseTimeIsSet(true);
    this.maxResponseTime = maxResponseTime;
    setMaxResponseTimeIsSet(true);
    this.requestBytes = requestBytes;
    setRequestBytesIsSet(true);
    this.responseBytes = responseBytes;
    setResponseBytesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MongoDbMetricMessage(MongoDbMetricMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetServer()) {
      this.server = other.server;
    }
    if (other.isSetDatabase()) {
      this.database = other.database;
    }
    if (other.isSetCollection()) {
      this.collection = other.collection;
    }
    if (other.isSetCommand()) {
      this.command = other.command;
    }
    this.timestamp = other.timestamp;
    this.interval = other.interval;
    this.callCount = other.callCount;
    this.exceptionCount = other.exceptionCount;
    this.responseTime = other.responseTime;
    this.minResponseTime = other.minResponseTime;
    this.maxResponseTime = other.maxResponseTime;
    this.requestBytes = other.requestBytes;
    this.responseBytes = other.responseBytes;
  }

  public MongoDbMetricMessage deepCopy() {
    return new MongoDbMetricMessage(this);
  }

  @Override
  public void clear() {
    this.server = null;
    this.database = null;
    this.collection = null;
    this.command = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setIntervalIsSet(false);
    this.interval = 0;
    setCallCountIsSet(false);
    this.callCount = 0;
    setExceptionCountIsSet(false);
    this.exceptionCount = 0;
    setResponseTimeIsSet(false);
    this.responseTime = 0;
    setMinResponseTimeIsSet(false);
    this.minResponseTime = 0;
    setMaxResponseTimeIsSet(false);
    this.maxResponseTime = 0;
    setRequestBytesIsSet(false);
    this.requestBytes = 0;
    setResponseBytesIsSet(false);
    this.responseBytes = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getServer() {
    return this.server;
  }

  public MongoDbMetricMessage setServer(@org.apache.thrift.annotation.Nullable java.lang.String server) {
    this.server = server;
    return this;
  }

  public void unsetServer() {
    this.server = null;
  }

  /** Returns true if field server is set (has been assigned a value) and false otherwise */
  public boolean isSetServer() {
    return this.server != null;
  }

  public void setServerIsSet(boolean value) {
    if (!value) {
      this.server = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDatabase() {
    return this.database;
  }

  public MongoDbMetricMessage setDatabase(@org.apache.thrift.annotation.Nullable java.lang.String database) {
    this.database = database;
    return this;
  }

  public void unsetDatabase() {
    this.database = null;
  }

  /** Returns true if field database is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabase() {
    return this.database != null;
  }

  public void setDatabaseIsSet(boolean value) {
    if (!value) {
      this.database = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCollection() {
    return this.collection;
  }

  public MongoDbMetricMessage setCollection(@org.apache.thrift.annotation.Nullable java.lang.String collection) {
    this.collection = collection;
    return this;
  }

  public void unsetCollection() {
    this.collection = null;
  }

  /** Returns true if field collection is set (has been assigned a value) and false otherwise */
  public boolean isSetCollection() {
    return this.collection != null;
  }

  public void setCollectionIsSet(boolean value) {
    if (!value) {
      this.collection = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCommand() {
    return this.command;
  }

  public MongoDbMetricMessage setCommand(@org.apache.thrift.annotation.Nullable java.lang.String command) {
    this.command = command;
    return this;
  }

  public void unsetCommand() {
    this.command = null;
  }

  /** Returns true if field command is set (has been assigned a value) and false otherwise */
  public boolean isSetCommand() {
    return this.command != null;
  }

  public void setCommandIsSet(boolean value) {
    if (!value) {
      this.command = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public MongoDbMetricMessage setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getInterval() {
    return this.interval;
  }

  public MongoDbMetricMessage setInterval(int interval) {
    this.interval = interval;
    setIntervalIsSet(true);
    return this;
  }

  public void unsetInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  /** Returns true if field interval is set (has been assigned a value) and false otherwise */
  public boolean isSetInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  public void setIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
  }

  public long getCallCount() {
    return this.callCount;
  }

  public MongoDbMetricMessage setCallCount(long callCount) {
    this.callCount = callCount;
    setCallCountIsSet(true);
    return this;
  }

  public void unsetCallCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CALLCOUNT_ISSET_ID);
  }

  /** Returns true if field callCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCallCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CALLCOUNT_ISSET_ID);
  }

  public void setCallCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CALLCOUNT_ISSET_ID, value);
  }

  public long getExceptionCount() {
    return this.exceptionCount;
  }

  public MongoDbMetricMessage setExceptionCount(long exceptionCount) {
    this.exceptionCount = exceptionCount;
    setExceptionCountIsSet(true);
    return this;
  }

  public void unsetExceptionCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXCEPTIONCOUNT_ISSET_ID);
  }

  /** Returns true if field exceptionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXCEPTIONCOUNT_ISSET_ID);
  }

  public void setExceptionCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXCEPTIONCOUNT_ISSET_ID, value);
  }

  public long getResponseTime() {
    return this.responseTime;
  }

  public MongoDbMetricMessage setResponseTime(long responseTime) {
    this.responseTime = responseTime;
    setResponseTimeIsSet(true);
    return this;
  }

  public void unsetResponseTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  /** Returns true if field responseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  public void setResponseTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSETIME_ISSET_ID, value);
  }

  public long getMinResponseTime() {
    return this.minResponseTime;
  }

  public MongoDbMetricMessage setMinResponseTime(long minResponseTime) {
    this.minResponseTime = minResponseTime;
    setMinResponseTimeIsSet(true);
    return this;
  }

  public void unsetMinResponseTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINRESPONSETIME_ISSET_ID);
  }

  /** Returns true if field minResponseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMinResponseTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINRESPONSETIME_ISSET_ID);
  }

  public void setMinResponseTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINRESPONSETIME_ISSET_ID, value);
  }

  public long getMaxResponseTime() {
    return this.maxResponseTime;
  }

  public MongoDbMetricMessage setMaxResponseTime(long maxResponseTime) {
    this.maxResponseTime = maxResponseTime;
    setMaxResponseTimeIsSet(true);
    return this;
  }

  public void unsetMaxResponseTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXRESPONSETIME_ISSET_ID);
  }

  /** Returns true if field maxResponseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxResponseTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXRESPONSETIME_ISSET_ID);
  }

  public void setMaxResponseTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXRESPONSETIME_ISSET_ID, value);
  }

  public long getRequestBytes() {
    return this.requestBytes;
  }

  public MongoDbMetricMessage setRequestBytes(long requestBytes) {
    this.requestBytes = requestBytes;
    setRequestBytesIsSet(true);
    return this;
  }

  public void unsetRequestBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTBYTES_ISSET_ID);
  }

  /** Returns true if field requestBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTBYTES_ISSET_ID);
  }

  public void setRequestBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTBYTES_ISSET_ID, value);
  }

  public long getResponseBytes() {
    return this.responseBytes;
  }

  public MongoDbMetricMessage setResponseBytes(long responseBytes) {
    this.responseBytes = responseBytes;
    setResponseBytesIsSet(true);
    return this;
  }

  public void unsetResponseBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSEBYTES_ISSET_ID);
  }

  /** Returns true if field responseBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSEBYTES_ISSET_ID);
  }

  public void setResponseBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSEBYTES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SERVER:
      if (value == null) {
        unsetServer();
      } else {
        setServer((java.lang.String)value);
      }
      break;

    case DATABASE:
      if (value == null) {
        unsetDatabase();
      } else {
        setDatabase((java.lang.String)value);
      }
      break;

    case COLLECTION:
      if (value == null) {
        unsetCollection();
      } else {
        setCollection((java.lang.String)value);
      }
      break;

    case COMMAND:
      if (value == null) {
        unsetCommand();
      } else {
        setCommand((java.lang.String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((java.lang.Integer)value);
      }
      break;

    case CALL_COUNT:
      if (value == null) {
        unsetCallCount();
      } else {
        setCallCount((java.lang.Long)value);
      }
      break;

    case EXCEPTION_COUNT:
      if (value == null) {
        unsetExceptionCount();
      } else {
        setExceptionCount((java.lang.Long)value);
      }
      break;

    case RESPONSE_TIME:
      if (value == null) {
        unsetResponseTime();
      } else {
        setResponseTime((java.lang.Long)value);
      }
      break;

    case MIN_RESPONSE_TIME:
      if (value == null) {
        unsetMinResponseTime();
      } else {
        setMinResponseTime((java.lang.Long)value);
      }
      break;

    case MAX_RESPONSE_TIME:
      if (value == null) {
        unsetMaxResponseTime();
      } else {
        setMaxResponseTime((java.lang.Long)value);
      }
      break;

    case REQUEST_BYTES:
      if (value == null) {
        unsetRequestBytes();
      } else {
        setRequestBytes((java.lang.Long)value);
      }
      break;

    case RESPONSE_BYTES:
      if (value == null) {
        unsetResponseBytes();
      } else {
        setResponseBytes((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVER:
      return getServer();

    case DATABASE:
      return getDatabase();

    case COLLECTION:
      return getCollection();

    case COMMAND:
      return getCommand();

    case TIMESTAMP:
      return getTimestamp();

    case INTERVAL:
      return getInterval();

    case CALL_COUNT:
      return getCallCount();

    case EXCEPTION_COUNT:
      return getExceptionCount();

    case RESPONSE_TIME:
      return getResponseTime();

    case MIN_RESPONSE_TIME:
      return getMinResponseTime();

    case MAX_RESPONSE_TIME:
      return getMaxResponseTime();

    case REQUEST_BYTES:
      return getRequestBytes();

    case RESPONSE_BYTES:
      return getResponseBytes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SERVER:
      return isSetServer();
    case DATABASE:
      return isSetDatabase();
    case COLLECTION:
      return isSetCollection();
    case COMMAND:
      return isSetCommand();
    case TIMESTAMP:
      return isSetTimestamp();
    case INTERVAL:
      return isSetInterval();
    case CALL_COUNT:
      return isSetCallCount();
    case EXCEPTION_COUNT:
      return isSetExceptionCount();
    case RESPONSE_TIME:
      return isSetResponseTime();
    case MIN_RESPONSE_TIME:
      return isSetMinResponseTime();
    case MAX_RESPONSE_TIME:
      return isSetMaxResponseTime();
    case REQUEST_BYTES:
      return isSetRequestBytes();
    case RESPONSE_BYTES:
      return isSetResponseBytes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof MongoDbMetricMessage)
      return this.equals((MongoDbMetricMessage)that);
    return false;
  }

  public boolean equals(MongoDbMetricMessage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_server = true && this.isSetServer();
    boolean that_present_server = true && that.isSetServer();
    if (this_present_server || that_present_server) {
      if (!(this_present_server && that_present_server))
        return false;
      if (!this.server.equals(that.server))
        return false;
    }

    boolean this_present_database = true && this.isSetDatabase();
    boolean that_present_database = true && that.isSetDatabase();
    if (this_present_database || that_present_database) {
      if (!(this_present_database && that_present_database))
        return false;
      if (!this.database.equals(that.database))
        return false;
    }

    boolean this_present_collection = true && this.isSetCollection();
    boolean that_present_collection = true && that.isSetCollection();
    if (this_present_collection || that_present_collection) {
      if (!(this_present_collection && that_present_collection))
        return false;
      if (!this.collection.equals(that.collection))
        return false;
    }

    boolean this_present_command = true && this.isSetCommand();
    boolean that_present_command = true && that.isSetCommand();
    if (this_present_command || that_present_command) {
      if (!(this_present_command && that_present_command))
        return false;
      if (!this.command.equals(that.command))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_interval = true;
    boolean that_present_interval = true;
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (this.interval != that.interval)
        return false;
    }

    boolean this_present_callCount = true;
    boolean that_present_callCount = true;
    if (this_present_callCount || that_present_callCount) {
      if (!(this_present_callCount && that_present_callCount))
        return false;
      if (this.callCount != that.callCount)
        return false;
    }

    boolean this_present_exceptionCount = true;
    boolean that_present_exceptionCount = true;
    if (this_present_exceptionCount || that_present_exceptionCount) {
      if (!(this_present_exceptionCount && that_present_exceptionCount))
        return false;
      if (this.exceptionCount != that.exceptionCount)
        return false;
    }

    boolean this_present_responseTime = true;
    boolean that_present_responseTime = true;
    if (this_present_responseTime || that_present_responseTime) {
      if (!(this_present_responseTime && that_present_responseTime))
        return false;
      if (this.responseTime != that.responseTime)
        return false;
    }

    boolean this_present_minResponseTime = true;
    boolean that_present_minResponseTime = true;
    if (this_present_minResponseTime || that_present_minResponseTime) {
      if (!(this_present_minResponseTime && that_present_minResponseTime))
        return false;
      if (this.minResponseTime != that.minResponseTime)
        return false;
    }

    boolean this_present_maxResponseTime = true;
    boolean that_present_maxResponseTime = true;
    if (this_present_maxResponseTime || that_present_maxResponseTime) {
      if (!(this_present_maxResponseTime && that_present_maxResponseTime))
        return false;
      if (this.maxResponseTime != that.maxResponseTime)
        return false;
    }

    boolean this_present_requestBytes = true;
    boolean that_present_requestBytes = true;
    if (this_present_requestBytes || that_present_requestBytes) {
      if (!(this_present_requestBytes && that_present_requestBytes))
        return false;
      if (this.requestBytes != that.requestBytes)
        return false;
    }

    boolean this_present_responseBytes = true;
    boolean that_present_responseBytes = true;
    if (this_present_responseBytes || that_present_responseBytes) {
      if (!(this_present_responseBytes && that_present_responseBytes))
        return false;
      if (this.responseBytes != that.responseBytes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetServer()) ? 131071 : 524287);
    if (isSetServer())
      hashCode = hashCode * 8191 + server.hashCode();

    hashCode = hashCode * 8191 + ((isSetDatabase()) ? 131071 : 524287);
    if (isSetDatabase())
      hashCode = hashCode * 8191 + database.hashCode();

    hashCode = hashCode * 8191 + ((isSetCollection()) ? 131071 : 524287);
    if (isSetCollection())
      hashCode = hashCode * 8191 + collection.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommand()) ? 131071 : 524287);
    if (isSetCommand())
      hashCode = hashCode * 8191 + command.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + interval;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(callCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(exceptionCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(minResponseTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxResponseTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestBytes);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseBytes);

    return hashCode;
  }

  @Override
  public int compareTo(MongoDbMetricMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetServer(), other.isSetServer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server, other.server);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDatabase(), other.isSetDatabase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, other.database);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCollection(), other.isSetCollection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection, other.collection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCommand(), other.isSetCommand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInterval(), other.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCallCount(), other.isSetCallCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callCount, other.callCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExceptionCount(), other.isSetExceptionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionCount, other.exceptionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResponseTime(), other.isSetResponseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseTime, other.responseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMinResponseTime(), other.isSetMinResponseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinResponseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minResponseTime, other.minResponseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxResponseTime(), other.isSetMaxResponseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxResponseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxResponseTime, other.maxResponseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRequestBytes(), other.isSetRequestBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestBytes, other.requestBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResponseBytes(), other.isSetResponseBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseBytes, other.responseBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MongoDbMetricMessage(");
    boolean first = true;

    sb.append("server:");
    if (this.server == null) {
      sb.append("null");
    } else {
      sb.append(this.server);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("database:");
    if (this.database == null) {
      sb.append("null");
    } else {
      sb.append(this.database);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collection:");
    if (this.collection == null) {
      sb.append("null");
    } else {
      sb.append(this.collection);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("command:");
    if (this.command == null) {
      sb.append("null");
    } else {
      sb.append(this.command);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interval:");
    sb.append(this.interval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("callCount:");
    sb.append(this.callCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptionCount:");
    sb.append(this.exceptionCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseTime:");
    sb.append(this.responseTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minResponseTime:");
    sb.append(this.minResponseTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxResponseTime:");
    sb.append(this.maxResponseTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestBytes:");
    sb.append(this.requestBytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseBytes:");
    sb.append(this.responseBytes);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MongoDbMetricMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MongoDbMetricMessageStandardScheme getScheme() {
      return new MongoDbMetricMessageStandardScheme();
    }
  }

  private static class MongoDbMetricMessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<MongoDbMetricMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MongoDbMetricMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.server = iprot.readString();
              struct.setServerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATABASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.database = iprot.readString();
              struct.setDatabaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLLECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collection = iprot.readString();
              struct.setCollectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMAND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.command = iprot.readString();
              struct.setCommandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interval = iprot.readI32();
              struct.setIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CALL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.callCount = iprot.readI64();
              struct.setCallCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXCEPTION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.exceptionCount = iprot.readI64();
              struct.setExceptionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RESPONSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.responseTime = iprot.readI64();
              struct.setResponseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MIN_RESPONSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minResponseTime = iprot.readI64();
              struct.setMinResponseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAX_RESPONSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxResponseTime = iprot.readI64();
              struct.setMaxResponseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REQUEST_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.requestBytes = iprot.readI64();
              struct.setRequestBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // RESPONSE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.responseBytes = iprot.readI64();
              struct.setResponseBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MongoDbMetricMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.server != null) {
        oprot.writeFieldBegin(SERVER_FIELD_DESC);
        oprot.writeString(struct.server);
        oprot.writeFieldEnd();
      }
      if (struct.database != null) {
        oprot.writeFieldBegin(DATABASE_FIELD_DESC);
        oprot.writeString(struct.database);
        oprot.writeFieldEnd();
      }
      if (struct.collection != null) {
        oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
        oprot.writeString(struct.collection);
        oprot.writeFieldEnd();
      }
      if (struct.command != null) {
        oprot.writeFieldBegin(COMMAND_FIELD_DESC);
        oprot.writeString(struct.command);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.interval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CALL_COUNT_FIELD_DESC);
      oprot.writeI64(struct.callCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCEPTION_COUNT_FIELD_DESC);
      oprot.writeI64(struct.exceptionCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESPONSE_TIME_FIELD_DESC);
      oprot.writeI64(struct.responseTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_RESPONSE_TIME_FIELD_DESC);
      oprot.writeI64(struct.minResponseTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_RESPONSE_TIME_FIELD_DESC);
      oprot.writeI64(struct.maxResponseTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_BYTES_FIELD_DESC);
      oprot.writeI64(struct.requestBytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESPONSE_BYTES_FIELD_DESC);
      oprot.writeI64(struct.responseBytes);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MongoDbMetricMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MongoDbMetricMessageTupleScheme getScheme() {
      return new MongoDbMetricMessageTupleScheme();
    }
  }

  private static class MongoDbMetricMessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<MongoDbMetricMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MongoDbMetricMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetServer()) {
        optionals.set(0);
      }
      if (struct.isSetDatabase()) {
        optionals.set(1);
      }
      if (struct.isSetCollection()) {
        optionals.set(2);
      }
      if (struct.isSetCommand()) {
        optionals.set(3);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(4);
      }
      if (struct.isSetInterval()) {
        optionals.set(5);
      }
      if (struct.isSetCallCount()) {
        optionals.set(6);
      }
      if (struct.isSetExceptionCount()) {
        optionals.set(7);
      }
      if (struct.isSetResponseTime()) {
        optionals.set(8);
      }
      if (struct.isSetMinResponseTime()) {
        optionals.set(9);
      }
      if (struct.isSetMaxResponseTime()) {
        optionals.set(10);
      }
      if (struct.isSetRequestBytes()) {
        optionals.set(11);
      }
      if (struct.isSetResponseBytes()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetServer()) {
        oprot.writeString(struct.server);
      }
      if (struct.isSetDatabase()) {
        oprot.writeString(struct.database);
      }
      if (struct.isSetCollection()) {
        oprot.writeString(struct.collection);
      }
      if (struct.isSetCommand()) {
        oprot.writeString(struct.command);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetInterval()) {
        oprot.writeI32(struct.interval);
      }
      if (struct.isSetCallCount()) {
        oprot.writeI64(struct.callCount);
      }
      if (struct.isSetExceptionCount()) {
        oprot.writeI64(struct.exceptionCount);
      }
      if (struct.isSetResponseTime()) {
        oprot.writeI64(struct.responseTime);
      }
      if (struct.isSetMinResponseTime()) {
        oprot.writeI64(struct.minResponseTime);
      }
      if (struct.isSetMaxResponseTime()) {
        oprot.writeI64(struct.maxResponseTime);
      }
      if (struct.isSetRequestBytes()) {
        oprot.writeI64(struct.requestBytes);
      }
      if (struct.isSetResponseBytes()) {
        oprot.writeI64(struct.responseBytes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MongoDbMetricMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.server = iprot.readString();
        struct.setServerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.database = iprot.readString();
        struct.setDatabaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.collection = iprot.readString();
        struct.setCollectionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.command = iprot.readString();
        struct.setCommandIsSet(true);
      }
      if (incoming.get(4)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(5)) {
        struct.interval = iprot.readI32();
        struct.setIntervalIsSet(true);
      }
      if (incoming.get(6)) {
        struct.callCount = iprot.readI64();
        struct.setCallCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.exceptionCount = iprot.readI64();
        struct.setExceptionCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.responseTime = iprot.readI64();
        struct.setResponseTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.minResponseTime = iprot.readI64();
        struct.setMinResponseTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.maxResponseTime = iprot.readI64();
        struct.setMaxResponseTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.requestBytes = iprot.readI64();
        struct.setRequestBytesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.responseBytes = iprot.readI64();
        struct.setResponseBytesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

