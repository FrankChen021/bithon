/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sbss.bithon.agent.rpc.thrift.service.metric.message;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * *****************************  Redis          **************************
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-03-22")
public class RedisMetricMessage implements org.apache.thrift.TBase<RedisMetricMessage, RedisMetricMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RedisMetricMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RedisMetricMessage");

  private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField EXCEPTION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionCount", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField REQUEST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("requestTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField RESPONSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("responseTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField REQUEST_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("requestBytes", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField RESPONSE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("responseBytes", org.apache.thrift.protocol.TType.I64, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RedisMetricMessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RedisMetricMessageTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String uri; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String command; // required
  public long timestamp; // required
  public int interval; // required
  public long exceptionCount; // required
  public long totalCount; // required
  public long requestTime; // required
  public long responseTime; // required
  public long requestBytes; // required
  public long responseBytes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    URI((short)1, "uri"),
    COMMAND((short)2, "command"),
    TIMESTAMP((short)3, "timestamp"),
    INTERVAL((short)4, "interval"),
    EXCEPTION_COUNT((short)5, "exceptionCount"),
    TOTAL_COUNT((short)6, "totalCount"),
    REQUEST_TIME((short)7, "requestTime"),
    RESPONSE_TIME((short)8, "responseTime"),
    REQUEST_BYTES((short)9, "requestBytes"),
    RESPONSE_BYTES((short)10, "responseBytes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // URI
          return URI;
        case 2: // COMMAND
          return COMMAND;
        case 3: // TIMESTAMP
          return TIMESTAMP;
        case 4: // INTERVAL
          return INTERVAL;
        case 5: // EXCEPTION_COUNT
          return EXCEPTION_COUNT;
        case 6: // TOTAL_COUNT
          return TOTAL_COUNT;
        case 7: // REQUEST_TIME
          return REQUEST_TIME;
        case 8: // RESPONSE_TIME
          return RESPONSE_TIME;
        case 9: // REQUEST_BYTES
          return REQUEST_BYTES;
        case 10: // RESPONSE_BYTES
          return RESPONSE_BYTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __INTERVAL_ISSET_ID = 1;
  private static final int __EXCEPTIONCOUNT_ISSET_ID = 2;
  private static final int __TOTALCOUNT_ISSET_ID = 3;
  private static final int __REQUESTTIME_ISSET_ID = 4;
  private static final int __RESPONSETIME_ISSET_ID = 5;
  private static final int __REQUESTBYTES_ISSET_ID = 6;
  private static final int __RESPONSEBYTES_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCEPTION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("exceptionCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUEST_TIME, new org.apache.thrift.meta_data.FieldMetaData("requestTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESPONSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("responseTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUEST_BYTES, new org.apache.thrift.meta_data.FieldMetaData("requestBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESPONSE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("responseBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RedisMetricMessage.class, metaDataMap);
  }

  public RedisMetricMessage() {
  }

  public RedisMetricMessage(
    java.lang.String uri,
    java.lang.String command,
    long timestamp,
    int interval,
    long exceptionCount,
    long totalCount,
    long requestTime,
    long responseTime,
    long requestBytes,
    long responseBytes)
  {
    this();
    this.uri = uri;
    this.command = command;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.interval = interval;
    setIntervalIsSet(true);
    this.exceptionCount = exceptionCount;
    setExceptionCountIsSet(true);
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    this.requestTime = requestTime;
    setRequestTimeIsSet(true);
    this.responseTime = responseTime;
    setResponseTimeIsSet(true);
    this.requestBytes = requestBytes;
    setRequestBytesIsSet(true);
    this.responseBytes = responseBytes;
    setResponseBytesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RedisMetricMessage(RedisMetricMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUri()) {
      this.uri = other.uri;
    }
    if (other.isSetCommand()) {
      this.command = other.command;
    }
    this.timestamp = other.timestamp;
    this.interval = other.interval;
    this.exceptionCount = other.exceptionCount;
    this.totalCount = other.totalCount;
    this.requestTime = other.requestTime;
    this.responseTime = other.responseTime;
    this.requestBytes = other.requestBytes;
    this.responseBytes = other.responseBytes;
  }

  public RedisMetricMessage deepCopy() {
    return new RedisMetricMessage(this);
  }

  @Override
  public void clear() {
    this.uri = null;
    this.command = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setIntervalIsSet(false);
    this.interval = 0;
    setExceptionCountIsSet(false);
    this.exceptionCount = 0;
    setTotalCountIsSet(false);
    this.totalCount = 0;
    setRequestTimeIsSet(false);
    this.requestTime = 0;
    setResponseTimeIsSet(false);
    this.responseTime = 0;
    setRequestBytesIsSet(false);
    this.requestBytes = 0;
    setResponseBytesIsSet(false);
    this.responseBytes = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUri() {
    return this.uri;
  }

  public RedisMetricMessage setUri(@org.apache.thrift.annotation.Nullable java.lang.String uri) {
    this.uri = uri;
    return this;
  }

  public void unsetUri() {
    this.uri = null;
  }

  /** Returns true if field uri is set (has been assigned a value) and false otherwise */
  public boolean isSetUri() {
    return this.uri != null;
  }

  public void setUriIsSet(boolean value) {
    if (!value) {
      this.uri = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCommand() {
    return this.command;
  }

  public RedisMetricMessage setCommand(@org.apache.thrift.annotation.Nullable java.lang.String command) {
    this.command = command;
    return this;
  }

  public void unsetCommand() {
    this.command = null;
  }

  /** Returns true if field command is set (has been assigned a value) and false otherwise */
  public boolean isSetCommand() {
    return this.command != null;
  }

  public void setCommandIsSet(boolean value) {
    if (!value) {
      this.command = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public RedisMetricMessage setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getInterval() {
    return this.interval;
  }

  public RedisMetricMessage setInterval(int interval) {
    this.interval = interval;
    setIntervalIsSet(true);
    return this;
  }

  public void unsetInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  /** Returns true if field interval is set (has been assigned a value) and false otherwise */
  public boolean isSetInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  public void setIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
  }

  public long getExceptionCount() {
    return this.exceptionCount;
  }

  public RedisMetricMessage setExceptionCount(long exceptionCount) {
    this.exceptionCount = exceptionCount;
    setExceptionCountIsSet(true);
    return this;
  }

  public void unsetExceptionCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXCEPTIONCOUNT_ISSET_ID);
  }

  /** Returns true if field exceptionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXCEPTIONCOUNT_ISSET_ID);
  }

  public void setExceptionCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXCEPTIONCOUNT_ISSET_ID, value);
  }

  public long getTotalCount() {
    return this.totalCount;
  }

  public RedisMetricMessage setTotalCount(long totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    return this;
  }

  public void unsetTotalCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID, value);
  }

  public long getRequestTime() {
    return this.requestTime;
  }

  public RedisMetricMessage setRequestTime(long requestTime) {
    this.requestTime = requestTime;
    setRequestTimeIsSet(true);
    return this;
  }

  public void unsetRequestTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTTIME_ISSET_ID);
  }

  /** Returns true if field requestTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTTIME_ISSET_ID);
  }

  public void setRequestTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTTIME_ISSET_ID, value);
  }

  public long getResponseTime() {
    return this.responseTime;
  }

  public RedisMetricMessage setResponseTime(long responseTime) {
    this.responseTime = responseTime;
    setResponseTimeIsSet(true);
    return this;
  }

  public void unsetResponseTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  /** Returns true if field responseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  public void setResponseTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSETIME_ISSET_ID, value);
  }

  public long getRequestBytes() {
    return this.requestBytes;
  }

  public RedisMetricMessage setRequestBytes(long requestBytes) {
    this.requestBytes = requestBytes;
    setRequestBytesIsSet(true);
    return this;
  }

  public void unsetRequestBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTBYTES_ISSET_ID);
  }

  /** Returns true if field requestBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTBYTES_ISSET_ID);
  }

  public void setRequestBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTBYTES_ISSET_ID, value);
  }

  public long getResponseBytes() {
    return this.responseBytes;
  }

  public RedisMetricMessage setResponseBytes(long responseBytes) {
    this.responseBytes = responseBytes;
    setResponseBytesIsSet(true);
    return this;
  }

  public void unsetResponseBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSEBYTES_ISSET_ID);
  }

  /** Returns true if field responseBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSEBYTES_ISSET_ID);
  }

  public void setResponseBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSEBYTES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case URI:
      if (value == null) {
        unsetUri();
      } else {
        setUri((java.lang.String)value);
      }
      break;

    case COMMAND:
      if (value == null) {
        unsetCommand();
      } else {
        setCommand((java.lang.String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((java.lang.Integer)value);
      }
      break;

    case EXCEPTION_COUNT:
      if (value == null) {
        unsetExceptionCount();
      } else {
        setExceptionCount((java.lang.Long)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((java.lang.Long)value);
      }
      break;

    case REQUEST_TIME:
      if (value == null) {
        unsetRequestTime();
      } else {
        setRequestTime((java.lang.Long)value);
      }
      break;

    case RESPONSE_TIME:
      if (value == null) {
        unsetResponseTime();
      } else {
        setResponseTime((java.lang.Long)value);
      }
      break;

    case REQUEST_BYTES:
      if (value == null) {
        unsetRequestBytes();
      } else {
        setRequestBytes((java.lang.Long)value);
      }
      break;

    case RESPONSE_BYTES:
      if (value == null) {
        unsetResponseBytes();
      } else {
        setResponseBytes((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case URI:
      return getUri();

    case COMMAND:
      return getCommand();

    case TIMESTAMP:
      return getTimestamp();

    case INTERVAL:
      return getInterval();

    case EXCEPTION_COUNT:
      return getExceptionCount();

    case TOTAL_COUNT:
      return getTotalCount();

    case REQUEST_TIME:
      return getRequestTime();

    case RESPONSE_TIME:
      return getResponseTime();

    case REQUEST_BYTES:
      return getRequestBytes();

    case RESPONSE_BYTES:
      return getResponseBytes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case URI:
      return isSetUri();
    case COMMAND:
      return isSetCommand();
    case TIMESTAMP:
      return isSetTimestamp();
    case INTERVAL:
      return isSetInterval();
    case EXCEPTION_COUNT:
      return isSetExceptionCount();
    case TOTAL_COUNT:
      return isSetTotalCount();
    case REQUEST_TIME:
      return isSetRequestTime();
    case RESPONSE_TIME:
      return isSetResponseTime();
    case REQUEST_BYTES:
      return isSetRequestBytes();
    case RESPONSE_BYTES:
      return isSetResponseBytes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof RedisMetricMessage)
      return this.equals((RedisMetricMessage)that);
    return false;
  }

  public boolean equals(RedisMetricMessage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uri = true && this.isSetUri();
    boolean that_present_uri = true && that.isSetUri();
    if (this_present_uri || that_present_uri) {
      if (!(this_present_uri && that_present_uri))
        return false;
      if (!this.uri.equals(that.uri))
        return false;
    }

    boolean this_present_command = true && this.isSetCommand();
    boolean that_present_command = true && that.isSetCommand();
    if (this_present_command || that_present_command) {
      if (!(this_present_command && that_present_command))
        return false;
      if (!this.command.equals(that.command))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_interval = true;
    boolean that_present_interval = true;
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (this.interval != that.interval)
        return false;
    }

    boolean this_present_exceptionCount = true;
    boolean that_present_exceptionCount = true;
    if (this_present_exceptionCount || that_present_exceptionCount) {
      if (!(this_present_exceptionCount && that_present_exceptionCount))
        return false;
      if (this.exceptionCount != that.exceptionCount)
        return false;
    }

    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }

    boolean this_present_requestTime = true;
    boolean that_present_requestTime = true;
    if (this_present_requestTime || that_present_requestTime) {
      if (!(this_present_requestTime && that_present_requestTime))
        return false;
      if (this.requestTime != that.requestTime)
        return false;
    }

    boolean this_present_responseTime = true;
    boolean that_present_responseTime = true;
    if (this_present_responseTime || that_present_responseTime) {
      if (!(this_present_responseTime && that_present_responseTime))
        return false;
      if (this.responseTime != that.responseTime)
        return false;
    }

    boolean this_present_requestBytes = true;
    boolean that_present_requestBytes = true;
    if (this_present_requestBytes || that_present_requestBytes) {
      if (!(this_present_requestBytes && that_present_requestBytes))
        return false;
      if (this.requestBytes != that.requestBytes)
        return false;
    }

    boolean this_present_responseBytes = true;
    boolean that_present_responseBytes = true;
    if (this_present_responseBytes || that_present_responseBytes) {
      if (!(this_present_responseBytes && that_present_responseBytes))
        return false;
      if (this.responseBytes != that.responseBytes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUri()) ? 131071 : 524287);
    if (isSetUri())
      hashCode = hashCode * 8191 + uri.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommand()) ? 131071 : 524287);
    if (isSetCommand())
      hashCode = hashCode * 8191 + command.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + interval;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(exceptionCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestBytes);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseBytes);

    return hashCode;
  }

  @Override
  public int compareTo(RedisMetricMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetUri(), other.isSetUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCommand(), other.isSetCommand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInterval(), other.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExceptionCount(), other.isSetExceptionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionCount, other.exceptionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTotalCount(), other.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, other.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRequestTime(), other.isSetRequestTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestTime, other.requestTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResponseTime(), other.isSetResponseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseTime, other.responseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRequestBytes(), other.isSetRequestBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestBytes, other.requestBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResponseBytes(), other.isSetResponseBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseBytes, other.responseBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RedisMetricMessage(");
    boolean first = true;

    sb.append("uri:");
    if (this.uri == null) {
      sb.append("null");
    } else {
      sb.append(this.uri);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("command:");
    if (this.command == null) {
      sb.append("null");
    } else {
      sb.append(this.command);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interval:");
    sb.append(this.interval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptionCount:");
    sb.append(this.exceptionCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestTime:");
    sb.append(this.requestTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseTime:");
    sb.append(this.responseTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestBytes:");
    sb.append(this.requestBytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseBytes:");
    sb.append(this.responseBytes);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RedisMetricMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RedisMetricMessageStandardScheme getScheme() {
      return new RedisMetricMessageStandardScheme();
    }
  }

  private static class RedisMetricMessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<RedisMetricMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RedisMetricMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uri = iprot.readString();
              struct.setUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMMAND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.command = iprot.readString();
              struct.setCommandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interval = iprot.readI32();
              struct.setIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXCEPTION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.exceptionCount = iprot.readI64();
              struct.setExceptionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalCount = iprot.readI64();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REQUEST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.requestTime = iprot.readI64();
              struct.setRequestTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RESPONSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.responseTime = iprot.readI64();
              struct.setResponseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REQUEST_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.requestBytes = iprot.readI64();
              struct.setRequestBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RESPONSE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.responseBytes = iprot.readI64();
              struct.setResponseBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RedisMetricMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uri != null) {
        oprot.writeFieldBegin(URI_FIELD_DESC);
        oprot.writeString(struct.uri);
        oprot.writeFieldEnd();
      }
      if (struct.command != null) {
        oprot.writeFieldBegin(COMMAND_FIELD_DESC);
        oprot.writeString(struct.command);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.interval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCEPTION_COUNT_FIELD_DESC);
      oprot.writeI64(struct.exceptionCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
      oprot.writeI64(struct.totalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_TIME_FIELD_DESC);
      oprot.writeI64(struct.requestTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESPONSE_TIME_FIELD_DESC);
      oprot.writeI64(struct.responseTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_BYTES_FIELD_DESC);
      oprot.writeI64(struct.requestBytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESPONSE_BYTES_FIELD_DESC);
      oprot.writeI64(struct.responseBytes);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RedisMetricMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RedisMetricMessageTupleScheme getScheme() {
      return new RedisMetricMessageTupleScheme();
    }
  }

  private static class RedisMetricMessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<RedisMetricMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RedisMetricMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUri()) {
        optionals.set(0);
      }
      if (struct.isSetCommand()) {
        optionals.set(1);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetInterval()) {
        optionals.set(3);
      }
      if (struct.isSetExceptionCount()) {
        optionals.set(4);
      }
      if (struct.isSetTotalCount()) {
        optionals.set(5);
      }
      if (struct.isSetRequestTime()) {
        optionals.set(6);
      }
      if (struct.isSetResponseTime()) {
        optionals.set(7);
      }
      if (struct.isSetRequestBytes()) {
        optionals.set(8);
      }
      if (struct.isSetResponseBytes()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetUri()) {
        oprot.writeString(struct.uri);
      }
      if (struct.isSetCommand()) {
        oprot.writeString(struct.command);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetInterval()) {
        oprot.writeI32(struct.interval);
      }
      if (struct.isSetExceptionCount()) {
        oprot.writeI64(struct.exceptionCount);
      }
      if (struct.isSetTotalCount()) {
        oprot.writeI64(struct.totalCount);
      }
      if (struct.isSetRequestTime()) {
        oprot.writeI64(struct.requestTime);
      }
      if (struct.isSetResponseTime()) {
        oprot.writeI64(struct.responseTime);
      }
      if (struct.isSetRequestBytes()) {
        oprot.writeI64(struct.requestBytes);
      }
      if (struct.isSetResponseBytes()) {
        oprot.writeI64(struct.responseBytes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RedisMetricMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.uri = iprot.readString();
        struct.setUriIsSet(true);
      }
      if (incoming.get(1)) {
        struct.command = iprot.readString();
        struct.setCommandIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.interval = iprot.readI32();
        struct.setIntervalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.exceptionCount = iprot.readI64();
        struct.setExceptionCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.totalCount = iprot.readI64();
        struct.setTotalCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.requestTime = iprot.readI64();
        struct.setRequestTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.responseTime = iprot.readI64();
        struct.setResponseTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.requestBytes = iprot.readI64();
        struct.setRequestBytesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.responseBytes = iprot.readI64();
        struct.setResponseBytesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

