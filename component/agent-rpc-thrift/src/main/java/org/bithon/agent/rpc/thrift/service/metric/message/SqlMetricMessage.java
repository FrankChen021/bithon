/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.bithon.agent.rpc.thrift.service.metric.message;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * *****************************  SQL             **************************
 */
public class SqlMetricMessage implements org.apache.thrift.TBase<SqlMetricMessage, SqlMetricMessage._Fields>, java.io.Serializable, Cloneable, Comparable<SqlMetricMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SqlMetricMessage");

  private static final org.apache.thrift.protocol.TField CONNECTION_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("connectionString", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CALL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("callCount", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField RESPONSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("responseTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MIN_RESPONSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("minResponseTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField MAX_RESPONSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxResponseTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField ERROR_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField QUERY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryCount", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateCount", org.apache.thrift.protocol.TType.I64, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SqlMetricMessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SqlMetricMessageTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String connectionString; // required
  public long timestamp; // required
  public int interval; // required
  public long callCount; // required
  public long responseTime; // required
  public long minResponseTime; // required
  public long maxResponseTime; // required
  public long errorCount; // required
  public long queryCount; // required
  public long updateCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONNECTION_STRING((short)1, "connectionString"),
    TIMESTAMP((short)2, "timestamp"),
    INTERVAL((short)3, "interval"),
    CALL_COUNT((short)4, "callCount"),
    RESPONSE_TIME((short)5, "responseTime"),
    MIN_RESPONSE_TIME((short)6, "minResponseTime"),
    MAX_RESPONSE_TIME((short)7, "maxResponseTime"),
    ERROR_COUNT((short)8, "errorCount"),
    QUERY_COUNT((short)9, "queryCount"),
    UPDATE_COUNT((short)10, "updateCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONNECTION_STRING
          return CONNECTION_STRING;
        case 2: // TIMESTAMP
          return TIMESTAMP;
        case 3: // INTERVAL
          return INTERVAL;
        case 4: // CALL_COUNT
          return CALL_COUNT;
        case 5: // RESPONSE_TIME
          return RESPONSE_TIME;
        case 6: // MIN_RESPONSE_TIME
          return MIN_RESPONSE_TIME;
        case 7: // MAX_RESPONSE_TIME
          return MAX_RESPONSE_TIME;
        case 8: // ERROR_COUNT
          return ERROR_COUNT;
        case 9: // QUERY_COUNT
          return QUERY_COUNT;
        case 10: // UPDATE_COUNT
          return UPDATE_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __INTERVAL_ISSET_ID = 1;
  private static final int __CALLCOUNT_ISSET_ID = 2;
  private static final int __RESPONSETIME_ISSET_ID = 3;
  private static final int __MINRESPONSETIME_ISSET_ID = 4;
  private static final int __MAXRESPONSETIME_ISSET_ID = 5;
  private static final int __ERRORCOUNT_ISSET_ID = 6;
  private static final int __QUERYCOUNT_ISSET_ID = 7;
  private static final int __UPDATECOUNT_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONNECTION_STRING, new org.apache.thrift.meta_data.FieldMetaData("connectionString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CALL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("callCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESPONSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("responseTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_RESPONSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("minResponseTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_RESPONSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("maxResponseTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ERROR_COUNT, new org.apache.thrift.meta_data.FieldMetaData("errorCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("queryCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("updateCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SqlMetricMessage.class, metaDataMap);
  }

  public SqlMetricMessage() {
  }

  public SqlMetricMessage(
    java.lang.String connectionString,
    long timestamp,
    int interval,
    long callCount,
    long responseTime,
    long minResponseTime,
    long maxResponseTime,
    long errorCount,
    long queryCount,
    long updateCount)
  {
    this();
    this.connectionString = connectionString;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.interval = interval;
    setIntervalIsSet(true);
    this.callCount = callCount;
    setCallCountIsSet(true);
    this.responseTime = responseTime;
    setResponseTimeIsSet(true);
    this.minResponseTime = minResponseTime;
    setMinResponseTimeIsSet(true);
    this.maxResponseTime = maxResponseTime;
    setMaxResponseTimeIsSet(true);
    this.errorCount = errorCount;
    setErrorCountIsSet(true);
    this.queryCount = queryCount;
    setQueryCountIsSet(true);
    this.updateCount = updateCount;
    setUpdateCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SqlMetricMessage(SqlMetricMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetConnectionString()) {
      this.connectionString = other.connectionString;
    }
    this.timestamp = other.timestamp;
    this.interval = other.interval;
    this.callCount = other.callCount;
    this.responseTime = other.responseTime;
    this.minResponseTime = other.minResponseTime;
    this.maxResponseTime = other.maxResponseTime;
    this.errorCount = other.errorCount;
    this.queryCount = other.queryCount;
    this.updateCount = other.updateCount;
  }

  public SqlMetricMessage deepCopy() {
    return new SqlMetricMessage(this);
  }

  @Override
  public void clear() {
    this.connectionString = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setIntervalIsSet(false);
    this.interval = 0;
    setCallCountIsSet(false);
    this.callCount = 0;
    setResponseTimeIsSet(false);
    this.responseTime = 0;
    setMinResponseTimeIsSet(false);
    this.minResponseTime = 0;
    setMaxResponseTimeIsSet(false);
    this.maxResponseTime = 0;
    setErrorCountIsSet(false);
    this.errorCount = 0;
    setQueryCountIsSet(false);
    this.queryCount = 0;
    setUpdateCountIsSet(false);
    this.updateCount = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getConnectionString() {
    return this.connectionString;
  }

  public SqlMetricMessage setConnectionString(@org.apache.thrift.annotation.Nullable java.lang.String connectionString) {
    this.connectionString = connectionString;
    return this;
  }

  public void unsetConnectionString() {
    this.connectionString = null;
  }

  /** Returns true if field connectionString is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectionString() {
    return this.connectionString != null;
  }

  public void setConnectionStringIsSet(boolean value) {
    if (!value) {
      this.connectionString = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public SqlMetricMessage setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getInterval() {
    return this.interval;
  }

  public SqlMetricMessage setInterval(int interval) {
    this.interval = interval;
    setIntervalIsSet(true);
    return this;
  }

  public void unsetInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  /** Returns true if field interval is set (has been assigned a value) and false otherwise */
  public boolean isSetInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  public void setIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
  }

  public long getCallCount() {
    return this.callCount;
  }

  public SqlMetricMessage setCallCount(long callCount) {
    this.callCount = callCount;
    setCallCountIsSet(true);
    return this;
  }

  public void unsetCallCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CALLCOUNT_ISSET_ID);
  }

  /** Returns true if field callCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCallCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CALLCOUNT_ISSET_ID);
  }

  public void setCallCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CALLCOUNT_ISSET_ID, value);
  }

  public long getResponseTime() {
    return this.responseTime;
  }

  public SqlMetricMessage setResponseTime(long responseTime) {
    this.responseTime = responseTime;
    setResponseTimeIsSet(true);
    return this;
  }

  public void unsetResponseTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  /** Returns true if field responseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  public void setResponseTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSETIME_ISSET_ID, value);
  }

  public long getMinResponseTime() {
    return this.minResponseTime;
  }

  public SqlMetricMessage setMinResponseTime(long minResponseTime) {
    this.minResponseTime = minResponseTime;
    setMinResponseTimeIsSet(true);
    return this;
  }

  public void unsetMinResponseTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINRESPONSETIME_ISSET_ID);
  }

  /** Returns true if field minResponseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMinResponseTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINRESPONSETIME_ISSET_ID);
  }

  public void setMinResponseTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINRESPONSETIME_ISSET_ID, value);
  }

  public long getMaxResponseTime() {
    return this.maxResponseTime;
  }

  public SqlMetricMessage setMaxResponseTime(long maxResponseTime) {
    this.maxResponseTime = maxResponseTime;
    setMaxResponseTimeIsSet(true);
    return this;
  }

  public void unsetMaxResponseTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXRESPONSETIME_ISSET_ID);
  }

  /** Returns true if field maxResponseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxResponseTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXRESPONSETIME_ISSET_ID);
  }

  public void setMaxResponseTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXRESPONSETIME_ISSET_ID, value);
  }

  public long getErrorCount() {
    return this.errorCount;
  }

  public SqlMetricMessage setErrorCount(long errorCount) {
    this.errorCount = errorCount;
    setErrorCountIsSet(true);
    return this;
  }

  public void unsetErrorCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERRORCOUNT_ISSET_ID);
  }

  /** Returns true if field errorCount is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERRORCOUNT_ISSET_ID);
  }

  public void setErrorCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERRORCOUNT_ISSET_ID, value);
  }

  public long getQueryCount() {
    return this.queryCount;
  }

  public SqlMetricMessage setQueryCount(long queryCount) {
    this.queryCount = queryCount;
    setQueryCountIsSet(true);
    return this;
  }

  public void unsetQueryCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERYCOUNT_ISSET_ID);
  }

  /** Returns true if field queryCount is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERYCOUNT_ISSET_ID);
  }

  public void setQueryCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERYCOUNT_ISSET_ID, value);
  }

  public long getUpdateCount() {
    return this.updateCount;
  }

  public SqlMetricMessage setUpdateCount(long updateCount) {
    this.updateCount = updateCount;
    setUpdateCountIsSet(true);
    return this;
  }

  public void unsetUpdateCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATECOUNT_ISSET_ID);
  }

  /** Returns true if field updateCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATECOUNT_ISSET_ID);
  }

  public void setUpdateCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATECOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CONNECTION_STRING:
      if (value == null) {
        unsetConnectionString();
      } else {
        setConnectionString((java.lang.String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((java.lang.Integer)value);
      }
      break;

    case CALL_COUNT:
      if (value == null) {
        unsetCallCount();
      } else {
        setCallCount((java.lang.Long)value);
      }
      break;

    case RESPONSE_TIME:
      if (value == null) {
        unsetResponseTime();
      } else {
        setResponseTime((java.lang.Long)value);
      }
      break;

    case MIN_RESPONSE_TIME:
      if (value == null) {
        unsetMinResponseTime();
      } else {
        setMinResponseTime((java.lang.Long)value);
      }
      break;

    case MAX_RESPONSE_TIME:
      if (value == null) {
        unsetMaxResponseTime();
      } else {
        setMaxResponseTime((java.lang.Long)value);
      }
      break;

    case ERROR_COUNT:
      if (value == null) {
        unsetErrorCount();
      } else {
        setErrorCount((java.lang.Long)value);
      }
      break;

    case QUERY_COUNT:
      if (value == null) {
        unsetQueryCount();
      } else {
        setQueryCount((java.lang.Long)value);
      }
      break;

    case UPDATE_COUNT:
      if (value == null) {
        unsetUpdateCount();
      } else {
        setUpdateCount((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CONNECTION_STRING:
      return getConnectionString();

    case TIMESTAMP:
      return getTimestamp();

    case INTERVAL:
      return getInterval();

    case CALL_COUNT:
      return getCallCount();

    case RESPONSE_TIME:
      return getResponseTime();

    case MIN_RESPONSE_TIME:
      return getMinResponseTime();

    case MAX_RESPONSE_TIME:
      return getMaxResponseTime();

    case ERROR_COUNT:
      return getErrorCount();

    case QUERY_COUNT:
      return getQueryCount();

    case UPDATE_COUNT:
      return getUpdateCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CONNECTION_STRING:
      return isSetConnectionString();
    case TIMESTAMP:
      return isSetTimestamp();
    case INTERVAL:
      return isSetInterval();
    case CALL_COUNT:
      return isSetCallCount();
    case RESPONSE_TIME:
      return isSetResponseTime();
    case MIN_RESPONSE_TIME:
      return isSetMinResponseTime();
    case MAX_RESPONSE_TIME:
      return isSetMaxResponseTime();
    case ERROR_COUNT:
      return isSetErrorCount();
    case QUERY_COUNT:
      return isSetQueryCount();
    case UPDATE_COUNT:
      return isSetUpdateCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SqlMetricMessage)
      return this.equals((SqlMetricMessage)that);
    return false;
  }

  public boolean equals(SqlMetricMessage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_connectionString = true && this.isSetConnectionString();
    boolean that_present_connectionString = true && that.isSetConnectionString();
    if (this_present_connectionString || that_present_connectionString) {
      if (!(this_present_connectionString && that_present_connectionString))
        return false;
      if (!this.connectionString.equals(that.connectionString))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_interval = true;
    boolean that_present_interval = true;
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (this.interval != that.interval)
        return false;
    }

    boolean this_present_callCount = true;
    boolean that_present_callCount = true;
    if (this_present_callCount || that_present_callCount) {
      if (!(this_present_callCount && that_present_callCount))
        return false;
      if (this.callCount != that.callCount)
        return false;
    }

    boolean this_present_responseTime = true;
    boolean that_present_responseTime = true;
    if (this_present_responseTime || that_present_responseTime) {
      if (!(this_present_responseTime && that_present_responseTime))
        return false;
      if (this.responseTime != that.responseTime)
        return false;
    }

    boolean this_present_minResponseTime = true;
    boolean that_present_minResponseTime = true;
    if (this_present_minResponseTime || that_present_minResponseTime) {
      if (!(this_present_minResponseTime && that_present_minResponseTime))
        return false;
      if (this.minResponseTime != that.minResponseTime)
        return false;
    }

    boolean this_present_maxResponseTime = true;
    boolean that_present_maxResponseTime = true;
    if (this_present_maxResponseTime || that_present_maxResponseTime) {
      if (!(this_present_maxResponseTime && that_present_maxResponseTime))
        return false;
      if (this.maxResponseTime != that.maxResponseTime)
        return false;
    }

    boolean this_present_errorCount = true;
    boolean that_present_errorCount = true;
    if (this_present_errorCount || that_present_errorCount) {
      if (!(this_present_errorCount && that_present_errorCount))
        return false;
      if (this.errorCount != that.errorCount)
        return false;
    }

    boolean this_present_queryCount = true;
    boolean that_present_queryCount = true;
    if (this_present_queryCount || that_present_queryCount) {
      if (!(this_present_queryCount && that_present_queryCount))
        return false;
      if (this.queryCount != that.queryCount)
        return false;
    }

    boolean this_present_updateCount = true;
    boolean that_present_updateCount = true;
    if (this_present_updateCount || that_present_updateCount) {
      if (!(this_present_updateCount && that_present_updateCount))
        return false;
      if (this.updateCount != that.updateCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetConnectionString()) ? 131071 : 524287);
    if (isSetConnectionString())
      hashCode = hashCode * 8191 + connectionString.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + interval;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(callCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(minResponseTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxResponseTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(errorCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(queryCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(updateCount);

    return hashCode;
  }

  @Override
  public int compareTo(SqlMetricMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetConnectionString(), other.isSetConnectionString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectionString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectionString, other.connectionString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInterval(), other.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCallCount(), other.isSetCallCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callCount, other.callCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResponseTime(), other.isSetResponseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseTime, other.responseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMinResponseTime(), other.isSetMinResponseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinResponseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minResponseTime, other.minResponseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxResponseTime(), other.isSetMaxResponseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxResponseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxResponseTime, other.maxResponseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetErrorCount(), other.isSetErrorCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCount, other.errorCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryCount(), other.isSetQueryCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryCount, other.queryCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUpdateCount(), other.isSetUpdateCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateCount, other.updateCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SqlMetricMessage(");
    boolean first = true;

    sb.append("connectionString:");
    if (this.connectionString == null) {
      sb.append("null");
    } else {
      sb.append(this.connectionString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interval:");
    sb.append(this.interval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("callCount:");
    sb.append(this.callCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseTime:");
    sb.append(this.responseTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minResponseTime:");
    sb.append(this.minResponseTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxResponseTime:");
    sb.append(this.maxResponseTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorCount:");
    sb.append(this.errorCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryCount:");
    sb.append(this.queryCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateCount:");
    sb.append(this.updateCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SqlMetricMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SqlMetricMessageStandardScheme getScheme() {
      return new SqlMetricMessageStandardScheme();
    }
  }

  private static class SqlMetricMessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<SqlMetricMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SqlMetricMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONNECTION_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.connectionString = iprot.readString();
              struct.setConnectionStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interval = iprot.readI32();
              struct.setIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CALL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.callCount = iprot.readI64();
              struct.setCallCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESPONSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.responseTime = iprot.readI64();
              struct.setResponseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MIN_RESPONSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minResponseTime = iprot.readI64();
              struct.setMinResponseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MAX_RESPONSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxResponseTime = iprot.readI64();
              struct.setMaxResponseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ERROR_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.errorCount = iprot.readI64();
              struct.setErrorCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // QUERY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.queryCount = iprot.readI64();
              struct.setQueryCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateCount = iprot.readI64();
              struct.setUpdateCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SqlMetricMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.connectionString != null) {
        oprot.writeFieldBegin(CONNECTION_STRING_FIELD_DESC);
        oprot.writeString(struct.connectionString);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.interval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CALL_COUNT_FIELD_DESC);
      oprot.writeI64(struct.callCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESPONSE_TIME_FIELD_DESC);
      oprot.writeI64(struct.responseTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_RESPONSE_TIME_FIELD_DESC);
      oprot.writeI64(struct.minResponseTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_RESPONSE_TIME_FIELD_DESC);
      oprot.writeI64(struct.maxResponseTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ERROR_COUNT_FIELD_DESC);
      oprot.writeI64(struct.errorCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUERY_COUNT_FIELD_DESC);
      oprot.writeI64(struct.queryCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_COUNT_FIELD_DESC);
      oprot.writeI64(struct.updateCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SqlMetricMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SqlMetricMessageTupleScheme getScheme() {
      return new SqlMetricMessageTupleScheme();
    }
  }

  private static class SqlMetricMessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<SqlMetricMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SqlMetricMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetConnectionString()) {
        optionals.set(0);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(1);
      }
      if (struct.isSetInterval()) {
        optionals.set(2);
      }
      if (struct.isSetCallCount()) {
        optionals.set(3);
      }
      if (struct.isSetResponseTime()) {
        optionals.set(4);
      }
      if (struct.isSetMinResponseTime()) {
        optionals.set(5);
      }
      if (struct.isSetMaxResponseTime()) {
        optionals.set(6);
      }
      if (struct.isSetErrorCount()) {
        optionals.set(7);
      }
      if (struct.isSetQueryCount()) {
        optionals.set(8);
      }
      if (struct.isSetUpdateCount()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetConnectionString()) {
        oprot.writeString(struct.connectionString);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetInterval()) {
        oprot.writeI32(struct.interval);
      }
      if (struct.isSetCallCount()) {
        oprot.writeI64(struct.callCount);
      }
      if (struct.isSetResponseTime()) {
        oprot.writeI64(struct.responseTime);
      }
      if (struct.isSetMinResponseTime()) {
        oprot.writeI64(struct.minResponseTime);
      }
      if (struct.isSetMaxResponseTime()) {
        oprot.writeI64(struct.maxResponseTime);
      }
      if (struct.isSetErrorCount()) {
        oprot.writeI64(struct.errorCount);
      }
      if (struct.isSetQueryCount()) {
        oprot.writeI64(struct.queryCount);
      }
      if (struct.isSetUpdateCount()) {
        oprot.writeI64(struct.updateCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SqlMetricMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.connectionString = iprot.readString();
        struct.setConnectionStringIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.interval = iprot.readI32();
        struct.setIntervalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.callCount = iprot.readI64();
        struct.setCallCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.responseTime = iprot.readI64();
        struct.setResponseTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.minResponseTime = iprot.readI64();
        struct.setMinResponseTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.maxResponseTime = iprot.readI64();
        struct.setMaxResponseTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.errorCount = iprot.readI64();
        struct.setErrorCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.queryCount = iprot.readI64();
        struct.setQueryCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updateCount = iprot.readI64();
        struct.setUpdateCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

