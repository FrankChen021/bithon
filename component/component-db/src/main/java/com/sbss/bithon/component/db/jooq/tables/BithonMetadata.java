/*
 * This file is generated by jOOQ.
 */
package com.sbss.bithon.component.db.jooq.tables;


import com.sbss.bithon.component.db.jooq.DefaultSchema;
import com.sbss.bithon.component.db.jooq.Indexes;
import com.sbss.bithon.component.db.jooq.Keys;
import com.sbss.bithon.component.db.jooq.tables.records.BithonMetadataRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 应用
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BithonMetadata extends TableImpl<BithonMetadataRecord> {

    private static final long serialVersionUID = -1710815829;

    /**
     * The reference instance of <code>bithon_metadata</code>
     */
    public static final BithonMetadata BITHON_METADATA = new BithonMetadata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BithonMetadataRecord> getRecordType() {
        return BithonMetadataRecord.class;
    }

    /**
     * The column <code>bithon_metadata.id</code>. 唯一编号
     */
    public final TableField<BithonMetadataRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "唯一编号");

    /**
     * The column <code>bithon_metadata.name</code>. 名称
     */
    public final TableField<BithonMetadataRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "名称");

    /**
     * The column <code>bithon_metadata.type</code>. 环境
     */
    public final TableField<BithonMetadataRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "环境");

    /**
     * The column <code>bithon_metadata.parent_id</code>. 父
     */
    public final TableField<BithonMetadataRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "父");

    /**
     * The column <code>bithon_metadata.created_at</code>. 创建时间
     */
    public final TableField<BithonMetadataRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>bithon_metadata.updated_at</code>. 更新时间
     */
    public final TableField<BithonMetadataRecord, Timestamp> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "更新时间");

    /**
     * Create a <code>bithon_metadata</code> table reference
     */
    public BithonMetadata() {
        this(DSL.name("bithon_metadata"), null);
    }

    /**
     * Create an aliased <code>bithon_metadata</code> table reference
     */
    public BithonMetadata(String alias) {
        this(DSL.name(alias), BITHON_METADATA);
    }

    /**
     * Create an aliased <code>bithon_metadata</code> table reference
     */
    public BithonMetadata(Name alias) {
        this(alias, BITHON_METADATA);
    }

    private BithonMetadata(Name alias, Table<BithonMetadataRecord> aliased) {
        this(alias, aliased, null);
    }

    private BithonMetadata(Name alias, Table<BithonMetadataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("应用"));
    }

    public <O extends Record> BithonMetadata(Table<O> child, ForeignKey<O, BithonMetadataRecord> key) {
        super(child, key, BITHON_METADATA);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BITHON_METADATA_IDX_PARENT_ID, Indexes.BITHON_METADATA_PRIMARY, Indexes.BITHON_METADATA_UQ_NAME);
    }

    @Override
    public Identity<BithonMetadataRecord, Long> getIdentity() {
        return Keys.IDENTITY_BITHON_METADATA;
    }

    @Override
    public UniqueKey<BithonMetadataRecord> getPrimaryKey() {
        return Keys.KEY_BITHON_METADATA_PRIMARY;
    }

    @Override
    public List<UniqueKey<BithonMetadataRecord>> getKeys() {
        return Arrays.<UniqueKey<BithonMetadataRecord>>asList(Keys.KEY_BITHON_METADATA_PRIMARY, Keys.KEY_BITHON_METADATA_UQ_NAME);
    }

    @Override
    public BithonMetadata as(String alias) {
        return new BithonMetadata(DSL.name(alias), this);
    }

    @Override
    public BithonMetadata as(Name alias) {
        return new BithonMetadata(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonMetadata rename(String name) {
        return new BithonMetadata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonMetadata rename(Name name) {
        return new BithonMetadata(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, Long, Timestamp, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
