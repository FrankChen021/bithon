/*
 * This file is generated by jOOQ.
 */
package com.sbss.bithon.component.db.jooq.tables;


import com.sbss.bithon.component.db.jooq.DefaultSchema;
import com.sbss.bithon.component.db.jooq.Indexes;
import com.sbss.bithon.component.db.jooq.Keys;
import com.sbss.bithon.component.db.jooq.tables.records.BithonJvmMetricsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BithonJvmMetrics extends TableImpl<BithonJvmMetricsRecord> {

    private static final long serialVersionUID = 271391786;

    /**
     * The reference instance of <code>bithon_jvm_metrics</code>
     */
    public static final BithonJvmMetrics BITHON_JVM_METRICS = new BithonJvmMetrics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BithonJvmMetricsRecord> getRecordType() {
        return BithonJvmMetricsRecord.class;
    }

    /**
     * The column <code>bithon_jvm_metrics.timestamp</code>.
     */
    public final TableField<BithonJvmMetricsRecord, Timestamp> TIMESTAMP = createField(DSL.name("timestamp"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>bithon_jvm_metrics.appName</code>.
     */
    public final TableField<BithonJvmMetricsRecord, String> APPNAME = createField(DSL.name("appName"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>bithon_jvm_metrics.instanceName</code>.
     */
    public final TableField<BithonJvmMetricsRecord, String> INSTANCENAME = createField(DSL.name("instanceName"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>bithon_jvm_metrics.processCpuLoad</code>.
     */
    public final TableField<BithonJvmMetricsRecord, Double> PROCESSCPULOAD = createField(DSL.name("processCpuLoad"), org.jooq.impl.SQLDataType.DOUBLE.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>bithon_jvm_metrics.instanceUpTime</code>.
     */
    public final TableField<BithonJvmMetricsRecord, Long> INSTANCEUPTIME = createField(DSL.name("instanceUpTime"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>bithon_jvm_metrics.instanceStartTime</code>.
     */
    public final TableField<BithonJvmMetricsRecord, Long> INSTANCESTARTTIME = createField(DSL.name("instanceStartTime"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>bithon_jvm_metrics.heap</code>. -Xmx
     */
    public final TableField<BithonJvmMetricsRecord, Long> HEAP = createField(DSL.name("heap"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "-Xmx");

    /**
     * The column <code>bithon_jvm_metrics.heapInit</code>. -Xms
     */
    public final TableField<BithonJvmMetricsRecord, Long> HEAPINIT = createField(DSL.name("heapInit"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "-Xms");

    /**
     * The column <code>bithon_jvm_metrics.heapUsed</code>.
     */
    public final TableField<BithonJvmMetricsRecord, Long> HEAPUSED = createField(DSL.name("heapUsed"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>bithon_jvm_metrics.heapCommitted</code>. 可使用的内存大小，包括used
     */
    public final TableField<BithonJvmMetricsRecord, Long> HEAPCOMMITTED = createField(DSL.name("heapCommitted"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "可使用的内存大小，包括used");

    /**
     * The column <code>bithon_jvm_metrics.peakThreads</code>. number of peak threads
     */
    public final TableField<BithonJvmMetricsRecord, Long> PEAKTHREADS = createField(DSL.name("peakThreads"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "number of peak threads");

    /**
     * The column <code>bithon_jvm_metrics.daemonThreads</code>. number of daemon threads
     */
    public final TableField<BithonJvmMetricsRecord, Long> DAEMONTHREADS = createField(DSL.name("daemonThreads"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "number of daemon threads");

    /**
     * The column <code>bithon_jvm_metrics.totalThreads</code>. number of total threads
     */
    public final TableField<BithonJvmMetricsRecord, Long> TOTALTHREADS = createField(DSL.name("totalThreads"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "number of total threads");

    /**
     * The column <code>bithon_jvm_metrics.activeThreads</code>. number of active threads
     */
    public final TableField<BithonJvmMetricsRecord, Long> ACTIVETHREADS = createField(DSL.name("activeThreads"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "number of active threads");

    /**
     * Create a <code>bithon_jvm_metrics</code> table reference
     */
    public BithonJvmMetrics() {
        this(DSL.name("bithon_jvm_metrics"), null);
    }

    /**
     * Create an aliased <code>bithon_jvm_metrics</code> table reference
     */
    public BithonJvmMetrics(String alias) {
        this(DSL.name(alias), BITHON_JVM_METRICS);
    }

    /**
     * Create an aliased <code>bithon_jvm_metrics</code> table reference
     */
    public BithonJvmMetrics(Name alias) {
        this(alias, BITHON_JVM_METRICS);
    }

    private BithonJvmMetrics(Name alias, Table<BithonJvmMetricsRecord> aliased) {
        this(alias, aliased, null);
    }

    private BithonJvmMetrics(Name alias, Table<BithonJvmMetricsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BithonJvmMetrics(Table<O> child, ForeignKey<O, BithonJvmMetricsRecord> key) {
        super(child, key, BITHON_JVM_METRICS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BITHON_JVM_METRICS_IDX_KEY);
    }

    @Override
    public List<UniqueKey<BithonJvmMetricsRecord>> getKeys() {
        return Arrays.<UniqueKey<BithonJvmMetricsRecord>>asList(Keys.KEY_BITHON_JVM_METRICS_IDX_KEY);
    }

    @Override
    public BithonJvmMetrics as(String alias) {
        return new BithonJvmMetrics(DSL.name(alias), this);
    }

    @Override
    public BithonJvmMetrics as(Name alias) {
        return new BithonJvmMetrics(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonJvmMetrics rename(String name) {
        return new BithonJvmMetrics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonJvmMetrics rename(Name name) {
        return new BithonJvmMetrics(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Timestamp, String, String, Double, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
