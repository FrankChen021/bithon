/*
 * This file is generated by jOOQ.
 */
package com.sbss.bithon.component.db.jooq.tables;


import com.sbss.bithon.component.db.jooq.DefaultSchema;
import com.sbss.bithon.component.db.jooq.Indexes;
import com.sbss.bithon.component.db.jooq.Keys;
import com.sbss.bithon.component.db.jooq.tables.records.BithonEventRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BithonEvent extends TableImpl<BithonEventRecord> {

    private static final long serialVersionUID = 645120633;

    /**
     * The reference instance of <code>bithon_event</code>
     */
    public static final BithonEvent BITHON_EVENT = new BithonEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BithonEventRecord> getRecordType() {
        return BithonEventRecord.class;
    }

    /**
     * The column <code>bithon_event.id</code>.
     */
    public final TableField<BithonEventRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>bithon_event.appName</code>.
     */
    public final TableField<BithonEventRecord, String> APPNAME = createField(DSL.name("appName"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>bithon_event.instanceName</code>.
     */
    public final TableField<BithonEventRecord, String> INSTANCENAME = createField(DSL.name("instanceName"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>bithon_event.type</code>. type of event
     */
    public final TableField<BithonEventRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "type of event");

    /**
     * The column <code>bithon_event.arguments</code>. JSON formatted Map&lt;String, String&gt;
     */
    public final TableField<BithonEventRecord, String> ARGUMENTS = createField(DSL.name("arguments"), org.jooq.impl.SQLDataType.CLOB, this, "JSON formatted Map<String, String>");

    /**
     * The column <code>bithon_event.timestamp</code>. reported Timestamp
     */
    public final TableField<BithonEventRecord, Timestamp> TIMESTAMP = createField(DSL.name("timestamp"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "reported Timestamp");

    /**
     * Create a <code>bithon_event</code> table reference
     */
    public BithonEvent() {
        this(DSL.name("bithon_event"), null);
    }

    /**
     * Create an aliased <code>bithon_event</code> table reference
     */
    public BithonEvent(String alias) {
        this(DSL.name(alias), BITHON_EVENT);
    }

    /**
     * Create an aliased <code>bithon_event</code> table reference
     */
    public BithonEvent(Name alias) {
        this(alias, BITHON_EVENT);
    }

    private BithonEvent(Name alias, Table<BithonEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private BithonEvent(Name alias, Table<BithonEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BithonEvent(Table<O> child, ForeignKey<O, BithonEventRecord> key) {
        super(child, key, BITHON_EVENT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BITHON_EVENT_IDX_APPNAME, Indexes.BITHON_EVENT_IDX_INSTANCENAME, Indexes.BITHON_EVENT_IDX_TIMESTAMP, Indexes.BITHON_EVENT_IDX_TYPE, Indexes.BITHON_EVENT_PRIMARY);
    }

    @Override
    public Identity<BithonEventRecord, Long> getIdentity() {
        return Keys.IDENTITY_BITHON_EVENT;
    }

    @Override
    public UniqueKey<BithonEventRecord> getPrimaryKey() {
        return Keys.KEY_BITHON_EVENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<BithonEventRecord>> getKeys() {
        return Arrays.<UniqueKey<BithonEventRecord>>asList(Keys.KEY_BITHON_EVENT_PRIMARY);
    }

    @Override
    public BithonEvent as(String alias) {
        return new BithonEvent(DSL.name(alias), this);
    }

    @Override
    public BithonEvent as(Name alias) {
        return new BithonEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonEvent rename(String name) {
        return new BithonEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BithonEvent rename(Name name) {
        return new BithonEvent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, String, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
