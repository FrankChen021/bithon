# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Agent Build

on:
  push:
    branches: [master]
    paths:
      - "agent/**"
      - "component/**"
      - "shaded/**"
      - "license/**"
      - "dev/**"
      - "pom.xml"
      - ".github/workflows/build-agent.yml"
  pull_request:
    branches: [master]
    paths:
      - "agent/**"
      - "component/**"
      - "shaded/**"
      - "license/**"
      - "dev/**"
      - "pom.xml"
      - ".github/workflows/build-agent.yml"

concurrency:
  # https://stackoverflow.com/questions/68418857/how-to-cancel-existing-runs-when-a-new-push-happens-on-github-actions-but-only
  # Documentation suggests ${{ github.head_ref }}, but that's only available on pull_request/pull_request_target triggers, so using ${{ github.ref }}.
  # On the master branch, we want all builds to complete even if merging happens faster to make it easier to discover at which point something broke.
  group: ${{ github.ref == 'refs/heads/master' && format('ci-master-{0}', github.sha) || format('ci-{0}', github.ref) }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.artifact-info.outputs.name }}
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup JDK17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "adopt"

      #
      # separate shaded building from other modules because if it's built with other modules,
      # there might be library pollution in the agent-distribution
      #
      - name: Install shaded libs
        run: mvn clean install -T 1C -ntp --activate-profiles shaded -Dmaven.javadoc.skip=true -DskipTests

      - name: Compilation
        run: mvn clean install -T 1C -ntp --activate-profiles agent,component -Dmaven.javadoc.skip=true -DskipTests

      - name: Verify agent distribution was built
        run: |
          if [ -f "agent/agent-distribution/target/agent-distribution.zip" ]; then
            echo "✅ Agent distribution built successfully: $(ls -la agent/agent-distribution/target/agent-distribution.zip)"
          else
            echo "❌ Agent distribution not found after build!"
            echo "Contents of agent/agent-distribution/target/:"
            ls -la agent/agent-distribution/target/ || echo "Directory doesn't exist"
            echo "Available ZIP files in project:"
            find . -name "*.zip" -type f
            exit 1
          fi

      - name: Set artifact info
        id: artifact-info
        run: echo "name=build-artifacts-${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-info.outputs.name }}
          path: |
            **/target/classes/**
            **/target/test-classes/**
            **/target/**/*.jar
            **/target/**/*.zip
            **/pom.xml
            pom.xml
            ~/.m2/repository
          retention-days: 1

  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # LTS versions using temurin
          - java-version: "8"
            distribution: "temurin"
          - java-version: "11"
            distribution: "temurin"
          - java-version: "17"
            distribution: "temurin"
          - java-version: "21"
            distribution: "temurin"
          - java-version: "22"
            distribution: "zulu"
          - java-version: "23"
            distribution: "zulu"
          - java-version: "24"
            distribution: "zulu"
          # Non-LTS versions using zulu (better historical support)
          - java-version: "9"
            distribution: "zulu"
          - java-version: "10"
            distribution: "zulu"
          - java-version: "12"
            distribution: "zulu"
          - java-version: "13"
            distribution: "zulu"
          - java-version: "14"
            distribution: "zulu"
          - java-version: "15"
            distribution: "zulu"
          - java-version: "16"
            distribution: "zulu"
          - java-version: "18"
            distribution: "zulu"
          - java-version: "19"
            distribution: "zulu"
          - java-version: "20"
            distribution: "zulu"
      fail-fast: false
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up JDK ${{ matrix.java-version }} (${{ matrix.distribution }})
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: ${{ matrix.distribution }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}

      - name: Restore Maven repository
        run: |
          if [ -d ".m2/repository" ]; then
            mkdir -p ~/.m2
            cp -r .m2/repository ~/.m2/
            echo "✅ Maven repository restored"
          else
            echo "❌ No Maven repository found in artifacts"
            exit 1
          fi

      # Execute UT with the current JDK version - skip compilation since artifacts are pre-compiled
      - name: Run tests with JDK ${{ matrix.java-version }}
        run: mvn surefire:test -pl agent -P-server -ntp

  release:
    needs: [build, test]
    runs-on: ubuntu-latest
    # Only run on master branch AND if both build and test jobs succeeded
    if: github.ref == 'refs/heads/master' && needs.build.result == 'success' && needs.test.result == 'success'
    concurrency:
      group: "release-agent-distribution"
      cancel-in-progress: false
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}

      - name: Debug downloaded artifacts structure
        run: |
          echo "=== Root directory contents ==="
          ls -la
          echo "=== Looking for agent-distribution.zip anywhere ==="
          find . -name "*agent-distribution*" -type f
          echo "=== Directory structure (first 3 levels) ==="
          find . -maxdepth 3 -type d | sort

      - name: Restore Maven repository
        run: |
          if [ -d ".m2/repository" ]; then
            mkdir -p ~/.m2
            cp -r .m2/repository ~/.m2/
            echo "✅ Maven repository restored for release"
          fi

      - name: Find agent distribution and set path
        id: find-agent-zip
        run: |
          # Check the expected path first
          if [ -f "agent/agent-distribution/target/agent-distribution.zip" ]; then
            AGENT_ZIP_PATH="agent/agent-distribution/target/agent-distribution.zip"
            echo "✅ Found agent distribution at expected path: $AGENT_ZIP_PATH"
          else
            # Search for the file anywhere if not found at expected location
            AGENT_ZIP_PATH=$(find . -name "agent-distribution.zip" -type f | head -1)
            if [ -n "$AGENT_ZIP_PATH" ]; then
              echo "✅ Found agent distribution at: $AGENT_ZIP_PATH"
              # Remove leading ./ if present
              AGENT_ZIP_PATH=${AGENT_ZIP_PATH#./}
            else
              echo "❌ Error: agent-distribution.zip not found anywhere!"
              echo "=== Available ZIP files: ==="
              find . -name "*.zip" -type f
              echo "=== Contents of agent/agent-distribution/target/: ==="
              ls -la agent/agent-distribution/target/ || echo "Directory doesn't exist"
              exit 1
            fi
          fi

          echo "agent-zip-path=$AGENT_ZIP_PATH" >> $GITHUB_OUTPUT
          echo "Final path: $AGENT_ZIP_PATH"
          ls -la "$AGENT_ZIP_PATH"

      #
      # Follow steps are for release, we only enable them for changes on the master branch
      # Only delete tag if we have successfully built and tested the agent
      #
      # https://github.com/marketplace/actions/delete-tag-and-release
      - name: Delete agent tag
        uses: dev-drprasad/delete-tag-and-release@v1.1
        continue-on-error: true
        with:
          delete_release: true # default: false
          tag_name: agent-distribution-latest
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait before recreating release
        run: sleep 5

      - name: Release agent
        uses: svenstaro/upload-release-action@v2
        with:
          body: "The latest agent built from commit ${{ github.sha }}"
          overwrite: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: agent-distribution-latest
          tag: agent-distribution-latest
          asset_name: agent-distribution.zip
          file: ${{ steps.find-agent-zip.outputs.agent-zip-path }}

      - name: Verify release created
        run: |
          # Wait a moment for the release to be available
          sleep 10
          # Check if the release was created successfully
          RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/agent-distribution-latest"
          if curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$RELEASE_URL" | grep -q '"tag_name"'; then
            echo "✅ Release verification successful"
          else
            echo "❌ Release verification failed - release may not have been created properly"
            exit 1
          fi
